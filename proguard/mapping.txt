android.net.compatibility.WebAddress -> android.net.compatibility.WebAddress:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
    void setScheme(java.lang.String) -> setScheme
    java.lang.String getScheme() -> getScheme
    void setHost(java.lang.String) -> setHost
    java.lang.String getHost() -> getHost
    void setPort(int) -> setPort
    int getPort() -> getPort
    void setPath(java.lang.String) -> setPath
    java.lang.String getPath() -> getPath
    void setAuthInfo(java.lang.String) -> setAuthInfo
    java.lang.String getAuthInfo() -> getAuthInfo
android.net.http.AndroidHttpClient -> android.net.http.AndroidHttpClient:
    long DEFAULT_SYNC_MIN_GZIP_BYTES -> DEFAULT_SYNC_MIN_GZIP_BYTES
    void <init>() -> <init>
    android.net.http.AndroidHttpClient newInstance(java.lang.String,android.content.Context) -> newInstance
    android.net.http.AndroidHttpClient newInstance(java.lang.String) -> newInstance
    void finalize() -> finalize
    void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest) -> modifyRequestToAcceptGzipResponse
    java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity) -> getUngzippedContent
    void close() -> close
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver) -> getCompressedEntity
    long getMinGzipSize(android.content.ContentResolver) -> getMinGzipSize
    void enableCurlLogging(java.lang.String,int) -> enableCurlLogging
    void disableCurlLogging() -> disableCurlLogging
    long parseDate(java.lang.String) -> parseDate
android.net.http.AndroidHttpClientConnection -> android.net.http.AndroidHttpClientConnection:
    void <init>() -> <init>
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    java.lang.String toString() -> toString
    boolean isOpen() -> isOpen
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    void close() -> close
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void doFlush() -> doFlush
    void flush() -> flush
    org.apache.http.StatusLine parseResponseHeader(android.net.http.Headers) -> parseResponseHeader
    org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers) -> receiveResponseEntity
    boolean isStale() -> isStale
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
android.net.http.CertificateChainValidator -> android.net.http.CertificateChainValidator:
    void <init>() -> <init>
    android.net.http.CertificateChainValidator getInstance() -> getInstance
    android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection,javax.net.ssl.SSLSocket,java.lang.String) -> doHandshakeAndValidateServerCertificates
    android.net.http.SslError verifyServerCertificates(byte[][],java.lang.String,java.lang.String) -> verifyServerCertificates
    void handleTrustStorageUpdate() -> handleTrustStorageUpdate
android.net.http.Connection -> android.net.http.Connection:
    android.net.http.SslCertificate mCertificate -> mCertificate
    android.net.http.AndroidHttpClientConnection mHttpClientConnection -> mHttpClientConnection
    void <init>(android.content.Context,org.apache.http.HttpHost,android.net.http.RequestFeeder) -> <init>
    java.lang.String toString() -> toString
android.net.http.DelegatingSSLSession -> android.net.http.DelegatingSSLSession:
    void <init>() -> <init>
    int getApplicationBufferSize() -> getApplicationBufferSize
    java.lang.String getCipherSuite() -> getCipherSuite
    long getCreationTime() -> getCreationTime
    byte[] getId() -> getId
    long getLastAccessedTime() -> getLastAccessedTime
    java.security.cert.Certificate[] getLocalCertificates() -> getLocalCertificates
    java.security.Principal getLocalPrincipal() -> getLocalPrincipal
    int getPacketBufferSize() -> getPacketBufferSize
    javax.security.cert.X509Certificate[] getPeerCertificateChain() -> getPeerCertificateChain
    java.security.cert.Certificate[] getPeerCertificates() -> getPeerCertificates
    java.lang.String getPeerHost() -> getPeerHost
    int getPeerPort() -> getPeerPort
    java.security.Principal getPeerPrincipal() -> getPeerPrincipal
    java.lang.String getProtocol() -> getProtocol
    javax.net.ssl.SSLSessionContext getSessionContext() -> getSessionContext
    java.lang.Object getValue(java.lang.String) -> getValue
    java.lang.String[] getValueNames() -> getValueNames
    void invalidate() -> invalidate
    boolean isValid() -> isValid
    void putValue(java.lang.String,java.lang.Object) -> putValue
    void removeValue(java.lang.String) -> removeValue
android.net.http.DelegatingSSLSession$CertificateWrap -> android.net.http.DelegatingSSLSession$CertificateWrap:
    void <init>(java.security.cert.Certificate) -> <init>
    java.security.cert.Certificate[] getPeerCertificates() -> getPeerCertificates
android.net.http.EventHandler -> android.net.http.EventHandler:
    int ERROR -> ERROR
    int ERROR_AUTH -> ERROR_AUTH
    int ERROR_BAD_URL -> ERROR_BAD_URL
    int ERROR_CONNECT -> ERROR_CONNECT
    int ERROR_FAILED_SSL_HANDSHAKE -> ERROR_FAILED_SSL_HANDSHAKE
    int ERROR_IO -> ERROR_IO
    int ERROR_LOOKUP -> ERROR_LOOKUP
    int ERROR_PROXYAUTH -> ERROR_PROXYAUTH
    int ERROR_REDIRECT_LOOP -> ERROR_REDIRECT_LOOP
    int ERROR_TIMEOUT -> ERROR_TIMEOUT
    int ERROR_UNSUPPORTED_AUTH_SCHEME -> ERROR_UNSUPPORTED_AUTH_SCHEME
    int ERROR_UNSUPPORTED_SCHEME -> ERROR_UNSUPPORTED_SCHEME
    int FILE_ERROR -> FILE_ERROR
    int FILE_NOT_FOUND_ERROR -> FILE_NOT_FOUND_ERROR
    int OK -> OK
    int TOO_MANY_REQUESTS_ERROR -> TOO_MANY_REQUESTS_ERROR
    void status(int,int,int,java.lang.String) -> status
    void headers(android.net.http.Headers) -> headers
    void data(byte[],int) -> data
    void endData() -> endData
    void certificate(android.net.http.SslCertificate) -> certificate
    void error(int,java.lang.String) -> error
    boolean handleSslErrorRequest(android.net.http.SslError) -> handleSslErrorRequest
android.net.http.Headers -> android.net.http.Headers:
    java.lang.String ACCEPT_RANGES -> ACCEPT_RANGES
    java.lang.String CACHE_CONTROL -> CACHE_CONTROL
    int CONN_CLOSE -> CONN_CLOSE
    java.lang.String CONN_DIRECTIVE -> CONN_DIRECTIVE
    int CONN_KEEP_ALIVE -> CONN_KEEP_ALIVE
    java.lang.String CONTENT_DISPOSITION -> CONTENT_DISPOSITION
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LEN -> CONTENT_LEN
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String ETAG -> ETAG
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String LAST_MODIFIED -> LAST_MODIFIED
    java.lang.String LOCATION -> LOCATION
    int NO_CONN_TYPE -> NO_CONN_TYPE
    long NO_CONTENT_LENGTH -> NO_CONTENT_LENGTH
    long NO_TRANSFER_ENCODING -> NO_TRANSFER_ENCODING
    java.lang.String PRAGMA -> PRAGMA
    java.lang.String PROXY_AUTHENTICATE -> PROXY_AUTHENTICATE
    java.lang.String PROXY_CONNECTION -> PROXY_CONNECTION
    java.lang.String REFRESH -> REFRESH
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String WWW_AUTHENTICATE -> WWW_AUTHENTICATE
    java.lang.String X_PERMITTED_CROSS_DOMAIN_POLICIES -> X_PERMITTED_CROSS_DOMAIN_POLICIES
    void <init>() -> <init>
    void parseHeader(org.apache.http.util.CharArrayBuffer) -> parseHeader
    long getTransferEncoding() -> getTransferEncoding
    long getContentLength() -> getContentLength
    int getConnectionType() -> getConnectionType
    java.lang.String getContentType() -> getContentType
    java.lang.String getContentEncoding() -> getContentEncoding
    java.lang.String getLocation() -> getLocation
    java.lang.String getWwwAuthenticate() -> getWwwAuthenticate
    java.lang.String getProxyAuthenticate() -> getProxyAuthenticate
    java.lang.String getContentDisposition() -> getContentDisposition
    java.lang.String getAcceptRanges() -> getAcceptRanges
    java.lang.String getExpires() -> getExpires
    java.lang.String getCacheControl() -> getCacheControl
    java.lang.String getLastModified() -> getLastModified
    java.lang.String getEtag() -> getEtag
    java.util.ArrayList getSetCookie() -> getSetCookie
    java.lang.String getPragma() -> getPragma
    java.lang.String getRefresh() -> getRefresh
    java.lang.String getXPermittedCrossDomainPolicies() -> getXPermittedCrossDomainPolicies
    void setContentLength(long) -> setContentLength
    void setContentType(java.lang.String) -> setContentType
    void setContentEncoding(java.lang.String) -> setContentEncoding
    void setLocation(java.lang.String) -> setLocation
    void setWwwAuthenticate(java.lang.String) -> setWwwAuthenticate
    void setProxyAuthenticate(java.lang.String) -> setProxyAuthenticate
    void setContentDisposition(java.lang.String) -> setContentDisposition
    void setAcceptRanges(java.lang.String) -> setAcceptRanges
    void setExpires(java.lang.String) -> setExpires
    void setCacheControl(java.lang.String) -> setCacheControl
    void setLastModified(java.lang.String) -> setLastModified
    void setEtag(java.lang.String) -> setEtag
    void setXPermittedCrossDomainPolicies(java.lang.String) -> setXPermittedCrossDomainPolicies
    void getHeaders(android.net.http.Headers$HeaderCallback) -> getHeaders
android.net.http.Headers$HeaderCallback -> android.net.http.Headers$HeaderCallback:
    void header(java.lang.String,java.lang.String) -> header
android.net.http.HttpAuthHeader -> android.net.http.HttpAuthHeader:
    int BASIC -> BASIC
    java.lang.String BASIC_TOKEN -> BASIC_TOKEN
    int DIGEST -> DIGEST
    java.lang.String DIGEST_TOKEN -> DIGEST_TOKEN
    int UNKNOWN -> UNKNOWN
    void <init>(java.lang.String) -> <init>
    boolean isProxy() -> isProxy
    void setProxy() -> setProxy
    java.lang.String getUsername() -> getUsername
    void setUsername(java.lang.String) -> setUsername
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    boolean isBasic() -> isBasic
    boolean isDigest() -> isDigest
    int getScheme() -> getScheme
    boolean getStale() -> getStale
    java.lang.String getRealm() -> getRealm
    java.lang.String getNonce() -> getNonce
    java.lang.String getOpaque() -> getOpaque
    java.lang.String getQop() -> getQop
    java.lang.String getAlgorithm() -> getAlgorithm
    boolean isSupportedScheme() -> isSupportedScheme
android.net.http.HttpsConnection -> android.net.http.HttpsConnection:
    android.net.http.SslCertificate mCertificate -> mCertificate
    android.net.http.AndroidHttpClientConnection mHttpClientConnection -> mHttpClientConnection
    void <init>() -> <init>
    void initializeEngine(java.io.File) -> initializeEngine
    java.lang.String toString() -> toString
android.net.http.LoggingEventHandler -> android.net.http.LoggingEventHandler:
    void <init>() -> <init>
    void requestSent() -> requestSent
    void status(int,int,int,java.lang.String) -> status
    void headers(android.net.http.Headers) -> headers
    void locationChanged(java.lang.String,boolean) -> locationChanged
    void data(byte[],int) -> data
    void endData() -> endData
    void certificate(android.net.http.SslCertificate) -> certificate
    void error(int,java.lang.String) -> error
    boolean handleSslErrorRequest(android.net.http.SslError) -> handleSslErrorRequest
android.net.http.Request -> android.net.http.Request:
    void <init>() -> <init>
    java.lang.String toString() -> toString
    void handleSslErrorResponse(boolean) -> handleSslErrorResponse
android.net.http.RequestFeeder -> android.net.http.RequestFeeder:
    android.net.http.Request getRequest() -> getRequest
    android.net.http.Request getRequest(org.apache.http.HttpHost) -> getRequest
    boolean haveRequest(org.apache.http.HttpHost) -> haveRequest
    void requeueRequest(android.net.http.Request) -> requeueRequest
android.net.http.RequestHandle -> android.net.http.RequestHandle:
    int MAX_REDIRECT_COUNT -> MAX_REDIRECT_COUNT
    void <init>(android.net.http.RequestQueue,java.lang.String,android.net.compatibility.WebAddress,java.lang.String,java.util.Map,java.io.InputStream,int,android.net.http.Request) -> <init>
    void <init>(android.net.http.RequestQueue,java.lang.String,android.net.compatibility.WebAddress,java.lang.String,java.util.Map,java.io.InputStream,int,android.net.http.Request,android.net.http.Connection) -> <init>
    void cancel() -> cancel
    void pauseRequest(boolean) -> pauseRequest
    void handleSslErrorResponse(boolean) -> handleSslErrorResponse
    boolean isRedirectMax() -> isRedirectMax
    int getRedirectCount() -> getRedirectCount
    void setRedirectCount(int) -> setRedirectCount
    boolean setupRedirect(java.lang.String,int,java.util.Map) -> setupRedirect
    void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String) -> setupBasicAuthResponse
    void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setupDigestAuthResponse
    java.lang.String getMethod() -> getMethod
    java.lang.String computeBasicAuthResponse(java.lang.String,java.lang.String) -> computeBasicAuthResponse
    void waitUntilComplete() -> waitUntilComplete
    void processRequest() -> processRequest
    java.lang.String authorizationHeader(boolean) -> authorizationHeader
android.net.http.RequestQueue -> android.net.http.RequestQueue:
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,int) -> <init>
    void enablePlatformNotifications() -> enablePlatformNotifications
    void disablePlatformNotifications() -> disablePlatformNotifications
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    android.net.http.RequestHandle queueRequest(java.lang.String,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int) -> queueRequest
    android.net.http.RequestHandle queueRequest(java.lang.String,android.net.compatibility.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int) -> queueRequest
    android.net.http.RequestHandle queueSynchronousRequest(java.lang.String,android.net.compatibility.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int) -> queueSynchronousRequest
    android.net.http.Request getRequest() -> getRequest
    android.net.http.Request getRequest(org.apache.http.HttpHost) -> getRequest
    boolean haveRequest(org.apache.http.HttpHost) -> haveRequest
    void requeueRequest(android.net.http.Request) -> requeueRequest
    void shutdown() -> shutdown
    void queueRequest(android.net.http.Request,boolean) -> queueRequest
    void startTiming() -> startTiming
    void stopTiming() -> stopTiming
android.net.http.SslCertificate -> android.net.http.SslCertificate:
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date) -> <init>
    void <init>(java.security.cert.X509Certificate) -> <init>
    android.os.Bundle saveState(android.net.http.SslCertificate) -> saveState
    android.net.http.SslCertificate restoreState(android.os.Bundle) -> restoreState
    java.util.Date getValidNotBeforeDate() -> getValidNotBeforeDate
    java.lang.String getValidNotBefore() -> getValidNotBefore
    java.util.Date getValidNotAfterDate() -> getValidNotAfterDate
    java.lang.String getValidNotAfter() -> getValidNotAfter
    android.net.http.SslCertificate$DName getIssuedTo() -> getIssuedTo
    android.net.http.SslCertificate$DName getIssuedBy() -> getIssuedBy
    java.lang.String toString() -> toString
android.net.http.SslCertificate$DName -> android.net.http.SslCertificate$DName:
    android.net.http.SslCertificate this$0 -> this$0
    void <init>(android.net.http.SslCertificate,java.lang.String) -> <init>
    java.lang.String getDName() -> getDName
    java.lang.String getCName() -> getCName
    java.lang.String getOName() -> getOName
    java.lang.String getUName() -> getUName
android.net.http.SslError -> android.net.http.SslError:
    int SSL_DATE_INVALID -> SSL_DATE_INVALID
    int SSL_EXPIRED -> SSL_EXPIRED
    int SSL_IDMISMATCH -> SSL_IDMISMATCH
    int SSL_INVALID -> SSL_INVALID
    int SSL_MAX_ERROR -> SSL_MAX_ERROR
    int SSL_NOTYETVALID -> SSL_NOTYETVALID
    int SSL_UNTRUSTED -> SSL_UNTRUSTED
    void <init>(int,android.net.http.SslCertificate) -> <init>
    void <init>(int,java.security.cert.X509Certificate) -> <init>
    void <init>(int,android.net.http.SslCertificate,java.lang.String) -> <init>
    void <init>(int,java.security.cert.X509Certificate,java.lang.String) -> <init>
    android.net.http.SslCertificate getCertificate() -> getCertificate
    java.lang.String getUrl() -> getUrl
    boolean addError(int) -> addError
    boolean hasError(int) -> hasError
    int getPrimaryError() -> getPrimaryError
    java.lang.String toString() -> toString
cn.BHR.danmakurunner.DRHelper -> cn.BHR.danmakurunner.a:
    int NewProj(int,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float) -> a
cn.BHR.danmakurunner.Dialogs.ConfirmDialog -> cn.BHR.danmakurunner.a.a:
    java.lang.String mMessage -> a
    java.lang.String mTitle -> b
    void OnOKPressed() -> a
    void show() -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
cn.BHR.danmakurunner.Dialogs.ConfirmDialog$1 -> cn.BHR.danmakurunner.a.b:
    cn.BHR.danmakurunner.Dialogs.ConfirmDialog this$0 -> a
    void <init>(cn.BHR.danmakurunner.Dialogs.ConfirmDialog) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
cn.BHR.danmakurunner.Dialogs.ConfirmDialog$2 -> cn.BHR.danmakurunner.a.c:
    cn.BHR.danmakurunner.Dialogs.ConfirmDialog this$0 -> a
    void <init>(cn.BHR.danmakurunner.Dialogs.ConfirmDialog) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
cn.BHR.danmakurunner.Dialogs.InputOpenPathDialog -> cn.BHR.danmakurunner.a.d:
    java.util.ArrayList items -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
cn.BHR.danmakurunner.Dialogs.InputOpenPathDialog$1 -> cn.BHR.danmakurunner.a.e:
    cn.BHR.danmakurunner.Dialogs.InputOpenPathDialog this$0 -> a
    void <init>(cn.BHR.danmakurunner.Dialogs.InputOpenPathDialog) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
cn.BHR.danmakurunner.Dialogs.InputPathDialog -> cn.BHR.danmakurunner.a.f:
    java.lang.String workingPath -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
cn.BHR.danmakurunner.Dialogs.InputPathDialog$1 -> cn.BHR.danmakurunner.a.g:
    cn.BHR.danmakurunner.Dialogs.InputPathDialog this$0 -> a
    android.widget.EditText val$editText -> b
    void <init>(cn.BHR.danmakurunner.Dialogs.InputPathDialog,android.widget.EditText) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
cn.BHR.danmakurunner.Dialogs.InputSavePathDialog -> cn.BHR.danmakurunner.a.h:
    java.util.ArrayList items -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
cn.BHR.danmakurunner.Dialogs.InputSavePathDialog$1 -> cn.BHR.danmakurunner.a.i:
    cn.BHR.danmakurunner.Dialogs.InputSavePathDialog this$0 -> a
    java.io.File[] val$files -> b
    void <init>(cn.BHR.danmakurunner.Dialogs.InputSavePathDialog,java.io.File[]) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
cn.BHR.danmakurunner.Dialogs.InputSavePathDialog$1$1 -> cn.BHR.danmakurunner.a.j:
    cn.BHR.danmakurunner.Dialogs.InputSavePathDialog$1 this$1 -> a
    int val$wh_In -> b
    void <init>(cn.BHR.danmakurunner.Dialogs.InputSavePathDialog$1,java.lang.String,java.lang.String,int) -> <init>
    void OnOKPressed() -> a
cn.BHR.danmakurunner.Dialogs.OtherDialogs -> cn.BHR.danmakurunner.a.k:
cn.BHR.danmakurunner.Dialogs.OtherDialogs$1 -> cn.BHR.danmakurunner.a.l:
    void <init>() -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
cn.BHR.danmakurunner.Dialogs.OtherDialogs$2 -> cn.BHR.danmakurunner.a.m:
    void <init>() -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
cn.BHR.danmakurunner.DocumentActivity -> cn.BHR.danmakurunner.DocumentActivity:
    android.webkit.WebView webView -> b
    cn.BHR.danmakurunner.DocumentActivity instance -> a
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
cn.BHR.danmakurunner.DocumentActivity$1 -> cn.BHR.danmakurunner.b:
    cn.BHR.danmakurunner.DocumentActivity this$0 -> a
    void <init>(cn.BHR.danmakurunner.DocumentActivity) -> <init>
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
cn.BHR.danmakurunner.DrawHelper -> cn.BHR.danmakurunner.c:
    com.badlogic.gdx.math.Vector2 pos -> a
    void <clinit>() -> <clinit>
    void Draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,com.badlogic.gdx.graphics.Texture,com.badlogic.gdx.math.Rectangle) -> a
    void DrawInFightArea(com.badlogic.gdx.graphics.g2d.SpriteBatch,com.badlogic.gdx.graphics.Texture,com.badlogic.gdx.math.Vector2,float,float) -> a
    void DrawInFightArea(com.badlogic.gdx.graphics.g2d.SpriteBatch,com.badlogic.gdx.graphics.Texture,com.badlogic.gdx.math.Vector2,float,float,float) -> a
cn.BHR.danmakurunner.EditorActivity -> cn.BHR.danmakurunner.EditorActivity:
    cn.BHR.danmakurunner.EditorActivity instance -> a
    android.widget.EditText editorMain -> b
    java.lang.String codeInside -> c
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void OnButtonClick_Save(android.view.View) -> OnButtonClick_Save
    void OnButtonClick_Open(android.view.View) -> OnButtonClick_Open
    void OnButtonClick_Run(android.view.View) -> OnButtonClick_Run
    void OnButtonClick_New(android.view.View) -> OnButtonClick_New
    void onPause() -> onPause
    void onResume() -> onResume
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
cn.BHR.danmakurunner.EditorActivity$1 -> cn.BHR.danmakurunner.d:
    cn.BHR.danmakurunner.EditorActivity this$0 -> a
    void <init>(cn.BHR.danmakurunner.EditorActivity,java.lang.String,java.lang.String) -> <init>
    void OnOKPressed() -> a
cn.BHR.danmakurunner.Entities.Entity -> cn.BHR.danmakurunner.b.a:
    int existTime -> a
    boolean active -> b
    com.badlogic.gdx.math.Vector2 position -> c
    com.badlogic.gdx.math.Vector2 velocity -> d
    float rotation -> e
    com.badlogic.gdx.graphics.Texture texture -> f
    int type -> g
    float scale -> h
    com.badlogic.gdx.math.Vector2 rot -> k
    com.badlogic.gdx.math.Vector2 _center -> i
    com.badlogic.gdx.math.Vector2 pos -> l
    com.badlogic.gdx.math.Circle _hitCir -> j
    void <init>() -> <init>
    com.badlogic.gdx.math.Vector2 getCenter() -> a
    void setCenter(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Circle hitBox() -> b
cn.BHR.danmakurunner.Entities.InternalAI.AI_1to5 -> cn.BHR.danmakurunner.b.a.a:
    com.badlogic.gdx.math.Vector2 _velocAI1 -> a
    void <clinit>() -> <clinit>
    void AI1(cn.BHR.danmakurunner.Entities.Projectile,float) -> a
cn.BHR.danmakurunner.Entities.Player -> cn.BHR.danmakurunner.b.b:
    int beforeDeath -> k
    int power -> l
    int graze -> m
    int lives -> n
    int spell -> o
    int invincible -> p
    int invincibleBlinkOpacity -> q
    com.badlogic.gdx.math.Vector2 newPos -> r
    void <init>() -> <init>
cn.BHR.danmakurunner.Entities.Projectile -> cn.BHR.danmakurunner.b.c:
    int aiStyle -> k
    com.badlogic.gdx.math.Vector2 accel -> l
    boolean grazed -> m
    boolean hitPlr -> n
    float[] ai -> o
    float[] extraStorage -> p
    int internalAIType -> q
    int lifetime -> r
    com.badlogic.gdx.math.Vector2 createCenter -> s
    com.badlogic.gdx.graphics.Color shader -> t
    boolean laserlike -> u
    float laserlikescale -> v
    com.badlogic.gdx.math.Rectangle hitRect -> w
    com.badlogic.gdx.math.Polygon hitPolygon -> x
    float[] vertex -> y
    float[] vertex_T -> z
    void <init>() -> <init>
    void Init(int) -> a
    void AI() -> c
cn.BHR.danmakurunner.MagicPixel -> cn.BHR.danmakurunner.e:
    com.badlogic.gdx.graphics.Texture _tex -> a
    com.badlogic.gdx.graphics.Pixmap _pixmap -> b
    void <clinit>() -> <clinit>
    void Draw(com.badlogic.gdx.graphics.g2d.SpriteBatch,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.graphics.Color) -> a
cn.BHR.danmakurunner.MainActivity -> cn.BHR.danmakurunner.MainActivity:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void OnButtonClick_Doc(android.view.View) -> OnButtonClick_Doc
    void OnButtonClick_Edit(android.view.View) -> OnButtonClick_Edit
    void OnButtonClick_Settings(android.view.View) -> OnButtonClick_Settings
cn.BHR.danmakurunner.Runner -> cn.BHR.danmakurunner.f:
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> a
    int absTicks -> b
    java.util.ArrayList projTextures -> c
    com.badlogic.gdx.math.Rectangle FIGHTAREA -> d
    com.badlogic.gdx.math.Rectangle MAINRECT -> e
    cn.BHR.danmakurunner.Entities.Projectile[] proj -> f
    int screenWidth -> g
    int screenHeight -> h
    float screenSize -> i
    com.badlogic.gdx.utils.Timer updateTimer -> j
    boolean touching -> k
    com.badlogic.gdx.math.Vector2 touchPos -> l
    com.badlogic.gdx.math.Vector2 oldtouchPos -> m
    java.util.Hashtable runtimeFloats -> n
    com.badlogic.gdx.graphics.g2d.BitmapFont fontArial -> o
    boolean initialized -> p
    cn.BHR.danmakurunner.Entities.Player plr -> q
    java.lang.StringBuilder msgPool -> r
    java.util.ArrayList DeathTimes -> s
    java.util.concurrent.LinkedBlockingQueue toLoadTexturePool -> t
    java.lang.StringBuilder builder -> u
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void create() -> create
    void render() -> render
    void dispose() -> dispose
    void resize(int,int) -> resize
    void pause() -> pause
    void resume() -> resume
    void reset() -> reset
cn.BHR.danmakurunner.Runner$1 -> cn.BHR.danmakurunner.g:
    cn.BHR.danmakurunner.Runner this$0 -> a
    void <init>(cn.BHR.danmakurunner.Runner) -> <init>
    void run() -> run
cn.BHR.danmakurunner.RunnerActivity -> cn.BHR.danmakurunner.RunnerActivity:
    cn.BHR.danmakurunner.RunnerActivity$MyHandler hdl -> a
    boolean loadedSTL -> b
    java.lang.StringBuilder scriptSTL -> c
    cn.BHR.danmakurunner.Runner runner -> d
    cn.BHR.danmakurunner.RunnerActivity instance -> e
    android.webkit.WebView scriptkit -> f
    android.util.SparseIntArray configs -> g
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
cn.BHR.danmakurunner.RunnerActivity$1 -> cn.BHR.danmakurunner.h:
    cn.BHR.danmakurunner.RunnerActivity this$0 -> a
    void <init>(cn.BHR.danmakurunner.RunnerActivity) -> <init>
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
cn.BHR.danmakurunner.RunnerActivity$MyHandler -> cn.BHR.danmakurunner.i:
    cn.BHR.danmakurunner.RunnerActivity this$0 -> a
    void <init>(cn.BHR.danmakurunner.RunnerActivity) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
cn.BHR.danmakurunner.SettingsActivity -> cn.BHR.danmakurunner.SettingsActivity:
    android.widget.EditText sensibilityText -> a
    android.widget.SeekBar sensibilitySeekBar -> b
    int Sensibility -> c
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
cn.BHR.danmakurunner.SettingsActivity$1 -> cn.BHR.danmakurunner.j:
    cn.BHR.danmakurunner.SettingsActivity this$0 -> a
    void <init>(cn.BHR.danmakurunner.SettingsActivity) -> <init>
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
cn.BHR.danmakurunner.SettingsActivity$2 -> cn.BHR.danmakurunner.k:
    cn.BHR.danmakurunner.SettingsActivity this$0 -> a
    void <init>(cn.BHR.danmakurunner.SettingsActivity) -> <init>
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
cn.BHR.danmakurunner.danmakuInterface -> cn.BHR.danmakurunner.l:
    com.badlogic.gdx.math.Vector2 _veloc -> _veloc
    int POS_X -> POS_X
    int POS_Y -> POS_Y
    int VEL_X -> VEL_X
    int VEL_Y -> VEL_Y
    int CENTER_X -> CENTER_X
    int CENTER_Y -> CENTER_Y
    int ACCEL_X -> ACCEL_X
    int ACCEL_Y -> ACCEL_Y
    int POS -> POS
    int VEL -> VEL
    int CENTER -> CENTER
    int ACCEL -> ACCEL
    int VALID -> VALID
    java.lang.String textureDir -> b
    int queries -> c
    com.badlogic.gdx.math.Vector2 plrJudgeNow -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void toast(java.lang.String) -> toast
    java.lang.String NewProj(int,float,float,float,float,float) -> NewProj
    java.lang.String NewProjAng(int,float,float,float,float,float) -> NewProjAng
    java.lang.String NewProjL(int,float,float,float,float,float,float) -> NewProjL
    java.lang.String GetProj(int,int) -> GetProj
    java.lang.String GetSelf(int) -> GetSelf
    void SetProj(int,int,float,float) -> SetProj
    void SetProjAI(int,int,float) -> SetProjAI
    void ClearProjs() -> ClearProjs
    java.lang.String AddTexture(java.lang.String) -> AddTexture
    void SetSelfTexture(int) -> SetSelfTexture
    void Config(int,int) -> Config
    java.lang.String ShootPlayer(int,float,float,float,float,float) -> ShootPlayer
    void NewText(java.lang.String) -> NewText
    void DelProj(int) -> DelProj
    void SetProjShader(int,float,float,float,float) -> SetProjShader
    void KillPlayer() -> KillPlayer
    void SetProjLifeTime(int,int) -> SetProjLifeTime
cn.bmob.v3.AsyncCustomEndpoints -> cn.bmob.v3.AsyncCustomEndpoints:
    void <init>() -> <init>
    rx.Subscription callEndpoint(java.lang.String,cn.bmob.v3.listener.CloudCodeListener) -> callEndpoint
    rx.Observable callEndpointObservable(java.lang.String) -> callEndpointObservable
    rx.Subscription callEndpoint(java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.CloudCodeListener) -> callEndpoint
    rx.Observable callEndpointObservable(java.lang.String,org.json.JSONObject) -> callEndpointObservable
    cn.bmob.v3.http.mine Code(java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.CloudCodeListener) -> Code
cn.bmob.v3.AsyncCustomEndpoints$1 -> cn.bmob.v3.AsyncCustomEndpoints$1:
    void <init>(cn.bmob.v3.AsyncCustomEndpoints) -> <init>
    java.lang.Object Code(com.google.gson.JsonElement) -> Code
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.Bmob -> cn.bmob.v3.Bmob:
    byte[] V -> V
    org.json.JSONObject Code -> Code
    void <init>() -> <init>
    void initialize(android.content.Context,java.lang.String) -> initialize
    void initialize(android.content.Context,java.lang.String,java.lang.String) -> initialize
    void Code(android.content.Context,java.lang.String,java.lang.String,boolean) -> Code
    void initialize(cn.bmob.v3.BmobConfig) -> initialize
    java.io.File getCacheDir() -> getCacheDir
    java.io.File getFilesDir() -> getFilesDir
    java.io.File getCacheDir(java.lang.String) -> getCacheDir
    java.io.File getFilesDir(java.lang.String) -> getFilesDir
    void Code() -> Code
    android.content.Context getApplicationContext() -> getApplicationContext
    long getConnectTimeout() -> getConnectTimeout
    int getFileBlockSize() -> getFileBlockSize
    long getFileExpiration() -> getFileExpiration
    void uploadBatch(java.lang.String[],cn.bmob.v3.listener.UploadBatchListener) -> uploadBatch
    rx.Subscription getServerTime(cn.bmob.v3.listener.QueryListener) -> getServerTime
    rx.Observable getServerTimeObservable() -> getServerTimeObservable
    cn.bmob.v3.http.mine Code(cn.bmob.v3.listener.QueryListListener) -> Code
    rx.Subscription getAllTableSchema(cn.bmob.v3.listener.QueryListListener) -> getAllTableSchema
    rx.Observable getAllTableSchemaObservable() -> getAllTableSchemaObservable
    cn.bmob.v3.http.mine Code(java.lang.String,cn.bmob.v3.listener.QueryListener) -> Code
    rx.Subscription getTableSchema(java.lang.String,cn.bmob.v3.listener.QueryListener) -> getTableSchema
    rx.Observable getTableSchemaObservable(java.lang.String) -> getTableSchemaObservable
    void <clinit>() -> <clinit>
cn.bmob.v3.BmobACL -> cn.bmob.v3.BmobACL:
    long serialVersionUID -> serialVersionUID
    java.util.Map Code -> Code
    void <init>() -> <init>
    java.util.Map getAcl() -> getAcl
    void setAcl(java.util.Map) -> setAcl
    void Code(java.lang.String,java.lang.String,boolean) -> Code
    void setReadAccess(java.lang.String,boolean) -> setReadAccess
    void setReadAccess(cn.bmob.v3.BmobUser,boolean) -> setReadAccess
    void setWriteAccess(java.lang.String,boolean) -> setWriteAccess
    void setWriteAccess(cn.bmob.v3.BmobUser,boolean) -> setWriteAccess
    void setRoleReadAccess(java.lang.String,boolean) -> setRoleReadAccess
    void setRoleReadAccess(cn.bmob.v3.BmobRole,boolean) -> setRoleReadAccess
    void setRoleWriteAccess(java.lang.String,boolean) -> setRoleWriteAccess
    void setRoleWriteAccess(cn.bmob.v3.BmobRole,boolean) -> setRoleWriteAccess
    void setPublicReadAccess(boolean) -> setPublicReadAccess
    void setPublicWriteAccess(boolean) -> setPublicWriteAccess
cn.bmob.v3.BmobBatch -> cn.bmob.v3.BmobBatch:
    org.json.JSONArray Code -> Code
    void <init>() -> <init>
    cn.bmob.v3.BmobBatch insertBatch(java.util.List) -> insertBatch
    cn.bmob.v3.BmobBatch deleteBatch(java.util.List) -> deleteBatch
    cn.bmob.v3.BmobBatch updateBatch(java.util.List) -> updateBatch
    cn.bmob.v3.BmobBatch Code(java.lang.String,java.util.List) -> Code
    cn.bmob.v3.http.mine Code(cn.bmob.v3.listener.QueryListListener) -> Code
    rx.Observable doBatchObservable() -> doBatchObservable
    rx.Subscription doBatch(cn.bmob.v3.listener.QueryListListener) -> doBatch
cn.bmob.v3.BmobConfig -> cn.bmob.v3.BmobConfig:
    android.content.Context context -> context
    java.lang.String applicationId -> applicationId
    long connectTimeout -> connectTimeout
    int uploadBlockSize -> uploadBlockSize
    long fileExpiration -> fileExpiration
    void <init>(cn.bmob.v3.BmobConfig$Builder) -> <init>
    void <init>(cn.bmob.v3.BmobConfig$Builder,byte) -> <init>
cn.bmob.v3.BmobConfig$Builder -> cn.bmob.v3.BmobConfig$Builder:
    android.content.Context Code -> Code
    java.lang.String V -> V
    long I -> I
    int Z -> Z
    long B -> B
    void <init>(android.content.Context) -> <init>
    cn.bmob.v3.BmobConfig$Builder setApplicationId(java.lang.String) -> setApplicationId
    cn.bmob.v3.BmobConfig$Builder setConnectTimeout(long) -> setConnectTimeout
    cn.bmob.v3.BmobConfig$Builder setUploadBlockSize(int) -> setUploadBlockSize
    cn.bmob.v3.BmobConfig$Builder setFileExpiration(long) -> setFileExpiration
    cn.bmob.v3.BmobConfig build() -> build
    android.content.Context Code(cn.bmob.v3.BmobConfig$Builder) -> Code
    java.lang.String V(cn.bmob.v3.BmobConfig$Builder) -> V
    long I(cn.bmob.v3.BmobConfig$Builder) -> I
    int Z(cn.bmob.v3.BmobConfig$Builder) -> Z
    long B(cn.bmob.v3.BmobConfig$Builder) -> B
cn.bmob.v3.BmobConstants -> cn.bmob.v3.BmobConstants:
    boolean DEBUG -> DEBUG
    java.lang.String TAG -> TAG
    java.lang.String VERSION_NAME -> VERSION_NAME
    int LIMIT_BATCH_SIZE -> LIMIT_BATCH_SIZE
    java.lang.String TYPE_CDN -> TYPE_CDN
    int BLOCK_SIZE -> BLOCK_SIZE
    long EXPIRATION -> EXPIRATION
    int CONNECT_TIMEOUT -> CONNECT_TIMEOUT
    java.lang.String NULL_LISTENER -> NULL_LISTENER
    java.lang.String ERROR_LISTENER -> ERROR_LISTENER
    java.lang.String ERROR_CLASS -> ERROR_CLASS
    int COUNT_RETRY -> COUNT_RETRY
    int TIME_DELAY_RETRY -> TIME_DELAY_RETRY
    void <init>() -> <init>
    void <clinit>() -> <clinit>
cn.bmob.v3.BmobInstallation -> cn.bmob.v3.BmobInstallation:
    long serialVersionUID -> serialVersionUID
    java.lang.String deviceType -> deviceType
    java.util.List channels -> channels
    java.lang.String installationId -> installationId
    java.lang.String timeZone -> timeZone
    java.lang.String deviceToken -> deviceToken
    boolean subOrUnsub -> subOrUnsub
    void <init>() -> <init>
    java.lang.String getTableName() -> getTableName
    cn.bmob.v3.BmobInstallation getCurrentInstallation() -> getCurrentInstallation
    cn.bmob.v3.BmobQuery getQuery() -> getQuery
    java.lang.String getDeviceToken() -> getDeviceToken
    void setDeviceToken(java.lang.String) -> setDeviceToken
    java.lang.String getDeviceType() -> getDeviceType
    void setDeviceType(java.lang.String) -> setDeviceType
    java.util.List getChannels() -> getChannels
    void setChannels(java.util.List) -> setChannels
    java.lang.String getInstallationId() -> getInstallationId
    void setInstallationId(java.lang.String) -> setInstallationId
    java.lang.String getTimeZone() -> getTimeZone
    void setTimeZone(java.lang.String) -> setTimeZone
    void subscribe(java.lang.String) -> subscribe
    void unsubscribe(java.lang.String) -> unsubscribe
    java.lang.String getInstallationId(android.content.Context) -> getInstallationId
    rx.Subscription save() -> save
    rx.Observable updateChannels(cn.bmob.v3.BmobInstallation,java.util.List) -> updateChannels
    rx.Observable Code(cn.bmob.v3.BmobInstallation) -> Code
    rx.Observable Code(cn.bmob.v3.BmobInstallation,cn.bmob.v3.BmobInstallation,java.util.List) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.BmobInstallation$1 -> cn.bmob.v3.BmobInstallation$1:
    void <init>(cn.bmob.v3.BmobInstallation) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
cn.bmob.v3.BmobInstallation$2 -> cn.bmob.v3.BmobInstallation$2:
    cn.bmob.v3.BmobInstallation Code -> Code
    void <init>(cn.bmob.v3.BmobInstallation) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobInstallation$3 -> cn.bmob.v3.BmobInstallation$3:
    java.util.List Code -> Code
    cn.bmob.v3.BmobInstallation V -> V
    void <init>(cn.bmob.v3.BmobInstallation,java.util.List) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobInstallation$4 -> cn.bmob.v3.BmobInstallation$4:
    void <init>(cn.bmob.v3.BmobInstallation) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobObject -> cn.bmob.v3.BmobObject:
    java.util.List increments -> increments
    org.json.JSONObject data -> data
    java.lang.String objectId -> objectId
    java.lang.String createdAt -> createdAt
    java.lang.String updatedAt -> updatedAt
    cn.bmob.v3.BmobACL ACL -> ACL
    java.lang.String _c_ -> _c_
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void setTableName(java.lang.String) -> setTableName
    java.lang.String getTableName() -> getTableName
    java.lang.String getObjectId() -> getObjectId
    void setObjectId(java.lang.String) -> setObjectId
    java.lang.String getCreatedAt() -> getCreatedAt
    void setCreatedAt(java.lang.String) -> setCreatedAt
    java.lang.String getUpdatedAt() -> getUpdatedAt
    void setUpdatedAt(java.lang.String) -> setUpdatedAt
    cn.bmob.v3.BmobACL getACL() -> getACL
    void setACL(cn.bmob.v3.BmobACL) -> setACL
    void increment(java.lang.String) -> increment
    void increment(java.lang.String,java.lang.Number) -> increment
    void add(java.lang.String,java.lang.Object) -> add
    void addAll(java.lang.String,java.util.Collection) -> addAll
    void addUnique(java.lang.String,java.lang.Object) -> addUnique
    void addAllUnique(java.lang.String,java.util.Collection) -> addAllUnique
    void removeAll(java.lang.String,java.util.Collection) -> removeAll
    void remove(java.lang.String) -> remove
    org.json.JSONObject Code(java.lang.String,java.util.Collection) -> Code
    void setValue(java.lang.String,java.lang.Object) -> setValue
    org.json.JSONObject getCurrentData() -> getCurrentData
    org.json.JSONObject disposePointerType(cn.bmob.v3.BmobObject,org.json.JSONObject) -> disposePointerType
    cn.bmob.v3.http.mine Code(cn.bmob.v3.listener.SaveListener) -> Code
    rx.Observable saveObservable() -> saveObservable
    rx.Subscription save() -> save
    rx.Subscription save(cn.bmob.v3.listener.SaveListener) -> save
    org.json.JSONObject Code(java.lang.String) -> Code
    cn.bmob.v3.http.mine Code(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> Code
    rx.Observable updateObservable(java.lang.String) -> updateObservable
    rx.Observable updateObservable() -> updateObservable
    rx.Subscription update() -> update
    rx.Subscription update(cn.bmob.v3.listener.UpdateListener) -> update
    rx.Subscription update(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> update
    cn.bmob.v3.http.mine V(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> V
    rx.Observable deleteObservable(java.lang.String) -> deleteObservable
    rx.Subscription delete() -> delete
    rx.Subscription delete(cn.bmob.v3.listener.UpdateListener) -> delete
    rx.Subscription delete(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> delete
    void <clinit>() -> <clinit>
cn.bmob.v3.BmobObject$1 -> cn.bmob.v3.BmobObject$1:
    cn.bmob.v3.BmobObject Code -> Code
    void <init>(cn.bmob.v3.BmobObject) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobObject$2 -> cn.bmob.v3.BmobObject$2:
    cn.bmob.v3.BmobObject Code -> Code
    void <init>(cn.bmob.v3.BmobObject) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobPushManager -> cn.bmob.v3.BmobPushManager:
    cn.bmob.v3.BmobQuery Code -> Code
    void <init>() -> <init>
    rx.Subscription pushMessage(java.lang.String) -> pushMessage
    rx.Subscription pushMessage(java.lang.String,cn.bmob.v3.listener.PushListener) -> pushMessage
    rx.Subscription pushMessage(org.json.JSONObject) -> pushMessage
    rx.Subscription pushMessage(org.json.JSONObject,cn.bmob.v3.listener.PushListener) -> pushMessage
    rx.Subscription pushMessageAll(java.lang.String) -> pushMessageAll
    rx.Subscription pushMessageAll(org.json.JSONObject) -> pushMessageAll
    rx.Subscription pushMessageAll(java.lang.String,cn.bmob.v3.listener.PushListener) -> pushMessageAll
    rx.Observable pushMessageAllObservable(java.lang.String) -> pushMessageAllObservable
    rx.Subscription pushMessageAll(org.json.JSONObject,cn.bmob.v3.listener.PushListener) -> pushMessageAll
    rx.Observable pushMessageAllObservable(org.json.JSONObject) -> pushMessageAllObservable
    cn.bmob.v3.http.mine Code(java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.PushListener) -> Code
    cn.bmob.v3.http.mine Code(org.json.JSONObject,org.json.JSONObject,cn.bmob.v3.listener.PushListener) -> Code
    cn.bmob.v3.BmobQuery getQuery() -> getQuery
    void setQuery(cn.bmob.v3.BmobQuery) -> setQuery
cn.bmob.v3.BmobQuery -> cn.bmob.v3.BmobQuery:
    android.content.Context Code -> Code
    cn.bmob.v3.BmobQuery$CachePolicy V -> V
    long I -> I
    java.lang.String Z -> Z
    cn.bmob.v3.http.I B -> B
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    org.json.JSONObject getWhere() -> getWhere
    cn.bmob.v3.BmobQuery addWhereLessThan(java.lang.String,java.lang.Object) -> addWhereLessThan
    cn.bmob.v3.BmobQuery addWhereLessThanOrEqualTo(java.lang.String,java.lang.Object) -> addWhereLessThanOrEqualTo
    cn.bmob.v3.BmobQuery addWhereGreaterThan(java.lang.String,java.lang.Object) -> addWhereGreaterThan
    cn.bmob.v3.BmobQuery addWhereGreaterThanOrEqualTo(java.lang.String,java.lang.Object) -> addWhereGreaterThanOrEqualTo
    cn.bmob.v3.BmobQuery addWhereEqualTo(java.lang.String,java.lang.Object) -> addWhereEqualTo
    cn.bmob.v3.BmobQuery addWhereNotEqualTo(java.lang.String,java.lang.Object) -> addWhereNotEqualTo
    cn.bmob.v3.BmobQuery addWhereContainsAll(java.lang.String,java.util.Collection) -> addWhereContainsAll
    cn.bmob.v3.BmobQuery addWhereContainedIn(java.lang.String,java.util.Collection) -> addWhereContainedIn
    cn.bmob.v3.BmobQuery addWhereNotContainedIn(java.lang.String,java.util.Collection) -> addWhereNotContainedIn
    cn.bmob.v3.BmobQuery addWhereMatches(java.lang.String,java.lang.String) -> addWhereMatches
    cn.bmob.v3.BmobQuery addWhereContains(java.lang.String,java.lang.String) -> addWhereContains
    cn.bmob.v3.BmobQuery addWhereStartsWith(java.lang.String,java.lang.String) -> addWhereStartsWith
    cn.bmob.v3.BmobQuery addWhereEndsWith(java.lang.String,java.lang.String) -> addWhereEndsWith
    cn.bmob.v3.BmobQuery addWhereNear(java.lang.String,cn.bmob.v3.datatype.BmobGeoPoint) -> addWhereNear
    cn.bmob.v3.BmobQuery addWhereWithinMiles(java.lang.String,cn.bmob.v3.datatype.BmobGeoPoint,double) -> addWhereWithinMiles
    cn.bmob.v3.BmobQuery addWhereWithinKilometers(java.lang.String,cn.bmob.v3.datatype.BmobGeoPoint,double) -> addWhereWithinKilometers
    cn.bmob.v3.BmobQuery addWhereWithinRadians(java.lang.String,cn.bmob.v3.datatype.BmobGeoPoint,double) -> addWhereWithinRadians
    cn.bmob.v3.BmobQuery addWhereWithinGeoBox(java.lang.String,cn.bmob.v3.datatype.BmobGeoPoint,cn.bmob.v3.datatype.BmobGeoPoint) -> addWhereWithinGeoBox
    cn.bmob.v3.BmobQuery addWhereExists(java.lang.String) -> addWhereExists
    cn.bmob.v3.BmobQuery addWhereDoesNotExists(java.lang.String) -> addWhereDoesNotExists
    cn.bmob.v3.BmobQuery addWhereRelatedTo(java.lang.String,cn.bmob.v3.datatype.BmobPointer) -> addWhereRelatedTo
    cn.bmob.v3.BmobQuery addWhereMatchesQuery(java.lang.String,java.lang.String,cn.bmob.v3.BmobQuery) -> addWhereMatchesQuery
    cn.bmob.v3.BmobQuery addWhereDoesNotMatchQuery(java.lang.String,java.lang.String,cn.bmob.v3.BmobQuery) -> addWhereDoesNotMatchQuery
    cn.bmob.v3.BmobQuery addQueryKeys(java.lang.String) -> addQueryKeys
    cn.bmob.v3.BmobQuery setLimit(int) -> setLimit
    cn.bmob.v3.BmobQuery setSkip(int) -> setSkip
    cn.bmob.v3.BmobQuery order(java.lang.String) -> order
    cn.bmob.v3.BmobQuery include(java.lang.String) -> include
    cn.bmob.v3.BmobQuery or(java.util.List) -> or
    cn.bmob.v3.BmobQuery and(java.util.List) -> and
    void setCachePolicy(cn.bmob.v3.BmobQuery$CachePolicy) -> setCachePolicy
    cn.bmob.v3.BmobQuery$CachePolicy getCachePolicy() -> getCachePolicy
    void setMaxCacheAge(long) -> setMaxCacheAge
    long getMaxCacheAge() -> getMaxCacheAge
    org.json.JSONObject Code(android.content.Context,java.lang.Class) -> Code
    rx.Observable hasCachedResultObservable(java.lang.Class) -> hasCachedResultObservable
    boolean hasCachedResult(java.lang.Class) -> hasCachedResult
    void clearCachedResult(java.lang.Class) -> clearCachedResult
    void clearAllCachedResults() -> clearAllCachedResults
    cn.bmob.v3.http.mine Code(java.lang.String,cn.bmob.v3.listener.QueryListener) -> Code
    cn.bmob.v3.http.mine Code(cn.bmob.v3.listener.QueryListener) -> Code
    rx.Subscription findObjectsByTable(cn.bmob.v3.listener.QueryListener) -> findObjectsByTable
    rx.Observable findObjectsByTableObservable() -> findObjectsByTableObservable
    rx.Subscription getObjectByTable(java.lang.String,cn.bmob.v3.listener.QueryListener) -> getObjectByTable
    rx.Observable getObjectByTableObservable(java.lang.String) -> getObjectByTableObservable
    rx.Subscription Code(java.lang.String,java.lang.Class,cn.bmob.v3.listener.BmobCallback) -> Code
    rx.Subscription findObjects(cn.bmob.v3.listener.FindListener) -> findObjects
    rx.Observable findObjectsObservable(java.lang.Class) -> findObjectsObservable
    rx.Subscription getObject(java.lang.String,cn.bmob.v3.listener.QueryListener) -> getObject
    rx.Observable getObjectObservable(java.lang.Class,java.lang.String) -> getObjectObservable
    cn.bmob.v3.http.mine Code(java.lang.Class,cn.bmob.v3.listener.CountListener) -> Code
    rx.Observable countObservable(java.lang.Class) -> countObservable
    rx.Subscription count(java.lang.Class,cn.bmob.v3.listener.CountListener) -> count
    cn.bmob.v3.BmobQuery setHasGroupCount(boolean) -> setHasGroupCount
    cn.bmob.v3.BmobQuery groupby(java.lang.String[]) -> groupby
    cn.bmob.v3.BmobQuery sum(java.lang.String[]) -> sum
    cn.bmob.v3.BmobQuery average(java.lang.String[]) -> average
    cn.bmob.v3.BmobQuery max(java.lang.String[]) -> max
    cn.bmob.v3.BmobQuery min(java.lang.String[]) -> min
    cn.bmob.v3.BmobQuery having(java.util.HashMap) -> having
    rx.Subscription findStatistics(java.lang.Class,cn.bmob.v3.listener.QueryListener) -> findStatistics
    rx.Observable findStatisticsObservable(java.lang.Class) -> findStatisticsObservable
    cn.bmob.v3.http.mine Code(java.lang.Class,cn.bmob.v3.listener.QueryListener) -> Code
    cn.bmob.v3.BmobQuery setSQL(java.lang.String) -> setSQL
    cn.bmob.v3.BmobQuery setPreparedParams(java.lang.Object[]) -> setPreparedParams
    rx.Subscription Code(java.lang.Class,cn.bmob.v3.listener.SQLQueryListener) -> Code
    rx.Subscription doSQLQuery(cn.bmob.v3.listener.SQLQueryListener) -> doSQLQuery
    rx.Observable doSQLQueryObservable(java.lang.Class) -> doSQLQueryObservable
    rx.Subscription doSQLQuery(java.lang.String,cn.bmob.v3.listener.SQLQueryListener) -> doSQLQuery
    rx.Subscription doSQLQuery(java.lang.String,cn.bmob.v3.listener.SQLQueryListener,java.lang.Object[]) -> doSQLQuery
    rx.Subscription doStatisticQuery(java.lang.String,cn.bmob.v3.listener.QueryListener) -> doStatisticQuery
    rx.Subscription doStatisticQuery(java.lang.String,cn.bmob.v3.listener.QueryListener,java.lang.Object[]) -> doStatisticQuery
    rx.Subscription Code(java.lang.Class,java.lang.String,cn.bmob.v3.listener.BmobCallback,java.lang.Object[]) -> Code
    rx.Subscription Code(cn.bmob.v3.BmobQuery,java.lang.String,java.lang.Class,cn.bmob.v3.listener.BmobCallback) -> Code
    rx.Subscription Code(cn.bmob.v3.BmobQuery,java.lang.Class,cn.bmob.v3.listener.SQLQueryListener) -> Code
cn.bmob.v3.BmobQuery$1 -> cn.bmob.v3.BmobQuery$1:
    java.lang.Class Code -> Code
    cn.bmob.v3.BmobQuery V -> V
    void <init>(cn.bmob.v3.BmobQuery,java.lang.Class) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.BmobQuery$2 -> cn.bmob.v3.BmobQuery$2:
    java.lang.Class Code -> Code
    cn.bmob.v3.BmobQuery V -> V
    void <init>(cn.bmob.v3.BmobQuery,java.lang.Class) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.BmobQuery$2$1 -> cn.bmob.v3.BmobQuery$2$1:
    rx.Subscriber Code -> Code
    void <init>(cn.bmob.v3.BmobQuery$2,rx.Subscriber) -> <init>
    void done(java.util.List,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.BmobQuery$3 -> cn.bmob.v3.BmobQuery$3:
    java.lang.String Code -> Code
    java.lang.Class V -> V
    cn.bmob.v3.BmobQuery I -> I
    void <init>(cn.bmob.v3.BmobQuery,java.lang.String,java.lang.Class) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.BmobQuery$3$1 -> cn.bmob.v3.BmobQuery$3$1:
    rx.Subscriber Code -> Code
    void <init>(cn.bmob.v3.BmobQuery$3,rx.Subscriber) -> <init>
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.BmobQuery$4 -> cn.bmob.v3.BmobQuery$4:
    java.lang.Class Code -> Code
    cn.bmob.v3.BmobQuery V -> V
    void <init>(cn.bmob.v3.BmobQuery,java.lang.Class) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.BmobQuery$4$1 -> cn.bmob.v3.BmobQuery$4$1:
    rx.Subscriber Code -> Code
    void <init>(cn.bmob.v3.BmobQuery$4,rx.Subscriber) -> <init>
    void done(cn.bmob.v3.datatype.BmobQueryResult,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.BmobQuery$CachePolicy -> cn.bmob.v3.BmobQuery$CachePolicy:
    cn.bmob.v3.BmobQuery$CachePolicy IGNORE_CACHE -> IGNORE_CACHE
    cn.bmob.v3.BmobQuery$CachePolicy CACHE_ONLY -> CACHE_ONLY
    cn.bmob.v3.BmobQuery$CachePolicy NETWORK_ONLY -> NETWORK_ONLY
    cn.bmob.v3.BmobQuery$CachePolicy CACHE_ELSE_NETWORK -> CACHE_ELSE_NETWORK
    cn.bmob.v3.BmobQuery$CachePolicy NETWORK_ELSE_CACHE -> NETWORK_ELSE_CACHE
    cn.bmob.v3.BmobQuery$CachePolicy CACHE_THEN_NETWORK -> CACHE_THEN_NETWORK
    cn.bmob.v3.BmobQuery$CachePolicy[] Code -> Code
    cn.bmob.v3.BmobQuery$CachePolicy[] values() -> values
    cn.bmob.v3.BmobQuery$CachePolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
cn.bmob.v3.BmobRealTimeData -> cn.bmob.v3.BmobRealTimeData:
    java.lang.String TAG -> TAG
    java.lang.String ACTION_UPDATETABLE -> ACTION_UPDATETABLE
    java.lang.String ACTION_DELETETABLE -> ACTION_DELETETABLE
    java.lang.String ACTION_UPDATEROW -> ACTION_UPDATEROW
    java.lang.String ACTION_DELETEROW -> ACTION_DELETEROW
    cn.bmob.v3.socketio.acknowledge Code -> Code
    void <init>() -> <init>
    void start(cn.bmob.v3.listener.ValueEventListener) -> start
    boolean isConnected() -> isConnected
    void subTableUpdate(java.lang.String) -> subTableUpdate
    void unsubTableUpdate(java.lang.String) -> unsubTableUpdate
    void subTableDelete(java.lang.String) -> subTableDelete
    void unsubTableDelete(java.lang.String) -> unsubTableDelete
    void subRowUpdate(java.lang.String,java.lang.String) -> subRowUpdate
    void unsubRowUpdate(java.lang.String,java.lang.String) -> unsubRowUpdate
    void subRowDelete(java.lang.String,java.lang.String) -> subRowDelete
    void unsubRowDelete(java.lang.String,java.lang.String) -> unsubRowDelete
    org.json.JSONObject Code(java.lang.String,java.lang.String,java.lang.String) -> Code
    cn.bmob.v3.socketio.acknowledge Code(cn.bmob.v3.BmobRealTimeData,cn.bmob.v3.socketio.acknowledge) -> Code
cn.bmob.v3.BmobRealTimeData$1 -> cn.bmob.v3.BmobRealTimeData$1:
    cn.bmob.v3.listener.ValueEventListener Code -> Code
    cn.bmob.v3.BmobRealTimeData V -> V
    void <init>(cn.bmob.v3.BmobRealTimeData,cn.bmob.v3.listener.ValueEventListener) -> <init>
    void onConnectCompleted(java.lang.Exception,cn.bmob.v3.socketio.acknowledge) -> onConnectCompleted
cn.bmob.v3.BmobRealTimeData$1$1 -> cn.bmob.v3.BmobRealTimeData$1$1:
    cn.bmob.v3.socketio.acknowledge V -> V
    cn.bmob.v3.BmobRealTimeData$1 Code -> Code
    void <init>(cn.bmob.v3.BmobRealTimeData$1,cn.bmob.v3.socketio.acknowledge) -> <init>
    void onEvent(java.lang.String,org.json.JSONArray,cn.bmob.v3.socketio.This) -> onEvent
cn.bmob.v3.BmobRealTimeData$1$1$1 -> cn.bmob.v3.BmobRealTimeData$1$1$1:
    cn.bmob.v3.BmobRealTimeData$1$1 Code -> Code
    void <init>(cn.bmob.v3.BmobRealTimeData$1$1) -> <init>
    void onEvent(java.lang.String,org.json.JSONArray,cn.bmob.v3.socketio.This) -> onEvent
cn.bmob.v3.BmobRole -> cn.bmob.v3.BmobRole:
    long serialVersionUID -> serialVersionUID
    java.lang.String tableName -> tableName
    java.lang.String Code -> Code
    cn.bmob.v3.datatype.BmobRelation V -> V
    cn.bmob.v3.datatype.BmobRelation I -> I
    java.lang.String getTableName() -> getTableName
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    cn.bmob.v3.datatype.BmobRelation getRoles() -> getRoles
    cn.bmob.v3.datatype.BmobRelation getUsers() -> getUsers
    void <clinit>() -> <clinit>
cn.bmob.v3.BmobSMS -> cn.bmob.v3.BmobSMS:
    void <init>() -> <init>
    cn.bmob.v3.http.mine Code(java.util.List,java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.QueryListener) -> Code
    cn.bmob.v3.http.mine Code(java.lang.String,java.lang.String,java.lang.String,cn.bmob.v3.listener.QueryListener) -> Code
    rx.Subscription requestSMS(java.lang.String,java.lang.String,java.lang.String,cn.bmob.v3.listener.QueryListener) -> requestSMS
    rx.Observable requestSMSObservable(java.lang.String,java.lang.String,java.lang.String) -> requestSMSObservable
    cn.bmob.v3.http.mine Code(java.lang.String,java.lang.String,cn.bmob.v3.listener.QueryListener) -> Code
    rx.Subscription requestSMSCode(java.lang.String,java.lang.String,cn.bmob.v3.listener.QueryListener) -> requestSMSCode
    rx.Observable requestSMSCodeObservable(java.lang.String,java.lang.String) -> requestSMSCodeObservable
    void Code(java.lang.String) -> Code
    cn.bmob.v3.http.mine Code(java.lang.String,java.lang.String,cn.bmob.v3.listener.UpdateListener) -> Code
    rx.Subscription verifySmsCode(java.lang.String,java.lang.String,cn.bmob.v3.listener.UpdateListener) -> verifySmsCode
    rx.Observable verifySmsCodeObservable(java.lang.String,java.lang.String) -> verifySmsCodeObservable
    cn.bmob.v3.http.mine Code(java.lang.Integer,cn.bmob.v3.listener.QueryListener) -> Code
    rx.Subscription querySmsState(java.lang.Integer,cn.bmob.v3.listener.QueryListener) -> querySmsState
    rx.Observable querySmsStateObservable(java.lang.Integer) -> querySmsStateObservable
cn.bmob.v3.BmobSMS$1 -> cn.bmob.v3.BmobSMS$1:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobSMS$2 -> cn.bmob.v3.BmobSMS$2:
    void <init>() -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
cn.bmob.v3.BmobSMS$3 -> cn.bmob.v3.BmobSMS$3:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobUser -> cn.bmob.v3.BmobUser:
    long serialVersionUID -> serialVersionUID
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String email -> email
    java.lang.Boolean emailVerified -> emailVerified
    java.lang.String sessionToken -> sessionToken
    java.lang.String mobilePhoneNumber -> mobilePhoneNumber
    java.lang.Boolean mobilePhoneNumberVerified -> mobilePhoneNumberVerified
    org.json.JSONObject current -> current
    void <init>() -> <init>
    java.lang.String getTableName() -> getTableName
    java.lang.String getUsername() -> getUsername
    void setUsername(java.lang.String) -> setUsername
    void setPassword(java.lang.String) -> setPassword
    java.lang.String getEmail() -> getEmail
    void setEmail(java.lang.String) -> setEmail
    java.lang.Boolean getEmailVerified() -> getEmailVerified
    void setEmailVerified(java.lang.Boolean) -> setEmailVerified
    java.lang.String getSessionToken() -> getSessionToken
    void setSessionToken(java.lang.String) -> setSessionToken
    java.lang.String getMobilePhoneNumber() -> getMobilePhoneNumber
    void setMobilePhoneNumber(java.lang.String) -> setMobilePhoneNumber
    java.lang.Boolean getMobilePhoneNumberVerified() -> getMobilePhoneNumberVerified
    void setMobilePhoneNumberVerified(java.lang.Boolean) -> setMobilePhoneNumberVerified
    rx.Subscription signOrLogin(java.lang.String,cn.bmob.v3.listener.SaveListener) -> signOrLogin
    rx.Observable signOrLoginObservable(java.lang.Class,java.lang.String) -> signOrLoginObservable
    rx.Observable signUpObservable(java.lang.Class) -> signUpObservable
    rx.Subscription signUp(cn.bmob.v3.listener.SaveListener) -> signUp
    cn.bmob.v3.http.mine Code(java.lang.Class,java.util.List,java.lang.String,java.lang.String,cn.bmob.v3.listener.SaveListener) -> Code
    rx.Subscription Code(java.util.List,java.lang.String,java.lang.String,cn.bmob.v3.listener.SaveListener) -> Code
    cn.bmob.v3.http.mine Code(java.lang.Class,cn.bmob.v3.listener.SaveListener) -> Code
    rx.Subscription login(cn.bmob.v3.listener.SaveListener) -> login
    rx.Observable loginObservable(java.lang.Class) -> loginObservable
    rx.Subscription save() -> save
    rx.Subscription save(cn.bmob.v3.listener.SaveListener) -> save
    rx.Subscription update() -> update
    rx.Subscription update(cn.bmob.v3.listener.UpdateListener) -> update
    cn.bmob.v3.http.mine Code(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> Code
    rx.Observable updateObservable(java.lang.String) -> updateObservable
    rx.Subscription update(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> update
    cn.bmob.v3.http.mine Code(cn.bmob.v3.BmobUser$BmobThirdUserAuth,cn.bmob.v3.listener.LogInListener) -> Code
    rx.Subscription loginWithAuthData(cn.bmob.v3.BmobUser$BmobThirdUserAuth,cn.bmob.v3.listener.LogInListener) -> loginWithAuthData
    rx.Observable loginWithAuthDataObservable(cn.bmob.v3.BmobUser$BmobThirdUserAuth) -> loginWithAuthDataObservable
    cn.bmob.v3.http.mine Code(cn.bmob.v3.BmobUser$BmobThirdUserAuth,cn.bmob.v3.listener.UpdateListener) -> Code
    rx.Observable associateWithAuthDataObservable(cn.bmob.v3.BmobUser$BmobThirdUserAuth,cn.bmob.v3.listener.UpdateListener) -> associateWithAuthDataObservable
    rx.Subscription associateWithAuthData(cn.bmob.v3.BmobUser$BmobThirdUserAuth,cn.bmob.v3.listener.UpdateListener) -> associateWithAuthData
    cn.bmob.v3.http.mine V(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> V
    rx.Subscription dissociateAuthData(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> dissociateAuthData
    rx.Observable dissociateAuthDataObservable(java.lang.String) -> dissociateAuthDataObservable
    cn.bmob.v3.http.mine I(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> I
    rx.Subscription requestEmailVerify(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> requestEmailVerify
    rx.Observable requestEmailVerifyObservable(java.lang.String) -> requestEmailVerifyObservable
    cn.bmob.v3.http.mine Z(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> Z
    rx.Subscription resetPasswordByEmail(java.lang.String,cn.bmob.v3.listener.UpdateListener) -> resetPasswordByEmail
    rx.Observable resetPasswordByEmailObservable(java.lang.String) -> resetPasswordByEmailObservable
    cn.bmob.v3.http.mine Code(java.lang.String,java.lang.String,cn.bmob.v3.listener.UpdateListener) -> Code
    rx.Subscription resetPasswordBySMSCode(java.lang.String,java.lang.String,cn.bmob.v3.listener.UpdateListener) -> resetPasswordBySMSCode
    rx.Observable resetPasswordBySMSCodeObservable(java.lang.String,java.lang.String) -> resetPasswordBySMSCodeObservable
    cn.bmob.v3.http.mine Code(java.lang.Class,java.lang.String,java.lang.String,cn.bmob.v3.listener.LogInListener) -> Code
    rx.Subscription loginByAccount(java.lang.String,java.lang.String,cn.bmob.v3.listener.LogInListener) -> loginByAccount
    rx.Observable loginByAccountObservable(java.lang.Class,java.lang.String,java.lang.String) -> loginByAccountObservable
    rx.Subscription loginBySMSCode(java.lang.String,java.lang.String,cn.bmob.v3.listener.LogInListener) -> loginBySMSCode
    rx.Subscription signOrLoginByMobilePhone(java.lang.String,java.lang.String,cn.bmob.v3.listener.LogInListener) -> signOrLoginByMobilePhone
    cn.bmob.v3.http.mine Code(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,cn.bmob.v3.listener.LogInListener) -> Code
    rx.Subscription updateCurrentUserPassword(java.lang.String,java.lang.String,cn.bmob.v3.listener.UpdateListener) -> updateCurrentUserPassword
    java.lang.Object getCurrentUser(java.lang.Class) -> getCurrentUser
    cn.bmob.v3.BmobUser getCurrentUser() -> getCurrentUser
    void logOut() -> logOut
    java.lang.Object getObjectByKey(java.lang.String) -> getObjectByKey
    java.lang.String Code(cn.bmob.v3.BmobUser,com.google.gson.JsonElement) -> Code
cn.bmob.v3.BmobUser$1 -> cn.bmob.v3.BmobUser$1:
    java.lang.Class Code -> Code
    cn.bmob.v3.BmobUser V -> V
    void <init>(cn.bmob.v3.BmobUser,java.lang.Class) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobUser$2 -> cn.bmob.v3.BmobUser$2:
    java.lang.Class Code -> Code
    cn.bmob.v3.BmobUser V -> V
    void <init>(cn.bmob.v3.BmobUser,java.lang.Class) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobUser$3 -> cn.bmob.v3.BmobUser$3:
    void <init>(cn.bmob.v3.BmobUser) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.BmobUser$4 -> cn.bmob.v3.BmobUser$4:
    java.lang.String Code -> Code
    cn.bmob.v3.BmobUser V -> V
    void <init>(cn.bmob.v3.BmobUser,java.lang.String) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobUser$5 -> cn.bmob.v3.BmobUser$5:
    java.lang.String Code -> Code
    org.json.JSONObject V -> V
    void <init>(cn.bmob.v3.BmobUser,java.lang.String,org.json.JSONObject) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.BmobUser$6 -> cn.bmob.v3.BmobUser$6:
    org.json.JSONObject Code -> Code
    void <init>(org.json.JSONObject) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.BmobUser$7 -> cn.bmob.v3.BmobUser$7:
    void <init>() -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.BmobUser$BmobThirdUserAuth -> cn.bmob.v3.BmobUser$BmobThirdUserAuth:
    java.lang.String Code -> Code
    java.lang.String V -> V
    java.lang.String I -> I
    java.lang.String Z -> Z
    java.lang.String SNS_TYPE_WEIBO -> SNS_TYPE_WEIBO
    java.lang.String SNS_TYPE_QQ -> SNS_TYPE_QQ
    java.lang.String SNS_TYPE_WEIXIN -> SNS_TYPE_WEIXIN
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getPlatformIdByType(java.lang.String) -> getPlatformIdByType
    java.lang.String getAccessToken() -> getAccessToken
    void setAccessToken(java.lang.String) -> setAccessToken
    java.lang.String getUserId() -> getUserId
    void setUserId(java.lang.String) -> setUserId
    java.lang.String getExpiresIn() -> getExpiresIn
    void setExpiresIn(java.lang.String) -> setExpiresIn
    java.lang.String getSnsType() -> getSnsType
    void setSnsType(java.lang.String) -> setSnsType
    org.json.JSONObject toJSONObject() -> toJSONObject
cn.bmob.v3.BmobWrapper -> cn.bmob.v3.BmobWrapper:
    byte[] Code -> Code
    cn.bmob.v3.BmobWrapper V -> V
    java.lang.String I -> I
    android.content.Context Z -> Z
    long B -> B
    int C -> C
    long S -> S
    java.io.File F -> F
    java.io.File D -> D
    void Code(cn.bmob.v3.BmobConfig) -> Code
    cn.bmob.v3.BmobWrapper V(cn.bmob.v3.BmobConfig) -> V
    void <init>(cn.bmob.v3.BmobConfig) -> <init>
    cn.bmob.v3.BmobWrapper getInstance() -> getInstance
    java.io.File Code() -> Code
    java.io.File V() -> V
    java.io.File Code(java.io.File) -> Code
    long getConnectTimeout() -> getConnectTimeout
    int getUploadBlockSize() -> getUploadBlockSize
    long getFileExpiration() -> getFileExpiration
    android.content.Context getApplicationContext() -> getApplicationContext
    void <clinit>() -> <clinit>
cn.bmob.v3.BuildConfig -> cn.bmob.v3.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    void <init>() -> <init>
cn.bmob.v3.a.a.This -> cn.bmob.v3.a.a.This:
    char[] Code -> Code
    char[] V -> V
    java.lang.String I -> I
    char[] V(byte[]) -> V
    java.lang.String Code(byte[]) -> Code
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
cn.bmob.v3.a.b.This -> cn.bmob.v3.a.b.This:
    okhttp3.OkHttpClient Code -> Code
    java.security.MessageDigest I(java.lang.String) -> I
    java.lang.String Code(java.lang.String) -> Code
    void <init>() -> <init>
    java.lang.String Code(java.lang.String,java.util.Map) -> Code
    java.lang.String Code(java.lang.String,cn.bmob.v3.datatype.a.This) -> Code
    okhttp3.Response V(java.lang.String) -> V
cn.bmob.v3.b.From -> cn.bmob.v3.b.From:
    char[] Code -> Code
    java.lang.String Code(java.lang.String) -> Code
    java.lang.String Code(byte[]) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.b.I -> cn.bmob.v3.b.I:
    cn.bmob.v3.b.I Code -> Code
    void <init>(android.content.Context) -> <init>
    cn.bmob.v3.b.I Code(android.content.Context) -> Code
    void Code(java.lang.String,java.lang.String) -> Code
    java.lang.String V(java.lang.String,java.lang.String) -> V
    void Code(java.lang.String,org.json.JSONObject,org.json.JSONObject) -> Code
cn.bmob.v3.b.Tempest -> cn.bmob.v3.b.Tempest:
    android.content.SharedPreferences Code -> Code
    android.content.SharedPreferences$Editor V -> V
    void <init>() -> <init>
    void <init>(android.content.SharedPreferences) -> <init>
    void Code(java.lang.String,int) -> Code
    void Code(java.lang.String,java.lang.String) -> Code
    int V(java.lang.String,int) -> V
    java.lang.String V(java.lang.String,java.lang.String) -> V
    void Code(java.lang.String) -> Code
cn.bmob.v3.b.The -> cn.bmob.v3.b.The:
    java.lang.Object Code -> Code
    int V -> V
    int Code() -> Code
    android.content.pm.ApplicationInfo Code(android.content.Context,int) -> Code
    java.lang.String Code(java.lang.String) -> Code
    java.lang.String Code(android.content.Context) -> Code
    java.lang.String I(android.content.Context) -> I
    boolean V(android.content.Context) -> V
    void <clinit>() -> <clinit>
cn.bmob.v3.b.This -> cn.bmob.v3.b.This:
    cn.bmob.v3.b.This$thing Code -> Code
    java.lang.String V -> V
    void <init>() -> <init>
    cn.bmob.v3.b.This$thing Code() -> Code
    void Code(java.lang.String,java.lang.String,int) -> Code
    void Code(java.lang.String) -> Code
    void V(java.lang.String) -> V
    void I(java.lang.String) -> I
    void V(java.lang.String,java.lang.String,int) -> V
    void Code(int,java.lang.String,java.lang.String,int) -> Code
    void Code(int,java.lang.String,java.lang.String) -> Code
    void V(int,java.lang.String,java.lang.String) -> V
    void Code(int) -> Code
    int Code(java.lang.StackTraceElement[]) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.b.This$This -> cn.bmob.v3.b.This$This:
    int V -> V
    int Code -> Code
    int[] I -> I
    void <clinit>() -> <clinit>
cn.bmob.v3.b.This$thing -> cn.bmob.v3.b.This$thing:
    int Code -> Code
    boolean V -> V
    int I -> I
    void <init>() -> <init>
cn.bmob.v3.b.acknowledge -> cn.bmob.v3.b.acknowledge:
    char[] Code -> Code
    java.security.MessageDigest V -> V
    void V(java.lang.Object) -> V
    java.lang.String V(java.lang.String) -> V
    byte[] I(java.lang.String) -> I
    org.json.JSONObject Code(android.content.Context) -> Code
    org.json.JSONArray S(android.content.Context) -> S
    org.json.JSONObject I() -> I
    org.json.JSONArray F(android.content.Context) -> F
    org.json.JSONArray D(android.content.Context) -> D
    org.json.JSONObject Z() -> Z
    java.lang.String L(android.content.Context) -> L
    org.json.JSONObject a(android.content.Context) -> a
    org.json.JSONObject V(android.telephony.TelephonyManager) -> V
    java.lang.String Code(byte[]) -> Code
    java.lang.String V(android.content.Context) -> V
    org.json.JSONObject Code() -> Code
    org.json.JSONObject I(android.content.Context) -> I
    org.json.JSONObject Code(android.telephony.TelephonyManager) -> Code
    void Code(java.lang.Object) -> Code
    org.json.JSONArray Z(android.content.Context) -> Z
    org.json.JSONArray B(android.content.Context) -> B
    org.json.JSONObject V() -> V
    org.json.JSONArray C(android.content.Context) -> C
    byte[] Code(java.lang.String) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.b.acknowledge$1 -> cn.bmob.v3.b.acknowledge$1:
    org.json.JSONObject Code -> Code
    android.content.Context V -> V
    void <init>(org.json.JSONObject,android.content.Context) -> <init>
    void run() -> run
cn.bmob.v3.b.darkness -> cn.bmob.v3.b.darkness:
    int Code -> Code
    int V -> V
    java.lang.String Code(org.json.JSONObject) -> Code
    void Code(org.json.JSONStringer,java.lang.Object) -> Code
    void Code(java.lang.String,java.lang.String) -> Code
    java.io.File V(java.lang.String) -> V
    java.io.File V() -> V
    java.lang.Object Code(java.lang.String,long) -> Code
    java.lang.String V(java.lang.String,long) -> V
    long Code(java.io.File) -> Code
    void Code(java.lang.String) -> Code
    void Code() -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.b.darkness$1 -> cn.bmob.v3.b.darkness$1:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
cn.bmob.v3.b.darkness$2 -> cn.bmob.v3.b.darkness$2:
    java.lang.String Code -> Code
    void <init>(java.lang.String) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
cn.bmob.v3.b.mine -> cn.bmob.v3.b.mine:
    android.content.Context S -> S
    android.app.NotificationManager Code -> Code
    android.app.Notification V -> V
    cn.bmob.v3.helper.NotificationCompat$Builder I -> I
    android.app.PendingIntent Z -> Z
    java.lang.String B -> B
    java.lang.String C -> C
    android.os.Handler F -> F
    void <init>(android.content.Context,java.lang.String) -> <init>
    void Code() -> Code
    cn.bmob.v3.helper.NotificationCompat$Builder Code(int,int,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent) -> Code
    void Code(java.lang.String) -> Code
    void Code(int,int) -> Code
    void Code(cn.bmob.v3.b.mine,int) -> Code
    android.content.Context Code(cn.bmob.v3.b.mine) -> Code
    cn.bmob.v3.helper.NotificationCompat$Builder Code(cn.bmob.v3.b.mine,int,int,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent) -> Code
cn.bmob.v3.b.mine$1 -> cn.bmob.v3.b.mine$1:
    cn.bmob.v3.b.mine Code -> Code
    void <init>(cn.bmob.v3.b.mine) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
cn.bmob.v3.b.mine$2 -> cn.bmob.v3.b.mine$2:
    java.lang.String Code -> Code
    java.lang.String V -> V
    cn.bmob.v3.b.mine I -> I
    void <init>(cn.bmob.v3.b.mine,java.lang.String,java.lang.String) -> <init>
    void run() -> run
cn.bmob.v3.b.of -> cn.bmob.v3.b.of:
    cn.bmob.v3.b.of Code -> Code
    android.content.res.Resources V -> V
    java.lang.String I -> I
    void <init>(android.content.Context) -> <init>
    cn.bmob.v3.b.of Code(android.content.Context) -> Code
    int Code(java.lang.String) -> Code
    int V(java.lang.String) -> V
    int I(java.lang.String) -> I
    int Code(java.lang.String,java.lang.String) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.b.thing -> cn.bmob.v3.b.thing:
    char[] Code -> Code
    byte[] V -> V
    java.lang.String Code(java.lang.String) -> Code
    char[] Code(byte[],int,int) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.datatype.BatchResult -> cn.bmob.v3.datatype.BatchResult:
    long serialVersionUID -> serialVersionUID
    boolean Code -> Code
    java.lang.String V -> V
    java.lang.String I -> I
    java.lang.String Z -> Z
    cn.bmob.v3.exception.BmobException B -> B
    void <init>() -> <init>
    boolean isSuccess() -> isSuccess
    void setSuccess(boolean) -> setSuccess
    java.lang.String getObjectId() -> getObjectId
    void setObjectId(java.lang.String) -> setObjectId
    java.lang.String getCreatedAt() -> getCreatedAt
    void setCreatedAt(java.lang.String) -> setCreatedAt
    java.lang.String getUpdatedAt() -> getUpdatedAt
    void setUpdatedAt(java.lang.String) -> setUpdatedAt
    cn.bmob.v3.exception.BmobException getError() -> getError
    void setError(cn.bmob.v3.exception.BmobException) -> setError
cn.bmob.v3.datatype.BmobDate -> cn.bmob.v3.datatype.BmobDate:
    long serialVersionUID -> serialVersionUID
    java.lang.String iso -> iso
    java.lang.String __type -> __type
    void <init>(java.util.Date) -> <init>
    java.lang.String getDate() -> getDate
    long getTimeStamp(java.lang.String) -> getTimeStamp
    cn.bmob.v3.datatype.BmobDate createBmobDate(java.lang.String,java.lang.String) -> createBmobDate
cn.bmob.v3.datatype.BmobFile -> cn.bmob.v3.datatype.BmobFile:
    long serialVersionUID -> serialVersionUID
    cn.bmob.v3.datatype.a.of uploader -> uploader
    cn.bmob.v3.http.of downloader -> downloader
    java.io.File localFile -> localFile
    android.content.Context context -> context
    java.lang.String filename -> filename
    java.lang.String group -> group
    java.lang.String url -> url
    java.lang.String __type -> __type
    void <init>() -> <init>
    void <init>(java.io.File) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void obtain(java.lang.String,java.lang.String,java.lang.String) -> obtain
    cn.bmob.v3.datatype.BmobFile createEmptyFile() -> createEmptyFile
    java.lang.String getUrl() -> getUrl
    void setUrl(java.lang.String) -> setUrl
    java.lang.String getGroup() -> getGroup
    void setGroup(java.lang.String) -> setGroup
    java.lang.String getFilename() -> getFilename
    void setFilename(java.lang.String) -> setFilename
    java.lang.String getFileUrl() -> getFileUrl
    java.io.File getLocalFile() -> getLocalFile
    rx.Subscription upload(cn.bmob.v3.listener.UploadFileListener) -> upload
    rx.Subscription uploadblock(cn.bmob.v3.listener.UploadFileListener) -> uploadblock
    rx.Observable uploadObservable(cn.bmob.v3.listener.ProgressCallback) -> uploadObservable
    void cancel() -> cancel
    void Code() -> Code
    void V() -> V
    rx.Subscription delete() -> delete
    rx.Subscription delete(cn.bmob.v3.listener.UpdateListener) -> delete
    rx.Observable deleteObservable() -> deleteObservable
    rx.Observable deleteBatchObservable(java.lang.String[]) -> deleteBatchObservable
    rx.Subscription deleteBatch(java.lang.String[],cn.bmob.v3.listener.DeleteBatchListener) -> deleteBatch
    boolean Code(cn.bmob.v3.listener.BmobErrorCallback) -> Code
    boolean Code(java.io.File,cn.bmob.v3.listener.BmobErrorCallback) -> Code
    void download(cn.bmob.v3.listener.DownloadFileListener) -> download
    void download(java.io.File,cn.bmob.v3.listener.DownloadFileListener) -> download
    rx.Observable downloadObservable(cn.bmob.v3.listener.ProgressCallback) -> downloadObservable
    rx.Observable downloadObservable(java.io.File,cn.bmob.v3.listener.ProgressCallback) -> downloadObservable
    void uploadBatch(java.lang.String[],cn.bmob.v3.listener.UploadBatchListener) -> uploadBatch
    void V(int,java.lang.String[],java.util.List,java.util.List,cn.bmob.v3.listener.UploadBatchListener) -> V
    void Code(boolean,int,int,java.lang.String[],java.util.List,java.util.List,cn.bmob.v3.listener.UploadBatchListener) -> Code
    rx.Observable Code(cn.bmob.v3.datatype.BmobFile,cn.bmob.v3.http.bean.Upyun,cn.bmob.v3.listener.ProgressCallback) -> Code
    void Code(cn.bmob.v3.datatype.BmobFile,cn.bmob.v3.http.bean.Upyun,cn.bmob.v3.listener.UploadFileListener) -> Code
    void Code(int,java.lang.String[],java.util.List,java.util.List,cn.bmob.v3.listener.UploadBatchListener) -> Code
cn.bmob.v3.datatype.BmobFile$1 -> cn.bmob.v3.datatype.BmobFile$1:
    cn.bmob.v3.listener.UploadFileListener Code -> Code
    void <init>(cn.bmob.v3.datatype.BmobFile,cn.bmob.v3.listener.UploadFileListener) -> <init>
    void onProgress(java.lang.Integer,long) -> onProgress
cn.bmob.v3.datatype.BmobFile$2 -> cn.bmob.v3.datatype.BmobFile$2:
    cn.bmob.v3.listener.ProgressCallback Code -> Code
    cn.bmob.v3.datatype.BmobFile V -> V
    void <init>(cn.bmob.v3.datatype.BmobFile,cn.bmob.v3.listener.ProgressCallback) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.datatype.BmobFile$2$1 -> cn.bmob.v3.datatype.BmobFile$2$1:
    cn.bmob.v3.datatype.BmobFile$2 Code -> Code
    void <init>(cn.bmob.v3.datatype.BmobFile$2) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.datatype.BmobFile$3 -> cn.bmob.v3.datatype.BmobFile$3:
    void <init>(cn.bmob.v3.datatype.BmobFile) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.datatype.BmobFile$4 -> cn.bmob.v3.datatype.BmobFile$4:
    cn.bmob.v3.datatype.BmobFile Code -> Code
    void <init>(cn.bmob.v3.datatype.BmobFile) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.datatype.BmobFile$5 -> cn.bmob.v3.datatype.BmobFile$5:
    cn.bmob.v3.http.bean.Upyun I -> I
    cn.bmob.v3.listener.ProgressCallback Code -> Code
    cn.bmob.v3.datatype.BmobFile V -> V
    void <init>(cn.bmob.v3.datatype.BmobFile,cn.bmob.v3.http.bean.Upyun,cn.bmob.v3.listener.ProgressCallback) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.datatype.BmobFile$5$1 -> cn.bmob.v3.datatype.BmobFile$5$1:
    rx.Subscriber Code -> Code
    cn.bmob.v3.datatype.BmobFile$5 V -> V
    void <init>(cn.bmob.v3.datatype.BmobFile$5,rx.Subscriber) -> <init>
    void done(cn.bmob.v3.exception.BmobException) -> done
    void onProgress(java.lang.Integer) -> onProgress
cn.bmob.v3.datatype.BmobFile$6 -> cn.bmob.v3.datatype.BmobFile$6:
    java.io.File V -> V
    cn.bmob.v3.listener.ProgressCallback Code -> Code
    cn.bmob.v3.datatype.BmobFile I -> I
    void <init>(cn.bmob.v3.datatype.BmobFile,java.io.File,cn.bmob.v3.listener.ProgressCallback) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.datatype.BmobFile$6$1 -> cn.bmob.v3.datatype.BmobFile$6$1:
    rx.Subscriber Code -> Code
    cn.bmob.v3.datatype.BmobFile$6 V -> V
    void <init>(cn.bmob.v3.datatype.BmobFile$6,rx.Subscriber) -> <init>
    void done(java.lang.String,cn.bmob.v3.exception.BmobException) -> done
    void onProgress(java.lang.Integer,long) -> onProgress
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
cn.bmob.v3.datatype.BmobFile$7 -> cn.bmob.v3.datatype.BmobFile$7:
    cn.bmob.v3.datatype.BmobFile Code -> Code
    java.util.List V -> V
    java.util.List I -> I
    cn.bmob.v3.listener.UploadBatchListener Z -> Z
    boolean B -> B
    int C -> C
    java.lang.String[] S -> S
    int F -> F
    void <init>(cn.bmob.v3.datatype.BmobFile,java.util.List,java.util.List,cn.bmob.v3.listener.UploadBatchListener,boolean,int,java.lang.String[],int) -> <init>
    void done(cn.bmob.v3.exception.BmobException) -> done
    void onProgress(java.lang.Integer) -> onProgress
cn.bmob.v3.datatype.BmobGeoPoint -> cn.bmob.v3.datatype.BmobGeoPoint:
    long serialVersionUID -> serialVersionUID
    double EARTH_MEAN_RADIUS_KM -> EARTH_MEAN_RADIUS_KM
    double EARTH_MEAN_RADIUS_MILE -> EARTH_MEAN_RADIUS_MILE
    java.lang.Double latitude -> latitude
    java.lang.Double longitude -> longitude
    java.lang.String __type -> __type
    void <init>() -> <init>
    void <init>(double,double) -> <init>
    void setLatitude(double) -> setLatitude
    double getLatitude() -> getLatitude
    void setLongitude(double) -> setLongitude
    double getLongitude() -> getLongitude
    double distanceInRadiansTo(cn.bmob.v3.datatype.BmobGeoPoint) -> distanceInRadiansTo
    double distanceInKilometersTo(cn.bmob.v3.datatype.BmobGeoPoint) -> distanceInKilometersTo
    double distanceInMilesTo(cn.bmob.v3.datatype.BmobGeoPoint) -> distanceInMilesTo
    void <clinit>() -> <clinit>
cn.bmob.v3.datatype.BmobPointer -> cn.bmob.v3.datatype.BmobPointer:
    long serialVersionUID -> serialVersionUID
    java.lang.String __type -> __type
    java.lang.String className -> className
    java.lang.String objectId -> objectId
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.String getClassName() -> getClassName
    void setClassName(java.lang.String) -> setClassName
    java.lang.String getObjectId() -> getObjectId
    void setObjectId(java.lang.String) -> setObjectId
cn.bmob.v3.datatype.BmobQueryResult -> cn.bmob.v3.datatype.BmobQueryResult:
    long serialVersionUID -> serialVersionUID
    java.util.List Code -> Code
    int V -> V
    void <init>() -> <init>
    void <init>(java.util.List,int) -> <init>
    java.util.List getResults() -> getResults
    int getCount() -> getCount
cn.bmob.v3.datatype.BmobRelation -> cn.bmob.v3.datatype.BmobRelation:
    long serialVersionUID -> serialVersionUID
    java.lang.String __op -> __op
    java.util.List objects -> objects
    void <init>(java.lang.Object) -> <init>
    void <init>() -> <init>
    void add(java.lang.Object) -> add
    void remove(java.lang.Object) -> remove
    void isRemove(boolean) -> isRemove
    java.lang.String get__op() -> get__op
    java.util.List getObjects() -> getObjects
    void setObjects(java.util.List) -> setObjects
cn.bmob.v3.datatype.BmobReturn -> cn.bmob.v3.datatype.BmobReturn:
    java.lang.Object Code -> Code
    cn.bmob.v3.exception.BmobException V -> V
    void <init>(java.lang.Object,cn.bmob.v3.exception.BmobException) -> <init>
    void <init>() -> <init>
    java.lang.Object getT() -> getT
    void setT(java.lang.Object) -> setT
    cn.bmob.v3.exception.BmobException getE() -> getE
    void setE(cn.bmob.v3.exception.BmobException) -> setE
cn.bmob.v3.datatype.BmobSmsState -> cn.bmob.v3.datatype.BmobSmsState:
    long serialVersionUID -> serialVersionUID
    java.lang.String Code -> Code
    java.lang.String V -> V
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getSmsState() -> getSmsState
    void setSmsState(java.lang.String) -> setSmsState
    java.lang.String getVerifyState() -> getVerifyState
    void setVerifyState(java.lang.String) -> setVerifyState
cn.bmob.v3.datatype.BmobTableSchema -> cn.bmob.v3.datatype.BmobTableSchema:
    long serialVersionUID -> serialVersionUID
    java.lang.String Code -> Code
    java.util.Map V -> V
    void <init>() -> <init>
    void <init>(java.lang.String,java.util.Map) -> <init>
    java.lang.String getClassName() -> getClassName
    void setClassName(java.lang.String) -> setClassName
    java.util.Map getFields() -> getFields
    void setFields(java.util.Map) -> setFields
cn.bmob.v3.datatype.a.From -> cn.bmob.v3.datatype.a.From:
    android.os.PowerManager$WakeLock Z -> Z
    cn.bmob.v3.http.bean.Upyun I -> I
    android.content.Context B -> B
    java.io.File C -> C
    void <init>(android.content.Context,cn.bmob.v3.http.bean.Upyun,cn.bmob.v3.datatype.BmobFile,cn.bmob.v3.listener.UploadFileListener) -> <init>
    void Code() -> Code
    void Code(cn.bmob.v3.datatype.a.From,boolean,java.lang.String) -> Code
    android.os.PowerManager$WakeLock Code(cn.bmob.v3.datatype.a.From) -> Code
cn.bmob.v3.datatype.a.From$1 -> cn.bmob.v3.datatype.a.From$1:
    cn.bmob.v3.datatype.a.From Code -> Code
    void <init>(cn.bmob.v3.datatype.a.From) -> <init>
    void Code(long,long) -> Code
cn.bmob.v3.datatype.a.From$2 -> cn.bmob.v3.datatype.a.From$2:
    cn.bmob.v3.datatype.a.From Code -> Code
    void <init>(cn.bmob.v3.datatype.a.From) -> <init>
    void Code(boolean,java.lang.String) -> Code
cn.bmob.v3.datatype.a.From$3 -> cn.bmob.v3.datatype.a.From$3:
    cn.bmob.v3.datatype.a.From Code -> Code
    void <init>(cn.bmob.v3.datatype.a.From) -> <init>
    java.lang.String Code(java.lang.String) -> Code
cn.bmob.v3.datatype.a.From$4 -> cn.bmob.v3.datatype.a.From$4:
    void <init>(cn.bmob.v3.datatype.a.From) -> <init>
cn.bmob.v3.datatype.a.I -> cn.bmob.v3.datatype.a.I:
    void Code(boolean,java.lang.String) -> Code
cn.bmob.v3.datatype.a.The -> cn.bmob.v3.datatype.a.The:
    cn.bmob.v3.datatype.a.The Code -> Code
    java.util.concurrent.ExecutorService V -> V
    cn.bmob.v3.a.b.This I -> I
    void <init>() -> <init>
    cn.bmob.v3.datatype.a.The Code() -> Code
    void Code(java.io.File,java.util.Map,cn.bmob.v3.datatype.a.darkness,cn.bmob.v3.datatype.a.I,cn.bmob.v3.datatype.a.mine) -> Code
cn.bmob.v3.datatype.a.The$1 -> cn.bmob.v3.datatype.a.The$1:
    cn.bmob.v3.datatype.a.mine Code -> Code
    void <init>(cn.bmob.v3.datatype.a.The,cn.bmob.v3.datatype.a.mine) -> <init>
    void Code(long,long) -> Code
cn.bmob.v3.datatype.a.The$1$1 -> cn.bmob.v3.datatype.a.The$1$1:
    long Code -> Code
    long V -> V
    cn.bmob.v3.datatype.a.The$1 I -> I
    void <init>(cn.bmob.v3.datatype.a.The$1,long,long) -> <init>
    void run() -> run
cn.bmob.v3.datatype.a.The$2 -> cn.bmob.v3.datatype.a.The$2:
    cn.bmob.v3.datatype.a.I Code -> Code
    void <init>(cn.bmob.v3.datatype.a.The,cn.bmob.v3.datatype.a.I) -> <init>
    void Code(boolean,java.lang.String) -> Code
cn.bmob.v3.datatype.a.The$2$1 -> cn.bmob.v3.datatype.a.The$2$1:
    boolean Code -> Code
    java.lang.String V -> V
    cn.bmob.v3.datatype.a.The$2 I -> I
    void <init>(cn.bmob.v3.datatype.a.The$2,boolean,java.lang.String) -> <init>
    void run() -> run
cn.bmob.v3.datatype.a.This -> cn.bmob.v3.datatype.a.This:
    byte[] Code -> Code
    java.util.Map V -> V
    java.lang.String I -> I
    void Code(java.lang.Runnable) -> Code
    void <init>() -> <init>
    java.lang.String Code(java.util.Map) -> Code
    java.lang.String Code(java.util.Map,java.lang.String) -> Code
    java.lang.String Code(byte[]) -> Code
    java.lang.String Code(java.lang.String) -> Code
    java.lang.String Code(java.io.File) -> Code
    int Code(java.io.File,int) -> Code
    byte[] Code(java.lang.String,java.lang.String) -> Code
    void Code(java.io.InputStream) -> Code
    void Code(java.io.OutputStream) -> Code
    void Code(java.io.Closeable) -> Code
    boolean Code() -> Code
    java.lang.String V(byte[]) -> V
    boolean Code(java.lang.String,int,int) -> Code
    boolean Code(android.content.Context,java.lang.String) -> Code
    java.util.ArrayList Code(org.json.JSONArray) -> Code
    java.util.ArrayList Code(java.util.ArrayList) -> Code
    org.json.JSONArray V(java.util.ArrayList) -> V
    java.lang.String Code(java.lang.String[]) -> Code
    java.util.Map Code(org.json.JSONObject) -> Code
    boolean V(java.io.File) -> V
    java.lang.String V(java.lang.String) -> V
    java.lang.String I(java.lang.String) -> I
    java.lang.String Z(java.lang.String) -> Z
    java.lang.String I(byte[]) -> I
cn.bmob.v3.datatype.a.acknowledge -> cn.bmob.v3.datatype.a.acknowledge:
    int Code -> Code
    int V -> V
    int I -> I
    void <clinit>() -> <clinit>
cn.bmob.v3.datatype.a.darkness -> cn.bmob.v3.datatype.a.darkness:
    java.lang.String Code(java.lang.String) -> Code
cn.bmob.v3.datatype.a.mine -> cn.bmob.v3.datatype.a.mine:
    void Code(long,long) -> Code
cn.bmob.v3.datatype.a.of -> cn.bmob.v3.datatype.a.of:
    cn.bmob.v3.datatype.BmobFile Code -> Code
    cn.bmob.v3.listener.UploadFileListener V -> V
    boolean I -> I
    java.util.concurrent.Future Z -> Z
    int B -> B
    int C -> C
    int S -> S
    java.util.concurrent.ThreadPoolExecutor F -> F
    void <init>(cn.bmob.v3.datatype.BmobFile,cn.bmob.v3.listener.UploadFileListener) -> <init>
    void Code() -> Code
    void V() -> V
    boolean Code(boolean) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.datatype.a.of$1 -> cn.bmob.v3.datatype.a.of$1:
    cn.bmob.v3.datatype.a.of Code -> Code
    void <init>(cn.bmob.v3.datatype.a.of) -> <init>
    void run() -> run
cn.bmob.v3.datatype.a.thing -> cn.bmob.v3.datatype.a.thing:
    java.lang.String Code -> Code
    java.lang.String V -> V
    long I -> I
    cn.bmob.v3.datatype.a.mine Z -> Z
    cn.bmob.v3.datatype.a.I B -> B
    java.io.File C -> C
    cn.bmob.v3.a.b.This S -> S
    java.lang.String F -> F
    java.lang.String D -> D
    int L -> L
    java.lang.String a -> a
    java.lang.String b -> b
    java.io.RandomAccessFile c -> c
    int[] d -> d
    cn.bmob.v3.datatype.a.This e -> e
    java.util.Map f -> f
    java.lang.String g -> g
    cn.bmob.v3.datatype.a.darkness h -> h
    int i -> i
    int j -> j
    void <init>(cn.bmob.v3.a.b.This,java.io.File,java.util.Map,java.lang.String,cn.bmob.v3.datatype.a.darkness,cn.bmob.v3.datatype.a.I,cn.bmob.v3.datatype.a.mine) -> <init>
    void run() -> run
    void Code(int) -> Code
    void Code() -> Code
    void V() -> V
    byte[] V(int) -> V
    int[] Code(org.json.JSONArray) -> Code
    java.lang.String Code(java.util.Map) -> Code
cn.bmob.v3.exception.BmobException -> cn.bmob.v3.exception.BmobException:
    long serialVersionUID -> serialVersionUID
    int Code -> Code
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(int) -> <init>
    void <init>(int,java.lang.String) -> <init>
    void <init>(int,java.lang.String,java.lang.Throwable) -> <init>
    void <init>(int,java.lang.Throwable) -> <init>
    int getErrorCode() -> getErrorCode
    java.lang.String toString() -> toString
cn.bmob.v3.helper.BmobNative -> cn.bmob.v3.helper.BmobNative:
    void <init>() -> <init>
    boolean init(android.content.Context,java.lang.String) -> init
    java.lang.String getAppId() -> getAppId
    void saveKey(java.lang.String) -> saveKey
    boolean hasKey() -> hasKey
    void saveInterval(java.lang.String) -> saveInterval
    java.lang.String getInterval() -> getInterval
    java.lang.String getAcceptId() -> getAcceptId
    java.lang.String encrypt(java.lang.String,java.lang.String) -> encrypt
    java.lang.String decrypt(java.lang.String,java.lang.String) -> decrypt
    java.lang.String encryptByKey(java.lang.String) -> encryptByKey
    java.lang.String decryptByKey(java.lang.String) -> decryptByKey
    void clear() -> clear
    void <clinit>() -> <clinit>
cn.bmob.v3.helper.ErrorCode -> cn.bmob.v3.helper.ErrorCode:
    int E101 -> E101
    int E9001 -> E9001
    int E9002 -> E9002
    int E9003 -> E9003
    int E9004 -> E9004
    int E9005 -> E9005
    int E9006 -> E9006
    int E9007 -> E9007
    int E9008 -> E9008
    int E9009 -> E9009
    int E9010 -> E9010
    int E9011 -> E9011
    int E9012 -> E9012
    int E9013 -> E9013
    int E9014 -> E9014
    int E9015 -> E9015
    int E9016 -> E9016
    int E9017 -> E9017
    int E9018 -> E9018
    int E9019 -> E9019
    int E9020 -> E9020
    int E9021 -> E9021
    int E9022 -> E9022
    java.lang.String E9001S -> E9001S
    java.lang.String E9011S -> E9011S
    java.lang.String E9012S -> E9012S
    java.lang.String E9013S -> E9013S
    java.lang.String E9016S -> E9016S
    java.lang.String E9021S -> E9021S
    java.lang.String E9022S -> E9022S
    void <init>() -> <init>
cn.bmob.v3.helper.GsonUtil -> cn.bmob.v3.helper.GsonUtil:
    void <init>() -> <init>
    java.util.List toList(java.lang.String) -> toList
    java.lang.Object toObject(java.lang.String,java.lang.Class) -> toObject
    java.lang.Object toObject(com.google.gson.JsonElement,java.lang.Class) -> toObject
    java.lang.String toJson(java.lang.Object) -> toJson
    java.lang.String mapToJson(java.util.Map) -> mapToJson
    java.util.Map toMap(java.lang.String) -> toMap
cn.bmob.v3.helper.GsonUtil$1 -> cn.bmob.v3.helper.GsonUtil$1:
    void <init>() -> <init>
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
cn.bmob.v3.helper.GsonUtil$2 -> cn.bmob.v3.helper.GsonUtil$2:
    void <init>() -> <init>
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
cn.bmob.v3.helper.GsonUtil$3 -> cn.bmob.v3.helper.GsonUtil$3:
    void <init>() -> <init>
cn.bmob.v3.helper.NotificationCompat -> cn.bmob.v3.helper.NotificationCompat:
    int FLAG_HIGH_PRIORITY -> FLAG_HIGH_PRIORITY
    int PRIORITY_DEFAULT -> PRIORITY_DEFAULT
    int PRIORITY_LOW -> PRIORITY_LOW
    int PRIORITY_MIN -> PRIORITY_MIN
    int PRIORITY_HIGH -> PRIORITY_HIGH
    int PRIORITY_MAX -> PRIORITY_MAX
    cn.bmob.v3.helper.NotificationCompat$thing Code -> Code
    void <init>() -> <init>
    cn.bmob.v3.helper.NotificationCompat$thing Code() -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.helper.NotificationCompat$Action -> cn.bmob.v3.helper.NotificationCompat$Action:
    int icon -> icon
    java.lang.CharSequence title -> title
    android.app.PendingIntent actionIntent -> actionIntent
    void <init>(int,java.lang.CharSequence,android.app.PendingIntent) -> <init>
cn.bmob.v3.helper.NotificationCompat$BigPictureStyle -> cn.bmob.v3.helper.NotificationCompat$BigPictureStyle:
    android.graphics.Bitmap Code -> Code
    android.graphics.Bitmap V -> V
    boolean I -> I
    void <init>() -> <init>
    void <init>(cn.bmob.v3.helper.NotificationCompat$Builder) -> <init>
    cn.bmob.v3.helper.NotificationCompat$BigPictureStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    cn.bmob.v3.helper.NotificationCompat$BigPictureStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    cn.bmob.v3.helper.NotificationCompat$BigPictureStyle bigPicture(android.graphics.Bitmap) -> bigPicture
    cn.bmob.v3.helper.NotificationCompat$BigPictureStyle bigLargeIcon(android.graphics.Bitmap) -> bigLargeIcon
cn.bmob.v3.helper.NotificationCompat$BigTextStyle -> cn.bmob.v3.helper.NotificationCompat$BigTextStyle:
    java.lang.CharSequence Code -> Code
    void <init>() -> <init>
    void <init>(cn.bmob.v3.helper.NotificationCompat$Builder) -> <init>
    cn.bmob.v3.helper.NotificationCompat$BigTextStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    cn.bmob.v3.helper.NotificationCompat$BigTextStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    cn.bmob.v3.helper.NotificationCompat$BigTextStyle bigText(java.lang.CharSequence) -> bigText
cn.bmob.v3.helper.NotificationCompat$Builder -> cn.bmob.v3.helper.NotificationCompat$Builder:
    android.content.Context Code -> Code
    java.lang.CharSequence V -> V
    java.lang.CharSequence I -> I
    android.app.PendingIntent Z -> Z
    android.app.PendingIntent B -> B
    android.widget.RemoteViews C -> C
    android.graphics.Bitmap S -> S
    java.lang.CharSequence F -> F
    int D -> D
    int L -> L
    boolean a -> a
    cn.bmob.v3.helper.NotificationCompat$Style b -> b
    java.lang.CharSequence c -> c
    int d -> d
    int e -> e
    boolean f -> f
    java.util.ArrayList g -> g
    android.app.Notification h -> h
    void <init>(android.content.Context) -> <init>
    cn.bmob.v3.helper.NotificationCompat$Builder setWhen(long) -> setWhen
    cn.bmob.v3.helper.NotificationCompat$Builder setUsesChronometer(boolean) -> setUsesChronometer
    cn.bmob.v3.helper.NotificationCompat$Builder setSmallIcon(int) -> setSmallIcon
    cn.bmob.v3.helper.NotificationCompat$Builder setSmallIcon(int,int) -> setSmallIcon
    cn.bmob.v3.helper.NotificationCompat$Builder setContentTitle(java.lang.CharSequence) -> setContentTitle
    cn.bmob.v3.helper.NotificationCompat$Builder setContentText(java.lang.CharSequence) -> setContentText
    cn.bmob.v3.helper.NotificationCompat$Builder setSubText(java.lang.CharSequence) -> setSubText
    cn.bmob.v3.helper.NotificationCompat$Builder setNumber(int) -> setNumber
    cn.bmob.v3.helper.NotificationCompat$Builder setContentInfo(java.lang.CharSequence) -> setContentInfo
    cn.bmob.v3.helper.NotificationCompat$Builder setProgress(int,int,boolean) -> setProgress
    cn.bmob.v3.helper.NotificationCompat$Builder setContent(android.widget.RemoteViews) -> setContent
    cn.bmob.v3.helper.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> setContentIntent
    cn.bmob.v3.helper.NotificationCompat$Builder setDeleteIntent(android.app.PendingIntent) -> setDeleteIntent
    cn.bmob.v3.helper.NotificationCompat$Builder setFullScreenIntent(android.app.PendingIntent,boolean) -> setFullScreenIntent
    cn.bmob.v3.helper.NotificationCompat$Builder setTicker(java.lang.CharSequence) -> setTicker
    cn.bmob.v3.helper.NotificationCompat$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews) -> setTicker
    cn.bmob.v3.helper.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap) -> setLargeIcon
    cn.bmob.v3.helper.NotificationCompat$Builder setSound(android.net.Uri) -> setSound
    cn.bmob.v3.helper.NotificationCompat$Builder setSound(android.net.Uri,int) -> setSound
    cn.bmob.v3.helper.NotificationCompat$Builder setVibrate(long[]) -> setVibrate
    cn.bmob.v3.helper.NotificationCompat$Builder setLights(int,int,int) -> setLights
    cn.bmob.v3.helper.NotificationCompat$Builder setOngoing(boolean) -> setOngoing
    cn.bmob.v3.helper.NotificationCompat$Builder setOnlyAlertOnce(boolean) -> setOnlyAlertOnce
    cn.bmob.v3.helper.NotificationCompat$Builder setAutoCancel(boolean) -> setAutoCancel
    cn.bmob.v3.helper.NotificationCompat$Builder setDefaults(int) -> setDefaults
    void Code(int,boolean) -> Code
    cn.bmob.v3.helper.NotificationCompat$Builder setPriority(int) -> setPriority
    cn.bmob.v3.helper.NotificationCompat$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> addAction
    cn.bmob.v3.helper.NotificationCompat$Builder setStyle(cn.bmob.v3.helper.NotificationCompat$Style) -> setStyle
    android.app.Notification getNotification() -> getNotification
    android.app.Notification build() -> build
cn.bmob.v3.helper.NotificationCompat$I -> cn.bmob.v3.helper.NotificationCompat$I:
    void <init>() -> <init>
    android.app.Notification Code(cn.bmob.v3.helper.NotificationCompat$Builder) -> Code
cn.bmob.v3.helper.NotificationCompat$InboxStyle -> cn.bmob.v3.helper.NotificationCompat$InboxStyle:
    java.util.ArrayList Code -> Code
    void <init>() -> <init>
    void <init>(cn.bmob.v3.helper.NotificationCompat$Builder) -> <init>
    cn.bmob.v3.helper.NotificationCompat$InboxStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    cn.bmob.v3.helper.NotificationCompat$InboxStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    cn.bmob.v3.helper.NotificationCompat$InboxStyle addLine(java.lang.CharSequence) -> addLine
cn.bmob.v3.helper.NotificationCompat$Style -> cn.bmob.v3.helper.NotificationCompat$Style:
    cn.bmob.v3.helper.NotificationCompat$Builder Code -> Code
    java.lang.CharSequence Z -> Z
    java.lang.CharSequence B -> B
    boolean C -> C
    void <init>() -> <init>
    void setBuilder(cn.bmob.v3.helper.NotificationCompat$Builder) -> setBuilder
    android.app.Notification build() -> build
cn.bmob.v3.helper.NotificationCompat$This -> cn.bmob.v3.helper.NotificationCompat$This:
    void <init>() -> <init>
    android.app.Notification Code(cn.bmob.v3.helper.NotificationCompat$Builder) -> Code
cn.bmob.v3.helper.NotificationCompat$acknowledge -> cn.bmob.v3.helper.NotificationCompat$acknowledge:
    void <init>() -> <init>
    android.app.Notification Code(cn.bmob.v3.helper.NotificationCompat$Builder) -> Code
cn.bmob.v3.helper.NotificationCompat$darkness -> cn.bmob.v3.helper.NotificationCompat$darkness:
    void <init>() -> <init>
    android.app.Notification Code(cn.bmob.v3.helper.NotificationCompat$Builder) -> Code
cn.bmob.v3.helper.NotificationCompat$mine -> cn.bmob.v3.helper.NotificationCompat$mine:
    android.app.Notification$Builder Code -> Code
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean,boolean,int,java.lang.CharSequence) -> <init>
    void Code(int,java.lang.CharSequence,android.app.PendingIntent) -> Code
    void Code(java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> Code
    void Code(java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap,android.graphics.Bitmap,boolean) -> Code
    void Code(java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> Code
    android.app.Notification Code() -> Code
cn.bmob.v3.helper.NotificationCompat$of -> cn.bmob.v3.helper.NotificationCompat$of:
    void <init>() -> <init>
    android.app.Notification Code(cn.bmob.v3.helper.NotificationCompat$Builder) -> Code
cn.bmob.v3.helper.NotificationCompat$thing -> cn.bmob.v3.helper.NotificationCompat$thing:
    android.app.Notification Code(cn.bmob.v3.helper.NotificationCompat$Builder) -> Code
cn.bmob.v3.helper.RequestHelper -> cn.bmob.v3.helper.RequestHelper:
    char[] Code -> Code
    byte[] V -> V
    void <init>() -> <init>
    java.lang.String encode(byte[]) -> encode
    byte[] decode(java.lang.String) -> decode
    java.lang.String Code(android.content.Context) -> Code
    java.lang.String getUserAgent(android.content.Context) -> getUserAgent
    java.lang.String getKey1(java.lang.String) -> getKey1
    java.lang.String getKey2(java.lang.String) -> getKey2
    java.lang.String getKey3(java.lang.String) -> getKey3
    void <clinit>() -> <clinit>
cn.bmob.v3.http.I -> cn.bmob.v3.http.I:
    int Code -> Code
    org.json.JSONObject V -> V
    org.json.JSONObject I -> I
    java.lang.Class Z -> Z
    org.json.JSONObject B -> B
    java.lang.String C -> C
    java.lang.Integer S -> S
    java.lang.Integer F -> F
    java.lang.String D -> D
    java.lang.String L -> L
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    boolean g -> g
    org.json.JSONObject h -> h
    java.lang.String i -> i
    java.lang.Object[] j -> j
    void <init>() -> <init>
    void Code(int) -> Code
    void Code(java.lang.Class) -> Code
    void Code(java.lang.Integer) -> Code
    void V(java.lang.Integer) -> V
    void Code(java.lang.String) -> Code
    void V(java.lang.String) -> V
    org.json.JSONObject Code() -> Code
    void I(java.lang.String) -> I
    org.json.JSONObject V() -> V
    void Code(java.lang.String,cn.bmob.v3.datatype.BmobGeoPoint,double) -> Code
    void V(java.lang.String,cn.bmob.v3.datatype.BmobGeoPoint,double) -> V
    void I(java.lang.String,cn.bmob.v3.datatype.BmobGeoPoint,double) -> I
    void Code(java.lang.String,java.lang.String,cn.bmob.v3.datatype.BmobGeoPoint,double) -> Code
    void Z(java.lang.String) -> Z
    void Code(java.lang.String,java.lang.String,java.lang.Object) -> Code
    void Code(boolean) -> Code
    void Code(java.lang.String[]) -> Code
    void V(java.lang.String[]) -> V
    void I(java.lang.String[]) -> I
    void Z(java.lang.String[]) -> Z
    void B(java.lang.String[]) -> B
    void Code(java.util.HashMap) -> Code
    void B(java.lang.String) -> B
    void Code(java.lang.Object[]) -> Code
    org.json.JSONObject I() -> I
cn.bmob.v3.http.This -> cn.bmob.v3.http.This:
    okhttp3.MediaType Code -> Code
    boolean I -> I
    int V -> V
    cn.bmob.v3.http.This Z -> Z
    byte[] B -> B
    okhttp3.OkHttpClient C -> C
    rx.Observable$Transformer S -> S
    boolean Code() -> Code
    void <init>() -> <init>
    cn.bmob.v3.http.This V() -> V
    rx.Observable Z() -> Z
    rx.Observable B() -> B
    rx.Observable Code(java.lang.String,org.json.JSONObject) -> Code
    rx.Observable$Transformer I() -> I
    rx.Observable I(java.lang.String,org.json.JSONObject) -> I
    rx.Observable Code(java.lang.Class,java.lang.String,org.json.JSONObject) -> Code
    okhttp3.Request V(java.lang.String,org.json.JSONObject) -> V
    org.json.JSONObject Code(android.content.Context,org.json.JSONObject,java.lang.String) -> Code
    org.json.JSONObject Code(android.content.Context,org.json.JSONObject) -> Code
    boolean Code(boolean) -> Code
    void Code(cn.bmob.v3.http.This,cn.bmob.v3.http.bean.Init) -> Code
    rx.Observable Code(cn.bmob.v3.http.This,java.lang.String,org.json.JSONObject) -> Code
    rx.Observable Code(cn.bmob.v3.http.This) -> Code
    okhttp3.OkHttpClient V(cn.bmob.v3.http.This) -> V
    void <clinit>() -> <clinit>
cn.bmob.v3.http.This$1 -> cn.bmob.v3.http.This$1:
    java.lang.String Code -> Code
    org.json.JSONObject V -> V
    cn.bmob.v3.http.This I -> I
    void <init>(cn.bmob.v3.http.This,java.lang.String,org.json.JSONObject) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.This$2 -> cn.bmob.v3.http.This$2:
    cn.bmob.v3.http.This Code -> Code
    void <init>(cn.bmob.v3.http.This) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.This$3 -> cn.bmob.v3.http.This$3:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.This$4 -> cn.bmob.v3.http.This$4:
    java.lang.String Code -> Code
    org.json.JSONObject V -> V
    cn.bmob.v3.http.This I -> I
    void <init>(cn.bmob.v3.http.This,java.lang.String,org.json.JSONObject) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.This$5 -> cn.bmob.v3.http.This$5:
    java.lang.String Code -> Code
    org.json.JSONObject V -> V
    java.lang.Class I -> I
    cn.bmob.v3.http.This Z -> Z
    void <init>(cn.bmob.v3.http.This,java.lang.String,org.json.JSONObject,java.lang.Class) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.a.From -> cn.bmob.v3.http.a.From:
    void <init>() -> <init>
    rx.Subscription Code(java.lang.Class,java.util.List,java.lang.String,org.json.JSONObject,long,cn.bmob.v3.listener.BmobCallback) -> Code
    boolean Code() -> Code
    cn.bmob.v3.BmobQuery$CachePolicy V() -> V
    rx.Subscription Code(rx.Observable,cn.bmob.v3.listener.QueryListener) -> Code
    rx.Observable Code(java.util.List,org.json.JSONObject,long) -> Code
    rx.Observable Code(java.util.List,java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.BmobCallback) -> Code
    boolean Code(java.lang.String,cn.bmob.v3.listener.BmobCallback) -> Code
    void Code(java.lang.Class,java.lang.String,cn.bmob.v3.listener.BmobCallback) -> Code
    void Code(java.lang.Throwable,cn.bmob.v3.listener.BmobCallback) -> Code
    boolean Code(cn.bmob.v3.http.a.From,java.lang.String,cn.bmob.v3.listener.BmobCallback) -> Code
cn.bmob.v3.http.a.From$1 -> cn.bmob.v3.http.a.From$1:
    cn.bmob.v3.listener.QueryListener Code -> Code
    cn.bmob.v3.http.a.From V -> V
    void <init>(cn.bmob.v3.http.a.From,cn.bmob.v3.listener.QueryListener) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
cn.bmob.v3.http.a.From$2 -> cn.bmob.v3.http.a.From$2:
    org.json.JSONObject Code -> Code
    long V -> V
    cn.bmob.v3.http.a.From I -> I
    void <init>(cn.bmob.v3.http.a.From,org.json.JSONObject,long) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.a.From$3 -> cn.bmob.v3.http.a.From$3:
    cn.bmob.v3.listener.BmobCallback Code -> Code
    org.json.JSONObject V -> V
    cn.bmob.v3.http.a.From I -> I
    void <init>(cn.bmob.v3.http.a.From,cn.bmob.v3.listener.BmobCallback,org.json.JSONObject) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.a.From$3$1 -> cn.bmob.v3.http.a.From$3$1:
    java.lang.String Code -> Code
    rx.Scheduler$Worker V -> V
    cn.bmob.v3.http.a.From$3 I -> I
    void <init>(cn.bmob.v3.http.a.From$3,java.lang.String,rx.Scheduler$Worker) -> <init>
    void call() -> call
cn.bmob.v3.http.a.I -> cn.bmob.v3.http.a.I:
    void <init>() -> <init>
    rx.Subscription Code(java.lang.Class,java.util.List,java.lang.String,org.json.JSONObject,long,cn.bmob.v3.listener.BmobCallback) -> Code
    boolean Code() -> Code
    cn.bmob.v3.BmobQuery$CachePolicy V() -> V
cn.bmob.v3.http.a.I$1 -> cn.bmob.v3.http.a.I$1:
    java.util.List Z -> Z
    org.json.JSONObject B -> B
    long C -> C
    java.lang.Class Code -> Code
    cn.bmob.v3.listener.BmobCallback V -> V
    cn.bmob.v3.http.a.I I -> I
    void <init>(cn.bmob.v3.http.a.I,java.util.List,org.json.JSONObject,long,java.lang.Class,cn.bmob.v3.listener.BmobCallback) -> <init>
    void Code(java.lang.String,cn.bmob.v3.exception.BmobException) -> Code
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.http.a.I$1$1 -> cn.bmob.v3.http.a.I$1$1:
    cn.bmob.v3.http.a.I$1 Code -> Code
    void <init>(cn.bmob.v3.http.a.I$1) -> <init>
    void Code(java.lang.String,cn.bmob.v3.exception.BmobException) -> Code
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.http.a.This -> cn.bmob.v3.http.a.This:
    void <init>() -> <init>
    rx.Subscription Code(java.lang.Class,java.util.List,java.lang.String,org.json.JSONObject,long,cn.bmob.v3.listener.BmobCallback) -> Code
    boolean Code() -> Code
    cn.bmob.v3.BmobQuery$CachePolicy V() -> V
cn.bmob.v3.http.a.This$1 -> cn.bmob.v3.http.a.This$1:
    java.lang.Class Code -> Code
    cn.bmob.v3.listener.BmobCallback V -> V
    java.util.List Z -> Z
    java.lang.String B -> B
    org.json.JSONObject C -> C
    cn.bmob.v3.http.a.This I -> I
    void <init>(cn.bmob.v3.http.a.This,java.lang.Class,cn.bmob.v3.listener.BmobCallback,java.util.List,java.lang.String,org.json.JSONObject) -> <init>
    void Code(java.lang.String,cn.bmob.v3.exception.BmobException) -> Code
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.http.a.This$1$1 -> cn.bmob.v3.http.a.This$1$1:
    cn.bmob.v3.http.a.This$1 Code -> Code
    void <init>(cn.bmob.v3.http.a.This$1) -> <init>
    void Code(java.lang.String,cn.bmob.v3.exception.BmobException) -> Code
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.http.a.acknowledge -> cn.bmob.v3.http.a.acknowledge:
    void <init>() -> <init>
    rx.Subscription Code(java.lang.Class,java.util.List,java.lang.String,org.json.JSONObject,long,cn.bmob.v3.listener.BmobCallback) -> Code
    boolean Code() -> Code
    cn.bmob.v3.BmobQuery$CachePolicy V() -> V
cn.bmob.v3.http.a.acknowledge$1 -> cn.bmob.v3.http.a.acknowledge$1:
    java.lang.Class Code -> Code
    cn.bmob.v3.listener.BmobCallback V -> V
    cn.bmob.v3.http.a.acknowledge I -> I
    void <init>(cn.bmob.v3.http.a.acknowledge,java.lang.Class,cn.bmob.v3.listener.BmobCallback) -> <init>
    void Code(java.lang.String,cn.bmob.v3.exception.BmobException) -> Code
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.http.a.darkness -> cn.bmob.v3.http.a.darkness:
    void <init>() -> <init>
    rx.Subscription Code(java.lang.Class,java.util.List,java.lang.String,org.json.JSONObject,long,cn.bmob.v3.listener.BmobCallback) -> Code
    boolean Code() -> Code
    cn.bmob.v3.BmobQuery$CachePolicy V() -> V
cn.bmob.v3.http.a.darkness$1 -> cn.bmob.v3.http.a.darkness$1:
    java.lang.Class Code -> Code
    cn.bmob.v3.listener.BmobCallback V -> V
    cn.bmob.v3.http.a.darkness I -> I
    void <init>(cn.bmob.v3.http.a.darkness,java.lang.Class,cn.bmob.v3.listener.BmobCallback) -> <init>
    void Code(java.lang.String,cn.bmob.v3.exception.BmobException) -> Code
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.http.a.mine -> cn.bmob.v3.http.a.mine:
    java.util.Map Code -> Code
    cn.bmob.v3.http.a.mine V -> V
    byte[] I -> I
    void <init>() -> <init>
    cn.bmob.v3.http.a.mine Code() -> Code
    rx.Subscription Code(java.lang.String,java.lang.Class,cn.bmob.v3.BmobQuery$CachePolicy,long,java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.BmobCallback) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.http.a.of -> cn.bmob.v3.http.a.of:
    void <init>() -> <init>
    rx.Subscription Code(java.lang.Class,java.util.List,java.lang.String,org.json.JSONObject,long,cn.bmob.v3.listener.BmobCallback) -> Code
    boolean Code() -> Code
    cn.bmob.v3.BmobQuery$CachePolicy V() -> V
cn.bmob.v3.http.a.of$1 -> cn.bmob.v3.http.a.of$1:
    java.lang.Class Code -> Code
    cn.bmob.v3.listener.BmobCallback V -> V
    cn.bmob.v3.http.a.of I -> I
    void <init>(cn.bmob.v3.http.a.of,java.lang.Class,cn.bmob.v3.listener.BmobCallback) -> <init>
    void Code(java.lang.String,cn.bmob.v3.exception.BmobException) -> Code
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.http.a.thing -> cn.bmob.v3.http.a.thing:
    void <init>() -> <init>
    rx.Subscription Code(java.lang.Class,java.util.List,java.lang.String,org.json.JSONObject,long,cn.bmob.v3.listener.BmobCallback) -> Code
    boolean Code() -> Code
    cn.bmob.v3.BmobQuery$CachePolicy V() -> V
cn.bmob.v3.http.a.thing$1 -> cn.bmob.v3.http.a.thing$1:
    java.lang.Class Code -> Code
    cn.bmob.v3.listener.BmobCallback V -> V
    cn.bmob.v3.http.a.thing I -> I
    void <init>(cn.bmob.v3.http.a.thing,java.lang.Class,cn.bmob.v3.listener.BmobCallback) -> <init>
    void Code(java.lang.String,cn.bmob.v3.exception.BmobException) -> Code
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.http.acknowledge -> cn.bmob.v3.http.acknowledge:
    javax.security.auth.x500.X500Principal Code -> Code
    java.lang.String Code() -> Code
    java.lang.String Code(java.lang.String,java.lang.String) -> Code
    java.lang.String V(java.lang.String,java.lang.String) -> V
    java.lang.String Code(java.lang.String) -> Code
    java.lang.String V(java.lang.String) -> V
    java.lang.String V() -> V
    long I() -> I
    java.lang.String Code(android.content.Context) -> Code
    java.lang.String Z(android.content.Context) -> Z
    boolean B(android.content.Context) -> B
    java.lang.String V(android.content.Context) -> V
    java.lang.String I(android.content.Context) -> I
    java.lang.String C(android.content.Context) -> C
    java.lang.String Z() -> Z
    java.lang.String S(android.content.Context) -> S
    java.lang.String F(android.content.Context) -> F
    java.lang.String D(android.content.Context) -> D
    boolean Code(android.content.Context,java.lang.String) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.http.b.This -> cn.bmob.v3.http.b.This:
    void <init>() -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
cn.bmob.v3.http.b.This$1 -> cn.bmob.v3.http.b.This$1:
    okhttp3.RequestBody Code -> Code
    void <init>(cn.bmob.v3.http.b.This,okhttp3.RequestBody) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
cn.bmob.v3.http.b.of -> cn.bmob.v3.http.b.of:
    void <init>() -> <init>
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
cn.bmob.v3.http.b.thing -> cn.bmob.v3.http.b.thing:
    java.nio.charset.Charset Code -> Code
    cn.bmob.v3.http.b.thing$thing V -> V
    int I -> I
    void <init>() -> <init>
    void <init>(cn.bmob.v3.http.b.thing$thing) -> <init>
    cn.bmob.v3.http.b.thing Code(int) -> Code
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    boolean Code(okhttp3.Headers) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.http.b.thing$This -> cn.bmob.v3.http.b.thing$This:
    int Code -> Code
    int Z -> Z
    int V -> V
    int I -> I
    int[] B -> B
    void <clinit>() -> <clinit>
cn.bmob.v3.http.b.thing$thing -> cn.bmob.v3.http.b.thing$thing:
    cn.bmob.v3.http.b.thing$thing Code -> Code
    void Code(java.lang.String) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.http.b.thing$thing$1 -> cn.bmob.v3.http.b.thing$thing$1:
    void <init>() -> <init>
    void Code(java.lang.String) -> Code
cn.bmob.v3.http.bean.Api -> cn.bmob.v3.http.bean.Api:
    cn.bmob.v3.http.bean.Result result -> result
    com.google.gson.JsonElement data -> data
    void <init>() -> <init>
    com.google.gson.JsonElement getData() -> getData
    void setData(com.google.gson.JsonElement) -> setData
    cn.bmob.v3.http.bean.Result getResult() -> getResult
    void setResult(cn.bmob.v3.http.bean.Result) -> setResult
    java.lang.String toString() -> toString
cn.bmob.v3.http.bean.CDN -> cn.bmob.v3.http.bean.CDN:
    cn.bmob.v3.http.bean.Upyun upyun -> upyun
    cn.bmob.v3.http.bean.CDN parse(java.lang.String) -> parse
    void <init>(cn.bmob.v3.http.bean.Upyun) -> <init>
    cn.bmob.v3.http.bean.Upyun getUpyun() -> getUpyun
    void setUpyun(cn.bmob.v3.http.bean.Upyun) -> setUpyun
cn.bmob.v3.http.bean.Init -> cn.bmob.v3.http.bean.Init:
    java.lang.String api -> api
    java.lang.String file -> file
    java.lang.String push -> push
    java.lang.String io -> io
    java.lang.String other -> other
    long timestamp -> timestamp
    boolean isUp -> isUp
    int upyunVer -> upyunVer
    cn.bmob.v3.http.bean.Migration migration -> migration
    void <init>() -> <init>
    java.lang.String getApi() -> getApi
    void setApi(java.lang.String) -> setApi
    java.lang.String getFile() -> getFile
    void setFile(java.lang.String) -> setFile
    java.lang.String getPush() -> getPush
    void setPush(java.lang.String) -> setPush
    java.lang.String getIo() -> getIo
    void setIo(java.lang.String) -> setIo
    java.lang.String getOther() -> getOther
    void setOther(java.lang.String) -> setOther
    long getTimestamp() -> getTimestamp
    void setTimestamp(long) -> setTimestamp
    boolean isUp() -> isUp
    void setUp(boolean) -> setUp
    int getUpyunVer() -> getUpyunVer
    void setUpyunVer(int) -> setUpyunVer
    void setMigration(cn.bmob.v3.http.bean.Migration) -> setMigration
    cn.bmob.v3.http.bean.Migration getMigration() -> getMigration
cn.bmob.v3.http.bean.Migration -> cn.bmob.v3.http.bean.Migration:
    java.lang.String BATCH -> BATCH
    java.lang.String CDN -> CDN
    java.lang.String CLOUD_QUERY -> CLOUD_QUERY
    java.lang.String CREATE -> CREATE
    java.lang.String DELCDNBATCH -> DELCDNBATCH
    java.lang.String DELCDNUPLOAD -> DELCDNUPLOAD
    java.lang.String DELETE -> DELETE
    java.lang.String DEVICE -> DEVICE
    java.lang.String EMAIL_VERIFY -> EMAIL_VERIFY
    java.lang.String FIND -> FIND
    java.lang.String FUNCTIONS -> FUNCTIONS
    java.lang.String LOGIN -> LOGIN
    java.lang.String LOGIN_OR_SIGNUP -> LOGIN_OR_SIGNUP
    java.lang.String PAY -> PAY
    java.lang.String PAY_QUERY -> PAY_QUERY
    java.lang.String PHONE_RESET -> PHONE_RESET
    java.lang.String PUSH -> PUSH
    java.lang.String QUERY_SMS -> QUERY_SMS
    java.lang.String REQUEST_SMS -> REQUEST_SMS
    java.lang.String REQUEST_SMS_CODE -> REQUEST_SMS_CODE
    java.lang.String RESET -> RESET
    java.lang.String SAVECDNUPLOAD -> SAVECDNUPLOAD
    java.lang.String SCHEMAS -> SCHEMAS
    java.lang.String SIGNUP -> SIGNUP
    java.lang.String TCP_FILESERVER_URL -> TCP_FILESERVER_URL
    java.lang.String TIMESTAMP -> TIMESTAMP
    java.lang.String UPDATE -> UPDATE
    java.lang.String UPDATE_USER_PASSWORD -> UPDATE_USER_PASSWORD
    java.lang.String VERIFY_SMS_CODE -> VERIFY_SMS_CODE
    java.util.HashMap map -> map
    boolean isFirst -> isFirst
    java.util.List batch -> batch
    java.util.List cdn -> cdn
    java.util.List cloud_query -> cloud_query
    java.util.List create -> create
    java.util.List delcdnbatch -> delcdnbatch
    java.util.List delcdnupload -> delcdnupload
    java.util.List delete -> delete
    java.util.List device -> device
    java.util.List domain -> domain
    java.util.List email_verify -> email_verify
    java.util.List find -> find
    java.util.List functions -> functions
    java.util.List login -> login
    java.util.List login_or_signup -> login_or_signup
    java.util.List pay -> pay
    java.util.List pay_query -> pay_query
    java.util.List phone_reset -> phone_reset
    java.util.List push -> push
    java.util.List query_sms -> query_sms
    java.util.List request_sms -> request_sms
    java.util.List request_sms_code -> request_sms_code
    java.util.List reset -> reset
    java.util.List savecdnupload -> savecdnupload
    java.util.List schemas -> schemas
    java.util.List signup -> signup
    java.util.List tcp_fileserver_url -> tcp_fileserver_url
    java.util.List timestamp -> timestamp
    java.util.List update -> update
    java.util.List update_user_password -> update_user_password
    java.util.List verify_sms_code -> verify_sms_code
    void <init>() -> <init>
    void addToMap() -> addToMap
    java.lang.String getUrlByOption(java.lang.String) -> getUrlByOption
cn.bmob.v3.http.bean.R1 -> cn.bmob.v3.http.bean.R1:
    java.lang.Boolean b -> b
    cn.bmob.v3.exception.BmobException e -> e
    void <init>() -> <init>
    void <init>(java.lang.Boolean,cn.bmob.v3.exception.BmobException) -> <init>
    java.lang.Boolean getB() -> getB
    void setB(java.lang.Boolean) -> setB
    cn.bmob.v3.exception.BmobException getE() -> getE
    void setE(cn.bmob.v3.exception.BmobException) -> setE
cn.bmob.v3.http.bean.Result -> cn.bmob.v3.http.bean.Result:
    int code -> code
    java.lang.String message -> message
    void <init>() -> <init>
    int getCode() -> getCode
    void setCode(int) -> setCode
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
cn.bmob.v3.http.bean.Sk -> cn.bmob.v3.http.bean.Sk:
    java.lang.String secretKey -> secretKey
    void <init>() -> <init>
    java.lang.String getSecretKey() -> getSecretKey
    void setSecretKey(java.lang.String) -> setSecretKey
cn.bmob.v3.http.bean.Upyun -> cn.bmob.v3.http.bean.Upyun:
    java.lang.String name -> name
    java.lang.String domain -> domain
    java.lang.String secret -> secret
    cn.bmob.v3.http.bean.Upyun parse(org.json.JSONObject) -> parse
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getDomain() -> getDomain
    void setDomain(java.lang.String) -> setDomain
    java.lang.String getSecret() -> getSecret
    void setSecret(java.lang.String) -> setSecret
    java.lang.String toString() -> toString
cn.bmob.v3.http.c.This -> cn.bmob.v3.http.c.This:
    int Code -> Code
    int V -> V
    int I -> I
    void <init>(int,int) -> <init>
    java.lang.Object call(java.lang.Object) -> call
    int Code(cn.bmob.v3.http.c.This) -> Code
    int V(cn.bmob.v3.http.c.This) -> V
    int I(cn.bmob.v3.http.c.This) -> I
cn.bmob.v3.http.c.This$1 -> cn.bmob.v3.http.c.This$1:
    cn.bmob.v3.http.c.This Code -> Code
    void <init>(cn.bmob.v3.http.c.This) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.darkness -> cn.bmob.v3.http.darkness:
    cn.bmob.v3.http.darkness Code -> Code
    byte[] V -> V
    cn.bmob.v3.http.bean.Migration I -> I
    void <init>() -> <init>
    cn.bmob.v3.http.darkness Code() -> Code
    java.lang.String Code(java.lang.String,cn.bmob.v3.http.bean.Migration) -> Code
    java.lang.String Code(java.lang.String) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.http.mine -> cn.bmob.v3.http.mine:
    rx.Observable Code -> Code
    rx.Subscription V -> V
    void <init>() -> <init>
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    rx.Observable Code() -> Code
    rx.Subscription V() -> V
cn.bmob.v3.http.mine$This -> cn.bmob.v3.http.mine$This:
    rx.Observable Code -> Code
    rx.Subscription V -> V
    void <init>() -> <init>
    cn.bmob.v3.http.mine$This Code(boolean,java.util.List) -> Code
    cn.bmob.v3.http.mine$This Code(java.util.List) -> Code
    cn.bmob.v3.http.mine$This Code(rx.Observable$OnSubscribe) -> Code
    cn.bmob.v3.http.mine$This Code(rx.Observable) -> Code
    cn.bmob.v3.http.mine$This Code(java.lang.String,org.json.JSONObject) -> Code
    cn.bmob.v3.http.mine$This V(rx.Observable) -> V
    cn.bmob.v3.http.mine$This V(java.lang.String,org.json.JSONObject) -> V
    cn.bmob.v3.http.mine$This Code(rx.functions.Action1) -> Code
    cn.bmob.v3.http.mine$This Code(rx.Observable,rx.Observable) -> Code
    cn.bmob.v3.http.mine$This Code(rx.functions.Func1) -> Code
    cn.bmob.v3.http.mine$This Code() -> Code
    cn.bmob.v3.http.mine$This V() -> V
    cn.bmob.v3.http.mine$This I() -> I
    cn.bmob.v3.http.mine$This Z() -> Z
    cn.bmob.v3.http.mine$This B() -> B
    cn.bmob.v3.http.mine$This Code(cn.bmob.v3.listener.BmobCallback) -> Code
    cn.bmob.v3.http.mine$This Code(rx.Scheduler) -> Code
    cn.bmob.v3.http.mine$This V(cn.bmob.v3.listener.BmobCallback) -> V
    cn.bmob.v3.http.mine C() -> C
cn.bmob.v3.http.mine$This$1 -> cn.bmob.v3.http.mine$This$1:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$10 -> cn.bmob.v3.http.mine$This$10:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$11 -> cn.bmob.v3.http.mine$This$11:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    org.json.JSONArray Code(com.google.gson.JsonElement) -> Code
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$12 -> cn.bmob.v3.http.mine$This$12:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$13 -> cn.bmob.v3.http.mine$This$13:
    java.lang.Class Code -> Code
    void <init>(cn.bmob.v3.http.mine$This,java.lang.Class) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$14 -> cn.bmob.v3.http.mine$This$14:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    java.util.List Code(com.google.gson.JsonElement) -> Code
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$15 -> cn.bmob.v3.http.mine$This$15:
    cn.bmob.v3.listener.BmobCallback Code -> Code
    void <init>(cn.bmob.v3.http.mine$This,cn.bmob.v3.listener.BmobCallback) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$16 -> cn.bmob.v3.http.mine$This$16:
    cn.bmob.v3.listener.BmobCallback Code -> Code
    void <init>(cn.bmob.v3.http.mine$This,cn.bmob.v3.listener.BmobCallback) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
cn.bmob.v3.http.mine$This$17 -> cn.bmob.v3.http.mine$This$17:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$18 -> cn.bmob.v3.http.mine$This$18:
    java.util.List Code -> Code
    void <init>(cn.bmob.v3.http.mine$This,java.util.List) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$19 -> cn.bmob.v3.http.mine$This$19:
    java.util.List Code -> Code
    void <init>(cn.bmob.v3.http.mine$This,java.util.List) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$2 -> cn.bmob.v3.http.mine$This$2:
    rx.Observable Code -> Code
    void <init>(cn.bmob.v3.http.mine$This,rx.Observable) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$20 -> cn.bmob.v3.http.mine$This$20:
    java.util.List Code -> Code
    void <init>(cn.bmob.v3.http.mine$This,java.util.List) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$21 -> cn.bmob.v3.http.mine$This$21:
    java.util.List Code -> Code
    void <init>(cn.bmob.v3.http.mine$This,java.util.List) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$22 -> cn.bmob.v3.http.mine$This$22:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> call
cn.bmob.v3.http.mine$This$23 -> cn.bmob.v3.http.mine$This$23:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> call
cn.bmob.v3.http.mine$This$3 -> cn.bmob.v3.http.mine$This$3:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    org.json.JSONObject Code(com.google.gson.JsonElement) -> Code
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$4 -> cn.bmob.v3.http.mine$This$4:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    org.json.JSONArray Code(com.google.gson.JsonElement) -> Code
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$5 -> cn.bmob.v3.http.mine$This$5:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    cn.bmob.v3.http.bean.Upyun Code(com.google.gson.JsonElement) -> Code
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$6 -> cn.bmob.v3.http.mine$This$6:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$7 -> cn.bmob.v3.http.mine$This$7:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$8 -> cn.bmob.v3.http.mine$This$8:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.mine$This$9 -> cn.bmob.v3.http.mine$This$9:
    void <init>(cn.bmob.v3.http.mine$This) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.of -> cn.bmob.v3.http.of:
    android.os.PowerManager$WakeLock Code -> Code
    cn.bmob.v3.a.b.This V -> V
    cn.bmob.v3.listener.DownloadFileListener I -> I
    java.lang.String Z -> Z
    java.io.File B -> B
    android.content.Context C -> C
    void <init>(android.content.Context,java.lang.String,java.io.File,cn.bmob.v3.listener.DownloadFileListener) -> <init>
    void onPreExecute() -> onPreExecute
    cn.bmob.v3.exception.BmobException Code() -> Code
    java.lang.String Code(okhttp3.Response) -> Code
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
cn.bmob.v3.http.thing -> cn.bmob.v3.http.thing:
    cn.bmob.v3.http.thing Code -> Code
    byte[] V -> V
    void <init>() -> <init>
    cn.bmob.v3.http.thing Code() -> Code
    cn.bmob.v3.http.bean.R1 I() -> I
    cn.bmob.v3.http.bean.R1 V(java.lang.String,java.lang.String) -> V
    cn.bmob.v3.http.bean.R1 V(java.lang.Object,java.lang.String) -> V
    java.util.List Code(java.lang.Object,java.lang.String) -> Code
    java.util.List Code(java.lang.Object,java.lang.String,java.lang.Object,java.lang.String) -> Code
    java.util.List Code(java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.String) -> Code
    java.util.List Code(java.lang.String,java.lang.String) -> Code
    java.util.List Code(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> Code
    java.util.List Code(java.lang.String) -> Code
    java.util.List Code(org.json.JSONArray) -> Code
    cn.bmob.v3.http.mine Code(java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.BmobCallback) -> Code
    cn.bmob.v3.http.mine Code(java.util.List,java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.BmobCallback) -> Code
    cn.bmob.v3.http.mine V(java.util.List,java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.BmobCallback) -> V
    cn.bmob.v3.http.mine I(java.util.List,java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.BmobCallback) -> I
    cn.bmob.v3.http.mine Code(java.lang.Class,java.util.List,java.lang.String,org.json.JSONObject,cn.bmob.v3.listener.LogInListener) -> Code
    cn.bmob.v3.http.mine Code(cn.bmob.v3.listener.QueryListener) -> Code
    cn.bmob.v3.http.mine Code(org.json.JSONObject,cn.bmob.v3.listener.QueryListListener) -> Code
    cn.bmob.v3.http.mine Code(org.json.JSONObject,cn.bmob.v3.listener.QueryListener) -> Code
    cn.bmob.v3.http.mine V() -> V
    cn.bmob.v3.http.mine Code(java.lang.String,java.lang.String,long,cn.bmob.v3.listener.UpdateListener) -> Code
    rx.Observable Code(java.lang.String,java.lang.String,long) -> Code
    cn.bmob.v3.http.mine Code(java.util.List,java.lang.String,cn.bmob.v3.listener.UpdateListener) -> Code
    cn.bmob.v3.http.mine Code(java.lang.String[],cn.bmob.v3.listener.DeleteBatchListener) -> Code
    rx.Subscription Code(cn.bmob.v3.http.thing,java.lang.String,java.lang.String,long,cn.bmob.v3.listener.UpdateListener) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.http.thing$1 -> cn.bmob.v3.http.thing$1:
    void <init>(cn.bmob.v3.http.thing) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.thing$2 -> cn.bmob.v3.http.thing$2:
    void <init>(cn.bmob.v3.http.thing) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.thing$3 -> cn.bmob.v3.http.thing$3:
    void <init>(cn.bmob.v3.http.thing) -> <init>
    java.util.List Code(com.google.gson.JsonElement) -> Code
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.thing$4 -> cn.bmob.v3.http.thing$4:
    void <init>(cn.bmob.v3.http.thing) -> <init>
    cn.bmob.v3.datatype.BmobTableSchema Code(com.google.gson.JsonElement) -> Code
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.http.thing$5 -> cn.bmob.v3.http.thing$5:
    void <init>(cn.bmob.v3.http.thing) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.thing$5$1 -> cn.bmob.v3.http.thing$5$1:
    cn.bmob.v3.http.bean.Upyun Code -> Code
    void <init>(cn.bmob.v3.http.thing$5,cn.bmob.v3.http.bean.Upyun) -> <init>
    void call() -> call
cn.bmob.v3.http.thing$6 -> cn.bmob.v3.http.thing$6:
    java.lang.String Code -> Code
    java.lang.String V -> V
    long I -> I
    cn.bmob.v3.http.thing Z -> Z
    void <init>(cn.bmob.v3.http.thing,java.lang.String,java.lang.String,long) -> <init>
    void call(java.lang.Object) -> call
cn.bmob.v3.http.thing$6$1 -> cn.bmob.v3.http.thing$6$1:
    rx.Subscriber Code -> Code
    void <init>(cn.bmob.v3.http.thing$6,rx.Subscriber) -> <init>
    void done(cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object) -> done
cn.bmob.v3.listener.BmobCallback -> cn.bmob.v3.listener.BmobCallback:
    void <init>() -> <init>
    void onStart() -> onStart
    void onFinish() -> onFinish
    void internalStart() -> internalStart
cn.bmob.v3.listener.BmobCallback$1 -> cn.bmob.v3.listener.BmobCallback$1:
    cn.bmob.v3.listener.BmobCallback Code -> Code
    void <init>(cn.bmob.v3.listener.BmobCallback) -> <init>
    void run() -> run
cn.bmob.v3.listener.BmobCallback1 -> cn.bmob.v3.listener.BmobCallback1:
    void <init>() -> <init>
    void done(java.lang.Object) -> done
cn.bmob.v3.listener.BmobCallback2 -> cn.bmob.v3.listener.BmobCallback2:
    void <init>() -> <init>
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.BmobDialogButtonListener -> cn.bmob.v3.listener.BmobDialogButtonListener:
    void onClick(int) -> onClick
cn.bmob.v3.listener.BmobErrorCallback -> cn.bmob.v3.listener.BmobErrorCallback:
    void <init>() -> <init>
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void doneError(int,java.lang.String) -> doneError
cn.bmob.v3.listener.BmobErrorCallback$1 -> cn.bmob.v3.listener.BmobErrorCallback$1:
    int Code -> Code
    java.lang.String V -> V
    cn.bmob.v3.listener.BmobErrorCallback I -> I
    void <init>(cn.bmob.v3.listener.BmobErrorCallback,int,java.lang.String) -> <init>
    void run() -> run
cn.bmob.v3.listener.BmobUpdateListener -> cn.bmob.v3.listener.BmobUpdateListener:
    void onUpdateReturned(int,cn.bmob.v3.update.UpdateResponse) -> onUpdateReturned
cn.bmob.v3.listener.CloudCodeListener -> cn.bmob.v3.listener.CloudCodeListener:
    void <init>() -> <init>
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.CountListener -> cn.bmob.v3.listener.CountListener:
    void <init>() -> <init>
    void done(java.lang.Integer,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.DeleteBatchListener -> cn.bmob.v3.listener.DeleteBatchListener:
    void <init>() -> <init>
    void done(java.lang.String[],cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.DownloadFileListener -> cn.bmob.v3.listener.DownloadFileListener:
    void <init>() -> <init>
    void done(java.lang.String,cn.bmob.v3.exception.BmobException) -> done
    void doneError(int,java.lang.String) -> doneError
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
cn.bmob.v3.listener.DownloadFileListener$1 -> cn.bmob.v3.listener.DownloadFileListener$1:
    int Code -> Code
    java.lang.String V -> V
    cn.bmob.v3.listener.DownloadFileListener I -> I
    void <init>(cn.bmob.v3.listener.DownloadFileListener,int,java.lang.String) -> <init>
    void run() -> run
cn.bmob.v3.listener.FindListener -> cn.bmob.v3.listener.FindListener:
    void <init>() -> <init>
    void done(java.util.List,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.LogInListener -> cn.bmob.v3.listener.LogInListener:
    void <init>() -> <init>
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.ProgressCallback -> cn.bmob.v3.listener.ProgressCallback:
    void onProgress(java.lang.Integer,long) -> onProgress
cn.bmob.v3.listener.PushListener -> cn.bmob.v3.listener.PushListener:
    void <init>() -> <init>
    void done(cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object) -> done
cn.bmob.v3.listener.QueryListListener -> cn.bmob.v3.listener.QueryListListener:
    void <init>() -> <init>
    void done(java.util.List,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.QueryListener -> cn.bmob.v3.listener.QueryListener:
    void <init>() -> <init>
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.SQLQueryListener -> cn.bmob.v3.listener.SQLQueryListener:
    void <init>() -> <init>
    void done(cn.bmob.v3.datatype.BmobQueryResult,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.SaveListener -> cn.bmob.v3.listener.SaveListener:
    void <init>() -> <init>
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.listener.UpdateListener -> cn.bmob.v3.listener.UpdateListener:
    void <init>() -> <init>
    void done(cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object) -> done
cn.bmob.v3.listener.UploadBatchListener -> cn.bmob.v3.listener.UploadBatchListener:
    void onSuccess(java.util.List,java.util.List) -> onSuccess
    void onProgress(int,int,int,int) -> onProgress
    void onError(int,java.lang.String) -> onError
cn.bmob.v3.listener.UploadFileListener -> cn.bmob.v3.listener.UploadFileListener:
    void <init>() -> <init>
    void onProgress(java.lang.Integer) -> onProgress
    void done(cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Void,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,cn.bmob.v3.exception.BmobException) -> done
cn.bmob.v3.listener.ValueEventListener -> cn.bmob.v3.listener.ValueEventListener:
    void onConnectCompleted(java.lang.Exception) -> onConnectCompleted
    void onDataChange(org.json.JSONObject) -> onDataChange
cn.bmob.v3.socketio.From -> cn.bmob.v3.socketio.From:
    java.net.URI Code -> Code
    cn.bmob.v3.socketio.From$This V -> V
    java.net.Socket I -> I
    java.lang.Thread Z -> Z
    android.os.HandlerThread B -> B
    android.os.Handler C -> C
    java.util.List S -> S
    cn.bmob.v3.socketio.I F -> F
    boolean D -> D
    java.lang.Object L -> L
    void <init>(java.net.URI,cn.bmob.v3.socketio.From$This,java.util.List) -> <init>
    cn.bmob.v3.socketio.From$This Code() -> Code
    void V() -> V
    void I() -> I
    void Code(java.lang.String) -> Code
    boolean Z() -> Z
    java.lang.String V(java.lang.String) -> V
    void Code(byte[]) -> Code
    java.net.URI Code(cn.bmob.v3.socketio.From) -> Code
    javax.net.ssl.SSLSocketFactory V(cn.bmob.v3.socketio.From) -> V
    java.net.Socket Code(cn.bmob.v3.socketio.From,java.net.Socket) -> Code
    java.net.Socket I(cn.bmob.v3.socketio.From) -> I
    java.lang.String Z(cn.bmob.v3.socketio.From) -> Z
    java.util.List B(cn.bmob.v3.socketio.From) -> B
    java.lang.String Code(cn.bmob.v3.socketio.From,cn.bmob.v3.socketio.I$This) -> Code
    org.apache.http.StatusLine Code(cn.bmob.v3.socketio.From,java.lang.String) -> Code
    org.apache.http.Header V(cn.bmob.v3.socketio.From,java.lang.String) -> V
    java.lang.String I(cn.bmob.v3.socketio.From,java.lang.String) -> I
    cn.bmob.v3.socketio.From$This C(cn.bmob.v3.socketio.From) -> C
    boolean Code(cn.bmob.v3.socketio.From,boolean) -> Code
    cn.bmob.v3.socketio.I S(cn.bmob.v3.socketio.From) -> S
    java.lang.Object F(cn.bmob.v3.socketio.From) -> F
cn.bmob.v3.socketio.From$1 -> cn.bmob.v3.socketio.From$1:
    cn.bmob.v3.socketio.From Code -> Code
    void <init>(cn.bmob.v3.socketio.From) -> <init>
    void run() -> run
cn.bmob.v3.socketio.From$2 -> cn.bmob.v3.socketio.From$2:
    cn.bmob.v3.socketio.From Code -> Code
    void <init>(cn.bmob.v3.socketio.From) -> <init>
    void run() -> run
cn.bmob.v3.socketio.From$3 -> cn.bmob.v3.socketio.From$3:
    byte[] Code -> Code
    cn.bmob.v3.socketio.From V -> V
    void <init>(cn.bmob.v3.socketio.From,byte[]) -> <init>
    void run() -> run
cn.bmob.v3.socketio.From$This -> cn.bmob.v3.socketio.From$This:
    void Code() -> Code
    void Code(java.lang.String) -> Code
    void Code(int,java.lang.String) -> Code
    void Code(java.lang.Exception) -> Code
cn.bmob.v3.socketio.I -> cn.bmob.v3.socketio.I:
    cn.bmob.v3.socketio.From Code -> Code
    boolean V -> V
    int I -> I
    boolean Z -> Z
    boolean B -> B
    int C -> C
    int S -> S
    int F -> F
    int D -> D
    byte[] L -> L
    byte[] a -> a
    boolean b -> b
    java.io.ByteArrayOutputStream c -> c
    java.util.List d -> d
    java.util.List e -> e
    void <init>(cn.bmob.v3.socketio.From) -> <init>
    byte[] Code(byte[],byte[],int) -> Code
    void Code(cn.bmob.v3.socketio.I$This) -> Code
    byte[] Code(java.lang.String) -> Code
    byte[] Code(java.lang.Object,int,int) -> Code
    java.lang.String Code(byte[]) -> Code
    byte[] V(java.lang.String) -> V
    void <clinit>() -> <clinit>
cn.bmob.v3.socketio.I$This -> cn.bmob.v3.socketio.I$This:
    void <init>(java.io.InputStream) -> <init>
    byte[] Code(int) -> Code
cn.bmob.v3.socketio.I$thing -> cn.bmob.v3.socketio.I$thing:
    void <init>(java.lang.String) -> <init>
cn.bmob.v3.socketio.This -> cn.bmob.v3.socketio.This:
    void Code(org.json.JSONArray) -> Code
cn.bmob.v3.socketio.acknowledge -> cn.bmob.v3.socketio.acknowledge:
    boolean V -> V
    boolean I -> I
    cn.bmob.v3.socketio.callback.ConnectCallback Z -> Z
    cn.bmob.v3.socketio.mine C -> C
    java.lang.String B -> B
    void Code(java.lang.String,org.json.JSONArray) -> Code
    void Code(cn.bmob.v3.socketio.thing$This,cn.bmob.v3.socketio.callback.ConnectCallback,android.os.Handler) -> Code
    void <init>(cn.bmob.v3.socketio.mine,java.lang.String,cn.bmob.v3.socketio.callback.ConnectCallback) -> <init>
    boolean Code() -> Code
    void Code(java.lang.String,cn.bmob.v3.socketio.callback.ConnectCallback) -> Code
cn.bmob.v3.socketio.acknowledge$1 -> cn.bmob.v3.socketio.acknowledge$1:
    cn.bmob.v3.socketio.thing$This V -> V
    android.os.Handler I -> I
    cn.bmob.v3.socketio.callback.ConnectCallback Code -> Code
    cn.bmob.v3.socketio.mine Z -> Z
    void <init>(cn.bmob.v3.socketio.thing$This,android.os.Handler,cn.bmob.v3.socketio.callback.ConnectCallback,cn.bmob.v3.socketio.mine) -> <init>
    void onConnectCompleted(java.lang.Exception,cn.bmob.v3.socketio.acknowledge) -> onConnectCompleted
cn.bmob.v3.socketio.acknowledge$1$1 -> cn.bmob.v3.socketio.acknowledge$1$1:
    cn.bmob.v3.socketio.acknowledge$1 Code -> Code
    void <init>(cn.bmob.v3.socketio.acknowledge$1) -> <init>
    void onConnectCompleted(java.lang.Exception,cn.bmob.v3.socketio.acknowledge) -> onConnectCompleted
cn.bmob.v3.socketio.callback.ConnectCallback -> cn.bmob.v3.socketio.callback.ConnectCallback:
    void onConnectCompleted(java.lang.Exception,cn.bmob.v3.socketio.acknowledge) -> onConnectCompleted
cn.bmob.v3.socketio.callback.DisconnectCallback -> cn.bmob.v3.socketio.callback.DisconnectCallback:
    void onDisconnect(java.lang.Exception) -> onDisconnect
cn.bmob.v3.socketio.callback.ErrorCallback -> cn.bmob.v3.socketio.callback.ErrorCallback:
    void onError(java.lang.String) -> onError
cn.bmob.v3.socketio.callback.EventCallback -> cn.bmob.v3.socketio.callback.EventCallback:
    void onEvent(java.lang.String,org.json.JSONArray,cn.bmob.v3.socketio.This) -> onEvent
cn.bmob.v3.socketio.callback.JSONCallback -> cn.bmob.v3.socketio.callback.JSONCallback:
    void onJSON(org.json.JSONObject,cn.bmob.v3.socketio.This) -> onJSON
cn.bmob.v3.socketio.callback.ReconnectCallback -> cn.bmob.v3.socketio.callback.ReconnectCallback:
    void onReconnect() -> onReconnect
cn.bmob.v3.socketio.callback.StringCallback -> cn.bmob.v3.socketio.callback.StringCallback:
    void onString(java.lang.String,cn.bmob.v3.socketio.This) -> onString
cn.bmob.v3.socketio.darkness -> cn.bmob.v3.socketio.darkness:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
cn.bmob.v3.socketio.mine -> cn.bmob.v3.socketio.mine:
    android.os.Handler F -> F
    cn.bmob.v3.socketio.thing D -> D
    int Code -> Code
    java.util.ArrayList V -> V
    cn.bmob.v3.socketio.From I -> I
    cn.bmob.v3.socketio.thing$This Z -> Z
    java.util.Hashtable B -> B
    int C -> C
    long S -> S
    void <init>(android.os.Handler,cn.bmob.v3.socketio.thing,cn.bmob.v3.socketio.thing$This) -> <init>
    boolean Code() -> Code
    void V() -> V
    void Code(java.lang.String,cn.bmob.v3.socketio.mine$This) -> Code
    void Code(cn.bmob.v3.socketio.mine,java.lang.Exception) -> Code
    void Code(cn.bmob.v3.socketio.mine,java.lang.String) -> Code
    cn.bmob.v3.socketio.This V(cn.bmob.v3.socketio.mine,java.lang.String) -> V
    void Code(cn.bmob.v3.socketio.mine,java.lang.String,java.lang.String,cn.bmob.v3.socketio.This) -> Code
    void Code(cn.bmob.v3.socketio.mine,java.lang.String,org.json.JSONObject,cn.bmob.v3.socketio.This) -> Code
    void Code(cn.bmob.v3.socketio.mine,java.lang.String,java.lang.String,org.json.JSONArray,cn.bmob.v3.socketio.This) -> Code
    void Code(cn.bmob.v3.socketio.mine,java.lang.String,java.lang.String) -> Code
    android.os.Handler Code(cn.bmob.v3.socketio.mine) -> Code
cn.bmob.v3.socketio.mine$1 -> cn.bmob.v3.socketio.mine$1:
    cn.bmob.v3.socketio.mine Code -> Code
    void <init>(cn.bmob.v3.socketio.mine) -> <init>
    void Code(java.lang.Exception,java.lang.String) -> Code
cn.bmob.v3.socketio.mine$1$1 -> cn.bmob.v3.socketio.mine$1$1:
    cn.bmob.v3.socketio.mine$1 Code -> Code
    void <init>(cn.bmob.v3.socketio.mine$1) -> <init>
    void Code(java.lang.String) -> Code
    void Code(java.lang.Exception) -> Code
    void Code(int,java.lang.String) -> Code
    void Code() -> Code
cn.bmob.v3.socketio.mine$10 -> cn.bmob.v3.socketio.mine$10:
    java.lang.String Code -> Code
    cn.bmob.v3.socketio.mine V -> V
    void <init>(cn.bmob.v3.socketio.mine,java.lang.String) -> <init>
    void Code(cn.bmob.v3.socketio.acknowledge) -> Code
cn.bmob.v3.socketio.mine$2 -> cn.bmob.v3.socketio.mine$2:
    java.lang.String Code -> Code
    cn.bmob.v3.socketio.mine V -> V
    void <init>(cn.bmob.v3.socketio.mine,java.lang.String) -> <init>
    void Code(org.json.JSONArray) -> Code
cn.bmob.v3.socketio.mine$3 -> cn.bmob.v3.socketio.mine$3:
    cn.bmob.v3.socketio.From Code -> Code
    cn.bmob.v3.socketio.mine V -> V
    void <init>(cn.bmob.v3.socketio.mine,cn.bmob.v3.socketio.From) -> <init>
    void run() -> run
cn.bmob.v3.socketio.mine$4 -> cn.bmob.v3.socketio.mine$4:
    cn.bmob.v3.socketio.mine Code -> Code
    void <init>(cn.bmob.v3.socketio.mine) -> <init>
    void run() -> run
cn.bmob.v3.socketio.mine$5 -> cn.bmob.v3.socketio.mine$5:
    java.lang.Exception Code -> Code
    cn.bmob.v3.socketio.mine V -> V
    void <init>(cn.bmob.v3.socketio.mine,java.lang.Exception) -> <init>
    void Code(cn.bmob.v3.socketio.acknowledge) -> Code
cn.bmob.v3.socketio.mine$5$1 -> cn.bmob.v3.socketio.mine$5$1:
    cn.bmob.v3.socketio.callback.DisconnectCallback Code -> Code
    cn.bmob.v3.socketio.mine$5 V -> V
    void <init>(cn.bmob.v3.socketio.mine$5,cn.bmob.v3.socketio.callback.DisconnectCallback) -> <init>
    void run() -> run
cn.bmob.v3.socketio.mine$5$2 -> cn.bmob.v3.socketio.mine$5$2:
    cn.bmob.v3.socketio.callback.ConnectCallback Code -> Code
    cn.bmob.v3.socketio.acknowledge V -> V
    cn.bmob.v3.socketio.mine$5 I -> I
    void <init>(cn.bmob.v3.socketio.mine$5,cn.bmob.v3.socketio.callback.ConnectCallback,cn.bmob.v3.socketio.acknowledge) -> <init>
    void run() -> run
cn.bmob.v3.socketio.mine$6 -> cn.bmob.v3.socketio.mine$6:
    void <init>(cn.bmob.v3.socketio.mine) -> <init>
    void Code(cn.bmob.v3.socketio.acknowledge) -> Code
cn.bmob.v3.socketio.mine$7 -> cn.bmob.v3.socketio.mine$7:
    org.json.JSONObject Code -> Code
    cn.bmob.v3.socketio.This V -> V
    cn.bmob.v3.socketio.mine I -> I
    void <init>(cn.bmob.v3.socketio.mine,org.json.JSONObject,cn.bmob.v3.socketio.This) -> <init>
    void Code(cn.bmob.v3.socketio.acknowledge) -> Code
cn.bmob.v3.socketio.mine$8 -> cn.bmob.v3.socketio.mine$8:
    java.lang.String Code -> Code
    cn.bmob.v3.socketio.This V -> V
    cn.bmob.v3.socketio.mine I -> I
    void <init>(cn.bmob.v3.socketio.mine,java.lang.String,cn.bmob.v3.socketio.This) -> <init>
    void Code(cn.bmob.v3.socketio.acknowledge) -> Code
cn.bmob.v3.socketio.mine$9 -> cn.bmob.v3.socketio.mine$9:
    java.lang.String Code -> Code
    org.json.JSONArray V -> V
    cn.bmob.v3.socketio.This I -> I
    cn.bmob.v3.socketio.mine Z -> Z
    void <init>(cn.bmob.v3.socketio.mine,java.lang.String,org.json.JSONArray,cn.bmob.v3.socketio.This) -> <init>
    void Code(cn.bmob.v3.socketio.acknowledge) -> Code
cn.bmob.v3.socketio.mine$9$1 -> cn.bmob.v3.socketio.mine$9$1:
    cn.bmob.v3.socketio.acknowledge Code -> Code
    cn.bmob.v3.socketio.mine$9 V -> V
    void <init>(cn.bmob.v3.socketio.mine$9,cn.bmob.v3.socketio.acknowledge) -> <init>
    void run() -> run
cn.bmob.v3.socketio.mine$This -> cn.bmob.v3.socketio.mine$This:
    void Code(cn.bmob.v3.socketio.acknowledge) -> Code
cn.bmob.v3.socketio.of -> cn.bmob.v3.socketio.of:
    cn.bmob.v3.socketio.darkness Code -> Code
    void <init>() -> <init>
    void Code(java.lang.String,cn.bmob.v3.socketio.callback.EventCallback) -> Code
cn.bmob.v3.socketio.of$This -> cn.bmob.v3.socketio.of$This:
cn.bmob.v3.socketio.thing -> cn.bmob.v3.socketio.thing:
    void <init>() -> <init>
    byte[] Code(java.io.InputStream) -> Code
    java.lang.String Code(cn.bmob.v3.socketio.thing,java.io.InputStream) -> Code
cn.bmob.v3.socketio.thing$1 -> cn.bmob.v3.socketio.thing$1:
    cn.bmob.v3.socketio.thing$This Code -> Code
    cn.bmob.v3.socketio.thing$thing V -> V
    cn.bmob.v3.socketio.thing I -> I
    void <init>(cn.bmob.v3.socketio.thing,cn.bmob.v3.socketio.thing$This,cn.bmob.v3.socketio.thing$thing) -> <init>
    java.lang.Void Code() -> Code
    void Code(org.apache.http.HttpRequest,java.util.List) -> Code
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
cn.bmob.v3.socketio.thing$This -> cn.bmob.v3.socketio.thing$This:
    java.lang.String Code -> Code
    java.lang.String V -> V
    java.util.List I -> I
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.util.List) -> <init>
    java.lang.String Code() -> Code
    java.lang.String V() -> V
    java.util.List I() -> I
cn.bmob.v3.socketio.thing$thing -> cn.bmob.v3.socketio.thing$thing:
    void Code(java.lang.Exception,java.lang.String) -> Code
cn.bmob.v3.statistics.AppStat -> cn.bmob.v3.statistics.AppStat:
    boolean isInited -> isInited
    void <init>() -> <init>
    void init(java.lang.String,java.lang.String,boolean) -> init
    boolean i(java.lang.String,java.lang.String) -> i
    boolean i(java.lang.String,java.lang.String,boolean) -> i
    void <clinit>() -> <clinit>
cn.bmob.v3.update.AppVersion -> cn.bmob.v3.update.AppVersion:
    long serialVersionUID -> serialVersionUID
    java.lang.String update_log -> update_log
    java.lang.String version -> version
    java.lang.Integer version_i -> version_i
    java.lang.Boolean isforce -> isforce
    cn.bmob.v3.datatype.BmobFile path -> path
    java.lang.String target_size -> target_size
    java.lang.String platform -> platform
    java.lang.String channel -> channel
    java.lang.String android_url -> android_url
    java.lang.String ios_url -> ios_url
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getUpdate_log() -> getUpdate_log
    void setUpdate_log(java.lang.String) -> setUpdate_log
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    java.lang.Integer getVersion_i() -> getVersion_i
    void setVersion_i(java.lang.Integer) -> setVersion_i
    java.lang.Boolean getIsforce() -> getIsforce
    void setIsforce(java.lang.Boolean) -> setIsforce
    cn.bmob.v3.datatype.BmobFile getPath() -> getPath
    void setPath(cn.bmob.v3.datatype.BmobFile) -> setPath
    java.lang.String getTarget_size() -> getTarget_size
    void setTarget_size(java.lang.String) -> setTarget_size
    java.lang.String getPlatform() -> getPlatform
    void setPlatform(java.lang.String) -> setPlatform
    java.lang.String getChannel() -> getChannel
    void setChannel(java.lang.String) -> setChannel
    java.lang.String getAndroid_url() -> getAndroid_url
    void setAndroid_url(java.lang.String) -> setAndroid_url
    java.lang.String getIos_url() -> getIos_url
    void setIos_url(java.lang.String) -> setIos_url
cn.bmob.v3.update.BmobUpdateAgent -> cn.bmob.v3.update.BmobUpdateAgent:
    cn.bmob.v3.listener.BmobDialogButtonListener Code -> Code
    cn.bmob.v3.listener.BmobUpdateListener V -> V
    void <init>() -> <init>
    void initAppVersion() -> initAppVersion
    void update(android.content.Context) -> update
    void forceUpdate(android.content.Context) -> forceUpdate
    void silentUpdate(android.content.Context) -> silentUpdate
    void setDefault() -> setDefault
    void setUpdateOnlyWifi(boolean) -> setUpdateOnlyWifi
    void setUpdateCheckConfig(boolean) -> setUpdateCheckConfig
    void setUpdateListener(cn.bmob.v3.listener.BmobUpdateListener) -> setUpdateListener
    void setDialogListener(cn.bmob.v3.listener.BmobDialogButtonListener) -> setDialogListener
    void Code(int,android.content.Context,cn.bmob.v3.update.UpdateResponse,java.io.File) -> Code
    void Code(boolean,android.content.Context,cn.bmob.v3.update.UpdateResponse,java.io.File) -> Code
    boolean Code(android.content.Context) -> Code
    void startInstall(android.content.Context,java.io.File) -> startInstall
    void V(android.content.Context) -> V
    boolean isIgnored(java.lang.String) -> isIgnored
    java.util.List V() -> V
    void add2IgnoreVersion(java.lang.String) -> add2IgnoreVersion
    void deleteIgnoreVersion(java.lang.String) -> deleteIgnoreVersion
    void Code(java.util.List) -> Code
    cn.bmob.v3.listener.BmobUpdateListener Code() -> Code
    void Code(android.content.Context,cn.bmob.v3.update.UpdateResponse,java.io.File,boolean) -> Code
    void <clinit>() -> <clinit>
cn.bmob.v3.update.BmobUpdateAgent$1 -> cn.bmob.v3.update.BmobUpdateAgent$1:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.update.BmobUpdateAgent$2 -> cn.bmob.v3.update.BmobUpdateAgent$2:
    void <init>() -> <init>
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
    void onNext(java.lang.Object) -> onNext
cn.bmob.v3.update.BmobUpdateAgent$3 -> cn.bmob.v3.update.BmobUpdateAgent$3:
    rx.Observable Code -> Code
    void <init>(rx.Observable) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.update.BmobUpdateAgent$4 -> cn.bmob.v3.update.BmobUpdateAgent$4:
    rx.Observable Code -> Code
    void <init>(rx.Observable) -> <init>
    java.lang.Object call(java.lang.Object) -> call
cn.bmob.v3.update.BmobUpdateAgent$5 -> cn.bmob.v3.update.BmobUpdateAgent$5:
    android.content.Context Code -> Code
    void <init>(android.content.Context) -> <init>
    void done(java.util.List,cn.bmob.v3.exception.BmobException) -> done
    void done(java.lang.Object,java.lang.Object) -> done
cn.bmob.v3.update.UpdateDialogActivity -> cn.bmob.v3.update.UpdateDialogActivity:
    cn.bmob.v3.update.UpdateResponse Code -> Code
    int V -> V
    int I -> I
    int Z -> Z
    int B -> B
    int C -> C
    java.io.File S -> S
    boolean F -> F
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onClick(android.view.View) -> onClick
    void onDestroy() -> onDestroy
cn.bmob.v3.update.UpdateDialogActivity$1 -> cn.bmob.v3.update.UpdateDialogActivity$1:
    cn.bmob.v3.update.UpdateDialogActivity Code -> Code
    void <init>(cn.bmob.v3.update.UpdateDialogActivity) -> <init>
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
cn.bmob.v3.update.UpdateResponse -> cn.bmob.v3.update.UpdateResponse:
    long serialVersionUID -> serialVersionUID
    java.lang.String path -> path
    java.lang.String path_md5 -> path_md5
    java.lang.String version -> version
    java.lang.Integer version_i -> version_i
    java.lang.String updateLog -> updateLog
    long target_size -> target_size
    java.lang.Boolean isforce -> isforce
    cn.bmob.v3.exception.BmobException exception -> exception
    void <init>(cn.bmob.v3.update.AppVersion) -> <init>
    void <init>(int,java.lang.String) -> <init>
    cn.bmob.v3.exception.BmobException getException() -> getException
    java.lang.String getUpdateInfo(android.content.Context,boolean) -> getUpdateInfo
    java.lang.String Code(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> Code
cn.bmob.v3.update.UpdateStatus -> cn.bmob.v3.update.UpdateStatus:
    int Yes -> Yes
    int No -> No
    int TimeOut -> TimeOut
    int EmptyField -> EmptyField
    int IGNORED -> IGNORED
    int ErrorSizeFormat -> ErrorSizeFormat
    int Update -> Update
    int NotNow -> NotNow
    int Close -> Close
    void <init>() -> <init>
cn.bmob.v3.update.a.This -> cn.bmob.v3.update.a.This:
    java.lang.String Code -> Code
    boolean V -> V
    boolean I -> I
    boolean Z -> Z
    boolean B -> B
    boolean Code() -> Code
    void Code(boolean) -> Code
    java.lang.String V() -> V
    boolean I() -> I
    void V(boolean) -> V
    boolean Z() -> Z
    void I(boolean) -> I
    boolean B() -> B
    void Z(boolean) -> Z
    void <clinit>() -> <clinit>
com.android.internal.http.multipart.ByteArrayPartSource -> com.android.internal.http.multipart.ByteArrayPartSource:
    void <init>(java.lang.String,byte[]) -> <init>
    long getLength() -> getLength
    java.lang.String getFileName() -> getFileName
    java.io.InputStream createInputStream() -> createInputStream
com.android.internal.http.multipart.FilePart -> com.android.internal.http.multipart.FilePart:
    java.lang.String DEFAULT_CHARSET -> DEFAULT_CHARSET
    java.lang.String DEFAULT_CONTENT_TYPE -> DEFAULT_CONTENT_TYPE
    java.lang.String DEFAULT_TRANSFER_ENCODING -> DEFAULT_TRANSFER_ENCODING
    java.lang.String FILE_NAME -> FILE_NAME
    void <init>(java.lang.String,com.android.internal.http.multipart.PartSource,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,com.android.internal.http.multipart.PartSource) -> <init>
    void <init>(java.lang.String,java.io.File) -> <init>
    void <init>(java.lang.String,java.io.File,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.io.File) -> <init>
    void <init>(java.lang.String,java.lang.String,java.io.File,java.lang.String,java.lang.String) -> <init>
    void sendDispositionHeader(java.io.OutputStream) -> sendDispositionHeader
    void sendData(java.io.OutputStream) -> sendData
    com.android.internal.http.multipart.PartSource getSource() -> getSource
    long lengthOfData() -> lengthOfData
com.android.internal.http.multipart.FilePartSource -> com.android.internal.http.multipart.FilePartSource:
    void <init>(java.io.File) -> <init>
    void <init>(java.lang.String,java.io.File) -> <init>
    long getLength() -> getLength
    java.lang.String getFileName() -> getFileName
    java.io.InputStream createInputStream() -> createInputStream
com.android.internal.http.multipart.MultipartEntity -> com.android.internal.http.multipart.MultipartEntity:
    java.lang.String MULTIPART_BOUNDARY -> MULTIPART_BOUNDARY
    com.android.internal.http.multipart.Part[] parts -> parts
    void <init>(com.android.internal.http.multipart.Part[],org.apache.http.params.HttpParams) -> <init>
    void <init>(com.android.internal.http.multipart.Part[]) -> <init>
    byte[] getMultipartBoundary() -> getMultipartBoundary
    boolean isRepeatable() -> isRepeatable
    void writeTo(java.io.OutputStream) -> writeTo
    org.apache.http.Header getContentType() -> getContentType
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isStreaming() -> isStreaming
com.android.internal.http.multipart.Part -> com.android.internal.http.multipart.Part:
    java.lang.String BOUNDARY -> BOUNDARY
    byte[] BOUNDARY_BYTES -> BOUNDARY_BYTES
    java.lang.String CHARSET -> CHARSET
    byte[] CHARSET_BYTES -> CHARSET_BYTES
    java.lang.String CONTENT_DISPOSITION -> CONTENT_DISPOSITION
    byte[] CONTENT_DISPOSITION_BYTES -> CONTENT_DISPOSITION_BYTES
    java.lang.String CONTENT_TRANSFER_ENCODING -> CONTENT_TRANSFER_ENCODING
    byte[] CONTENT_TRANSFER_ENCODING_BYTES -> CONTENT_TRANSFER_ENCODING_BYTES
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    byte[] CONTENT_TYPE_BYTES -> CONTENT_TYPE_BYTES
    java.lang.String CRLF -> CRLF
    byte[] CRLF_BYTES -> CRLF_BYTES
    java.lang.String EXTRA -> EXTRA
    byte[] EXTRA_BYTES -> EXTRA_BYTES
    java.lang.String QUOTE -> QUOTE
    byte[] QUOTE_BYTES -> QUOTE_BYTES
    void <init>() -> <init>
    java.lang.String getBoundary() -> getBoundary
    java.lang.String getName() -> getName
    java.lang.String getContentType() -> getContentType
    java.lang.String getCharSet() -> getCharSet
    java.lang.String getTransferEncoding() -> getTransferEncoding
    byte[] getPartBoundary() -> getPartBoundary
    boolean isRepeatable() -> isRepeatable
    void sendStart(java.io.OutputStream) -> sendStart
    void sendDispositionHeader(java.io.OutputStream) -> sendDispositionHeader
    void sendContentTypeHeader(java.io.OutputStream) -> sendContentTypeHeader
    void sendTransferEncodingHeader(java.io.OutputStream) -> sendTransferEncodingHeader
    void sendEndOfHeader(java.io.OutputStream) -> sendEndOfHeader
    void sendData(java.io.OutputStream) -> sendData
    long lengthOfData() -> lengthOfData
    void sendEnd(java.io.OutputStream) -> sendEnd
    void send(java.io.OutputStream) -> send
    long length() -> length
    java.lang.String toString() -> toString
    void sendParts(java.io.OutputStream,com.android.internal.http.multipart.Part[]) -> sendParts
    void sendParts(java.io.OutputStream,com.android.internal.http.multipart.Part[],byte[]) -> sendParts
    long getLengthOfParts(com.android.internal.http.multipart.Part[]) -> getLengthOfParts
    long getLengthOfParts(com.android.internal.http.multipart.Part[],byte[]) -> getLengthOfParts
    void <clinit>() -> <clinit>
com.android.internal.http.multipart.PartBase -> com.android.internal.http.multipart.PartBase:
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getContentType() -> getContentType
    java.lang.String getCharSet() -> getCharSet
    java.lang.String getTransferEncoding() -> getTransferEncoding
    void setCharSet(java.lang.String) -> setCharSet
    void setContentType(java.lang.String) -> setContentType
    void setName(java.lang.String) -> setName
    void setTransferEncoding(java.lang.String) -> setTransferEncoding
com.android.internal.http.multipart.PartSource -> com.android.internal.http.multipart.PartSource:
    long getLength() -> getLength
    java.lang.String getFileName() -> getFileName
    java.io.InputStream createInputStream() -> createInputStream
com.android.internal.http.multipart.StringPart -> com.android.internal.http.multipart.StringPart:
    java.lang.String DEFAULT_CHARSET -> DEFAULT_CHARSET
    java.lang.String DEFAULT_CONTENT_TYPE -> DEFAULT_CONTENT_TYPE
    java.lang.String DEFAULT_TRANSFER_ENCODING -> DEFAULT_TRANSFER_ENCODING
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void sendData(java.io.OutputStream) -> sendData
    long lengthOfData() -> lengthOfData
    void setCharSet(java.lang.String) -> setCharSet
com.badlogic.gdx.Application -> com.badlogic.gdx.Application:
    int LOG_NONE -> LOG_NONE
    int LOG_DEBUG -> LOG_DEBUG
    int LOG_INFO -> LOG_INFO
    int LOG_ERROR -> LOG_ERROR
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> getApplicationListener
    com.badlogic.gdx.Graphics getGraphics() -> getGraphics
    com.badlogic.gdx.Audio getAudio() -> getAudio
    com.badlogic.gdx.Input getInput() -> getInput
    com.badlogic.gdx.Files getFiles() -> getFiles
    com.badlogic.gdx.Net getNet() -> getNet
    void log(java.lang.String,java.lang.String) -> log
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> log
    void error(java.lang.String,java.lang.String) -> error
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> error
    void debug(java.lang.String,java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String,java.lang.Throwable) -> debug
    void setLogLevel(int) -> setLogLevel
    int getLogLevel() -> getLogLevel
    com.badlogic.gdx.Application$ApplicationType getType() -> getType
    int getVersion() -> getVersion
    long getJavaHeap() -> getJavaHeap
    long getNativeHeap() -> getNativeHeap
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> getPreferences
    com.badlogic.gdx.utils.Clipboard getClipboard() -> getClipboard
    void postRunnable(java.lang.Runnable) -> postRunnable
    void exit() -> exit
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> addLifecycleListener
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> removeLifecycleListener
com.badlogic.gdx.Application$ApplicationType -> com.badlogic.gdx.Application$ApplicationType:
    com.badlogic.gdx.Application$ApplicationType Android -> Android
    com.badlogic.gdx.Application$ApplicationType Desktop -> Desktop
    com.badlogic.gdx.Application$ApplicationType HeadlessDesktop -> HeadlessDesktop
    com.badlogic.gdx.Application$ApplicationType Applet -> Applet
    com.badlogic.gdx.Application$ApplicationType WebGL -> WebGL
    com.badlogic.gdx.Application$ApplicationType iOS -> iOS
    com.badlogic.gdx.Application$ApplicationType[] $VALUES -> $VALUES
    com.badlogic.gdx.Application$ApplicationType[] values() -> values
    com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.ApplicationAdapter -> com.badlogic.gdx.ApplicationAdapter:
    void <init>() -> <init>
    void create() -> create
    void resize(int,int) -> resize
    void render() -> render
    void pause() -> pause
    void resume() -> resume
    void dispose() -> dispose
com.badlogic.gdx.ApplicationListener -> com.badlogic.gdx.ApplicationListener:
    void create() -> create
    void resize(int,int) -> resize
    void render() -> render
    void pause() -> pause
    void resume() -> resume
    void dispose() -> dispose
com.badlogic.gdx.Audio -> com.badlogic.gdx.Audio:
    com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean) -> newAudioDevice
    com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean) -> newAudioRecorder
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> newSound
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> newMusic
com.badlogic.gdx.Files -> com.badlogic.gdx.Files:
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> getFileHandle
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> classpath
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> internal
    com.badlogic.gdx.files.FileHandle external(java.lang.String) -> external
    com.badlogic.gdx.files.FileHandle absolute(java.lang.String) -> absolute
    com.badlogic.gdx.files.FileHandle local(java.lang.String) -> local
    java.lang.String getExternalStoragePath() -> getExternalStoragePath
    boolean isExternalStorageAvailable() -> isExternalStorageAvailable
    java.lang.String getLocalStoragePath() -> getLocalStoragePath
    boolean isLocalStorageAvailable() -> isLocalStorageAvailable
com.badlogic.gdx.Files$FileType -> com.badlogic.gdx.Files$FileType:
    com.badlogic.gdx.Files$FileType Classpath -> Classpath
    com.badlogic.gdx.Files$FileType Internal -> Internal
    com.badlogic.gdx.Files$FileType External -> External
    com.badlogic.gdx.Files$FileType Absolute -> Absolute
    com.badlogic.gdx.Files$FileType Local -> Local
    com.badlogic.gdx.Files$FileType[] $VALUES -> $VALUES
    com.badlogic.gdx.Files$FileType[] values() -> values
    com.badlogic.gdx.Files$FileType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.Game -> com.badlogic.gdx.Game:
    com.badlogic.gdx.Screen screen -> screen
    void <init>() -> <init>
    void dispose() -> dispose
    void pause() -> pause
    void resume() -> resume
    void render() -> render
    void resize(int,int) -> resize
    void setScreen(com.badlogic.gdx.Screen) -> setScreen
    com.badlogic.gdx.Screen getScreen() -> getScreen
com.badlogic.gdx.Gdx -> com.badlogic.gdx.Gdx:
    com.badlogic.gdx.Application app -> app
    com.badlogic.gdx.Graphics graphics -> graphics
    com.badlogic.gdx.Audio audio -> audio
    com.badlogic.gdx.Input input -> input
    com.badlogic.gdx.Files files -> files
    com.badlogic.gdx.Net net -> net
    com.badlogic.gdx.graphics.GL20 gl -> gl
    com.badlogic.gdx.graphics.GL20 gl20 -> gl20
    com.badlogic.gdx.graphics.GL30 gl30 -> gl30
    void <init>() -> <init>
com.badlogic.gdx.Graphics -> com.badlogic.gdx.Graphics:
    boolean isGL30Available() -> isGL30Available
    com.badlogic.gdx.graphics.GL20 getGL20() -> getGL20
    com.badlogic.gdx.graphics.GL30 getGL30() -> getGL30
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    long getFrameId() -> getFrameId
    float getDeltaTime() -> getDeltaTime
    float getRawDeltaTime() -> getRawDeltaTime
    int getFramesPerSecond() -> getFramesPerSecond
    com.badlogic.gdx.Graphics$GraphicsType getType() -> getType
    float getPpiX() -> getPpiX
    float getPpiY() -> getPpiY
    float getPpcX() -> getPpcX
    float getPpcY() -> getPpcY
    float getDensity() -> getDensity
    boolean supportsDisplayModeChange() -> supportsDisplayModeChange
    com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes() -> getDisplayModes
    com.badlogic.gdx.Graphics$DisplayMode getDesktopDisplayMode() -> getDesktopDisplayMode
    boolean setDisplayMode(com.badlogic.gdx.Graphics$DisplayMode) -> setDisplayMode
    boolean setDisplayMode(int,int,boolean) -> setDisplayMode
    void setTitle(java.lang.String) -> setTitle
    void setVSync(boolean) -> setVSync
    com.badlogic.gdx.Graphics$BufferFormat getBufferFormat() -> getBufferFormat
    boolean supportsExtension(java.lang.String) -> supportsExtension
    void setContinuousRendering(boolean) -> setContinuousRendering
    boolean isContinuousRendering() -> isContinuousRendering
    void requestRendering() -> requestRendering
    boolean isFullscreen() -> isFullscreen
com.badlogic.gdx.Graphics$BufferFormat -> com.badlogic.gdx.Graphics$BufferFormat:
    int r -> r
    int g -> g
    int b -> b
    int a -> a
    int depth -> depth
    int stencil -> stencil
    int samples -> samples
    boolean coverageSampling -> coverageSampling
    void <init>(int,int,int,int,int,int,int,boolean) -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.Graphics$DisplayMode -> com.badlogic.gdx.Graphics$DisplayMode:
    int width -> width
    int height -> height
    int refreshRate -> refreshRate
    int bitsPerPixel -> bitsPerPixel
    void <init>(int,int,int,int) -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.Graphics$GraphicsType -> com.badlogic.gdx.Graphics$GraphicsType:
    com.badlogic.gdx.Graphics$GraphicsType AndroidGL -> AndroidGL
    com.badlogic.gdx.Graphics$GraphicsType LWJGL -> LWJGL
    com.badlogic.gdx.Graphics$GraphicsType Angle -> Angle
    com.badlogic.gdx.Graphics$GraphicsType WebGL -> WebGL
    com.badlogic.gdx.Graphics$GraphicsType iOSGL -> iOSGL
    com.badlogic.gdx.Graphics$GraphicsType JGLFW -> JGLFW
    com.badlogic.gdx.Graphics$GraphicsType Mock -> Mock
    com.badlogic.gdx.Graphics$GraphicsType[] $VALUES -> $VALUES
    com.badlogic.gdx.Graphics$GraphicsType[] values() -> values
    com.badlogic.gdx.Graphics$GraphicsType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.Input -> com.badlogic.gdx.Input:
    float getAccelerometerX() -> getAccelerometerX
    float getAccelerometerY() -> getAccelerometerY
    float getAccelerometerZ() -> getAccelerometerZ
    int getX() -> getX
    int getX(int) -> getX
    int getDeltaX() -> getDeltaX
    int getDeltaX(int) -> getDeltaX
    int getY() -> getY
    int getY(int) -> getY
    int getDeltaY() -> getDeltaY
    int getDeltaY(int) -> getDeltaY
    boolean isTouched() -> isTouched
    boolean justTouched() -> justTouched
    boolean isTouched(int) -> isTouched
    boolean isButtonPressed(int) -> isButtonPressed
    boolean isKeyPressed(int) -> isKeyPressed
    boolean isKeyJustPressed(int) -> isKeyJustPressed
    void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String) -> getTextInput
    void setOnscreenKeyboardVisible(boolean) -> setOnscreenKeyboardVisible
    void vibrate(int) -> vibrate
    void vibrate(long[],int) -> vibrate
    void cancelVibrate() -> cancelVibrate
    float getAzimuth() -> getAzimuth
    float getPitch() -> getPitch
    float getRoll() -> getRoll
    void getRotationMatrix(float[]) -> getRotationMatrix
    long getCurrentEventTime() -> getCurrentEventTime
    void setCatchBackKey(boolean) -> setCatchBackKey
    boolean isCatchBackKey() -> isCatchBackKey
    void setCatchMenuKey(boolean) -> setCatchMenuKey
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> setInputProcessor
    com.badlogic.gdx.InputProcessor getInputProcessor() -> getInputProcessor
    boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral) -> isPeripheralAvailable
    int getRotation() -> getRotation
    com.badlogic.gdx.Input$Orientation getNativeOrientation() -> getNativeOrientation
    void setCursorCatched(boolean) -> setCursorCatched
    boolean isCursorCatched() -> isCursorCatched
    void setCursorPosition(int,int) -> setCursorPosition
    void setCursorImage(com.badlogic.gdx.graphics.Pixmap,int,int) -> setCursorImage
com.badlogic.gdx.Input$Buttons -> com.badlogic.gdx.Input$Buttons:
    int LEFT -> LEFT
    int RIGHT -> RIGHT
    int MIDDLE -> MIDDLE
    int BACK -> BACK
    int FORWARD -> FORWARD
    void <init>() -> <init>
com.badlogic.gdx.Input$Keys -> com.badlogic.gdx.Input$Keys:
    int ANY_KEY -> ANY_KEY
    int NUM_0 -> NUM_0
    int NUM_1 -> NUM_1
    int NUM_2 -> NUM_2
    int NUM_3 -> NUM_3
    int NUM_4 -> NUM_4
    int NUM_5 -> NUM_5
    int NUM_6 -> NUM_6
    int NUM_7 -> NUM_7
    int NUM_8 -> NUM_8
    int NUM_9 -> NUM_9
    int A -> A
    int ALT_LEFT -> ALT_LEFT
    int ALT_RIGHT -> ALT_RIGHT
    int APOSTROPHE -> APOSTROPHE
    int AT -> AT
    int B -> B
    int BACK -> BACK
    int BACKSLASH -> BACKSLASH
    int C -> C
    int CALL -> CALL
    int CAMERA -> CAMERA
    int CLEAR -> CLEAR
    int COMMA -> COMMA
    int D -> D
    int DEL -> DEL
    int BACKSPACE -> BACKSPACE
    int FORWARD_DEL -> FORWARD_DEL
    int DPAD_CENTER -> DPAD_CENTER
    int DPAD_DOWN -> DPAD_DOWN
    int DPAD_LEFT -> DPAD_LEFT
    int DPAD_RIGHT -> DPAD_RIGHT
    int DPAD_UP -> DPAD_UP
    int CENTER -> CENTER
    int DOWN -> DOWN
    int LEFT -> LEFT
    int RIGHT -> RIGHT
    int UP -> UP
    int E -> E
    int ENDCALL -> ENDCALL
    int ENTER -> ENTER
    int ENVELOPE -> ENVELOPE
    int EQUALS -> EQUALS
    int EXPLORER -> EXPLORER
    int F -> F
    int FOCUS -> FOCUS
    int G -> G
    int GRAVE -> GRAVE
    int H -> H
    int HEADSETHOOK -> HEADSETHOOK
    int HOME -> HOME
    int I -> I
    int J -> J
    int K -> K
    int L -> L
    int LEFT_BRACKET -> LEFT_BRACKET
    int M -> M
    int MEDIA_FAST_FORWARD -> MEDIA_FAST_FORWARD
    int MEDIA_NEXT -> MEDIA_NEXT
    int MEDIA_PLAY_PAUSE -> MEDIA_PLAY_PAUSE
    int MEDIA_PREVIOUS -> MEDIA_PREVIOUS
    int MEDIA_REWIND -> MEDIA_REWIND
    int MEDIA_STOP -> MEDIA_STOP
    int MENU -> MENU
    int MINUS -> MINUS
    int MUTE -> MUTE
    int N -> N
    int NOTIFICATION -> NOTIFICATION
    int NUM -> NUM
    int O -> O
    int P -> P
    int PERIOD -> PERIOD
    int PLUS -> PLUS
    int POUND -> POUND
    int POWER -> POWER
    int Q -> Q
    int R -> R
    int RIGHT_BRACKET -> RIGHT_BRACKET
    int S -> S
    int SEARCH -> SEARCH
    int SEMICOLON -> SEMICOLON
    int SHIFT_LEFT -> SHIFT_LEFT
    int SHIFT_RIGHT -> SHIFT_RIGHT
    int SLASH -> SLASH
    int SOFT_LEFT -> SOFT_LEFT
    int SOFT_RIGHT -> SOFT_RIGHT
    int SPACE -> SPACE
    int STAR -> STAR
    int SYM -> SYM
    int T -> T
    int TAB -> TAB
    int U -> U
    int UNKNOWN -> UNKNOWN
    int V -> V
    int VOLUME_DOWN -> VOLUME_DOWN
    int VOLUME_UP -> VOLUME_UP
    int W -> W
    int X -> X
    int Y -> Y
    int Z -> Z
    int META_ALT_LEFT_ON -> META_ALT_LEFT_ON
    int META_ALT_ON -> META_ALT_ON
    int META_ALT_RIGHT_ON -> META_ALT_RIGHT_ON
    int META_SHIFT_LEFT_ON -> META_SHIFT_LEFT_ON
    int META_SHIFT_ON -> META_SHIFT_ON
    int META_SHIFT_RIGHT_ON -> META_SHIFT_RIGHT_ON
    int META_SYM_ON -> META_SYM_ON
    int CONTROL_LEFT -> CONTROL_LEFT
    int CONTROL_RIGHT -> CONTROL_RIGHT
    int ESCAPE -> ESCAPE
    int END -> END
    int INSERT -> INSERT
    int PAGE_UP -> PAGE_UP
    int PAGE_DOWN -> PAGE_DOWN
    int PICTSYMBOLS -> PICTSYMBOLS
    int SWITCH_CHARSET -> SWITCH_CHARSET
    int BUTTON_CIRCLE -> BUTTON_CIRCLE
    int BUTTON_A -> BUTTON_A
    int BUTTON_B -> BUTTON_B
    int BUTTON_C -> BUTTON_C
    int BUTTON_X -> BUTTON_X
    int BUTTON_Y -> BUTTON_Y
    int BUTTON_Z -> BUTTON_Z
    int BUTTON_L1 -> BUTTON_L1
    int BUTTON_R1 -> BUTTON_R1
    int BUTTON_L2 -> BUTTON_L2
    int BUTTON_R2 -> BUTTON_R2
    int BUTTON_THUMBL -> BUTTON_THUMBL
    int BUTTON_THUMBR -> BUTTON_THUMBR
    int BUTTON_START -> BUTTON_START
    int BUTTON_SELECT -> BUTTON_SELECT
    int BUTTON_MODE -> BUTTON_MODE
    int NUMPAD_0 -> NUMPAD_0
    int NUMPAD_1 -> NUMPAD_1
    int NUMPAD_2 -> NUMPAD_2
    int NUMPAD_3 -> NUMPAD_3
    int NUMPAD_4 -> NUMPAD_4
    int NUMPAD_5 -> NUMPAD_5
    int NUMPAD_6 -> NUMPAD_6
    int NUMPAD_7 -> NUMPAD_7
    int NUMPAD_8 -> NUMPAD_8
    int NUMPAD_9 -> NUMPAD_9
    int COLON -> COLON
    int F1 -> F1
    int F2 -> F2
    int F3 -> F3
    int F4 -> F4
    int F5 -> F5
    int F6 -> F6
    int F7 -> F7
    int F8 -> F8
    int F9 -> F9
    int F10 -> F10
    int F11 -> F11
    int F12 -> F12
    com.badlogic.gdx.utils.ObjectIntMap keyNames -> keyNames
    void <init>() -> <init>
    java.lang.String toString(int) -> toString
    int valueOf(java.lang.String) -> valueOf
    void initializeKeyNames() -> initializeKeyNames
com.badlogic.gdx.Input$Orientation -> com.badlogic.gdx.Input$Orientation:
    com.badlogic.gdx.Input$Orientation Landscape -> Landscape
    com.badlogic.gdx.Input$Orientation Portrait -> Portrait
    com.badlogic.gdx.Input$Orientation[] $VALUES -> $VALUES
    com.badlogic.gdx.Input$Orientation[] values() -> values
    com.badlogic.gdx.Input$Orientation valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.Input$Peripheral -> com.badlogic.gdx.Input$Peripheral:
    com.badlogic.gdx.Input$Peripheral HardwareKeyboard -> HardwareKeyboard
    com.badlogic.gdx.Input$Peripheral OnscreenKeyboard -> OnscreenKeyboard
    com.badlogic.gdx.Input$Peripheral MultitouchScreen -> MultitouchScreen
    com.badlogic.gdx.Input$Peripheral Accelerometer -> Accelerometer
    com.badlogic.gdx.Input$Peripheral Compass -> Compass
    com.badlogic.gdx.Input$Peripheral Vibrator -> Vibrator
    com.badlogic.gdx.Input$Peripheral[] $VALUES -> $VALUES
    com.badlogic.gdx.Input$Peripheral[] values() -> values
    com.badlogic.gdx.Input$Peripheral valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.Input$TextInputListener -> com.badlogic.gdx.Input$TextInputListener:
    void input(java.lang.String) -> input
    void canceled() -> canceled
com.badlogic.gdx.InputAdapter -> com.badlogic.gdx.InputAdapter:
    void <init>() -> <init>
    boolean keyDown(int) -> keyDown
    boolean keyUp(int) -> keyUp
    boolean keyTyped(char) -> keyTyped
    boolean touchDown(int,int,int,int) -> touchDown
    boolean touchUp(int,int,int,int) -> touchUp
    boolean touchDragged(int,int,int) -> touchDragged
    boolean mouseMoved(int,int) -> mouseMoved
    boolean scrolled(int) -> scrolled
com.badlogic.gdx.InputMultiplexer -> com.badlogic.gdx.InputMultiplexer:
    com.badlogic.gdx.utils.Array processors -> processors
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.InputProcessor[]) -> <init>
    void addProcessor(int,com.badlogic.gdx.InputProcessor) -> addProcessor
    void removeProcessor(int) -> removeProcessor
    void addProcessor(com.badlogic.gdx.InputProcessor) -> addProcessor
    void removeProcessor(com.badlogic.gdx.InputProcessor) -> removeProcessor
    int size() -> size
    void clear() -> clear
    void setProcessors(com.badlogic.gdx.utils.Array) -> setProcessors
    com.badlogic.gdx.utils.Array getProcessors() -> getProcessors
    boolean keyDown(int) -> keyDown
    boolean keyUp(int) -> keyUp
    boolean keyTyped(char) -> keyTyped
    boolean touchDown(int,int,int,int) -> touchDown
    boolean touchUp(int,int,int,int) -> touchUp
    boolean touchDragged(int,int,int) -> touchDragged
    boolean mouseMoved(int,int) -> mouseMoved
    boolean scrolled(int) -> scrolled
com.badlogic.gdx.InputProcessor -> com.badlogic.gdx.InputProcessor:
    boolean keyDown(int) -> keyDown
    boolean keyUp(int) -> keyUp
    boolean keyTyped(char) -> keyTyped
    boolean touchDown(int,int,int,int) -> touchDown
    boolean touchUp(int,int,int,int) -> touchUp
    boolean touchDragged(int,int,int) -> touchDragged
    boolean mouseMoved(int,int) -> mouseMoved
    boolean scrolled(int) -> scrolled
com.badlogic.gdx.InputProcessorQueue -> com.badlogic.gdx.InputProcessorQueue:
    int KEY_DOWN -> KEY_DOWN
    int KEY_UP -> KEY_UP
    int KEY_TYPED -> KEY_TYPED
    int TOUCH_DOWN -> TOUCH_DOWN
    int TOUCH_UP -> TOUCH_UP
    int TOUCH_DRAGGED -> TOUCH_DRAGGED
    int MOUSE_MOVED -> MOUSE_MOVED
    int SCROLLED -> SCROLLED
    com.badlogic.gdx.InputProcessor processor -> processor
    com.badlogic.gdx.utils.IntArray queue -> queue
    com.badlogic.gdx.utils.IntArray processingQueue -> processingQueue
    long currentEventTime -> currentEventTime
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.InputProcessor) -> <init>
    void setProcessor(com.badlogic.gdx.InputProcessor) -> setProcessor
    com.badlogic.gdx.InputProcessor getProcessor() -> getProcessor
    void drain() -> drain
    void queueTime() -> queueTime
    boolean keyDown(int) -> keyDown
    boolean keyUp(int) -> keyUp
    boolean keyTyped(char) -> keyTyped
    boolean touchDown(int,int,int,int) -> touchDown
    boolean touchUp(int,int,int,int) -> touchUp
    boolean touchDragged(int,int,int) -> touchDragged
    boolean mouseMoved(int,int) -> mouseMoved
    boolean scrolled(int) -> scrolled
    long getCurrentEventTime() -> getCurrentEventTime
com.badlogic.gdx.LifecycleListener -> com.badlogic.gdx.LifecycleListener:
    void pause() -> pause
    void resume() -> resume
    void dispose() -> dispose
com.badlogic.gdx.Net -> com.badlogic.gdx.Net:
    void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener) -> sendHttpRequest
    void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest) -> cancelHttpRequest
    com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints) -> newServerSocket
    com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints) -> newServerSocket
    com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints) -> newClientSocket
    boolean openURI(java.lang.String) -> openURI
com.badlogic.gdx.Net$HttpMethods -> com.badlogic.gdx.Net$HttpMethods:
    java.lang.String GET -> GET
    java.lang.String POST -> POST
    java.lang.String PUT -> PUT
    java.lang.String DELETE -> DELETE
com.badlogic.gdx.Net$HttpRequest -> com.badlogic.gdx.Net$HttpRequest:
    java.lang.String httpMethod -> httpMethod
    java.lang.String url -> url
    java.util.Map headers -> headers
    int timeOut -> timeOut
    java.lang.String content -> content
    java.io.InputStream contentStream -> contentStream
    long contentLength -> contentLength
    boolean followRedirects -> followRedirects
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void setUrl(java.lang.String) -> setUrl
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setContent(java.lang.String) -> setContent
    void setContent(java.io.InputStream,long) -> setContent
    void setTimeOut(int) -> setTimeOut
    void setFollowRedirects(boolean) -> setFollowRedirects
    void setMethod(java.lang.String) -> setMethod
    int getTimeOut() -> getTimeOut
    java.lang.String getMethod() -> getMethod
    java.lang.String getUrl() -> getUrl
    java.lang.String getContent() -> getContent
    java.io.InputStream getContentStream() -> getContentStream
    long getContentLength() -> getContentLength
    java.util.Map getHeaders() -> getHeaders
    boolean getFollowRedirects() -> getFollowRedirects
    void reset() -> reset
com.badlogic.gdx.Net$HttpResponse -> com.badlogic.gdx.Net$HttpResponse:
    byte[] getResult() -> getResult
    java.lang.String getResultAsString() -> getResultAsString
    java.io.InputStream getResultAsStream() -> getResultAsStream
    com.badlogic.gdx.net.HttpStatus getStatus() -> getStatus
    java.lang.String getHeader(java.lang.String) -> getHeader
    java.util.Map getHeaders() -> getHeaders
com.badlogic.gdx.Net$HttpResponseListener -> com.badlogic.gdx.Net$HttpResponseListener:
    void handleHttpResponse(com.badlogic.gdx.Net$HttpResponse) -> handleHttpResponse
    void failed(java.lang.Throwable) -> failed
    void cancelled() -> cancelled
com.badlogic.gdx.Net$Protocol -> com.badlogic.gdx.Net$Protocol:
    com.badlogic.gdx.Net$Protocol TCP -> TCP
    com.badlogic.gdx.Net$Protocol[] $VALUES -> $VALUES
    com.badlogic.gdx.Net$Protocol[] values() -> values
    com.badlogic.gdx.Net$Protocol valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.Preferences -> com.badlogic.gdx.Preferences:
    com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean) -> putBoolean
    com.badlogic.gdx.Preferences putInteger(java.lang.String,int) -> putInteger
    com.badlogic.gdx.Preferences putLong(java.lang.String,long) -> putLong
    com.badlogic.gdx.Preferences putFloat(java.lang.String,float) -> putFloat
    com.badlogic.gdx.Preferences putString(java.lang.String,java.lang.String) -> putString
    com.badlogic.gdx.Preferences put(java.util.Map) -> put
    boolean getBoolean(java.lang.String) -> getBoolean
    int getInteger(java.lang.String) -> getInteger
    long getLong(java.lang.String) -> getLong
    float getFloat(java.lang.String) -> getFloat
    java.lang.String getString(java.lang.String) -> getString
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    int getInteger(java.lang.String,int) -> getInteger
    long getLong(java.lang.String,long) -> getLong
    float getFloat(java.lang.String,float) -> getFloat
    java.lang.String getString(java.lang.String,java.lang.String) -> getString
    java.util.Map get() -> get
    boolean contains(java.lang.String) -> contains
    void clear() -> clear
    void remove(java.lang.String) -> remove
    void flush() -> flush
com.badlogic.gdx.Screen -> com.badlogic.gdx.Screen:
    void show() -> show
    void render(float) -> render
    void resize(int,int) -> resize
    void pause() -> pause
    void resume() -> resume
    void hide() -> hide
    void dispose() -> dispose
com.badlogic.gdx.ScreenAdapter -> com.badlogic.gdx.ScreenAdapter:
    void <init>() -> <init>
    void render(float) -> render
    void resize(int,int) -> resize
    void show() -> show
    void hide() -> hide
    void pause() -> pause
    void resume() -> resume
    void dispose() -> dispose
com.badlogic.gdx.Version -> com.badlogic.gdx.Version:
    java.lang.String VERSION -> VERSION
    int MAJOR -> MAJOR
    int MINOR -> MINOR
    int REVISION -> REVISION
    void <init>() -> <init>
    boolean isHigher(int,int,int) -> isHigher
    boolean isHigherEqual(int,int,int) -> isHigherEqual
    boolean isLower(int,int,int) -> isLower
    boolean isLowerEqual(int,int,int) -> isLowerEqual
    void <clinit>() -> <clinit>
com.badlogic.gdx.assets.AssetDescriptor -> com.badlogic.gdx.assets.AssetDescriptor:
    java.lang.String fileName -> fileName
    java.lang.Class type -> type
    com.badlogic.gdx.assets.AssetLoaderParameters params -> params
    com.badlogic.gdx.files.FileHandle file -> file
    void <init>(java.lang.String,java.lang.Class) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,java.lang.Class) -> <init>
    void <init>(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.assets.AssetErrorListener -> com.badlogic.gdx.assets.AssetErrorListener:
    void error(com.badlogic.gdx.assets.AssetDescriptor,java.lang.Throwable) -> error
com.badlogic.gdx.assets.AssetLoaderParameters -> com.badlogic.gdx.assets.AssetLoaderParameters:
    com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback loadedCallback -> loadedCallback
    void <init>() -> <init>
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback -> com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback:
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> finishedLoading
com.badlogic.gdx.assets.AssetLoadingTask -> com.badlogic.gdx.assets.AssetLoadingTask:
    com.badlogic.gdx.assets.AssetManager manager -> manager
    com.badlogic.gdx.assets.AssetDescriptor assetDesc -> assetDesc
    com.badlogic.gdx.assets.loaders.AssetLoader loader -> loader
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> executor
    long startTime -> startTime
    boolean asyncDone -> asyncDone
    boolean dependenciesLoaded -> dependenciesLoaded
    com.badlogic.gdx.utils.Array dependencies -> dependencies
    com.badlogic.gdx.utils.async.AsyncResult depsFuture -> depsFuture
    com.badlogic.gdx.utils.async.AsyncResult loadFuture -> loadFuture
    java.lang.Object asset -> asset
    int ticks -> ticks
    boolean cancel -> cancel
    void <init>(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.assets.AssetDescriptor,com.badlogic.gdx.assets.loaders.AssetLoader,com.badlogic.gdx.utils.async.AsyncExecutor) -> <init>
    java.lang.Void call() -> call
    boolean update() -> update
    void handleSyncLoader() -> handleSyncLoader
    void handleAsyncLoader() -> handleAsyncLoader
    com.badlogic.gdx.files.FileHandle resolve(com.badlogic.gdx.assets.loaders.AssetLoader,com.badlogic.gdx.assets.AssetDescriptor) -> resolve
    java.lang.Object getAsset() -> getAsset
    java.lang.Object call() -> call
com.badlogic.gdx.assets.AssetManager -> com.badlogic.gdx.assets.AssetManager:
    com.badlogic.gdx.utils.ObjectMap assets -> assets
    com.badlogic.gdx.utils.ObjectMap assetTypes -> assetTypes
    com.badlogic.gdx.utils.ObjectMap assetDependencies -> assetDependencies
    com.badlogic.gdx.utils.ObjectSet injected -> injected
    com.badlogic.gdx.utils.ObjectMap loaders -> loaders
    com.badlogic.gdx.utils.Array loadQueue -> loadQueue
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> executor
    java.util.Stack tasks -> tasks
    com.badlogic.gdx.assets.AssetErrorListener listener -> listener
    int loaded -> loaded
    int toLoad -> toLoad
    com.badlogic.gdx.utils.Logger log -> log
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    java.lang.Object get(java.lang.String) -> get
    java.lang.Object get(java.lang.String,java.lang.Class) -> get
    com.badlogic.gdx.utils.Array getAll(java.lang.Class,com.badlogic.gdx.utils.Array) -> getAll
    java.lang.Object get(com.badlogic.gdx.assets.AssetDescriptor) -> get
    void unload(java.lang.String) -> unload
    boolean containsAsset(java.lang.Object) -> containsAsset
    java.lang.String getAssetFileName(java.lang.Object) -> getAssetFileName
    boolean isLoaded(java.lang.String) -> isLoaded
    boolean isLoaded(java.lang.String,java.lang.Class) -> isLoaded
    com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class) -> getLoader
    com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class,java.lang.String) -> getLoader
    void load(java.lang.String,java.lang.Class) -> load
    void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> load
    void load(com.badlogic.gdx.assets.AssetDescriptor) -> load
    boolean update() -> update
    boolean update(int) -> update
    void finishLoading() -> finishLoading
    void finishLoadingAsset(java.lang.String) -> finishLoadingAsset
    void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array) -> injectDependencies
    void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor) -> injectDependency
    void nextTask() -> nextTask
    void addTask(com.badlogic.gdx.assets.AssetDescriptor) -> addTask
    void addAsset(java.lang.String,java.lang.Class,java.lang.Object) -> addAsset
    boolean updateTask() -> updateTask
    void incrementRefCountedDependencies(java.lang.String) -> incrementRefCountedDependencies
    void handleTaskError(java.lang.Throwable) -> handleTaskError
    void setLoader(java.lang.Class,com.badlogic.gdx.assets.loaders.AssetLoader) -> setLoader
    void setLoader(java.lang.Class,java.lang.String,com.badlogic.gdx.assets.loaders.AssetLoader) -> setLoader
    int getLoadedAssets() -> getLoadedAssets
    int getQueuedAssets() -> getQueuedAssets
    float getProgress() -> getProgress
    void setErrorListener(com.badlogic.gdx.assets.AssetErrorListener) -> setErrorListener
    void dispose() -> dispose
    void clear() -> clear
    com.badlogic.gdx.utils.Logger getLogger() -> getLogger
    void setLogger(com.badlogic.gdx.utils.Logger) -> setLogger
    int getReferenceCount(java.lang.String) -> getReferenceCount
    void setReferenceCount(java.lang.String,int) -> setReferenceCount
    java.lang.String getDiagnostics() -> getDiagnostics
    com.badlogic.gdx.utils.Array getAssetNames() -> getAssetNames
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String) -> getDependencies
    java.lang.Class getAssetType(java.lang.String) -> getAssetType
com.badlogic.gdx.assets.RefCountedContainer -> com.badlogic.gdx.assets.RefCountedContainer:
    java.lang.Object object -> object
    int refCount -> refCount
    void <init>(java.lang.Object) -> <init>
    void incRefCount() -> incRefCount
    void decRefCount() -> decRefCount
    int getRefCount() -> getRefCount
    void setRefCount(int) -> setRefCount
    java.lang.Object getObject(java.lang.Class) -> getObject
    void setObject(java.lang.Object) -> setObject
com.badlogic.gdx.assets.loaders.AssetLoader -> com.badlogic.gdx.assets.loaders.AssetLoader:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> resolver
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> resolve
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader:
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
com.badlogic.gdx.assets.loaders.BitmapFontLoader -> com.badlogic.gdx.assets.loaders.BitmapFontLoader:
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> data
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter) -> getDependencies
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter) -> loadAsync
    com.badlogic.gdx.graphics.g2d.BitmapFont loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter) -> loadSync
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter -> com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter:
    boolean flip -> flip
    boolean genMipMaps -> genMipMaps
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> minFilter
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> magFilter
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData bitmapFontData -> bitmapFontData
    java.lang.String atlasName -> atlasName
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.CubemapLoader -> com.badlogic.gdx.assets.loaders.CubemapLoader:
    com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo info -> info
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter) -> loadAsync
    com.badlogic.gdx.graphics.Cubemap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter) -> loadSync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter) -> getDependencies
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo -> com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo:
    java.lang.String filename -> filename
    com.badlogic.gdx.graphics.CubemapData data -> data
    com.badlogic.gdx.graphics.Cubemap cubemap -> cubemap
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter -> com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter:
    com.badlogic.gdx.graphics.Pixmap$Format format -> format
    com.badlogic.gdx.graphics.Cubemap cubemap -> cubemap
    com.badlogic.gdx.graphics.CubemapData cubemapData -> cubemapData
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> minFilter
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> magFilter
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> wrapU
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> wrapV
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.FileHandleResolver -> com.badlogic.gdx.assets.loaders.FileHandleResolver:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> resolve
com.badlogic.gdx.assets.loaders.I18NBundleLoader -> com.badlogic.gdx.assets.loaders.I18NBundleLoader:
    com.badlogic.gdx.utils.I18NBundle bundle -> bundle
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter) -> loadAsync
    com.badlogic.gdx.utils.I18NBundle loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter) -> loadSync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter) -> getDependencies
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter -> com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter:
    java.util.Locale locale -> locale
    java.lang.String encoding -> encoding
    void <init>() -> <init>
    void <init>(java.util.Locale) -> <init>
    void <init>(java.util.Locale,java.lang.String) -> <init>
com.badlogic.gdx.assets.loaders.ModelLoader -> com.badlogic.gdx.assets.loaders.ModelLoader:
    com.badlogic.gdx.utils.Array items -> items
    com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters defaultParameters -> defaultParameters
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> loadModelData
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle) -> loadModelData
    com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.utils.TextureProvider,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> loadModel
    com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> loadModel
    com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> loadModel
    com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle) -> loadModel
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> getDependencies
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> loadAsync
    com.badlogic.gdx.graphics.g3d.Model loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> loadSync
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters -> com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters:
    com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter textureParameter -> textureParameter
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.MusicLoader -> com.badlogic.gdx.assets.loaders.MusicLoader:
    com.badlogic.gdx.audio.Music music -> music
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter) -> loadAsync
    com.badlogic.gdx.audio.Music loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter) -> loadSync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter) -> getDependencies
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter -> com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter:
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.ParticleEffectLoader -> com.badlogic.gdx.assets.loaders.ParticleEffectLoader:
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.graphics.g2d.ParticleEffect load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter) -> load
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter) -> getDependencies
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> load
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter -> com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter:
    java.lang.String atlasFile -> atlasFile
    java.lang.String atlasPrefix -> atlasPrefix
    com.badlogic.gdx.files.FileHandle imagesDir -> imagesDir
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.PixmapLoader -> com.badlogic.gdx.assets.loaders.PixmapLoader:
    com.badlogic.gdx.graphics.Pixmap pixmap -> pixmap
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter) -> loadAsync
    com.badlogic.gdx.graphics.Pixmap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter) -> loadSync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter) -> getDependencies
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter -> com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter:
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.SkinLoader -> com.badlogic.gdx.assets.loaders.SkinLoader:
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter) -> getDependencies
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter) -> loadAsync
    com.badlogic.gdx.scenes.scene2d.ui.Skin loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter) -> loadSync
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter -> com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter:
    java.lang.String textureAtlasPath -> textureAtlasPath
    com.badlogic.gdx.utils.ObjectMap resources -> resources
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.utils.ObjectMap) -> <init>
com.badlogic.gdx.assets.loaders.SoundLoader -> com.badlogic.gdx.assets.loaders.SoundLoader:
    com.badlogic.gdx.audio.Sound sound -> sound
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter) -> loadAsync
    com.badlogic.gdx.audio.Sound loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter) -> loadSync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter) -> getDependencies
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter -> com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter:
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader -> com.badlogic.gdx.assets.loaders.SynchronousAssetLoader:
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> load
com.badlogic.gdx.assets.loaders.TextureAtlasLoader -> com.badlogic.gdx.assets.loaders.TextureAtlasLoader:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData data -> data
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.graphics.g2d.TextureAtlas load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter) -> load
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter) -> getDependencies
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> load
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter -> com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter:
    boolean flip -> flip
    void <init>() -> <init>
    void <init>(boolean) -> <init>
com.badlogic.gdx.assets.loaders.TextureLoader -> com.badlogic.gdx.assets.loaders.TextureLoader:
    com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo info -> info
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> loadAsync
    com.badlogic.gdx.graphics.Texture loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> loadSync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> getDependencies
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo -> com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo:
    java.lang.String filename -> filename
    com.badlogic.gdx.graphics.TextureData data -> data
    com.badlogic.gdx.graphics.Texture texture -> texture
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter -> com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter:
    com.badlogic.gdx.graphics.Pixmap$Format format -> format
    boolean genMipMaps -> genMipMaps
    com.badlogic.gdx.graphics.Texture texture -> texture
    com.badlogic.gdx.graphics.TextureData textureData -> textureData
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> minFilter
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> magFilter
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> wrapU
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> wrapV
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.resolvers.AbsoluteFileHandleResolver -> com.badlogic.gdx.assets.loaders.resolvers.AbsoluteFileHandleResolver:
    void <init>() -> <init>
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> resolve
com.badlogic.gdx.assets.loaders.resolvers.ClasspathFileHandleResolver -> com.badlogic.gdx.assets.loaders.resolvers.ClasspathFileHandleResolver:
    void <init>() -> <init>
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> resolve
com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver -> com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver:
    void <init>() -> <init>
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> resolve
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver -> com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver:
    void <init>() -> <init>
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> resolve
com.badlogic.gdx.assets.loaders.resolvers.LocalFileHandleResolver -> com.badlogic.gdx.assets.loaders.resolvers.LocalFileHandleResolver:
    void <init>() -> <init>
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> resolve
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver -> com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver:
    com.badlogic.gdx.assets.loaders.FileHandleResolver baseResolver -> baseResolver
    com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution[] descriptors -> descriptors
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver,com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution[]) -> <init>
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> resolve
    java.lang.String resolve(com.badlogic.gdx.files.FileHandle,java.lang.String) -> resolve
    com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution choose(com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution[]) -> choose
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution -> com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution:
    int portraitWidth -> portraitWidth
    int portraitHeight -> portraitHeight
    java.lang.String folder -> folder
    void <init>(int,int,java.lang.String) -> <init>
com.badlogic.gdx.audio.AudioDevice -> com.badlogic.gdx.audio.AudioDevice:
    boolean isMono() -> isMono
    void writeSamples(short[],int,int) -> writeSamples
    void writeSamples(float[],int,int) -> writeSamples
    int getLatency() -> getLatency
    void dispose() -> dispose
    void setVolume(float) -> setVolume
com.badlogic.gdx.audio.AudioRecorder -> com.badlogic.gdx.audio.AudioRecorder:
    void read(short[],int,int) -> read
    void dispose() -> dispose
com.badlogic.gdx.audio.Music -> com.badlogic.gdx.audio.Music:
    void play() -> play
    void pause() -> pause
    void stop() -> stop
    boolean isPlaying() -> isPlaying
    void setLooping(boolean) -> setLooping
    boolean isLooping() -> isLooping
    void setVolume(float) -> setVolume
    float getVolume() -> getVolume
    void setPan(float,float) -> setPan
    void setPosition(float) -> setPosition
    float getPosition() -> getPosition
    void dispose() -> dispose
    void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener) -> setOnCompletionListener
com.badlogic.gdx.audio.Music$OnCompletionListener -> com.badlogic.gdx.audio.Music$OnCompletionListener:
    void onCompletion(com.badlogic.gdx.audio.Music) -> onCompletion
com.badlogic.gdx.audio.Sound -> com.badlogic.gdx.audio.Sound:
    long play() -> play
    long play(float) -> play
    long play(float,float,float) -> play
    long loop() -> loop
    long loop(float) -> loop
    long loop(float,float,float) -> loop
    void stop() -> stop
    void pause() -> pause
    void resume() -> resume
    void dispose() -> dispose
    void stop(long) -> stop
    void pause(long) -> pause
    void resume(long) -> resume
    void setLooping(long,boolean) -> setLooping
    void setPitch(long,float) -> setPitch
    void setVolume(long,float) -> setVolume
    void setPan(long,float,float) -> setPan
    void setPriority(long,int) -> setPriority
com.badlogic.gdx.backends.android.AndroidApplication -> com.badlogic.gdx.backends.android.AndroidApplication:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> graphics
    com.badlogic.gdx.backends.android.AndroidInput input -> input
    com.badlogic.gdx.backends.android.AndroidAudio audio -> audio
    com.badlogic.gdx.backends.android.AndroidFiles files -> files
    com.badlogic.gdx.backends.android.AndroidNet net -> net
    com.badlogic.gdx.ApplicationListener listener -> listener
    android.os.Handler handler -> handler
    boolean firstResume -> firstResume
    com.badlogic.gdx.utils.Array runnables -> runnables
    com.badlogic.gdx.utils.Array executedRunnables -> executedRunnables
    com.badlogic.gdx.utils.Array lifecycleListeners -> lifecycleListeners
    com.badlogic.gdx.utils.Array androidEventListeners -> androidEventListeners
    int logLevel -> logLevel
    boolean useImmersiveMode -> useImmersiveMode
    boolean hideStatusBar -> hideStatusBar
    int wasFocusChanged -> wasFocusChanged
    boolean isWaitingForAudio -> isWaitingForAudio
    com.badlogic.gdx.backends.android.AndroidClipboard clipboard -> clipboard
    void <init>() -> <init>
    void initialize(com.badlogic.gdx.ApplicationListener) -> initialize
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> initialize
    android.view.View initializeForView(com.badlogic.gdx.ApplicationListener) -> initializeForView
    android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> initializeForView
    void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean) -> init
    android.widget.FrameLayout$LayoutParams createLayoutParams() -> createLayoutParams
    void createWakeLock(boolean) -> createWakeLock
    void hideStatusBar(boolean) -> hideStatusBar
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void useImmersiveMode(boolean) -> useImmersiveMode
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> getApplicationListener
    com.badlogic.gdx.Audio getAudio() -> getAudio
    com.badlogic.gdx.Files getFiles() -> getFiles
    com.badlogic.gdx.Graphics getGraphics() -> getGraphics
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> getInput
    com.badlogic.gdx.Net getNet() -> getNet
    com.badlogic.gdx.Application$ApplicationType getType() -> getType
    int getVersion() -> getVersion
    long getJavaHeap() -> getJavaHeap
    long getNativeHeap() -> getNativeHeap
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> getPreferences
    com.badlogic.gdx.utils.Clipboard getClipboard() -> getClipboard
    void postRunnable(java.lang.Runnable) -> postRunnable
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void exit() -> exit
    void debug(java.lang.String,java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String,java.lang.Throwable) -> debug
    void log(java.lang.String,java.lang.String) -> log
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> log
    void error(java.lang.String,java.lang.String) -> error
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> error
    void setLogLevel(int) -> setLogLevel
    int getLogLevel() -> getLogLevel
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> addLifecycleListener
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> removeLifecycleListener
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void addAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener) -> addAndroidEventListener
    void removeAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener) -> removeAndroidEventListener
    android.content.Context getContext() -> getContext
    com.badlogic.gdx.utils.Array getRunnables() -> getRunnables
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> getExecutedRunnables
    com.badlogic.gdx.utils.Array getLifecycleListeners() -> getLifecycleListeners
    android.view.Window getApplicationWindow() -> getApplicationWindow
    android.os.Handler getHandler() -> getHandler
    com.badlogic.gdx.Input getInput() -> getInput
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidApplication$1 -> com.badlogic.gdx.backends.android.AndroidApplication$1:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidApplication) -> <init>
    void resume() -> resume
    void pause() -> pause
    void dispose() -> dispose
com.badlogic.gdx.backends.android.AndroidApplication$2 -> com.badlogic.gdx.backends.android.AndroidApplication$2:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidApplication) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidApplicationBase -> com.badlogic.gdx.backends.android.AndroidApplicationBase:
    int MINIMUM_SDK -> MINIMUM_SDK
    android.content.Context getContext() -> getContext
    com.badlogic.gdx.utils.Array getRunnables() -> getRunnables
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> getExecutedRunnables
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    void startActivity(android.content.Intent) -> startActivity
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> getInput
    com.badlogic.gdx.utils.Array getLifecycleListeners() -> getLifecycleListeners
    android.view.Window getApplicationWindow() -> getApplicationWindow
    android.view.WindowManager getWindowManager() -> getWindowManager
    void useImmersiveMode(boolean) -> useImmersiveMode
    android.os.Handler getHandler() -> getHandler
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> com.badlogic.gdx.backends.android.AndroidApplicationConfiguration:
    int r -> r
    int g -> g
    int b -> b
    int a -> a
    int depth -> depth
    int stencil -> stencil
    int numSamples -> numSamples
    boolean useAccelerometer -> useAccelerometer
    boolean useCompass -> useCompass
    int touchSleepTime -> touchSleepTime
    boolean useWakelock -> useWakelock
    boolean hideStatusBar -> hideStatusBar
    boolean disableAudio -> disableAudio
    int maxSimultaneousSounds -> maxSimultaneousSounds
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> resolutionStrategy
    boolean getTouchEventsForLiveWallpaper -> getTouchEventsForLiveWallpaper
    boolean useImmersiveMode -> useImmersiveMode
    boolean useGLSurfaceView20API18 -> useGLSurfaceView20API18
    void <init>() -> <init>
com.badlogic.gdx.backends.android.AndroidAudio -> com.badlogic.gdx.backends.android.AndroidAudio:
    android.media.SoundPool soundPool -> soundPool
    android.media.AudioManager manager -> manager
    java.util.List musics -> musics
    void <init>(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> <init>
    void pause() -> pause
    void resume() -> resume
    com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean) -> newAudioDevice
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> newMusic
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> newSound
    com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean) -> newAudioRecorder
    void dispose() -> dispose
com.badlogic.gdx.backends.android.AndroidAudioDevice -> com.badlogic.gdx.backends.android.AndroidAudioDevice:
    android.media.AudioTrack track -> track
    short[] buffer -> buffer
    boolean isMono -> isMono
    int latency -> latency
    void <init>(int,boolean) -> <init>
    void dispose() -> dispose
    boolean isMono() -> isMono
    void writeSamples(short[],int,int) -> writeSamples
    void writeSamples(float[],int,int) -> writeSamples
    int getLatency() -> getLatency
    void setVolume(float) -> setVolume
com.badlogic.gdx.backends.android.AndroidAudioRecorder -> com.badlogic.gdx.backends.android.AndroidAudioRecorder:
    android.media.AudioRecord recorder -> recorder
    void <init>(int,boolean) -> <init>
    void dispose() -> dispose
    void read(short[],int,int) -> read
com.badlogic.gdx.backends.android.AndroidClipboard -> com.badlogic.gdx.backends.android.AndroidClipboard:
    android.content.Context context -> context
    void <init>(android.content.Context) -> <init>
    java.lang.String getContents() -> getContents
    void setContents(java.lang.String) -> setContents
com.badlogic.gdx.backends.android.AndroidClipboard$1 -> com.badlogic.gdx.backends.android.AndroidClipboard$1:
    java.lang.String val$contents -> val$contents
    com.badlogic.gdx.backends.android.AndroidClipboard this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidClipboard,java.lang.String) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidDaydream -> com.badlogic.gdx.backends.android.AndroidDaydream:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> graphics
    com.badlogic.gdx.backends.android.AndroidInput input -> input
    com.badlogic.gdx.backends.android.AndroidAudio audio -> audio
    com.badlogic.gdx.backends.android.AndroidFiles files -> files
    com.badlogic.gdx.backends.android.AndroidNet net -> net
    com.badlogic.gdx.ApplicationListener listener -> listener
    android.os.Handler handler -> handler
    boolean firstResume -> firstResume
    com.badlogic.gdx.utils.Array runnables -> runnables
    com.badlogic.gdx.utils.Array executedRunnables -> executedRunnables
    com.badlogic.gdx.utils.Array lifecycleListeners -> lifecycleListeners
    int logLevel -> logLevel
    com.badlogic.gdx.backends.android.AndroidClipboard clipboard -> clipboard
    void <init>() -> <init>
    void initialize(com.badlogic.gdx.ApplicationListener) -> initialize
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> initialize
    android.view.View initializeForView(com.badlogic.gdx.ApplicationListener) -> initializeForView
    android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> initializeForView
    void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean) -> init
    android.widget.FrameLayout$LayoutParams createLayoutParams() -> createLayoutParams
    void createWakeLock(boolean) -> createWakeLock
    void hideStatusBar(com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> hideStatusBar
    void onDreamingStopped() -> onDreamingStopped
    void onDreamingStarted() -> onDreamingStarted
    void onDetachedFromWindow() -> onDetachedFromWindow
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> getApplicationListener
    com.badlogic.gdx.Audio getAudio() -> getAudio
    com.badlogic.gdx.Files getFiles() -> getFiles
    com.badlogic.gdx.Graphics getGraphics() -> getGraphics
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> getInput
    com.badlogic.gdx.Net getNet() -> getNet
    com.badlogic.gdx.Application$ApplicationType getType() -> getType
    int getVersion() -> getVersion
    long getJavaHeap() -> getJavaHeap
    long getNativeHeap() -> getNativeHeap
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> getPreferences
    com.badlogic.gdx.utils.Clipboard getClipboard() -> getClipboard
    void postRunnable(java.lang.Runnable) -> postRunnable
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void exit() -> exit
    void debug(java.lang.String,java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String,java.lang.Throwable) -> debug
    void log(java.lang.String,java.lang.String) -> log
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> log
    void error(java.lang.String,java.lang.String) -> error
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> error
    void setLogLevel(int) -> setLogLevel
    int getLogLevel() -> getLogLevel
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> addLifecycleListener
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> removeLifecycleListener
    android.content.Context getContext() -> getContext
    com.badlogic.gdx.utils.Array getRunnables() -> getRunnables
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> getExecutedRunnables
    com.badlogic.gdx.utils.Array getLifecycleListeners() -> getLifecycleListeners
    android.view.Window getApplicationWindow() -> getApplicationWindow
    android.os.Handler getHandler() -> getHandler
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    void useImmersiveMode(boolean) -> useImmersiveMode
    com.badlogic.gdx.Input getInput() -> getInput
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidDaydream$1 -> com.badlogic.gdx.backends.android.AndroidDaydream$1:
    com.badlogic.gdx.backends.android.AndroidDaydream this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidDaydream) -> <init>
    void resume() -> resume
    void pause() -> pause
    void dispose() -> dispose
com.badlogic.gdx.backends.android.AndroidDaydream$2 -> com.badlogic.gdx.backends.android.AndroidDaydream$2:
    com.badlogic.gdx.backends.android.AndroidDaydream this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidDaydream) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidEventListener -> com.badlogic.gdx.backends.android.AndroidEventListener:
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
com.badlogic.gdx.backends.android.AndroidFileHandle -> com.badlogic.gdx.backends.android.AndroidFileHandle:
    android.content.res.AssetManager assets -> assets
    void <init>(android.content.res.AssetManager,java.lang.String,com.badlogic.gdx.Files$FileType) -> <init>
    void <init>(android.content.res.AssetManager,java.io.File,com.badlogic.gdx.Files$FileType) -> <init>
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> child
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> sibling
    com.badlogic.gdx.files.FileHandle parent() -> parent
    java.io.InputStream read() -> read
    com.badlogic.gdx.files.FileHandle[] list() -> list
    com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter) -> list
    com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter) -> list
    com.badlogic.gdx.files.FileHandle[] list(java.lang.String) -> list
    boolean isDirectory() -> isDirectory
    boolean exists() -> exists
    long length() -> length
    long lastModified() -> lastModified
    java.io.File file() -> file
com.badlogic.gdx.backends.android.AndroidFiles -> com.badlogic.gdx.backends.android.AndroidFiles:
    java.lang.String sdcard -> sdcard
    java.lang.String localpath -> localpath
    android.content.res.AssetManager assets -> assets
    void <init>(android.content.res.AssetManager) -> <init>
    void <init>(android.content.res.AssetManager,java.lang.String) -> <init>
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> getFileHandle
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> classpath
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> internal
    com.badlogic.gdx.files.FileHandle external(java.lang.String) -> external
    com.badlogic.gdx.files.FileHandle absolute(java.lang.String) -> absolute
    com.badlogic.gdx.files.FileHandle local(java.lang.String) -> local
    java.lang.String getExternalStoragePath() -> getExternalStoragePath
    boolean isExternalStorageAvailable() -> isExternalStorageAvailable
    java.lang.String getLocalStoragePath() -> getLocalStoragePath
    boolean isLocalStorageAvailable() -> isLocalStorageAvailable
com.badlogic.gdx.backends.android.AndroidFragmentApplication -> com.badlogic.gdx.backends.android.AndroidFragmentApplication:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> graphics
    com.badlogic.gdx.backends.android.AndroidInput input -> input
    com.badlogic.gdx.backends.android.AndroidAudio audio -> audio
    com.badlogic.gdx.backends.android.AndroidFiles files -> files
    com.badlogic.gdx.backends.android.AndroidNet net -> net
    com.badlogic.gdx.ApplicationListener listener -> listener
    android.os.Handler handler -> handler
    boolean firstResume -> firstResume
    com.badlogic.gdx.utils.Array runnables -> runnables
    com.badlogic.gdx.utils.Array executedRunnables -> executedRunnables
    com.badlogic.gdx.utils.Array lifecycleListeners -> lifecycleListeners
    com.badlogic.gdx.utils.Array androidEventListeners -> androidEventListeners
    int logLevel -> logLevel
    com.badlogic.gdx.backends.android.AndroidFragmentApplication$Callbacks callbacks -> callbacks
    com.badlogic.gdx.backends.android.AndroidClipboard clipboard -> clipboard
    void <init>() -> <init>
    void onAttach(android.app.Activity) -> onAttach
    void onDetach() -> onDetach
    android.widget.FrameLayout$LayoutParams createLayoutParams() -> createLayoutParams
    void createWakeLock(boolean) -> createWakeLock
    void useImmersiveMode(boolean) -> useImmersiveMode
    android.view.View initializeForView(com.badlogic.gdx.ApplicationListener) -> initializeForView
    android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> initializeForView
    void onPause() -> onPause
    void onResume() -> onResume
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> getApplicationListener
    com.badlogic.gdx.Audio getAudio() -> getAudio
    com.badlogic.gdx.Files getFiles() -> getFiles
    com.badlogic.gdx.Graphics getGraphics() -> getGraphics
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> getInput
    com.badlogic.gdx.Net getNet() -> getNet
    com.badlogic.gdx.Application$ApplicationType getType() -> getType
    int getVersion() -> getVersion
    long getJavaHeap() -> getJavaHeap
    long getNativeHeap() -> getNativeHeap
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> getPreferences
    com.badlogic.gdx.utils.Clipboard getClipboard() -> getClipboard
    void postRunnable(java.lang.Runnable) -> postRunnable
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void exit() -> exit
    void debug(java.lang.String,java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String,java.lang.Throwable) -> debug
    void log(java.lang.String,java.lang.String) -> log
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> log
    void error(java.lang.String,java.lang.String) -> error
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> error
    void setLogLevel(int) -> setLogLevel
    int getLogLevel() -> getLogLevel
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> addLifecycleListener
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> removeLifecycleListener
    android.content.Context getContext() -> getContext
    com.badlogic.gdx.utils.Array getRunnables() -> getRunnables
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> getExecutedRunnables
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    com.badlogic.gdx.utils.Array getLifecycleListeners() -> getLifecycleListeners
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void addAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener) -> addAndroidEventListener
    void removeAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener) -> removeAndroidEventListener
    android.view.Window getApplicationWindow() -> getApplicationWindow
    android.os.Handler getHandler() -> getHandler
    android.view.WindowManager getWindowManager() -> getWindowManager
    boolean isAnyParentFragmentRemoving() -> isAnyParentFragmentRemoving
    com.badlogic.gdx.Input getInput() -> getInput
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1 -> com.badlogic.gdx.backends.android.AndroidFragmentApplication$1:
    com.badlogic.gdx.backends.android.AndroidFragmentApplication this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidFragmentApplication) -> <init>
    void resume() -> resume
    void pause() -> pause
    void dispose() -> dispose
com.badlogic.gdx.backends.android.AndroidFragmentApplication$2 -> com.badlogic.gdx.backends.android.AndroidFragmentApplication$2:
    com.badlogic.gdx.backends.android.AndroidFragmentApplication this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidFragmentApplication) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidFragmentApplication$Callbacks -> com.badlogic.gdx.backends.android.AndroidFragmentApplication$Callbacks:
    void exit() -> exit
com.badlogic.gdx.backends.android.AndroidGL20 -> com.badlogic.gdx.backends.android.AndroidGL20:
    void <init>() -> <init>
    void init() -> init
    void glActiveTexture(int) -> glActiveTexture
    void glAttachShader(int,int) -> glAttachShader
    void glBindAttribLocation(int,int,java.lang.String) -> glBindAttribLocation
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBindTexture(int,int) -> glBindTexture
    void glBlendColor(float,float,float,float) -> glBlendColor
    void glBlendEquation(int) -> glBlendEquation
    void glBlendEquationSeparate(int,int) -> glBlendEquationSeparate
    void glBlendFunc(int,int) -> glBlendFunc
    void glBlendFuncSeparate(int,int,int,int) -> glBlendFuncSeparate
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearDepthf(float) -> glClearDepthf
    void glClearStencil(int) -> glClearStencil
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glCompileShader(int) -> glCompileShader
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glCullFace(int) -> glCullFace
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteBuffer(int) -> glDeleteBuffer
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteFramebuffer(int) -> glDeleteFramebuffer
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteRenderbuffer(int) -> glDeleteRenderbuffer
    void glDeleteShader(int) -> glDeleteShader
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDeleteTexture(int) -> glDeleteTexture
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDetachShader(int,int) -> glDetachShader
    void glDisable(int) -> glDisable
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glFrontFace(int) -> glFrontFace
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    int glGenBuffer() -> glGenBuffer
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    int glGenFramebuffer() -> glGenFramebuffer
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    int glGenRenderbuffer() -> glGenRenderbuffer
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGenTexture() -> glGenTexture
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer) -> glGetAttachedShaders
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetBooleanv(int,java.nio.Buffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    int glGetError() -> glGetError
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer) -> glGetFramebufferAttachmentParameteriv
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer) -> glGetRenderbufferParameteriv
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetShaderPrecisionFormat
    void glGetShaderSource(int,int,java.nio.Buffer,java.lang.String) -> glGetShaderSource
    java.lang.String glGetString(int) -> glGetString
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetUniformfv(int,int,java.nio.FloatBuffer) -> glGetUniformfv
    void glGetUniformiv(int,int,java.nio.IntBuffer) -> glGetUniformiv
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glGetVertexAttribfv(int,int,java.nio.FloatBuffer) -> glGetVertexAttribfv
    void glGetVertexAttribiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribiv
    void glGetVertexAttribPointerv(int,int,java.nio.Buffer) -> glGetVertexAttribPointerv
    void glHint(int,int) -> glHint
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsFramebuffer(int) -> glIsFramebuffer
    boolean glIsProgram(int) -> glIsProgram
    boolean glIsRenderbuffer(int) -> glIsRenderbuffer
    boolean glIsShader(int) -> glIsShader
    boolean glIsTexture(int) -> glIsTexture
    void glLineWidth(float) -> glLineWidth
    void glLinkProgram(int) -> glLinkProgram
    void glPixelStorei(int,int) -> glPixelStorei
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glReleaseShaderCompiler() -> glReleaseShaderCompiler
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glScissor(int,int,int,int) -> glScissor
    void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int) -> glShaderBinary
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilFuncSeparate(int,int,int,int) -> glStencilFuncSeparate
    void glStencilMask(int) -> glStencilMask
    void glStencilMaskSeparate(int,int) -> glStencilMaskSeparate
    void glStencilOp(int,int,int) -> glStencilOp
    void glStencilOpSeparate(int,int,int,int) -> glStencilOpSeparate
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glUniform1f(int,float) -> glUniform1f
    void glUniform1fv(int,int,java.nio.FloatBuffer) -> glUniform1fv
    void glUniform1fv(int,int,float[],int) -> glUniform1fv
    void glUniform1i(int,int) -> glUniform1i
    void glUniform1iv(int,int,java.nio.IntBuffer) -> glUniform1iv
    void glUniform1iv(int,int,int[],int) -> glUniform1iv
    void glUniform2f(int,float,float) -> glUniform2f
    void glUniform2fv(int,int,java.nio.FloatBuffer) -> glUniform2fv
    void glUniform2fv(int,int,float[],int) -> glUniform2fv
    void glUniform2i(int,int,int) -> glUniform2i
    void glUniform2iv(int,int,java.nio.IntBuffer) -> glUniform2iv
    void glUniform2iv(int,int,int[],int) -> glUniform2iv
    void glUniform3f(int,float,float,float) -> glUniform3f
    void glUniform3fv(int,int,java.nio.FloatBuffer) -> glUniform3fv
    void glUniform3fv(int,int,float[],int) -> glUniform3fv
    void glUniform3i(int,int,int,int) -> glUniform3i
    void glUniform3iv(int,int,java.nio.IntBuffer) -> glUniform3iv
    void glUniform3iv(int,int,int[],int) -> glUniform3iv
    void glUniform4f(int,float,float,float,float) -> glUniform4f
    void glUniform4fv(int,int,java.nio.FloatBuffer) -> glUniform4fv
    void glUniform4fv(int,int,float[],int) -> glUniform4fv
    void glUniform4i(int,int,int,int,int) -> glUniform4i
    void glUniform4iv(int,int,java.nio.IntBuffer) -> glUniform4iv
    void glUniform4iv(int,int,int[],int) -> glUniform4iv
    void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2fv
    void glUniformMatrix2fv(int,int,boolean,float[],int) -> glUniformMatrix2fv
    void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3fv
    void glUniformMatrix3fv(int,int,boolean,float[],int) -> glUniformMatrix3fv
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glValidateProgram(int) -> glValidateProgram
    void glVertexAttrib1f(int,float) -> glVertexAttrib1f
    void glVertexAttrib1fv(int,java.nio.FloatBuffer) -> glVertexAttrib1fv
    void glVertexAttrib2f(int,float,float) -> glVertexAttrib2f
    void glVertexAttrib2fv(int,java.nio.FloatBuffer) -> glVertexAttrib2fv
    void glVertexAttrib3f(int,float,float,float) -> glVertexAttrib3f
    void glVertexAttrib3fv(int,java.nio.FloatBuffer) -> glVertexAttrib3fv
    void glVertexAttrib4f(int,float,float,float,float) -> glVertexAttrib4f
    void glVertexAttrib4fv(int,java.nio.FloatBuffer) -> glVertexAttrib4fv
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
    void glViewport(int,int,int,int) -> glViewport
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidGL30 -> com.badlogic.gdx.backends.android.AndroidGL30:
    void <init>() -> <init>
    void glReadBuffer(int) -> glReadBuffer
    void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer) -> glDrawRangeElements
    void glDrawRangeElements(int,int,int,int,int,int) -> glDrawRangeElements
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage3D
    void glTexImage3D(int,int,int,int,int,int,int,int,int,int) -> glTexImage3D
    void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage3D
    void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int) -> glTexSubImage3D
    void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int) -> glCopyTexSubImage3D
    void glGenQueries(int,int[],int) -> glGenQueries
    void glGenQueries(int,java.nio.IntBuffer) -> glGenQueries
    void glDeleteQueries(int,int[],int) -> glDeleteQueries
    void glDeleteQueries(int,java.nio.IntBuffer) -> glDeleteQueries
    boolean glIsQuery(int) -> glIsQuery
    void glBeginQuery(int,int) -> glBeginQuery
    void glEndQuery(int) -> glEndQuery
    void glGetQueryiv(int,int,java.nio.IntBuffer) -> glGetQueryiv
    void glGetQueryObjectuiv(int,int,java.nio.IntBuffer) -> glGetQueryObjectuiv
    boolean glUnmapBuffer(int) -> glUnmapBuffer
    java.nio.Buffer glGetBufferPointerv(int,int) -> glGetBufferPointerv
    void glDrawBuffers(int,java.nio.IntBuffer) -> glDrawBuffers
    void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2x3fv
    void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3x2fv
    void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2x4fv
    void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4x2fv
    void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3x4fv
    void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4x3fv
    void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int) -> glBlitFramebuffer
    void glRenderbufferStorageMultisample(int,int,int,int,int) -> glRenderbufferStorageMultisample
    void glFramebufferTextureLayer(int,int,int,int,int) -> glFramebufferTextureLayer
    void glFlushMappedBufferRange(int,int,int) -> glFlushMappedBufferRange
    void glBindVertexArray(int) -> glBindVertexArray
    void glDeleteVertexArrays(int,int[],int) -> glDeleteVertexArrays
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> glDeleteVertexArrays
    void glGenVertexArrays(int,int[],int) -> glGenVertexArrays
    void glGenVertexArrays(int,java.nio.IntBuffer) -> glGenVertexArrays
    boolean glIsVertexArray(int) -> glIsVertexArray
    void glBeginTransformFeedback(int) -> glBeginTransformFeedback
    void glEndTransformFeedback() -> glEndTransformFeedback
    void glBindBufferRange(int,int,int,int,int) -> glBindBufferRange
    void glBindBufferBase(int,int,int) -> glBindBufferBase
    void glTransformFeedbackVaryings(int,java.lang.String[],int) -> glTransformFeedbackVaryings
    void glVertexAttribIPointer(int,int,int,int,int) -> glVertexAttribIPointer
    void glGetVertexAttribIiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribIiv
    void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribIuiv
    void glVertexAttribI4i(int,int,int,int,int) -> glVertexAttribI4i
    void glVertexAttribI4ui(int,int,int,int,int) -> glVertexAttribI4ui
    void glGetUniformuiv(int,int,java.nio.IntBuffer) -> glGetUniformuiv
    int glGetFragDataLocation(int,java.lang.String) -> glGetFragDataLocation
    void glUniform1uiv(int,int,java.nio.IntBuffer) -> glUniform1uiv
    void glUniform3uiv(int,int,java.nio.IntBuffer) -> glUniform3uiv
    void glUniform4uiv(int,int,java.nio.IntBuffer) -> glUniform4uiv
    void glClearBufferiv(int,int,java.nio.IntBuffer) -> glClearBufferiv
    void glClearBufferuiv(int,int,java.nio.IntBuffer) -> glClearBufferuiv
    void glClearBufferfv(int,int,java.nio.FloatBuffer) -> glClearBufferfv
    void glClearBufferfi(int,int,float,int) -> glClearBufferfi
    java.lang.String glGetStringi(int,int) -> glGetStringi
    void glCopyBufferSubData(int,int,int,int,int) -> glCopyBufferSubData
    void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer) -> glGetUniformIndices
    void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetActiveUniformsiv
    int glGetUniformBlockIndex(int,java.lang.String) -> glGetUniformBlockIndex
    void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer) -> glGetActiveUniformBlockiv
    void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer) -> glGetActiveUniformBlockName
    java.lang.String glGetActiveUniformBlockName(int,int) -> glGetActiveUniformBlockName
    void glUniformBlockBinding(int,int,int) -> glUniformBlockBinding
    void glDrawArraysInstanced(int,int,int,int) -> glDrawArraysInstanced
    void glDrawElementsInstanced(int,int,int,int,int) -> glDrawElementsInstanced
    void glGetInteger64v(int,java.nio.LongBuffer) -> glGetInteger64v
    void glGetBufferParameteri64v(int,int,java.nio.LongBuffer) -> glGetBufferParameteri64v
    void glGenSamplers(int,int[],int) -> glGenSamplers
    void glGenSamplers(int,java.nio.IntBuffer) -> glGenSamplers
    void glDeleteSamplers(int,int[],int) -> glDeleteSamplers
    void glDeleteSamplers(int,java.nio.IntBuffer) -> glDeleteSamplers
    boolean glIsSampler(int) -> glIsSampler
    void glBindSampler(int,int) -> glBindSampler
    void glSamplerParameteri(int,int,int) -> glSamplerParameteri
    void glSamplerParameteriv(int,int,java.nio.IntBuffer) -> glSamplerParameteriv
    void glSamplerParameterf(int,int,float) -> glSamplerParameterf
    void glSamplerParameterfv(int,int,java.nio.FloatBuffer) -> glSamplerParameterfv
    void glGetSamplerParameteriv(int,int,java.nio.IntBuffer) -> glGetSamplerParameteriv
    void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer) -> glGetSamplerParameterfv
    void glVertexAttribDivisor(int,int) -> glVertexAttribDivisor
    void glBindTransformFeedback(int,int) -> glBindTransformFeedback
    void glDeleteTransformFeedbacks(int,int[],int) -> glDeleteTransformFeedbacks
    void glDeleteTransformFeedbacks(int,java.nio.IntBuffer) -> glDeleteTransformFeedbacks
    void glGenTransformFeedbacks(int,int[],int) -> glGenTransformFeedbacks
    void glGenTransformFeedbacks(int,java.nio.IntBuffer) -> glGenTransformFeedbacks
    boolean glIsTransformFeedback(int) -> glIsTransformFeedback
    void glPauseTransformFeedback() -> glPauseTransformFeedback
    void glResumeTransformFeedback() -> glResumeTransformFeedback
    void glProgramParameteri(int,int,int) -> glProgramParameteri
    void glInvalidateFramebuffer(int,int,java.nio.IntBuffer) -> glInvalidateFramebuffer
    void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int) -> glInvalidateSubFramebuffer
com.badlogic.gdx.backends.android.AndroidGraphics -> com.badlogic.gdx.backends.android.AndroidGraphics:
    java.lang.String LOG_TAG -> LOG_TAG
    boolean enforceContinuousRendering -> enforceContinuousRendering
    android.view.View view -> view
    int width -> width
    int height -> height
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> app
    com.badlogic.gdx.graphics.GL20 gl20 -> gl20
    com.badlogic.gdx.graphics.GL30 gl30 -> gl30
    javax.microedition.khronos.egl.EGLContext eglContext -> eglContext
    java.lang.String extensions -> extensions
    long lastFrameTime -> lastFrameTime
    float deltaTime -> deltaTime
    long frameStart -> frameStart
    long frameId -> frameId
    int frames -> frames
    int fps -> fps
    com.badlogic.gdx.math.WindowedMean mean -> mean
    boolean created -> created
    boolean running -> running
    boolean pause -> pause
    boolean resume -> resume
    boolean destroy -> destroy
    float ppiX -> ppiX
    float ppiY -> ppiY
    float ppcX -> ppcX
    float ppcY -> ppcY
    float density -> density
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> config
    com.badlogic.gdx.Graphics$BufferFormat bufferFormat -> bufferFormat
    boolean isContinuous -> isContinuous
    int[] value -> value
    java.lang.Object synch -> synch
    void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy,boolean) -> <init>
    void preserveEGLContextOnPause() -> preserveEGLContextOnPause
    android.view.View createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> createGLSurfaceView
    void onPauseGLSurfaceView() -> onPauseGLSurfaceView
    void onResumeGLSurfaceView() -> onResumeGLSurfaceView
    android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser() -> getEglConfigChooser
    void updatePpi() -> updatePpi
    boolean checkGL20() -> checkGL20
    com.badlogic.gdx.graphics.GL20 getGL20() -> getGL20
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    void setupGL(javax.microedition.khronos.opengles.GL10) -> setupGL
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void logConfig(javax.microedition.khronos.egl.EGLConfig) -> logConfig
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> getAttrib
    void resume() -> resume
    void pause() -> pause
    void destroy() -> destroy
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    long getFrameId() -> getFrameId
    float getDeltaTime() -> getDeltaTime
    float getRawDeltaTime() -> getRawDeltaTime
    com.badlogic.gdx.Graphics$GraphicsType getType() -> getType
    int getFramesPerSecond() -> getFramesPerSecond
    void clearManagedCaches() -> clearManagedCaches
    void logManagedCachesStatus() -> logManagedCachesStatus
    android.view.View getView() -> getView
    float getPpiX() -> getPpiX
    float getPpiY() -> getPpiY
    float getPpcX() -> getPpcX
    float getPpcY() -> getPpcY
    float getDensity() -> getDensity
    boolean supportsDisplayModeChange() -> supportsDisplayModeChange
    boolean setDisplayMode(com.badlogic.gdx.Graphics$DisplayMode) -> setDisplayMode
    com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes() -> getDisplayModes
    boolean setDisplayMode(int,int,boolean) -> setDisplayMode
    void setTitle(java.lang.String) -> setTitle
    com.badlogic.gdx.Graphics$DisplayMode getDesktopDisplayMode() -> getDesktopDisplayMode
    com.badlogic.gdx.Graphics$BufferFormat getBufferFormat() -> getBufferFormat
    void setVSync(boolean) -> setVSync
    boolean supportsExtension(java.lang.String) -> supportsExtension
    void setContinuousRendering(boolean) -> setContinuousRendering
    boolean isContinuousRendering() -> isContinuousRendering
    void requestRendering() -> requestRendering
    boolean isFullscreen() -> isFullscreen
    boolean isGL30Available() -> isGL30Available
    com.badlogic.gdx.graphics.GL30 getGL30() -> getGL30
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidGraphics,int,int,int,int) -> <init>
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper -> com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper:
    void <init>(com.badlogic.gdx.backends.android.AndroidLiveWallpaper,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    android.view.SurfaceHolder getSurfaceHolder() -> getSurfaceHolder
    android.view.View createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> createGLSurfaceView
    void onDestroyGLSurfaceView() -> onDestroyGLSurfaceView
    void resume() -> resume
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    void logManagedCachesStatus() -> logManagedCachesStatus
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1 -> com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1:
    com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper,android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    android.view.SurfaceHolder getHolder() -> getHolder
    void onDestroy() -> onDestroy
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$2 -> com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$2:
    com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper,android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    android.view.SurfaceHolder getHolder() -> getHolder
    void onDestroy() -> onDestroy
com.badlogic.gdx.backends.android.AndroidInput -> com.badlogic.gdx.backends.android.AndroidInput:
    com.badlogic.gdx.utils.Pool usedKeyEvents -> usedKeyEvents
    com.badlogic.gdx.utils.Pool usedTouchEvents -> usedTouchEvents
    int NUM_TOUCHES -> NUM_TOUCHES
    int SUPPORTED_KEYS -> SUPPORTED_KEYS
    java.util.ArrayList keyListeners -> keyListeners
    java.util.ArrayList keyEvents -> keyEvents
    java.util.ArrayList touchEvents -> touchEvents
    int[] touchX -> touchX
    int[] touchY -> touchY
    int[] deltaX -> deltaX
    int[] deltaY -> deltaY
    boolean[] touched -> touched
    int[] button -> button
    int[] realId -> realId
    boolean hasMultitouch -> hasMultitouch
    int keyCount -> keyCount
    boolean[] keys -> keys
    boolean keyJustPressed -> keyJustPressed
    boolean[] justPressedKeys -> justPressedKeys
    android.hardware.SensorManager manager -> manager
    boolean accelerometerAvailable -> accelerometerAvailable
    float[] accelerometerValues -> accelerometerValues
    java.lang.String text -> text
    com.badlogic.gdx.Input$TextInputListener textListener -> textListener
    android.os.Handler handle -> handle
    com.badlogic.gdx.Application app -> app
    android.content.Context context -> context
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> touchHandler
    int sleepTime -> sleepTime
    boolean catchBack -> catchBack
    boolean catchMenu -> catchMenu
    android.os.Vibrator vibrator -> vibrator
    boolean compassAvailable -> compassAvailable
    boolean keyboardAvailable -> keyboardAvailable
    float[] magneticFieldValues -> magneticFieldValues
    float azimuth -> azimuth
    float pitch -> pitch
    float roll -> roll
    float inclination -> inclination
    boolean justTouched -> justTouched
    com.badlogic.gdx.InputProcessor processor -> processor
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> config
    com.badlogic.gdx.Input$Orientation nativeOrientation -> nativeOrientation
    long currentEventTimeStamp -> currentEventTimeStamp
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard onscreenKeyboard -> onscreenKeyboard
    android.hardware.SensorEventListener accelerometerListener -> accelerometerListener
    android.hardware.SensorEventListener compassListener -> compassListener
    boolean requestFocus -> requestFocus
    float[] R -> R
    float[] orientation -> orientation
    void <init>(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> <init>
    float getAccelerometerX() -> getAccelerometerX
    float getAccelerometerY() -> getAccelerometerY
    float getAccelerometerZ() -> getAccelerometerZ
    void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String) -> getTextInput
    int getX() -> getX
    int getY() -> getY
    int getX(int) -> getX
    int getY(int) -> getY
    boolean isTouched(int) -> isTouched
    boolean isKeyPressed(int) -> isKeyPressed
    boolean isKeyJustPressed(int) -> isKeyJustPressed
    boolean isTouched() -> isTouched
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> setInputProcessor
    void processEvents() -> processEvents
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void onTap(int,int) -> onTap
    void onDrop(int,int) -> onDrop
    void postTap(int,int) -> postTap
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void setOnscreenKeyboardVisible(boolean) -> setOnscreenKeyboardVisible
    void setCatchBackKey(boolean) -> setCatchBackKey
    boolean isCatchBackKey() -> isCatchBackKey
    void setCatchMenuKey(boolean) -> setCatchMenuKey
    void vibrate(int) -> vibrate
    void vibrate(long[],int) -> vibrate
    void cancelVibrate() -> cancelVibrate
    boolean justTouched() -> justTouched
    boolean isButtonPressed(int) -> isButtonPressed
    void updateOrientation() -> updateOrientation
    void getRotationMatrix(float[]) -> getRotationMatrix
    float getAzimuth() -> getAzimuth
    float getPitch() -> getPitch
    float getRoll() -> getRoll
    void registerSensorListeners() -> registerSensorListeners
    void unregisterSensorListeners() -> unregisterSensorListeners
    com.badlogic.gdx.InputProcessor getInputProcessor() -> getInputProcessor
    boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral) -> isPeripheralAvailable
    int getFreePointerIndex() -> getFreePointerIndex
    int[] resize(int[]) -> resize
    boolean[] resize(boolean[]) -> resize
    int lookUpPointerIndex(int) -> lookUpPointerIndex
    int getRotation() -> getRotation
    com.badlogic.gdx.Input$Orientation getNativeOrientation() -> getNativeOrientation
    void setCursorCatched(boolean) -> setCursorCatched
    boolean isCursorCatched() -> isCursorCatched
    int getDeltaX() -> getDeltaX
    int getDeltaX(int) -> getDeltaX
    int getDeltaY() -> getDeltaY
    int getDeltaY(int) -> getDeltaY
    void setCursorPosition(int,int) -> setCursorPosition
    void setCursorImage(com.badlogic.gdx.graphics.Pixmap,int,int) -> setCursorImage
    long getCurrentEventTime() -> getCurrentEventTime
    void addKeyListener(android.view.View$OnKeyListener) -> addKeyListener
    void onPause() -> onPause
    void onResume() -> onResume
com.badlogic.gdx.backends.android.AndroidInput$1 -> com.badlogic.gdx.backends.android.AndroidInput$1:
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidInput,int,int) -> <init>
    com.badlogic.gdx.backends.android.AndroidInput$KeyEvent newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.backends.android.AndroidInput$2 -> com.badlogic.gdx.backends.android.AndroidInput$2:
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidInput,int,int) -> <init>
    com.badlogic.gdx.backends.android.AndroidInput$TouchEvent newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.backends.android.AndroidInput$3 -> com.badlogic.gdx.backends.android.AndroidInput$3:
    java.lang.String val$title -> val$title
    java.lang.String val$hint -> val$hint
    java.lang.String val$text -> val$text
    com.badlogic.gdx.Input$TextInputListener val$listener -> val$listener
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidInput,java.lang.String,java.lang.String,java.lang.String,com.badlogic.gdx.Input$TextInputListener) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$3$1 -> com.badlogic.gdx.backends.android.AndroidInput$3$1:
    android.widget.EditText val$input -> val$input
    com.badlogic.gdx.backends.android.AndroidInput$3 this$1 -> this$1
    void <init>(com.badlogic.gdx.backends.android.AndroidInput$3,android.widget.EditText) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.badlogic.gdx.backends.android.AndroidInput$3$1$1 -> com.badlogic.gdx.backends.android.AndroidInput$3$1$1:
    com.badlogic.gdx.backends.android.AndroidInput$3$1 this$2 -> this$2
    void <init>(com.badlogic.gdx.backends.android.AndroidInput$3$1) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$3$2 -> com.badlogic.gdx.backends.android.AndroidInput$3$2:
    com.badlogic.gdx.backends.android.AndroidInput$3 this$1 -> this$1
    void <init>(com.badlogic.gdx.backends.android.AndroidInput$3) -> <init>
    void onClick(android.content.DialogInterface,int) -> onClick
com.badlogic.gdx.backends.android.AndroidInput$3$2$1 -> com.badlogic.gdx.backends.android.AndroidInput$3$2$1:
    com.badlogic.gdx.backends.android.AndroidInput$3$2 this$2 -> this$2
    void <init>(com.badlogic.gdx.backends.android.AndroidInput$3$2) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$3$3 -> com.badlogic.gdx.backends.android.AndroidInput$3$3:
    com.badlogic.gdx.backends.android.AndroidInput$3 this$1 -> this$1
    void <init>(com.badlogic.gdx.backends.android.AndroidInput$3) -> <init>
    void onCancel(android.content.DialogInterface) -> onCancel
com.badlogic.gdx.backends.android.AndroidInput$3$3$1 -> com.badlogic.gdx.backends.android.AndroidInput$3$3$1:
    com.badlogic.gdx.backends.android.AndroidInput$3$3 this$2 -> this$2
    void <init>(com.badlogic.gdx.backends.android.AndroidInput$3$3) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$4 -> com.badlogic.gdx.backends.android.AndroidInput$4:
    boolean val$visible -> val$visible
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidInput,boolean) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent -> com.badlogic.gdx.backends.android.AndroidInput$KeyEvent:
    int KEY_DOWN -> KEY_DOWN
    int KEY_UP -> KEY_UP
    int KEY_TYPED -> KEY_TYPED
    long timeStamp -> timeStamp
    int type -> type
    int keyCode -> keyCode
    char keyChar -> keyChar
    void <init>() -> <init>
com.badlogic.gdx.backends.android.AndroidInput$SensorListener -> com.badlogic.gdx.backends.android.AndroidInput$SensorListener:
    float[] accelerometerValues -> accelerometerValues
    float[] magneticFieldValues -> magneticFieldValues
    com.badlogic.gdx.Input$Orientation nativeOrientation -> nativeOrientation
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidInput,com.badlogic.gdx.Input$Orientation,float[],float[]) -> <init>
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent -> com.badlogic.gdx.backends.android.AndroidInput$TouchEvent:
    int TOUCH_DOWN -> TOUCH_DOWN
    int TOUCH_UP -> TOUCH_UP
    int TOUCH_DRAGGED -> TOUCH_DRAGGED
    int TOUCH_SCROLLED -> TOUCH_SCROLLED
    int TOUCH_MOVED -> TOUCH_MOVED
    long timeStamp -> timeStamp
    int type -> type
    int x -> x
    int y -> y
    int scrollAmount -> scrollAmount
    int button -> button
    int pointer -> pointer
    void <init>() -> <init>
com.badlogic.gdx.backends.android.AndroidInputFactory -> com.badlogic.gdx.backends.android.AndroidInputFactory:
    void <init>() -> <init>
    com.badlogic.gdx.backends.android.AndroidInput newAndroidInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> newAndroidInput
com.badlogic.gdx.backends.android.AndroidInputThreePlus -> com.badlogic.gdx.backends.android.AndroidInputThreePlus:
    java.util.ArrayList genericMotionListeners -> genericMotionListeners
    com.badlogic.gdx.backends.android.AndroidMouseHandler mouseHandler -> mouseHandler
    void <init>(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> <init>
    boolean onGenericMotion(android.view.View,android.view.MotionEvent) -> onGenericMotion
    void addGenericMotionListener(android.view.View$OnGenericMotionListener) -> addGenericMotionListener
com.badlogic.gdx.backends.android.AndroidLiveWallpaper -> com.badlogic.gdx.backends.android.AndroidLiveWallpaper:
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService service -> service
    com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper graphics -> graphics
    com.badlogic.gdx.backends.android.AndroidInput input -> input
    com.badlogic.gdx.backends.android.AndroidAudio audio -> audio
    com.badlogic.gdx.backends.android.AndroidFiles files -> files
    com.badlogic.gdx.backends.android.AndroidNet net -> net
    com.badlogic.gdx.ApplicationListener listener -> listener
    boolean firstResume -> firstResume
    com.badlogic.gdx.utils.Array runnables -> runnables
    com.badlogic.gdx.utils.Array executedRunnables -> executedRunnables
    com.badlogic.gdx.utils.Array lifecycleListeners -> lifecycleListeners
    int logLevel -> logLevel
    com.badlogic.gdx.backends.android.AndroidClipboard clipboard -> clipboard
    void <init>(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService) -> <init>
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> initialize
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    android.view.WindowManager getWindowManager() -> getWindowManager
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService getService() -> getService
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> getApplicationListener
    void postRunnable(java.lang.Runnable) -> postRunnable
    com.badlogic.gdx.Audio getAudio() -> getAudio
    com.badlogic.gdx.Files getFiles() -> getFiles
    com.badlogic.gdx.Graphics getGraphics() -> getGraphics
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> getInput
    com.badlogic.gdx.Net getNet() -> getNet
    com.badlogic.gdx.Application$ApplicationType getType() -> getType
    int getVersion() -> getVersion
    long getJavaHeap() -> getJavaHeap
    long getNativeHeap() -> getNativeHeap
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> getPreferences
    com.badlogic.gdx.utils.Clipboard getClipboard() -> getClipboard
    void debug(java.lang.String,java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String,java.lang.Throwable) -> debug
    void log(java.lang.String,java.lang.String) -> log
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> log
    void error(java.lang.String,java.lang.String) -> error
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> error
    void setLogLevel(int) -> setLogLevel
    int getLogLevel() -> getLogLevel
    void exit() -> exit
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> addLifecycleListener
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> removeLifecycleListener
    android.content.Context getContext() -> getContext
    com.badlogic.gdx.utils.Array getRunnables() -> getRunnables
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> getExecutedRunnables
    com.badlogic.gdx.utils.Array getLifecycleListeners() -> getLifecycleListeners
    void startActivity(android.content.Intent) -> startActivity
    android.view.Window getApplicationWindow() -> getApplicationWindow
    android.os.Handler getHandler() -> getHandler
    void runOnUiThread(java.lang.Runnable) -> runOnUiThread
    void useImmersiveMode(boolean) -> useImmersiveMode
    com.badlogic.gdx.Input getInput() -> getInput
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService -> com.badlogic.gdx.backends.android.AndroidLiveWallpaperService:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    com.badlogic.gdx.backends.android.AndroidLiveWallpaper app -> app
    android.view.SurfaceHolder$Callback view -> view
    int viewFormat -> viewFormat
    int viewWidth -> viewWidth
    int viewHeight -> viewHeight
    int engines -> engines
    int visibleEngines -> visibleEngines
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine linkedEngine -> linkedEngine
    boolean isPreviewNotified -> isPreviewNotified
    boolean notifiedPreviewState -> notifiedPreviewState
    int[] sync -> sync
    void setLinkedEngine(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine) -> setLinkedEngine
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.service.wallpaper.WallpaperService$Engine onCreateEngine() -> onCreateEngine
    void onCreateApplication() -> onCreateApplication
    void initialize(com.badlogic.gdx.ApplicationListener) -> initialize
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> initialize
    android.view.SurfaceHolder getSurfaceHolder() -> getSurfaceHolder
    void onDeepPauseApplication() -> onDeepPauseApplication
    void onDestroy() -> onDestroy
    void finalize() -> finalize
    com.badlogic.gdx.backends.android.AndroidLiveWallpaper getLiveWallpaper() -> getLiveWallpaper
    android.view.WindowManager getWindowManager() -> getWindowManager
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine -> com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine:
    boolean engineIsVisible -> engineIsVisible
    int engineFormat -> engineFormat
    int engineWidth -> engineWidth
    int engineHeight -> engineHeight
    boolean offsetsConsumed -> offsetsConsumed
    float xOffset -> xOffset
    float yOffset -> yOffset
    float xOffsetStep -> xOffsetStep
    float yOffsetStep -> yOffsetStep
    int xPixelOffset -> xPixelOffset
    int yPixelOffset -> yPixelOffset
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService) -> <init>
    void onCreate(android.view.SurfaceHolder) -> onCreate
    void onSurfaceCreated(android.view.SurfaceHolder) -> onSurfaceCreated
    void onSurfaceChanged(android.view.SurfaceHolder,int,int,int) -> onSurfaceChanged
    void notifySurfaceChanged(int,int,int,boolean) -> notifySurfaceChanged
    void onVisibilityChanged(boolean) -> onVisibilityChanged
    void notifyVisibilityChanged(boolean) -> notifyVisibilityChanged
    void onResume() -> onResume
    void onPause() -> onPause
    void onSurfaceDestroyed(android.view.SurfaceHolder) -> onSurfaceDestroyed
    void onDestroy() -> onDestroy
    android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean) -> onCommand
    void onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onOffsetsChanged(float,float,float,float,int,int) -> onOffsetsChanged
    void notifyOffsetsChanged() -> notifyOffsetsChanged
    void notifyPreviewState() -> notifyPreviewState
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1 -> com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1:
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine this$1 -> this$1
    void <init>(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2 -> com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2:
    boolean val$currentPreviewState -> val$currentPreviewState
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine this$1 -> this$1
    void <init>(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine,boolean) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidMouseHandler -> com.badlogic.gdx.backends.android.AndroidMouseHandler:
    int deltaX -> deltaX
    int deltaY -> deltaY
    void <init>() -> <init>
    boolean onGenericMotion(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> onGenericMotion
    void logAction(int) -> logAction
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,long) -> postTouchEvent
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler -> com.badlogic.gdx.backends.android.AndroidMultiTouchHandler:
    void <init>() -> <init>
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> onTouch
    void logAction(int,int) -> logAction
    int toGdxButton(int) -> toGdxButton
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,int,long) -> postTouchEvent
    boolean supportsMultitouch(android.content.Context) -> supportsMultitouch
com.badlogic.gdx.backends.android.AndroidMusic -> com.badlogic.gdx.backends.android.AndroidMusic:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> audio
    android.media.MediaPlayer player -> player
    boolean isPrepared -> isPrepared
    boolean wasPlaying -> wasPlaying
    float volume -> volume
    com.badlogic.gdx.audio.Music$OnCompletionListener onCompletionListener -> onCompletionListener
    void <init>(com.badlogic.gdx.backends.android.AndroidAudio,android.media.MediaPlayer) -> <init>
    void dispose() -> dispose
    boolean isLooping() -> isLooping
    boolean isPlaying() -> isPlaying
    void pause() -> pause
    void play() -> play
    void setLooping(boolean) -> setLooping
    void setVolume(float) -> setVolume
    float getVolume() -> getVolume
    void setPan(float,float) -> setPan
    void stop() -> stop
    void setPosition(float) -> setPosition
    float getPosition() -> getPosition
    float getDuration() -> getDuration
    void setOnCompletionListener(com.badlogic.gdx.audio.Music$OnCompletionListener) -> setOnCompletionListener
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.badlogic.gdx.backends.android.AndroidMusic$1 -> com.badlogic.gdx.backends.android.AndroidMusic$1:
    com.badlogic.gdx.backends.android.AndroidMusic this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidMusic) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidNet -> com.badlogic.gdx.backends.android.AndroidNet:
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> app
    com.badlogic.gdx.net.NetJavaImpl netJavaImpl -> netJavaImpl
    void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase) -> <init>
    void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener) -> sendHttpRequest
    void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest) -> cancelHttpRequest
    com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints) -> newServerSocket
    com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints) -> newServerSocket
    com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints) -> newClientSocket
    boolean openURI(java.lang.String) -> openURI
com.badlogic.gdx.backends.android.AndroidNet$1 -> com.badlogic.gdx.backends.android.AndroidNet$1:
    android.net.Uri val$uri -> val$uri
    com.badlogic.gdx.backends.android.AndroidNet this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidNet,android.net.Uri) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard:
    android.content.Context context -> context
    android.os.Handler handler -> handler
    com.badlogic.gdx.backends.android.AndroidInput input -> input
    android.app.Dialog dialog -> dialog
    android.widget.TextView textView -> textView
    void <init>(android.content.Context,android.os.Handler,com.badlogic.gdx.backends.android.AndroidInput) -> <init>
    android.app.Dialog createDialog() -> createDialog
    android.widget.TextView createView(android.content.Context) -> createView
    void setVisible(boolean) -> setVisible
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1 -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1:
    android.text.Editable editable -> editable
    void <init>(android.content.Context) -> <init>
    boolean getDefaultEditable() -> getDefaultEditable
    android.text.Editable getEditableText() -> getEditableText
    android.text.method.MovementMethod getDefaultMovementMethod() -> getDefaultMovementMethod
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2 -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2:
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$1 -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$1:
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2 this$1 -> this$1
    void <init>(com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2 -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2:
    int[] screenloc -> screenloc
    int keyboardHeight -> keyboardHeight
    boolean keyboardShowing -> keyboardShowing
    android.view.View val$content -> val$content
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2 this$1 -> this$1
    void <init>(com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2,android.view.View) -> <init>
    boolean onPreDraw() -> onPreDraw
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable:
    void <init>() -> <init>
    char charAt(int) -> charAt
    int length() -> length
    java.lang.CharSequence subSequence(int,int) -> subSequence
    void getChars(int,int,char[],int) -> getChars
    void removeSpan(java.lang.Object) -> removeSpan
    void setSpan(java.lang.Object,int,int,int) -> setSpan
    int getSpanEnd(java.lang.Object) -> getSpanEnd
    int getSpanFlags(java.lang.Object) -> getSpanFlags
    int getSpanStart(java.lang.Object) -> getSpanStart
    java.lang.Object[] getSpans(int,int,java.lang.Class) -> getSpans
    int nextSpanTransition(int,int,java.lang.Class) -> nextSpanTransition
    android.text.Editable append(java.lang.CharSequence) -> append
    android.text.Editable append(char) -> append
    android.text.Editable append(java.lang.CharSequence,int,int) -> append
    void clear() -> clear
    void clearSpans() -> clearSpans
    android.text.Editable delete(int,int) -> delete
    android.text.InputFilter[] getFilters() -> getFilters
    android.text.Editable insert(int,java.lang.CharSequence) -> insert
    android.text.Editable insert(int,java.lang.CharSequence,int,int) -> insert
    android.text.Editable replace(int,int,java.lang.CharSequence) -> replace
    android.text.Editable replace(int,int,java.lang.CharSequence,int,int) -> replace
    void setFilters(android.text.InputFilter[]) -> setFilters
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.badlogic.gdx.backends.android.AndroidPreferences -> com.badlogic.gdx.backends.android.AndroidPreferences:
    android.content.SharedPreferences sharedPrefs -> sharedPrefs
    android.content.SharedPreferences$Editor editor -> editor
    void <init>(android.content.SharedPreferences) -> <init>
    com.badlogic.gdx.Preferences putBoolean(java.lang.String,boolean) -> putBoolean
    com.badlogic.gdx.Preferences putInteger(java.lang.String,int) -> putInteger
    com.badlogic.gdx.Preferences putLong(java.lang.String,long) -> putLong
    com.badlogic.gdx.Preferences putFloat(java.lang.String,float) -> putFloat
    com.badlogic.gdx.Preferences putString(java.lang.String,java.lang.String) -> putString
    com.badlogic.gdx.Preferences put(java.util.Map) -> put
    boolean getBoolean(java.lang.String) -> getBoolean
    int getInteger(java.lang.String) -> getInteger
    long getLong(java.lang.String) -> getLong
    float getFloat(java.lang.String) -> getFloat
    java.lang.String getString(java.lang.String) -> getString
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    int getInteger(java.lang.String,int) -> getInteger
    long getLong(java.lang.String,long) -> getLong
    float getFloat(java.lang.String,float) -> getFloat
    java.lang.String getString(java.lang.String,java.lang.String) -> getString
    java.util.Map get() -> get
    boolean contains(java.lang.String) -> contains
    void clear() -> clear
    void flush() -> flush
    void remove(java.lang.String) -> remove
    void edit() -> edit
com.badlogic.gdx.backends.android.AndroidSound -> com.badlogic.gdx.backends.android.AndroidSound:
    android.media.SoundPool soundPool -> soundPool
    android.media.AudioManager manager -> manager
    int soundId -> soundId
    com.badlogic.gdx.utils.IntArray streamIds -> streamIds
    void <init>(android.media.SoundPool,android.media.AudioManager,int) -> <init>
    void dispose() -> dispose
    long play() -> play
    long play(float) -> play
    void stop() -> stop
    void stop(long) -> stop
    void pause() -> pause
    void pause(long) -> pause
    void resume() -> resume
    void resume(long) -> resume
    void setPitch(long,float) -> setPitch
    void setVolume(long,float) -> setVolume
    long loop() -> loop
    long loop(float) -> loop
    void setLooping(long,boolean) -> setLooping
    void setPan(long,float,float) -> setPan
    long play(float,float,float) -> play
    long loop(float,float,float) -> loop
    void setPriority(long,int) -> setPriority
com.badlogic.gdx.backends.android.AndroidTouchHandler -> com.badlogic.gdx.backends.android.AndroidTouchHandler:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> onTouch
    boolean supportsMultitouch(android.content.Context) -> supportsMultitouch
com.badlogic.gdx.backends.android.AndroidVisibilityListener -> com.badlogic.gdx.backends.android.AndroidVisibilityListener:
    void <init>() -> <init>
    void createListener(com.badlogic.gdx.backends.android.AndroidApplicationBase) -> createListener
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 -> com.badlogic.gdx.backends.android.AndroidVisibilityListener$1:
    com.badlogic.gdx.backends.android.AndroidApplicationBase val$application -> val$application
    com.badlogic.gdx.backends.android.AndroidVisibilityListener this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.AndroidVisibilityListener,com.badlogic.gdx.backends.android.AndroidApplicationBase) -> <init>
    void onSystemUiVisibilityChange(int) -> onSystemUiVisibilityChange
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1 -> com.badlogic.gdx.backends.android.AndroidVisibilityListener$1$1:
    com.badlogic.gdx.backends.android.AndroidVisibilityListener$1 this$1 -> this$1
    void <init>(com.badlogic.gdx.backends.android.AndroidVisibilityListener$1) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidWallpaperListener -> com.badlogic.gdx.backends.android.AndroidWallpaperListener:
    void offsetChange(float,float,float,float,int,int) -> offsetChange
    void previewStateChange(boolean) -> previewStateChange
com.badlogic.gdx.backends.android.InputProcessorLW -> com.badlogic.gdx.backends.android.InputProcessorLW:
    void touchDrop(int,int) -> touchDrop
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy:
    void <init>() -> <init>
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> calcMeasures
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy:
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> calcMeasures
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> resolutionStrategy
    void <init>(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    void <init>(android.content.Context,boolean,int,int,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    void init(boolean,int,int) -> init
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> checkEglError
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20,android.view.View,boolean) -> <init>
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    void sendDownUpKeyEventForBackwardCompatibility(int) -> sendDownUpKeyEventForBackwardCompatibility
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser:
    int EGL_OPENGL_ES2_BIT -> EGL_OPENGL_ES2_BIT
    int[] s_configAttribs2 -> s_configAttribs2
    int mRedSize -> mRedSize
    int mGreenSize -> mGreenSize
    int mBlueSize -> mBlueSize
    int mAlphaSize -> mAlphaSize
    int mDepthSize -> mDepthSize
    int mStencilSize -> mStencilSize
    int[] mValue -> mValue
    void <init>(int,int,int,int,int,int) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> chooseConfig
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> findConfigAttrib
    void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> printConfigs
    void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> printConfig
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory:
    int EGL_CONTEXT_CLIENT_VERSION -> EGL_CONTEXT_CLIENT_VERSION
    void <init>() -> <init>
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18 -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> resolutionStrategy
    void <init>(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    void <init>(android.content.Context,boolean,int,int,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    void init(boolean,int,int) -> init
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> checkEglError
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1 -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18 this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18,android.view.View,boolean) -> <init>
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    void sendDownUpKeyEventForBackwardCompatibility(int) -> sendDownUpKeyEventForBackwardCompatibility
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser:
    int EGL_OPENGL_ES2_BIT -> EGL_OPENGL_ES2_BIT
    int[] s_configAttribs2 -> s_configAttribs2
    int mRedSize -> mRedSize
    int mGreenSize -> mGreenSize
    int mBlueSize -> mBlueSize
    int mAlphaSize -> mAlphaSize
    int mDepthSize -> mDepthSize
    int mStencilSize -> mStencilSize
    int[] mValue -> mValue
    void <init>(int,int,int,int,int,int) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> chooseConfig
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> findConfigAttrib
    void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> printConfigs
    void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> printConfig
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ContextFactory:
    int EGL_CONTEXT_CLIENT_VERSION -> EGL_CONTEXT_CLIENT_VERSION
    void <init>() -> <init>
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18:
    java.lang.String TAG -> TAG
    boolean LOG_ATTACH_DETACH -> LOG_ATTACH_DETACH
    boolean LOG_THREADS -> LOG_THREADS
    boolean LOG_PAUSE_RESUME -> LOG_PAUSE_RESUME
    boolean LOG_SURFACE -> LOG_SURFACE
    boolean LOG_RENDERER -> LOG_RENDERER
    boolean LOG_RENDERER_DRAW_FRAME -> LOG_RENDERER_DRAW_FRAME
    boolean LOG_EGL -> LOG_EGL
    int RENDERMODE_WHEN_DIRTY -> RENDERMODE_WHEN_DIRTY
    int RENDERMODE_CONTINUOUSLY -> RENDERMODE_CONTINUOUSLY
    int DEBUG_CHECK_GL_ERROR -> DEBUG_CHECK_GL_ERROR
    int DEBUG_LOG_GL_CALLS -> DEBUG_LOG_GL_CALLS
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager sGLThreadManager -> sGLThreadManager
    java.lang.ref.WeakReference mThisWeakRef -> mThisWeakRef
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mGLThread -> mGLThread
    android.opengl.GLSurfaceView$Renderer mRenderer -> mRenderer
    boolean mDetached -> mDetached
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> mEGLConfigChooser
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory mEGLContextFactory -> mEGLContextFactory
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory -> mEGLWindowSurfaceFactory
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper mGLWrapper -> mGLWrapper
    int mDebugFlags -> mDebugFlags
    int mEGLContextClientVersion -> mEGLContextClientVersion
    boolean mPreserveEGLContextOnPause -> mPreserveEGLContextOnPause
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void finalize() -> finalize
    void init() -> init
    void setGLWrapper(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper) -> setGLWrapper
    void setDebugFlags(int) -> setDebugFlags
    int getDebugFlags() -> getDebugFlags
    void setPreserveEGLContextOnPause(boolean) -> setPreserveEGLContextOnPause
    boolean getPreserveEGLContextOnPause() -> getPreserveEGLContextOnPause
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> setRenderer
    void setEGLContextFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory) -> setEGLContextFactory
    void setEGLWindowSurfaceFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory) -> setEGLWindowSurfaceFactory
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> setEGLConfigChooser
    void setEGLConfigChooser(boolean) -> setEGLConfigChooser
    void setEGLConfigChooser(int,int,int,int,int,int) -> setEGLConfigChooser
    void setEGLContextClientVersion(int) -> setEGLContextClientVersion
    void setRenderMode(int) -> setRenderMode
    int getRenderMode() -> getRenderMode
    void requestRender() -> requestRender
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> onPause
    void onResume() -> onResume
    void queueEvent(java.lang.Runnable) -> queueEvent
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void checkRenderThreadState() -> checkRenderThreadState
    int access$200(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> access$200
    android.opengl.GLSurfaceView$EGLConfigChooser access$300(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> access$300
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory access$400(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> access$400
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory access$500(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> access$500
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper access$600(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> access$600
    int access$700(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> access$700
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager access$800() -> access$800
    boolean access$900(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> access$900
    android.opengl.GLSurfaceView$Renderer access$1000(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> access$1000
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1 -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1:
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser:
    int[] mConfigSpec -> mConfigSpec
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,int[]) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> chooseConfig
    int[] filterConfigSpec(int[]) -> filterConfigSpec
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser:
    int[] mValue -> mValue
    int mRedSize -> mRedSize
    int mGreenSize -> mGreenSize
    int mBlueSize -> mBlueSize
    int mAlphaSize -> mAlphaSize
    int mDepthSize -> mDepthSize
    int mStencilSize -> mStencilSize
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,int,int,int,int,int,int) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> chooseConfig
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> findConfigAttrib
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory:
    int EGL_CONTEXT_CLIENT_VERSION -> EGL_CONTEXT_CLIENT_VERSION
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> <init>
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1) -> <init>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory:
    void <init>() -> <init>
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> createWindowSurface
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> destroySurface
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1) -> <init>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> createWindowSurface
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> destroySurface
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper:
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> mGLSurfaceViewWeakRef
    javax.microedition.khronos.egl.EGL10 mEgl -> mEgl
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> mEglDisplay
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> mEglSurface
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> mEglConfig
    javax.microedition.khronos.egl.EGLContext mEglContext -> mEglContext
    void <init>(java.lang.ref.WeakReference) -> <init>
    void start() -> start
    boolean createSurface() -> createSurface
    javax.microedition.khronos.opengles.GL createGL() -> createGL
    int swap() -> swap
    void destroySurface() -> destroySurface
    void destroySurfaceImp() -> destroySurfaceImp
    void finish() -> finish
    void throwEglException(java.lang.String) -> throwEglException
    void throwEglException(java.lang.String,int) -> throwEglException
    void logEglErrorAsWarning(java.lang.String,java.lang.String,int) -> logEglErrorAsWarning
    java.lang.String getErrorString(int) -> getErrorString
    java.lang.String formatEglError(java.lang.String,int) -> formatEglError
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread:
    boolean mShouldExit -> mShouldExit
    boolean mExited -> mExited
    boolean mRequestPaused -> mRequestPaused
    boolean mPaused -> mPaused
    boolean mHasSurface -> mHasSurface
    boolean mSurfaceIsBad -> mSurfaceIsBad
    boolean mWaitingForSurface -> mWaitingForSurface
    boolean mHaveEglContext -> mHaveEglContext
    boolean mHaveEglSurface -> mHaveEglSurface
    boolean mFinishedCreatingEglSurface -> mFinishedCreatingEglSurface
    boolean mShouldReleaseEglContext -> mShouldReleaseEglContext
    int mWidth -> mWidth
    int mHeight -> mHeight
    int mRenderMode -> mRenderMode
    boolean mRequestRender -> mRequestRender
    boolean mRenderComplete -> mRenderComplete
    java.util.ArrayList mEventQueue -> mEventQueue
    boolean mSizeChanged -> mSizeChanged
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper mEglHelper -> mEglHelper
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> mGLSurfaceViewWeakRef
    void <init>(java.lang.ref.WeakReference) -> <init>
    void run() -> run
    void stopEglSurfaceLocked() -> stopEglSurfaceLocked
    void stopEglContextLocked() -> stopEglContextLocked
    void guardedRun() -> guardedRun
    boolean ableToDraw() -> ableToDraw
    boolean readyToDraw() -> readyToDraw
    void setRenderMode(int) -> setRenderMode
    int getRenderMode() -> getRenderMode
    void requestRender() -> requestRender
    void surfaceCreated() -> surfaceCreated
    void surfaceDestroyed() -> surfaceDestroyed
    void onPause() -> onPause
    void onResume() -> onResume
    void onWindowResize(int,int) -> onWindowResize
    void requestExitAndWait() -> requestExitAndWait
    void requestReleaseEglContextLocked() -> requestReleaseEglContextLocked
    void queueEvent(java.lang.Runnable) -> queueEvent
    boolean access$1102(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread,boolean) -> access$1102
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager:
    java.lang.String TAG -> TAG
    boolean mGLESVersionCheckComplete -> mGLESVersionCheckComplete
    int mGLESVersion -> mGLESVersion
    boolean mGLESDriverCheckComplete -> mGLESDriverCheckComplete
    boolean mMultipleGLESContextsAllowed -> mMultipleGLESContextsAllowed
    boolean mLimitedGLESContexts -> mLimitedGLESContexts
    int kGLES_20 -> kGLES_20
    java.lang.String kMSM7K_RENDERER_PREFIX -> kMSM7K_RENDERER_PREFIX
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mEglOwner -> mEglOwner
    void <init>() -> <init>
    void threadExiting(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> threadExiting
    boolean tryAcquireEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> tryAcquireEglContextLocked
    void releaseEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> releaseEglContextLocked
    boolean shouldReleaseEGLContextWhenPausing() -> shouldReleaseEGLContextWhenPausing
    boolean shouldTerminateEGLWhenPausing() -> shouldTerminateEGLWhenPausing
    void checkGLDriver(javax.microedition.khronos.opengles.GL10) -> checkGLDriver
    void checkGLESVersion() -> checkGLESVersion
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper:
    javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL) -> wrap
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter:
    java.lang.StringBuilder mBuilder -> mBuilder
    void <init>() -> <init>
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> flushBuilder
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$SimpleEGLConfigChooser:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> this$0
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,boolean) -> <init>
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser:
    int EGL_OPENGL_ES2_BIT -> EGL_OPENGL_ES2_BIT
    int EGL_COVERAGE_BUFFERS_NV -> EGL_COVERAGE_BUFFERS_NV
    int EGL_COVERAGE_SAMPLES_NV -> EGL_COVERAGE_SAMPLES_NV
    java.lang.String TAG -> TAG
    int mRedSize -> mRedSize
    int mGreenSize -> mGreenSize
    int mBlueSize -> mBlueSize
    int mAlphaSize -> mAlphaSize
    int mDepthSize -> mDepthSize
    int mStencilSize -> mStencilSize
    int mNumSamples -> mNumSamples
    int[] mConfigAttribs -> mConfigAttribs
    int[] mValue -> mValue
    void <init>(int,int,int,int,int,int,int) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> chooseConfig
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> findConfigAttrib
    void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> printConfigs
    void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> printConfig
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy:
    float ratio -> ratio
    void <init>(float) -> <init>
    void <init>(float,float) -> <init>
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> calcMeasures
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> calcMeasures
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension:
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
com.badlogic.gdx.files.FileHandle -> com.badlogic.gdx.files.FileHandle:
    java.io.File file -> file
    com.badlogic.gdx.Files$FileType type -> type
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.io.File) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.Files$FileType) -> <init>
    void <init>(java.io.File,com.badlogic.gdx.Files$FileType) -> <init>
    java.lang.String path() -> path
    java.lang.String name() -> name
    java.lang.String extension() -> extension
    java.lang.String nameWithoutExtension() -> nameWithoutExtension
    java.lang.String pathWithoutExtension() -> pathWithoutExtension
    com.badlogic.gdx.Files$FileType type() -> type
    java.io.File file() -> file
    java.io.InputStream read() -> read
    java.io.BufferedInputStream read(int) -> read
    java.io.Reader reader() -> reader
    java.io.Reader reader(java.lang.String) -> reader
    java.io.BufferedReader reader(int) -> reader
    java.io.BufferedReader reader(int,java.lang.String) -> reader
    java.lang.String readString() -> readString
    java.lang.String readString(java.lang.String) -> readString
    byte[] readBytes() -> readBytes
    int estimateLength() -> estimateLength
    int readBytes(byte[],int,int) -> readBytes
    java.io.OutputStream write(boolean) -> write
    java.io.OutputStream write(boolean,int) -> write
    void write(java.io.InputStream,boolean) -> write
    java.io.Writer writer(boolean) -> writer
    java.io.Writer writer(boolean,java.lang.String) -> writer
    void writeString(java.lang.String,boolean) -> writeString
    void writeString(java.lang.String,boolean,java.lang.String) -> writeString
    void writeBytes(byte[],boolean) -> writeBytes
    void writeBytes(byte[],int,int,boolean) -> writeBytes
    com.badlogic.gdx.files.FileHandle[] list() -> list
    com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter) -> list
    com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter) -> list
    com.badlogic.gdx.files.FileHandle[] list(java.lang.String) -> list
    boolean isDirectory() -> isDirectory
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> child
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> sibling
    com.badlogic.gdx.files.FileHandle parent() -> parent
    void mkdirs() -> mkdirs
    boolean exists() -> exists
    boolean delete() -> delete
    boolean deleteDirectory() -> deleteDirectory
    void emptyDirectory() -> emptyDirectory
    void emptyDirectory(boolean) -> emptyDirectory
    void copyTo(com.badlogic.gdx.files.FileHandle) -> copyTo
    void moveTo(com.badlogic.gdx.files.FileHandle) -> moveTo
    long length() -> length
    long lastModified() -> lastModified
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.badlogic.gdx.files.FileHandle tempFile(java.lang.String) -> tempFile
    com.badlogic.gdx.files.FileHandle tempDirectory(java.lang.String) -> tempDirectory
    void emptyDirectory(java.io.File,boolean) -> emptyDirectory
    boolean deleteDirectory(java.io.File) -> deleteDirectory
    void copyFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> copyFile
    void copyDirectory(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> copyDirectory
com.badlogic.gdx.files.FileHandle$1 -> com.badlogic.gdx.files.FileHandle$1:
    int[] $SwitchMap$com$badlogic$gdx$Files$FileType -> $SwitchMap$com$badlogic$gdx$Files$FileType
    void <clinit>() -> <clinit>
com.badlogic.gdx.files.FileHandleStream -> com.badlogic.gdx.files.FileHandleStream:
    void <init>(java.lang.String) -> <init>
    boolean isDirectory() -> isDirectory
    long length() -> length
    boolean exists() -> exists
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> child
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> sibling
    com.badlogic.gdx.files.FileHandle parent() -> parent
    java.io.InputStream read() -> read
    java.io.OutputStream write(boolean) -> write
    com.badlogic.gdx.files.FileHandle[] list() -> list
    void mkdirs() -> mkdirs
    boolean delete() -> delete
    boolean deleteDirectory() -> deleteDirectory
    void copyTo(com.badlogic.gdx.files.FileHandle) -> copyTo
    void moveTo(com.badlogic.gdx.files.FileHandle) -> moveTo
com.badlogic.gdx.files.package-info -> com.badlogic.gdx.files.package-info:
com.badlogic.gdx.graphics.Camera -> com.badlogic.gdx.graphics.Camera:
    com.badlogic.gdx.math.Vector3 position -> position
    com.badlogic.gdx.math.Vector3 direction -> direction
    com.badlogic.gdx.math.Vector3 up -> up
    com.badlogic.gdx.math.Matrix4 projection -> projection
    com.badlogic.gdx.math.Matrix4 view -> view
    com.badlogic.gdx.math.Matrix4 combined -> combined
    com.badlogic.gdx.math.Matrix4 invProjectionView -> invProjectionView
    float near -> near
    float far -> far
    float viewportWidth -> viewportWidth
    float viewportHeight -> viewportHeight
    com.badlogic.gdx.math.Frustum frustum -> frustum
    com.badlogic.gdx.math.Vector3 tmpVec -> tmpVec
    com.badlogic.gdx.math.collision.Ray ray -> ray
    void <init>() -> <init>
    void update() -> update
    void update(boolean) -> update
    void lookAt(float,float,float) -> lookAt
    void lookAt(com.badlogic.gdx.math.Vector3) -> lookAt
    void normalizeUp() -> normalizeUp
    void rotate(float,float,float,float) -> rotate
    void rotate(com.badlogic.gdx.math.Vector3,float) -> rotate
    void rotate(com.badlogic.gdx.math.Matrix4) -> rotate
    void rotate(com.badlogic.gdx.math.Quaternion) -> rotate
    void rotateAround(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float) -> rotateAround
    void transform(com.badlogic.gdx.math.Matrix4) -> transform
    void translate(float,float,float) -> translate
    void translate(com.badlogic.gdx.math.Vector3) -> translate
    com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3,float,float,float,float) -> unproject
    com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3) -> unproject
    com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3) -> project
    com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3,float,float,float,float) -> project
    com.badlogic.gdx.math.collision.Ray getPickRay(float,float,float,float,float,float) -> getPickRay
    com.badlogic.gdx.math.collision.Ray getPickRay(float,float) -> getPickRay
com.badlogic.gdx.graphics.Color -> com.badlogic.gdx.graphics.Color:
    com.badlogic.gdx.graphics.Color CLEAR -> CLEAR
    com.badlogic.gdx.graphics.Color WHITE -> WHITE
    com.badlogic.gdx.graphics.Color BLACK -> BLACK
    com.badlogic.gdx.graphics.Color RED -> RED
    com.badlogic.gdx.graphics.Color GREEN -> GREEN
    com.badlogic.gdx.graphics.Color BLUE -> BLUE
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> LIGHT_GRAY
    com.badlogic.gdx.graphics.Color GRAY -> GRAY
    com.badlogic.gdx.graphics.Color DARK_GRAY -> DARK_GRAY
    com.badlogic.gdx.graphics.Color PINK -> PINK
    com.badlogic.gdx.graphics.Color ORANGE -> ORANGE
    com.badlogic.gdx.graphics.Color YELLOW -> YELLOW
    com.badlogic.gdx.graphics.Color MAGENTA -> MAGENTA
    com.badlogic.gdx.graphics.Color CYAN -> CYAN
    com.badlogic.gdx.graphics.Color OLIVE -> OLIVE
    com.badlogic.gdx.graphics.Color PURPLE -> PURPLE
    com.badlogic.gdx.graphics.Color MAROON -> MAROON
    com.badlogic.gdx.graphics.Color TEAL -> TEAL
    com.badlogic.gdx.graphics.Color NAVY -> NAVY
    float r -> r
    float g -> g
    float b -> b
    float a -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(float,float,float,float) -> <init>
    void <init>(com.badlogic.gdx.graphics.Color) -> <init>
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> set
    com.badlogic.gdx.graphics.Color mul(com.badlogic.gdx.graphics.Color) -> mul
    com.badlogic.gdx.graphics.Color mul(float) -> mul
    com.badlogic.gdx.graphics.Color add(com.badlogic.gdx.graphics.Color) -> add
    com.badlogic.gdx.graphics.Color sub(com.badlogic.gdx.graphics.Color) -> sub
    com.badlogic.gdx.graphics.Color clamp() -> clamp
    com.badlogic.gdx.graphics.Color set(float,float,float,float) -> set
    com.badlogic.gdx.graphics.Color set(int) -> set
    com.badlogic.gdx.graphics.Color add(float,float,float,float) -> add
    com.badlogic.gdx.graphics.Color sub(float,float,float,float) -> sub
    com.badlogic.gdx.graphics.Color mul(float,float,float,float) -> mul
    com.badlogic.gdx.graphics.Color lerp(com.badlogic.gdx.graphics.Color,float) -> lerp
    com.badlogic.gdx.graphics.Color lerp(float,float,float,float,float) -> lerp
    com.badlogic.gdx.graphics.Color premultiplyAlpha() -> premultiplyAlpha
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    float toFloatBits() -> toFloatBits
    int toIntBits() -> toIntBits
    java.lang.String toString() -> toString
    com.badlogic.gdx.graphics.Color valueOf(java.lang.String) -> valueOf
    float toFloatBits(int,int,int,int) -> toFloatBits
    float toFloatBits(float,float,float,float) -> toFloatBits
    int toIntBits(int,int,int,int) -> toIntBits
    int alpha(float) -> alpha
    int luminanceAlpha(float,float) -> luminanceAlpha
    int rgb565(float,float,float) -> rgb565
    int rgba4444(float,float,float,float) -> rgba4444
    int rgb888(float,float,float) -> rgb888
    int rgba8888(float,float,float,float) -> rgba8888
    int argb8888(float,float,float,float) -> argb8888
    int rgb565(com.badlogic.gdx.graphics.Color) -> rgb565
    int rgba4444(com.badlogic.gdx.graphics.Color) -> rgba4444
    int rgb888(com.badlogic.gdx.graphics.Color) -> rgb888
    int rgba8888(com.badlogic.gdx.graphics.Color) -> rgba8888
    int argb8888(com.badlogic.gdx.graphics.Color) -> argb8888
    void rgb565ToColor(com.badlogic.gdx.graphics.Color,int) -> rgb565ToColor
    void rgba4444ToColor(com.badlogic.gdx.graphics.Color,int) -> rgba4444ToColor
    void rgb888ToColor(com.badlogic.gdx.graphics.Color,int) -> rgb888ToColor
    void rgba8888ToColor(com.badlogic.gdx.graphics.Color,int) -> rgba8888ToColor
    void argb8888ToColor(com.badlogic.gdx.graphics.Color,int) -> argb8888ToColor
    com.badlogic.gdx.graphics.Color cpy() -> cpy
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Colors -> com.badlogic.gdx.graphics.Colors:
    com.badlogic.gdx.utils.ObjectMap map -> map
    com.badlogic.gdx.utils.ObjectMap getColors() -> getColors
    com.badlogic.gdx.graphics.Color get(java.lang.String) -> get
    com.badlogic.gdx.graphics.Color put(java.lang.String,com.badlogic.gdx.graphics.Color) -> put
    void reset() -> reset
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Cubemap -> com.badlogic.gdx.graphics.Cubemap:
    com.badlogic.gdx.assets.AssetManager assetManager -> assetManager
    java.util.Map managedCubemaps -> managedCubemaps
    com.badlogic.gdx.graphics.CubemapData data -> data
    void <init>(com.badlogic.gdx.graphics.CubemapData) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap) -> <init>
    void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,boolean) -> <init>
    void <init>(int,int,int,com.badlogic.gdx.graphics.Pixmap$Format) -> <init>
    void <init>(com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData) -> <init>
    void load(com.badlogic.gdx.graphics.CubemapData) -> load
    com.badlogic.gdx.graphics.CubemapData getCubemapData() -> getCubemapData
    boolean isManaged() -> isManaged
    void reload() -> reload
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getDepth() -> getDepth
    void dispose() -> dispose
    void addManagedCubemap(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Cubemap) -> addManagedCubemap
    void clearAllCubemaps(com.badlogic.gdx.Application) -> clearAllCubemaps
    void invalidateAllCubemaps(com.badlogic.gdx.Application) -> invalidateAllCubemaps
    void setAssetManager(com.badlogic.gdx.assets.AssetManager) -> setAssetManager
    java.lang.String getManagedStatus() -> getManagedStatus
    int getNumManagedCubemaps() -> getNumManagedCubemaps
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Cubemap$1 -> com.badlogic.gdx.graphics.Cubemap$1:
    int val$refCount -> val$refCount
    void <init>(int) -> <init>
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> finishedLoading
com.badlogic.gdx.graphics.Cubemap$CubemapSide -> com.badlogic.gdx.graphics.Cubemap$CubemapSide:
    com.badlogic.gdx.graphics.Cubemap$CubemapSide PositiveX -> PositiveX
    com.badlogic.gdx.graphics.Cubemap$CubemapSide NegativeX -> NegativeX
    com.badlogic.gdx.graphics.Cubemap$CubemapSide PositiveY -> PositiveY
    com.badlogic.gdx.graphics.Cubemap$CubemapSide NegativeY -> NegativeY
    com.badlogic.gdx.graphics.Cubemap$CubemapSide PositiveZ -> PositiveZ
    com.badlogic.gdx.graphics.Cubemap$CubemapSide NegativeZ -> NegativeZ
    int index -> index
    int glEnum -> glEnum
    com.badlogic.gdx.graphics.Cubemap$CubemapSide[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.Cubemap$CubemapSide[] values() -> values
    com.badlogic.gdx.graphics.Cubemap$CubemapSide valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    int getGLEnum() -> getGLEnum
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.CubemapData -> com.badlogic.gdx.graphics.CubemapData:
    boolean isPrepared() -> isPrepared
    void prepare() -> prepare
    void consumeCubemapData() -> consumeCubemapData
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean isManaged() -> isManaged
com.badlogic.gdx.graphics.FPSLogger -> com.badlogic.gdx.graphics.FPSLogger:
    long startTime -> startTime
    void <init>() -> <init>
    void log() -> log
com.badlogic.gdx.graphics.GL20 -> com.badlogic.gdx.graphics.GL20:
    int GL_ES_VERSION_2_0 -> GL_ES_VERSION_2_0
    int GL_DEPTH_BUFFER_BIT -> GL_DEPTH_BUFFER_BIT
    int GL_STENCIL_BUFFER_BIT -> GL_STENCIL_BUFFER_BIT
    int GL_COLOR_BUFFER_BIT -> GL_COLOR_BUFFER_BIT
    int GL_FALSE -> GL_FALSE
    int GL_TRUE -> GL_TRUE
    int GL_POINTS -> GL_POINTS
    int GL_LINES -> GL_LINES
    int GL_LINE_LOOP -> GL_LINE_LOOP
    int GL_LINE_STRIP -> GL_LINE_STRIP
    int GL_TRIANGLES -> GL_TRIANGLES
    int GL_TRIANGLE_STRIP -> GL_TRIANGLE_STRIP
    int GL_TRIANGLE_FAN -> GL_TRIANGLE_FAN
    int GL_ZERO -> GL_ZERO
    int GL_ONE -> GL_ONE
    int GL_SRC_COLOR -> GL_SRC_COLOR
    int GL_ONE_MINUS_SRC_COLOR -> GL_ONE_MINUS_SRC_COLOR
    int GL_SRC_ALPHA -> GL_SRC_ALPHA
    int GL_ONE_MINUS_SRC_ALPHA -> GL_ONE_MINUS_SRC_ALPHA
    int GL_DST_ALPHA -> GL_DST_ALPHA
    int GL_ONE_MINUS_DST_ALPHA -> GL_ONE_MINUS_DST_ALPHA
    int GL_DST_COLOR -> GL_DST_COLOR
    int GL_ONE_MINUS_DST_COLOR -> GL_ONE_MINUS_DST_COLOR
    int GL_SRC_ALPHA_SATURATE -> GL_SRC_ALPHA_SATURATE
    int GL_FUNC_ADD -> GL_FUNC_ADD
    int GL_BLEND_EQUATION -> GL_BLEND_EQUATION
    int GL_BLEND_EQUATION_RGB -> GL_BLEND_EQUATION_RGB
    int GL_BLEND_EQUATION_ALPHA -> GL_BLEND_EQUATION_ALPHA
    int GL_FUNC_SUBTRACT -> GL_FUNC_SUBTRACT
    int GL_FUNC_REVERSE_SUBTRACT -> GL_FUNC_REVERSE_SUBTRACT
    int GL_BLEND_DST_RGB -> GL_BLEND_DST_RGB
    int GL_BLEND_SRC_RGB -> GL_BLEND_SRC_RGB
    int GL_BLEND_DST_ALPHA -> GL_BLEND_DST_ALPHA
    int GL_BLEND_SRC_ALPHA -> GL_BLEND_SRC_ALPHA
    int GL_CONSTANT_COLOR -> GL_CONSTANT_COLOR
    int GL_ONE_MINUS_CONSTANT_COLOR -> GL_ONE_MINUS_CONSTANT_COLOR
    int GL_CONSTANT_ALPHA -> GL_CONSTANT_ALPHA
    int GL_ONE_MINUS_CONSTANT_ALPHA -> GL_ONE_MINUS_CONSTANT_ALPHA
    int GL_BLEND_COLOR -> GL_BLEND_COLOR
    int GL_ARRAY_BUFFER -> GL_ARRAY_BUFFER
    int GL_ELEMENT_ARRAY_BUFFER -> GL_ELEMENT_ARRAY_BUFFER
    int GL_ARRAY_BUFFER_BINDING -> GL_ARRAY_BUFFER_BINDING
    int GL_ELEMENT_ARRAY_BUFFER_BINDING -> GL_ELEMENT_ARRAY_BUFFER_BINDING
    int GL_STREAM_DRAW -> GL_STREAM_DRAW
    int GL_STATIC_DRAW -> GL_STATIC_DRAW
    int GL_DYNAMIC_DRAW -> GL_DYNAMIC_DRAW
    int GL_BUFFER_SIZE -> GL_BUFFER_SIZE
    int GL_BUFFER_USAGE -> GL_BUFFER_USAGE
    int GL_CURRENT_VERTEX_ATTRIB -> GL_CURRENT_VERTEX_ATTRIB
    int GL_FRONT -> GL_FRONT
    int GL_BACK -> GL_BACK
    int GL_FRONT_AND_BACK -> GL_FRONT_AND_BACK
    int GL_TEXTURE_2D -> GL_TEXTURE_2D
    int GL_CULL_FACE -> GL_CULL_FACE
    int GL_BLEND -> GL_BLEND
    int GL_DITHER -> GL_DITHER
    int GL_STENCIL_TEST -> GL_STENCIL_TEST
    int GL_DEPTH_TEST -> GL_DEPTH_TEST
    int GL_SCISSOR_TEST -> GL_SCISSOR_TEST
    int GL_POLYGON_OFFSET_FILL -> GL_POLYGON_OFFSET_FILL
    int GL_SAMPLE_ALPHA_TO_COVERAGE -> GL_SAMPLE_ALPHA_TO_COVERAGE
    int GL_SAMPLE_COVERAGE -> GL_SAMPLE_COVERAGE
    int GL_NO_ERROR -> GL_NO_ERROR
    int GL_INVALID_ENUM -> GL_INVALID_ENUM
    int GL_INVALID_VALUE -> GL_INVALID_VALUE
    int GL_INVALID_OPERATION -> GL_INVALID_OPERATION
    int GL_OUT_OF_MEMORY -> GL_OUT_OF_MEMORY
    int GL_CW -> GL_CW
    int GL_CCW -> GL_CCW
    int GL_LINE_WIDTH -> GL_LINE_WIDTH
    int GL_ALIASED_POINT_SIZE_RANGE -> GL_ALIASED_POINT_SIZE_RANGE
    int GL_ALIASED_LINE_WIDTH_RANGE -> GL_ALIASED_LINE_WIDTH_RANGE
    int GL_CULL_FACE_MODE -> GL_CULL_FACE_MODE
    int GL_FRONT_FACE -> GL_FRONT_FACE
    int GL_DEPTH_RANGE -> GL_DEPTH_RANGE
    int GL_DEPTH_WRITEMASK -> GL_DEPTH_WRITEMASK
    int GL_DEPTH_CLEAR_VALUE -> GL_DEPTH_CLEAR_VALUE
    int GL_DEPTH_FUNC -> GL_DEPTH_FUNC
    int GL_STENCIL_CLEAR_VALUE -> GL_STENCIL_CLEAR_VALUE
    int GL_STENCIL_FUNC -> GL_STENCIL_FUNC
    int GL_STENCIL_FAIL -> GL_STENCIL_FAIL
    int GL_STENCIL_PASS_DEPTH_FAIL -> GL_STENCIL_PASS_DEPTH_FAIL
    int GL_STENCIL_PASS_DEPTH_PASS -> GL_STENCIL_PASS_DEPTH_PASS
    int GL_STENCIL_REF -> GL_STENCIL_REF
    int GL_STENCIL_VALUE_MASK -> GL_STENCIL_VALUE_MASK
    int GL_STENCIL_WRITEMASK -> GL_STENCIL_WRITEMASK
    int GL_STENCIL_BACK_FUNC -> GL_STENCIL_BACK_FUNC
    int GL_STENCIL_BACK_FAIL -> GL_STENCIL_BACK_FAIL
    int GL_STENCIL_BACK_PASS_DEPTH_FAIL -> GL_STENCIL_BACK_PASS_DEPTH_FAIL
    int GL_STENCIL_BACK_PASS_DEPTH_PASS -> GL_STENCIL_BACK_PASS_DEPTH_PASS
    int GL_STENCIL_BACK_REF -> GL_STENCIL_BACK_REF
    int GL_STENCIL_BACK_VALUE_MASK -> GL_STENCIL_BACK_VALUE_MASK
    int GL_STENCIL_BACK_WRITEMASK -> GL_STENCIL_BACK_WRITEMASK
    int GL_VIEWPORT -> GL_VIEWPORT
    int GL_SCISSOR_BOX -> GL_SCISSOR_BOX
    int GL_COLOR_CLEAR_VALUE -> GL_COLOR_CLEAR_VALUE
    int GL_COLOR_WRITEMASK -> GL_COLOR_WRITEMASK
    int GL_UNPACK_ALIGNMENT -> GL_UNPACK_ALIGNMENT
    int GL_PACK_ALIGNMENT -> GL_PACK_ALIGNMENT
    int GL_MAX_TEXTURE_SIZE -> GL_MAX_TEXTURE_SIZE
    int GL_MAX_TEXTURE_UNITS -> GL_MAX_TEXTURE_UNITS
    int GL_MAX_VIEWPORT_DIMS -> GL_MAX_VIEWPORT_DIMS
    int GL_SUBPIXEL_BITS -> GL_SUBPIXEL_BITS
    int GL_RED_BITS -> GL_RED_BITS
    int GL_GREEN_BITS -> GL_GREEN_BITS
    int GL_BLUE_BITS -> GL_BLUE_BITS
    int GL_ALPHA_BITS -> GL_ALPHA_BITS
    int GL_DEPTH_BITS -> GL_DEPTH_BITS
    int GL_STENCIL_BITS -> GL_STENCIL_BITS
    int GL_POLYGON_OFFSET_UNITS -> GL_POLYGON_OFFSET_UNITS
    int GL_POLYGON_OFFSET_FACTOR -> GL_POLYGON_OFFSET_FACTOR
    int GL_TEXTURE_BINDING_2D -> GL_TEXTURE_BINDING_2D
    int GL_SAMPLE_BUFFERS -> GL_SAMPLE_BUFFERS
    int GL_SAMPLES -> GL_SAMPLES
    int GL_SAMPLE_COVERAGE_VALUE -> GL_SAMPLE_COVERAGE_VALUE
    int GL_SAMPLE_COVERAGE_INVERT -> GL_SAMPLE_COVERAGE_INVERT
    int GL_NUM_COMPRESSED_TEXTURE_FORMATS -> GL_NUM_COMPRESSED_TEXTURE_FORMATS
    int GL_COMPRESSED_TEXTURE_FORMATS -> GL_COMPRESSED_TEXTURE_FORMATS
    int GL_DONT_CARE -> GL_DONT_CARE
    int GL_FASTEST -> GL_FASTEST
    int GL_NICEST -> GL_NICEST
    int GL_GENERATE_MIPMAP -> GL_GENERATE_MIPMAP
    int GL_GENERATE_MIPMAP_HINT -> GL_GENERATE_MIPMAP_HINT
    int GL_BYTE -> GL_BYTE
    int GL_UNSIGNED_BYTE -> GL_UNSIGNED_BYTE
    int GL_SHORT -> GL_SHORT
    int GL_UNSIGNED_SHORT -> GL_UNSIGNED_SHORT
    int GL_INT -> GL_INT
    int GL_UNSIGNED_INT -> GL_UNSIGNED_INT
    int GL_FLOAT -> GL_FLOAT
    int GL_FIXED -> GL_FIXED
    int GL_DEPTH_COMPONENT -> GL_DEPTH_COMPONENT
    int GL_ALPHA -> GL_ALPHA
    int GL_RGB -> GL_RGB
    int GL_RGBA -> GL_RGBA
    int GL_LUMINANCE -> GL_LUMINANCE
    int GL_LUMINANCE_ALPHA -> GL_LUMINANCE_ALPHA
    int GL_UNSIGNED_SHORT_4_4_4_4 -> GL_UNSIGNED_SHORT_4_4_4_4
    int GL_UNSIGNED_SHORT_5_5_5_1 -> GL_UNSIGNED_SHORT_5_5_5_1
    int GL_UNSIGNED_SHORT_5_6_5 -> GL_UNSIGNED_SHORT_5_6_5
    int GL_FRAGMENT_SHADER -> GL_FRAGMENT_SHADER
    int GL_VERTEX_SHADER -> GL_VERTEX_SHADER
    int GL_MAX_VERTEX_ATTRIBS -> GL_MAX_VERTEX_ATTRIBS
    int GL_MAX_VERTEX_UNIFORM_VECTORS -> GL_MAX_VERTEX_UNIFORM_VECTORS
    int GL_MAX_VARYING_VECTORS -> GL_MAX_VARYING_VECTORS
    int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS -> GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
    int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS -> GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
    int GL_MAX_TEXTURE_IMAGE_UNITS -> GL_MAX_TEXTURE_IMAGE_UNITS
    int GL_MAX_FRAGMENT_UNIFORM_VECTORS -> GL_MAX_FRAGMENT_UNIFORM_VECTORS
    int GL_SHADER_TYPE -> GL_SHADER_TYPE
    int GL_DELETE_STATUS -> GL_DELETE_STATUS
    int GL_LINK_STATUS -> GL_LINK_STATUS
    int GL_VALIDATE_STATUS -> GL_VALIDATE_STATUS
    int GL_ATTACHED_SHADERS -> GL_ATTACHED_SHADERS
    int GL_ACTIVE_UNIFORMS -> GL_ACTIVE_UNIFORMS
    int GL_ACTIVE_UNIFORM_MAX_LENGTH -> GL_ACTIVE_UNIFORM_MAX_LENGTH
    int GL_ACTIVE_ATTRIBUTES -> GL_ACTIVE_ATTRIBUTES
    int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH -> GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
    int GL_SHADING_LANGUAGE_VERSION -> GL_SHADING_LANGUAGE_VERSION
    int GL_CURRENT_PROGRAM -> GL_CURRENT_PROGRAM
    int GL_NEVER -> GL_NEVER
    int GL_LESS -> GL_LESS
    int GL_EQUAL -> GL_EQUAL
    int GL_LEQUAL -> GL_LEQUAL
    int GL_GREATER -> GL_GREATER
    int GL_NOTEQUAL -> GL_NOTEQUAL
    int GL_GEQUAL -> GL_GEQUAL
    int GL_ALWAYS -> GL_ALWAYS
    int GL_KEEP -> GL_KEEP
    int GL_REPLACE -> GL_REPLACE
    int GL_INCR -> GL_INCR
    int GL_DECR -> GL_DECR
    int GL_INVERT -> GL_INVERT
    int GL_INCR_WRAP -> GL_INCR_WRAP
    int GL_DECR_WRAP -> GL_DECR_WRAP
    int GL_VENDOR -> GL_VENDOR
    int GL_RENDERER -> GL_RENDERER
    int GL_VERSION -> GL_VERSION
    int GL_EXTENSIONS -> GL_EXTENSIONS
    int GL_NEAREST -> GL_NEAREST
    int GL_LINEAR -> GL_LINEAR
    int GL_NEAREST_MIPMAP_NEAREST -> GL_NEAREST_MIPMAP_NEAREST
    int GL_LINEAR_MIPMAP_NEAREST -> GL_LINEAR_MIPMAP_NEAREST
    int GL_NEAREST_MIPMAP_LINEAR -> GL_NEAREST_MIPMAP_LINEAR
    int GL_LINEAR_MIPMAP_LINEAR -> GL_LINEAR_MIPMAP_LINEAR
    int GL_TEXTURE_MAG_FILTER -> GL_TEXTURE_MAG_FILTER
    int GL_TEXTURE_MIN_FILTER -> GL_TEXTURE_MIN_FILTER
    int GL_TEXTURE_WRAP_S -> GL_TEXTURE_WRAP_S
    int GL_TEXTURE_WRAP_T -> GL_TEXTURE_WRAP_T
    int GL_TEXTURE -> GL_TEXTURE
    int GL_TEXTURE_CUBE_MAP -> GL_TEXTURE_CUBE_MAP
    int GL_TEXTURE_BINDING_CUBE_MAP -> GL_TEXTURE_BINDING_CUBE_MAP
    int GL_TEXTURE_CUBE_MAP_POSITIVE_X -> GL_TEXTURE_CUBE_MAP_POSITIVE_X
    int GL_TEXTURE_CUBE_MAP_NEGATIVE_X -> GL_TEXTURE_CUBE_MAP_NEGATIVE_X
    int GL_TEXTURE_CUBE_MAP_POSITIVE_Y -> GL_TEXTURE_CUBE_MAP_POSITIVE_Y
    int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y -> GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
    int GL_TEXTURE_CUBE_MAP_POSITIVE_Z -> GL_TEXTURE_CUBE_MAP_POSITIVE_Z
    int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z -> GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
    int GL_MAX_CUBE_MAP_TEXTURE_SIZE -> GL_MAX_CUBE_MAP_TEXTURE_SIZE
    int GL_TEXTURE0 -> GL_TEXTURE0
    int GL_TEXTURE1 -> GL_TEXTURE1
    int GL_TEXTURE2 -> GL_TEXTURE2
    int GL_TEXTURE3 -> GL_TEXTURE3
    int GL_TEXTURE4 -> GL_TEXTURE4
    int GL_TEXTURE5 -> GL_TEXTURE5
    int GL_TEXTURE6 -> GL_TEXTURE6
    int GL_TEXTURE7 -> GL_TEXTURE7
    int GL_TEXTURE8 -> GL_TEXTURE8
    int GL_TEXTURE9 -> GL_TEXTURE9
    int GL_TEXTURE10 -> GL_TEXTURE10
    int GL_TEXTURE11 -> GL_TEXTURE11
    int GL_TEXTURE12 -> GL_TEXTURE12
    int GL_TEXTURE13 -> GL_TEXTURE13
    int GL_TEXTURE14 -> GL_TEXTURE14
    int GL_TEXTURE15 -> GL_TEXTURE15
    int GL_TEXTURE16 -> GL_TEXTURE16
    int GL_TEXTURE17 -> GL_TEXTURE17
    int GL_TEXTURE18 -> GL_TEXTURE18
    int GL_TEXTURE19 -> GL_TEXTURE19
    int GL_TEXTURE20 -> GL_TEXTURE20
    int GL_TEXTURE21 -> GL_TEXTURE21
    int GL_TEXTURE22 -> GL_TEXTURE22
    int GL_TEXTURE23 -> GL_TEXTURE23
    int GL_TEXTURE24 -> GL_TEXTURE24
    int GL_TEXTURE25 -> GL_TEXTURE25
    int GL_TEXTURE26 -> GL_TEXTURE26
    int GL_TEXTURE27 -> GL_TEXTURE27
    int GL_TEXTURE28 -> GL_TEXTURE28
    int GL_TEXTURE29 -> GL_TEXTURE29
    int GL_TEXTURE30 -> GL_TEXTURE30
    int GL_TEXTURE31 -> GL_TEXTURE31
    int GL_ACTIVE_TEXTURE -> GL_ACTIVE_TEXTURE
    int GL_REPEAT -> GL_REPEAT
    int GL_CLAMP_TO_EDGE -> GL_CLAMP_TO_EDGE
    int GL_MIRRORED_REPEAT -> GL_MIRRORED_REPEAT
    int GL_FLOAT_VEC2 -> GL_FLOAT_VEC2
    int GL_FLOAT_VEC3 -> GL_FLOAT_VEC3
    int GL_FLOAT_VEC4 -> GL_FLOAT_VEC4
    int GL_INT_VEC2 -> GL_INT_VEC2
    int GL_INT_VEC3 -> GL_INT_VEC3
    int GL_INT_VEC4 -> GL_INT_VEC4
    int GL_BOOL -> GL_BOOL
    int GL_BOOL_VEC2 -> GL_BOOL_VEC2
    int GL_BOOL_VEC3 -> GL_BOOL_VEC3
    int GL_BOOL_VEC4 -> GL_BOOL_VEC4
    int GL_FLOAT_MAT2 -> GL_FLOAT_MAT2
    int GL_FLOAT_MAT3 -> GL_FLOAT_MAT3
    int GL_FLOAT_MAT4 -> GL_FLOAT_MAT4
    int GL_SAMPLER_2D -> GL_SAMPLER_2D
    int GL_SAMPLER_CUBE -> GL_SAMPLER_CUBE
    int GL_VERTEX_ATTRIB_ARRAY_ENABLED -> GL_VERTEX_ATTRIB_ARRAY_ENABLED
    int GL_VERTEX_ATTRIB_ARRAY_SIZE -> GL_VERTEX_ATTRIB_ARRAY_SIZE
    int GL_VERTEX_ATTRIB_ARRAY_STRIDE -> GL_VERTEX_ATTRIB_ARRAY_STRIDE
    int GL_VERTEX_ATTRIB_ARRAY_TYPE -> GL_VERTEX_ATTRIB_ARRAY_TYPE
    int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED -> GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
    int GL_VERTEX_ATTRIB_ARRAY_POINTER -> GL_VERTEX_ATTRIB_ARRAY_POINTER
    int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING -> GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
    int GL_IMPLEMENTATION_COLOR_READ_TYPE -> GL_IMPLEMENTATION_COLOR_READ_TYPE
    int GL_IMPLEMENTATION_COLOR_READ_FORMAT -> GL_IMPLEMENTATION_COLOR_READ_FORMAT
    int GL_COMPILE_STATUS -> GL_COMPILE_STATUS
    int GL_INFO_LOG_LENGTH -> GL_INFO_LOG_LENGTH
    int GL_SHADER_SOURCE_LENGTH -> GL_SHADER_SOURCE_LENGTH
    int GL_SHADER_COMPILER -> GL_SHADER_COMPILER
    int GL_SHADER_BINARY_FORMATS -> GL_SHADER_BINARY_FORMATS
    int GL_NUM_SHADER_BINARY_FORMATS -> GL_NUM_SHADER_BINARY_FORMATS
    int GL_LOW_FLOAT -> GL_LOW_FLOAT
    int GL_MEDIUM_FLOAT -> GL_MEDIUM_FLOAT
    int GL_HIGH_FLOAT -> GL_HIGH_FLOAT
    int GL_LOW_INT -> GL_LOW_INT
    int GL_MEDIUM_INT -> GL_MEDIUM_INT
    int GL_HIGH_INT -> GL_HIGH_INT
    int GL_FRAMEBUFFER -> GL_FRAMEBUFFER
    int GL_RENDERBUFFER -> GL_RENDERBUFFER
    int GL_RGBA4 -> GL_RGBA4
    int GL_RGB5_A1 -> GL_RGB5_A1
    int GL_RGB565 -> GL_RGB565
    int GL_DEPTH_COMPONENT16 -> GL_DEPTH_COMPONENT16
    int GL_STENCIL_INDEX -> GL_STENCIL_INDEX
    int GL_STENCIL_INDEX8 -> GL_STENCIL_INDEX8
    int GL_RENDERBUFFER_WIDTH -> GL_RENDERBUFFER_WIDTH
    int GL_RENDERBUFFER_HEIGHT -> GL_RENDERBUFFER_HEIGHT
    int GL_RENDERBUFFER_INTERNAL_FORMAT -> GL_RENDERBUFFER_INTERNAL_FORMAT
    int GL_RENDERBUFFER_RED_SIZE -> GL_RENDERBUFFER_RED_SIZE
    int GL_RENDERBUFFER_GREEN_SIZE -> GL_RENDERBUFFER_GREEN_SIZE
    int GL_RENDERBUFFER_BLUE_SIZE -> GL_RENDERBUFFER_BLUE_SIZE
    int GL_RENDERBUFFER_ALPHA_SIZE -> GL_RENDERBUFFER_ALPHA_SIZE
    int GL_RENDERBUFFER_DEPTH_SIZE -> GL_RENDERBUFFER_DEPTH_SIZE
    int GL_RENDERBUFFER_STENCIL_SIZE -> GL_RENDERBUFFER_STENCIL_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE -> GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
    int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME -> GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
    int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL -> GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
    int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE -> GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
    int GL_COLOR_ATTACHMENT0 -> GL_COLOR_ATTACHMENT0
    int GL_DEPTH_ATTACHMENT -> GL_DEPTH_ATTACHMENT
    int GL_STENCIL_ATTACHMENT -> GL_STENCIL_ATTACHMENT
    int GL_NONE -> GL_NONE
    int GL_FRAMEBUFFER_COMPLETE -> GL_FRAMEBUFFER_COMPLETE
    int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT -> GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT -> GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS -> GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    int GL_FRAMEBUFFER_UNSUPPORTED -> GL_FRAMEBUFFER_UNSUPPORTED
    int GL_FRAMEBUFFER_BINDING -> GL_FRAMEBUFFER_BINDING
    int GL_RENDERBUFFER_BINDING -> GL_RENDERBUFFER_BINDING
    int GL_MAX_RENDERBUFFER_SIZE -> GL_MAX_RENDERBUFFER_SIZE
    int GL_INVALID_FRAMEBUFFER_OPERATION -> GL_INVALID_FRAMEBUFFER_OPERATION
    int GL_VERTEX_PROGRAM_POINT_SIZE -> GL_VERTEX_PROGRAM_POINT_SIZE
    int GL_COVERAGE_BUFFER_BIT_NV -> GL_COVERAGE_BUFFER_BIT_NV
    int GL_TEXTURE_MAX_ANISOTROPY_EXT -> GL_TEXTURE_MAX_ANISOTROPY_EXT
    int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT -> GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
    void glActiveTexture(int) -> glActiveTexture
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearDepthf(float) -> glClearDepthf
    void glClearStencil(int) -> glClearStencil
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDeleteTexture(int) -> glDeleteTexture
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDisable(int) -> glDisable
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFrontFace(int) -> glFrontFace
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGenTexture() -> glGenTexture
    int glGetError() -> glGetError
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glHint(int,int) -> glHint
    void glLineWidth(float) -> glLineWidth
    void glPixelStorei(int,int) -> glPixelStorei
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glScissor(int,int,int,int) -> glScissor
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glViewport(int,int,int,int) -> glViewport
    void glAttachShader(int,int) -> glAttachShader
    void glBindAttribLocation(int,int,java.lang.String) -> glBindAttribLocation
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBlendColor(float,float,float,float) -> glBlendColor
    void glBlendEquation(int) -> glBlendEquation
    void glBlendEquationSeparate(int,int) -> glBlendEquationSeparate
    void glBlendFuncSeparate(int,int,int,int) -> glBlendFuncSeparate
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glCompileShader(int) -> glCompileShader
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffer(int) -> glDeleteBuffer
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteFramebuffer(int) -> glDeleteFramebuffer
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffer(int) -> glDeleteRenderbuffer
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteShader(int) -> glDeleteShader
    void glDetachShader(int,int) -> glDetachShader
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    int glGenBuffer() -> glGenBuffer
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenerateMipmap(int) -> glGenerateMipmap
    int glGenFramebuffer() -> glGenFramebuffer
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    int glGenRenderbuffer() -> glGenRenderbuffer
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer) -> glGetAttachedShaders
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetBooleanv(int,java.nio.Buffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer) -> glGetFramebufferAttachmentParameteriv
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer) -> glGetRenderbufferParameteriv
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetShaderPrecisionFormat
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetUniformfv(int,int,java.nio.FloatBuffer) -> glGetUniformfv
    void glGetUniformiv(int,int,java.nio.IntBuffer) -> glGetUniformiv
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glGetVertexAttribfv(int,int,java.nio.FloatBuffer) -> glGetVertexAttribfv
    void glGetVertexAttribiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribiv
    void glGetVertexAttribPointerv(int,int,java.nio.Buffer) -> glGetVertexAttribPointerv
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsFramebuffer(int) -> glIsFramebuffer
    boolean glIsProgram(int) -> glIsProgram
    boolean glIsRenderbuffer(int) -> glIsRenderbuffer
    boolean glIsShader(int) -> glIsShader
    boolean glIsTexture(int) -> glIsTexture
    void glLinkProgram(int) -> glLinkProgram
    void glReleaseShaderCompiler() -> glReleaseShaderCompiler
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int) -> glShaderBinary
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glStencilFuncSeparate(int,int,int,int) -> glStencilFuncSeparate
    void glStencilMaskSeparate(int,int) -> glStencilMaskSeparate
    void glStencilOpSeparate(int,int,int,int) -> glStencilOpSeparate
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glUniform1f(int,float) -> glUniform1f
    void glUniform1fv(int,int,java.nio.FloatBuffer) -> glUniform1fv
    void glUniform1fv(int,int,float[],int) -> glUniform1fv
    void glUniform1i(int,int) -> glUniform1i
    void glUniform1iv(int,int,java.nio.IntBuffer) -> glUniform1iv
    void glUniform1iv(int,int,int[],int) -> glUniform1iv
    void glUniform2f(int,float,float) -> glUniform2f
    void glUniform2fv(int,int,java.nio.FloatBuffer) -> glUniform2fv
    void glUniform2fv(int,int,float[],int) -> glUniform2fv
    void glUniform2i(int,int,int) -> glUniform2i
    void glUniform2iv(int,int,java.nio.IntBuffer) -> glUniform2iv
    void glUniform2iv(int,int,int[],int) -> glUniform2iv
    void glUniform3f(int,float,float,float) -> glUniform3f
    void glUniform3fv(int,int,java.nio.FloatBuffer) -> glUniform3fv
    void glUniform3fv(int,int,float[],int) -> glUniform3fv
    void glUniform3i(int,int,int,int) -> glUniform3i
    void glUniform3iv(int,int,java.nio.IntBuffer) -> glUniform3iv
    void glUniform3iv(int,int,int[],int) -> glUniform3iv
    void glUniform4f(int,float,float,float,float) -> glUniform4f
    void glUniform4fv(int,int,java.nio.FloatBuffer) -> glUniform4fv
    void glUniform4fv(int,int,float[],int) -> glUniform4fv
    void glUniform4i(int,int,int,int,int) -> glUniform4i
    void glUniform4iv(int,int,java.nio.IntBuffer) -> glUniform4iv
    void glUniform4iv(int,int,int[],int) -> glUniform4iv
    void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2fv
    void glUniformMatrix2fv(int,int,boolean,float[],int) -> glUniformMatrix2fv
    void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3fv
    void glUniformMatrix3fv(int,int,boolean,float[],int) -> glUniformMatrix3fv
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glValidateProgram(int) -> glValidateProgram
    void glVertexAttrib1f(int,float) -> glVertexAttrib1f
    void glVertexAttrib1fv(int,java.nio.FloatBuffer) -> glVertexAttrib1fv
    void glVertexAttrib2f(int,float,float) -> glVertexAttrib2f
    void glVertexAttrib2fv(int,java.nio.FloatBuffer) -> glVertexAttrib2fv
    void glVertexAttrib3f(int,float,float,float) -> glVertexAttrib3f
    void glVertexAttrib3fv(int,java.nio.FloatBuffer) -> glVertexAttrib3fv
    void glVertexAttrib4f(int,float,float,float,float) -> glVertexAttrib4f
    void glVertexAttrib4fv(int,java.nio.FloatBuffer) -> glVertexAttrib4fv
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
com.badlogic.gdx.graphics.GL30 -> com.badlogic.gdx.graphics.GL30:
    int GL_READ_BUFFER -> GL_READ_BUFFER
    int GL_UNPACK_ROW_LENGTH -> GL_UNPACK_ROW_LENGTH
    int GL_UNPACK_SKIP_ROWS -> GL_UNPACK_SKIP_ROWS
    int GL_UNPACK_SKIP_PIXELS -> GL_UNPACK_SKIP_PIXELS
    int GL_PACK_ROW_LENGTH -> GL_PACK_ROW_LENGTH
    int GL_PACK_SKIP_ROWS -> GL_PACK_SKIP_ROWS
    int GL_PACK_SKIP_PIXELS -> GL_PACK_SKIP_PIXELS
    int GL_COLOR -> GL_COLOR
    int GL_DEPTH -> GL_DEPTH
    int GL_STENCIL -> GL_STENCIL
    int GL_RED -> GL_RED
    int GL_RGB8 -> GL_RGB8
    int GL_RGBA8 -> GL_RGBA8
    int GL_RGB10_A2 -> GL_RGB10_A2
    int GL_TEXTURE_BINDING_3D -> GL_TEXTURE_BINDING_3D
    int GL_UNPACK_SKIP_IMAGES -> GL_UNPACK_SKIP_IMAGES
    int GL_UNPACK_IMAGE_HEIGHT -> GL_UNPACK_IMAGE_HEIGHT
    int GL_TEXTURE_3D -> GL_TEXTURE_3D
    int GL_TEXTURE_WRAP_R -> GL_TEXTURE_WRAP_R
    int GL_MAX_3D_TEXTURE_SIZE -> GL_MAX_3D_TEXTURE_SIZE
    int GL_UNSIGNED_INT_2_10_10_10_REV -> GL_UNSIGNED_INT_2_10_10_10_REV
    int GL_MAX_ELEMENTS_VERTICES -> GL_MAX_ELEMENTS_VERTICES
    int GL_MAX_ELEMENTS_INDICES -> GL_MAX_ELEMENTS_INDICES
    int GL_TEXTURE_MIN_LOD -> GL_TEXTURE_MIN_LOD
    int GL_TEXTURE_MAX_LOD -> GL_TEXTURE_MAX_LOD
    int GL_TEXTURE_BASE_LEVEL -> GL_TEXTURE_BASE_LEVEL
    int GL_TEXTURE_MAX_LEVEL -> GL_TEXTURE_MAX_LEVEL
    int GL_MIN -> GL_MIN
    int GL_MAX -> GL_MAX
    int GL_DEPTH_COMPONENT24 -> GL_DEPTH_COMPONENT24
    int GL_MAX_TEXTURE_LOD_BIAS -> GL_MAX_TEXTURE_LOD_BIAS
    int GL_TEXTURE_COMPARE_MODE -> GL_TEXTURE_COMPARE_MODE
    int GL_TEXTURE_COMPARE_FUNC -> GL_TEXTURE_COMPARE_FUNC
    int GL_CURRENT_QUERY -> GL_CURRENT_QUERY
    int GL_QUERY_RESULT -> GL_QUERY_RESULT
    int GL_QUERY_RESULT_AVAILABLE -> GL_QUERY_RESULT_AVAILABLE
    int GL_BUFFER_MAPPED -> GL_BUFFER_MAPPED
    int GL_BUFFER_MAP_POINTER -> GL_BUFFER_MAP_POINTER
    int GL_STREAM_READ -> GL_STREAM_READ
    int GL_STREAM_COPY -> GL_STREAM_COPY
    int GL_STATIC_READ -> GL_STATIC_READ
    int GL_STATIC_COPY -> GL_STATIC_COPY
    int GL_DYNAMIC_READ -> GL_DYNAMIC_READ
    int GL_DYNAMIC_COPY -> GL_DYNAMIC_COPY
    int GL_MAX_DRAW_BUFFERS -> GL_MAX_DRAW_BUFFERS
    int GL_DRAW_BUFFER0 -> GL_DRAW_BUFFER0
    int GL_DRAW_BUFFER1 -> GL_DRAW_BUFFER1
    int GL_DRAW_BUFFER2 -> GL_DRAW_BUFFER2
    int GL_DRAW_BUFFER3 -> GL_DRAW_BUFFER3
    int GL_DRAW_BUFFER4 -> GL_DRAW_BUFFER4
    int GL_DRAW_BUFFER5 -> GL_DRAW_BUFFER5
    int GL_DRAW_BUFFER6 -> GL_DRAW_BUFFER6
    int GL_DRAW_BUFFER7 -> GL_DRAW_BUFFER7
    int GL_DRAW_BUFFER8 -> GL_DRAW_BUFFER8
    int GL_DRAW_BUFFER9 -> GL_DRAW_BUFFER9
    int GL_DRAW_BUFFER10 -> GL_DRAW_BUFFER10
    int GL_DRAW_BUFFER11 -> GL_DRAW_BUFFER11
    int GL_DRAW_BUFFER12 -> GL_DRAW_BUFFER12
    int GL_DRAW_BUFFER13 -> GL_DRAW_BUFFER13
    int GL_DRAW_BUFFER14 -> GL_DRAW_BUFFER14
    int GL_DRAW_BUFFER15 -> GL_DRAW_BUFFER15
    int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS -> GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
    int GL_MAX_VERTEX_UNIFORM_COMPONENTS -> GL_MAX_VERTEX_UNIFORM_COMPONENTS
    int GL_SAMPLER_3D -> GL_SAMPLER_3D
    int GL_SAMPLER_2D_SHADOW -> GL_SAMPLER_2D_SHADOW
    int GL_FRAGMENT_SHADER_DERIVATIVE_HINT -> GL_FRAGMENT_SHADER_DERIVATIVE_HINT
    int GL_PIXEL_PACK_BUFFER -> GL_PIXEL_PACK_BUFFER
    int GL_PIXEL_UNPACK_BUFFER -> GL_PIXEL_UNPACK_BUFFER
    int GL_PIXEL_PACK_BUFFER_BINDING -> GL_PIXEL_PACK_BUFFER_BINDING
    int GL_PIXEL_UNPACK_BUFFER_BINDING -> GL_PIXEL_UNPACK_BUFFER_BINDING
    int GL_FLOAT_MAT2x3 -> GL_FLOAT_MAT2x3
    int GL_FLOAT_MAT2x4 -> GL_FLOAT_MAT2x4
    int GL_FLOAT_MAT3x2 -> GL_FLOAT_MAT3x2
    int GL_FLOAT_MAT3x4 -> GL_FLOAT_MAT3x4
    int GL_FLOAT_MAT4x2 -> GL_FLOAT_MAT4x2
    int GL_FLOAT_MAT4x3 -> GL_FLOAT_MAT4x3
    int GL_SRGB -> GL_SRGB
    int GL_SRGB8 -> GL_SRGB8
    int GL_SRGB8_ALPHA8 -> GL_SRGB8_ALPHA8
    int GL_COMPARE_REF_TO_TEXTURE -> GL_COMPARE_REF_TO_TEXTURE
    int GL_MAJOR_VERSION -> GL_MAJOR_VERSION
    int GL_MINOR_VERSION -> GL_MINOR_VERSION
    int GL_NUM_EXTENSIONS -> GL_NUM_EXTENSIONS
    int GL_RGBA32F -> GL_RGBA32F
    int GL_RGB32F -> GL_RGB32F
    int GL_RGBA16F -> GL_RGBA16F
    int GL_RGB16F -> GL_RGB16F
    int GL_VERTEX_ATTRIB_ARRAY_INTEGER -> GL_VERTEX_ATTRIB_ARRAY_INTEGER
    int GL_MAX_ARRAY_TEXTURE_LAYERS -> GL_MAX_ARRAY_TEXTURE_LAYERS
    int GL_MIN_PROGRAM_TEXEL_OFFSET -> GL_MIN_PROGRAM_TEXEL_OFFSET
    int GL_MAX_PROGRAM_TEXEL_OFFSET -> GL_MAX_PROGRAM_TEXEL_OFFSET
    int GL_MAX_VARYING_COMPONENTS -> GL_MAX_VARYING_COMPONENTS
    int GL_TEXTURE_2D_ARRAY -> GL_TEXTURE_2D_ARRAY
    int GL_TEXTURE_BINDING_2D_ARRAY -> GL_TEXTURE_BINDING_2D_ARRAY
    int GL_R11F_G11F_B10F -> GL_R11F_G11F_B10F
    int GL_UNSIGNED_INT_10F_11F_11F_REV -> GL_UNSIGNED_INT_10F_11F_11F_REV
    int GL_RGB9_E5 -> GL_RGB9_E5
    int GL_UNSIGNED_INT_5_9_9_9_REV -> GL_UNSIGNED_INT_5_9_9_9_REV
    int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH -> GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
    int GL_TRANSFORM_FEEDBACK_BUFFER_MODE -> GL_TRANSFORM_FEEDBACK_BUFFER_MODE
    int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS -> GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
    int GL_TRANSFORM_FEEDBACK_VARYINGS -> GL_TRANSFORM_FEEDBACK_VARYINGS
    int GL_TRANSFORM_FEEDBACK_BUFFER_START -> GL_TRANSFORM_FEEDBACK_BUFFER_START
    int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE -> GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
    int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN -> GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
    int GL_RASTERIZER_DISCARD -> GL_RASTERIZER_DISCARD
    int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS -> GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
    int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS -> GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
    int GL_INTERLEAVED_ATTRIBS -> GL_INTERLEAVED_ATTRIBS
    int GL_SEPARATE_ATTRIBS -> GL_SEPARATE_ATTRIBS
    int GL_TRANSFORM_FEEDBACK_BUFFER -> GL_TRANSFORM_FEEDBACK_BUFFER
    int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING -> GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
    int GL_RGBA32UI -> GL_RGBA32UI
    int GL_RGB32UI -> GL_RGB32UI
    int GL_RGBA16UI -> GL_RGBA16UI
    int GL_RGB16UI -> GL_RGB16UI
    int GL_RGBA8UI -> GL_RGBA8UI
    int GL_RGB8UI -> GL_RGB8UI
    int GL_RGBA32I -> GL_RGBA32I
    int GL_RGB32I -> GL_RGB32I
    int GL_RGBA16I -> GL_RGBA16I
    int GL_RGB16I -> GL_RGB16I
    int GL_RGBA8I -> GL_RGBA8I
    int GL_RGB8I -> GL_RGB8I
    int GL_RED_INTEGER -> GL_RED_INTEGER
    int GL_RGB_INTEGER -> GL_RGB_INTEGER
    int GL_RGBA_INTEGER -> GL_RGBA_INTEGER
    int GL_SAMPLER_2D_ARRAY -> GL_SAMPLER_2D_ARRAY
    int GL_SAMPLER_2D_ARRAY_SHADOW -> GL_SAMPLER_2D_ARRAY_SHADOW
    int GL_SAMPLER_CUBE_SHADOW -> GL_SAMPLER_CUBE_SHADOW
    int GL_UNSIGNED_INT_VEC2 -> GL_UNSIGNED_INT_VEC2
    int GL_UNSIGNED_INT_VEC3 -> GL_UNSIGNED_INT_VEC3
    int GL_UNSIGNED_INT_VEC4 -> GL_UNSIGNED_INT_VEC4
    int GL_INT_SAMPLER_2D -> GL_INT_SAMPLER_2D
    int GL_INT_SAMPLER_3D -> GL_INT_SAMPLER_3D
    int GL_INT_SAMPLER_CUBE -> GL_INT_SAMPLER_CUBE
    int GL_INT_SAMPLER_2D_ARRAY -> GL_INT_SAMPLER_2D_ARRAY
    int GL_UNSIGNED_INT_SAMPLER_2D -> GL_UNSIGNED_INT_SAMPLER_2D
    int GL_UNSIGNED_INT_SAMPLER_3D -> GL_UNSIGNED_INT_SAMPLER_3D
    int GL_UNSIGNED_INT_SAMPLER_CUBE -> GL_UNSIGNED_INT_SAMPLER_CUBE
    int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY -> GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
    int GL_BUFFER_ACCESS_FLAGS -> GL_BUFFER_ACCESS_FLAGS
    int GL_BUFFER_MAP_LENGTH -> GL_BUFFER_MAP_LENGTH
    int GL_BUFFER_MAP_OFFSET -> GL_BUFFER_MAP_OFFSET
    int GL_DEPTH_COMPONENT32F -> GL_DEPTH_COMPONENT32F
    int GL_DEPTH32F_STENCIL8 -> GL_DEPTH32F_STENCIL8
    int GL_FLOAT_32_UNSIGNED_INT_24_8_REV -> GL_FLOAT_32_UNSIGNED_INT_24_8_REV
    int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING -> GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
    int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE -> GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
    int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
    int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE -> GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
    int GL_FRAMEBUFFER_DEFAULT -> GL_FRAMEBUFFER_DEFAULT
    int GL_FRAMEBUFFER_UNDEFINED -> GL_FRAMEBUFFER_UNDEFINED
    int GL_DEPTH_STENCIL_ATTACHMENT -> GL_DEPTH_STENCIL_ATTACHMENT
    int GL_DEPTH_STENCIL -> GL_DEPTH_STENCIL
    int GL_UNSIGNED_INT_24_8 -> GL_UNSIGNED_INT_24_8
    int GL_DEPTH24_STENCIL8 -> GL_DEPTH24_STENCIL8
    int GL_UNSIGNED_NORMALIZED -> GL_UNSIGNED_NORMALIZED
    int GL_DRAW_FRAMEBUFFER_BINDING -> GL_DRAW_FRAMEBUFFER_BINDING
    int GL_READ_FRAMEBUFFER -> GL_READ_FRAMEBUFFER
    int GL_DRAW_FRAMEBUFFER -> GL_DRAW_FRAMEBUFFER
    int GL_READ_FRAMEBUFFER_BINDING -> GL_READ_FRAMEBUFFER_BINDING
    int GL_RENDERBUFFER_SAMPLES -> GL_RENDERBUFFER_SAMPLES
    int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER -> GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
    int GL_MAX_COLOR_ATTACHMENTS -> GL_MAX_COLOR_ATTACHMENTS
    int GL_COLOR_ATTACHMENT1 -> GL_COLOR_ATTACHMENT1
    int GL_COLOR_ATTACHMENT2 -> GL_COLOR_ATTACHMENT2
    int GL_COLOR_ATTACHMENT3 -> GL_COLOR_ATTACHMENT3
    int GL_COLOR_ATTACHMENT4 -> GL_COLOR_ATTACHMENT4
    int GL_COLOR_ATTACHMENT5 -> GL_COLOR_ATTACHMENT5
    int GL_COLOR_ATTACHMENT6 -> GL_COLOR_ATTACHMENT6
    int GL_COLOR_ATTACHMENT7 -> GL_COLOR_ATTACHMENT7
    int GL_COLOR_ATTACHMENT8 -> GL_COLOR_ATTACHMENT8
    int GL_COLOR_ATTACHMENT9 -> GL_COLOR_ATTACHMENT9
    int GL_COLOR_ATTACHMENT10 -> GL_COLOR_ATTACHMENT10
    int GL_COLOR_ATTACHMENT11 -> GL_COLOR_ATTACHMENT11
    int GL_COLOR_ATTACHMENT12 -> GL_COLOR_ATTACHMENT12
    int GL_COLOR_ATTACHMENT13 -> GL_COLOR_ATTACHMENT13
    int GL_COLOR_ATTACHMENT14 -> GL_COLOR_ATTACHMENT14
    int GL_COLOR_ATTACHMENT15 -> GL_COLOR_ATTACHMENT15
    int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE -> GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
    int GL_MAX_SAMPLES -> GL_MAX_SAMPLES
    int GL_HALF_FLOAT -> GL_HALF_FLOAT
    int GL_MAP_READ_BIT -> GL_MAP_READ_BIT
    int GL_MAP_WRITE_BIT -> GL_MAP_WRITE_BIT
    int GL_MAP_INVALIDATE_RANGE_BIT -> GL_MAP_INVALIDATE_RANGE_BIT
    int GL_MAP_INVALIDATE_BUFFER_BIT -> GL_MAP_INVALIDATE_BUFFER_BIT
    int GL_MAP_FLUSH_EXPLICIT_BIT -> GL_MAP_FLUSH_EXPLICIT_BIT
    int GL_MAP_UNSYNCHRONIZED_BIT -> GL_MAP_UNSYNCHRONIZED_BIT
    int GL_RG -> GL_RG
    int GL_RG_INTEGER -> GL_RG_INTEGER
    int GL_R8 -> GL_R8
    int GL_RG8 -> GL_RG8
    int GL_R16F -> GL_R16F
    int GL_R32F -> GL_R32F
    int GL_RG16F -> GL_RG16F
    int GL_RG32F -> GL_RG32F
    int GL_R8I -> GL_R8I
    int GL_R8UI -> GL_R8UI
    int GL_R16I -> GL_R16I
    int GL_R16UI -> GL_R16UI
    int GL_R32I -> GL_R32I
    int GL_R32UI -> GL_R32UI
    int GL_RG8I -> GL_RG8I
    int GL_RG8UI -> GL_RG8UI
    int GL_RG16I -> GL_RG16I
    int GL_RG16UI -> GL_RG16UI
    int GL_RG32I -> GL_RG32I
    int GL_RG32UI -> GL_RG32UI
    int GL_VERTEX_ARRAY_BINDING -> GL_VERTEX_ARRAY_BINDING
    int GL_R8_SNORM -> GL_R8_SNORM
    int GL_RG8_SNORM -> GL_RG8_SNORM
    int GL_RGB8_SNORM -> GL_RGB8_SNORM
    int GL_RGBA8_SNORM -> GL_RGBA8_SNORM
    int GL_SIGNED_NORMALIZED -> GL_SIGNED_NORMALIZED
    int GL_PRIMITIVE_RESTART_FIXED_INDEX -> GL_PRIMITIVE_RESTART_FIXED_INDEX
    int GL_COPY_READ_BUFFER -> GL_COPY_READ_BUFFER
    int GL_COPY_WRITE_BUFFER -> GL_COPY_WRITE_BUFFER
    int GL_COPY_READ_BUFFER_BINDING -> GL_COPY_READ_BUFFER_BINDING
    int GL_COPY_WRITE_BUFFER_BINDING -> GL_COPY_WRITE_BUFFER_BINDING
    int GL_UNIFORM_BUFFER -> GL_UNIFORM_BUFFER
    int GL_UNIFORM_BUFFER_BINDING -> GL_UNIFORM_BUFFER_BINDING
    int GL_UNIFORM_BUFFER_START -> GL_UNIFORM_BUFFER_START
    int GL_UNIFORM_BUFFER_SIZE -> GL_UNIFORM_BUFFER_SIZE
    int GL_MAX_VERTEX_UNIFORM_BLOCKS -> GL_MAX_VERTEX_UNIFORM_BLOCKS
    int GL_MAX_FRAGMENT_UNIFORM_BLOCKS -> GL_MAX_FRAGMENT_UNIFORM_BLOCKS
    int GL_MAX_COMBINED_UNIFORM_BLOCKS -> GL_MAX_COMBINED_UNIFORM_BLOCKS
    int GL_MAX_UNIFORM_BUFFER_BINDINGS -> GL_MAX_UNIFORM_BUFFER_BINDINGS
    int GL_MAX_UNIFORM_BLOCK_SIZE -> GL_MAX_UNIFORM_BLOCK_SIZE
    int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS -> GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
    int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS -> GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
    int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT -> GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
    int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH -> GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
    int GL_ACTIVE_UNIFORM_BLOCKS -> GL_ACTIVE_UNIFORM_BLOCKS
    int GL_UNIFORM_TYPE -> GL_UNIFORM_TYPE
    int GL_UNIFORM_SIZE -> GL_UNIFORM_SIZE
    int GL_UNIFORM_NAME_LENGTH -> GL_UNIFORM_NAME_LENGTH
    int GL_UNIFORM_BLOCK_INDEX -> GL_UNIFORM_BLOCK_INDEX
    int GL_UNIFORM_OFFSET -> GL_UNIFORM_OFFSET
    int GL_UNIFORM_ARRAY_STRIDE -> GL_UNIFORM_ARRAY_STRIDE
    int GL_UNIFORM_MATRIX_STRIDE -> GL_UNIFORM_MATRIX_STRIDE
    int GL_UNIFORM_IS_ROW_MAJOR -> GL_UNIFORM_IS_ROW_MAJOR
    int GL_UNIFORM_BLOCK_BINDING -> GL_UNIFORM_BLOCK_BINDING
    int GL_UNIFORM_BLOCK_DATA_SIZE -> GL_UNIFORM_BLOCK_DATA_SIZE
    int GL_UNIFORM_BLOCK_NAME_LENGTH -> GL_UNIFORM_BLOCK_NAME_LENGTH
    int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS -> GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
    int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES -> GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
    int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER -> GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
    int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER -> GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
    int GL_INVALID_INDEX -> GL_INVALID_INDEX
    int GL_MAX_VERTEX_OUTPUT_COMPONENTS -> GL_MAX_VERTEX_OUTPUT_COMPONENTS
    int GL_MAX_FRAGMENT_INPUT_COMPONENTS -> GL_MAX_FRAGMENT_INPUT_COMPONENTS
    int GL_MAX_SERVER_WAIT_TIMEOUT -> GL_MAX_SERVER_WAIT_TIMEOUT
    int GL_OBJECT_TYPE -> GL_OBJECT_TYPE
    int GL_SYNC_CONDITION -> GL_SYNC_CONDITION
    int GL_SYNC_STATUS -> GL_SYNC_STATUS
    int GL_SYNC_FLAGS -> GL_SYNC_FLAGS
    int GL_SYNC_FENCE -> GL_SYNC_FENCE
    int GL_SYNC_GPU_COMMANDS_COMPLETE -> GL_SYNC_GPU_COMMANDS_COMPLETE
    int GL_UNSIGNALED -> GL_UNSIGNALED
    int GL_SIGNALED -> GL_SIGNALED
    int GL_ALREADY_SIGNALED -> GL_ALREADY_SIGNALED
    int GL_TIMEOUT_EXPIRED -> GL_TIMEOUT_EXPIRED
    int GL_CONDITION_SATISFIED -> GL_CONDITION_SATISFIED
    int GL_WAIT_FAILED -> GL_WAIT_FAILED
    int GL_SYNC_FLUSH_COMMANDS_BIT -> GL_SYNC_FLUSH_COMMANDS_BIT
    long GL_TIMEOUT_IGNORED -> GL_TIMEOUT_IGNORED
    int GL_VERTEX_ATTRIB_ARRAY_DIVISOR -> GL_VERTEX_ATTRIB_ARRAY_DIVISOR
    int GL_ANY_SAMPLES_PASSED -> GL_ANY_SAMPLES_PASSED
    int GL_ANY_SAMPLES_PASSED_CONSERVATIVE -> GL_ANY_SAMPLES_PASSED_CONSERVATIVE
    int GL_SAMPLER_BINDING -> GL_SAMPLER_BINDING
    int GL_RGB10_A2UI -> GL_RGB10_A2UI
    int GL_TEXTURE_SWIZZLE_R -> GL_TEXTURE_SWIZZLE_R
    int GL_TEXTURE_SWIZZLE_G -> GL_TEXTURE_SWIZZLE_G
    int GL_TEXTURE_SWIZZLE_B -> GL_TEXTURE_SWIZZLE_B
    int GL_TEXTURE_SWIZZLE_A -> GL_TEXTURE_SWIZZLE_A
    int GL_GREEN -> GL_GREEN
    int GL_BLUE -> GL_BLUE
    int GL_INT_2_10_10_10_REV -> GL_INT_2_10_10_10_REV
    int GL_TRANSFORM_FEEDBACK -> GL_TRANSFORM_FEEDBACK
    int GL_TRANSFORM_FEEDBACK_PAUSED -> GL_TRANSFORM_FEEDBACK_PAUSED
    int GL_TRANSFORM_FEEDBACK_ACTIVE -> GL_TRANSFORM_FEEDBACK_ACTIVE
    int GL_TRANSFORM_FEEDBACK_BINDING -> GL_TRANSFORM_FEEDBACK_BINDING
    int GL_PROGRAM_BINARY_RETRIEVABLE_HINT -> GL_PROGRAM_BINARY_RETRIEVABLE_HINT
    int GL_PROGRAM_BINARY_LENGTH -> GL_PROGRAM_BINARY_LENGTH
    int GL_NUM_PROGRAM_BINARY_FORMATS -> GL_NUM_PROGRAM_BINARY_FORMATS
    int GL_PROGRAM_BINARY_FORMATS -> GL_PROGRAM_BINARY_FORMATS
    int GL_COMPRESSED_R11_EAC -> GL_COMPRESSED_R11_EAC
    int GL_COMPRESSED_SIGNED_R11_EAC -> GL_COMPRESSED_SIGNED_R11_EAC
    int GL_COMPRESSED_RG11_EAC -> GL_COMPRESSED_RG11_EAC
    int GL_COMPRESSED_SIGNED_RG11_EAC -> GL_COMPRESSED_SIGNED_RG11_EAC
    int GL_COMPRESSED_RGB8_ETC2 -> GL_COMPRESSED_RGB8_ETC2
    int GL_COMPRESSED_SRGB8_ETC2 -> GL_COMPRESSED_SRGB8_ETC2
    int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 -> GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
    int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 -> GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
    int GL_COMPRESSED_RGBA8_ETC2_EAC -> GL_COMPRESSED_RGBA8_ETC2_EAC
    int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC -> GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
    int GL_TEXTURE_IMMUTABLE_FORMAT -> GL_TEXTURE_IMMUTABLE_FORMAT
    int GL_MAX_ELEMENT_INDEX -> GL_MAX_ELEMENT_INDEX
    int GL_NUM_SAMPLE_COUNTS -> GL_NUM_SAMPLE_COUNTS
    int GL_TEXTURE_IMMUTABLE_LEVELS -> GL_TEXTURE_IMMUTABLE_LEVELS
    void glReadBuffer(int) -> glReadBuffer
    void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer) -> glDrawRangeElements
    void glDrawRangeElements(int,int,int,int,int,int) -> glDrawRangeElements
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage3D
    void glTexImage3D(int,int,int,int,int,int,int,int,int,int) -> glTexImage3D
    void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage3D
    void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int) -> glTexSubImage3D
    void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int) -> glCopyTexSubImage3D
    void glGenQueries(int,int[],int) -> glGenQueries
    void glGenQueries(int,java.nio.IntBuffer) -> glGenQueries
    void glDeleteQueries(int,int[],int) -> glDeleteQueries
    void glDeleteQueries(int,java.nio.IntBuffer) -> glDeleteQueries
    boolean glIsQuery(int) -> glIsQuery
    void glBeginQuery(int,int) -> glBeginQuery
    void glEndQuery(int) -> glEndQuery
    void glGetQueryiv(int,int,java.nio.IntBuffer) -> glGetQueryiv
    void glGetQueryObjectuiv(int,int,java.nio.IntBuffer) -> glGetQueryObjectuiv
    boolean glUnmapBuffer(int) -> glUnmapBuffer
    java.nio.Buffer glGetBufferPointerv(int,int) -> glGetBufferPointerv
    void glDrawBuffers(int,java.nio.IntBuffer) -> glDrawBuffers
    void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2x3fv
    void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3x2fv
    void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2x4fv
    void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4x2fv
    void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3x4fv
    void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4x3fv
    void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int) -> glBlitFramebuffer
    void glRenderbufferStorageMultisample(int,int,int,int,int) -> glRenderbufferStorageMultisample
    void glFramebufferTextureLayer(int,int,int,int,int) -> glFramebufferTextureLayer
    void glFlushMappedBufferRange(int,int,int) -> glFlushMappedBufferRange
    void glBindVertexArray(int) -> glBindVertexArray
    void glDeleteVertexArrays(int,int[],int) -> glDeleteVertexArrays
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> glDeleteVertexArrays
    void glGenVertexArrays(int,int[],int) -> glGenVertexArrays
    void glGenVertexArrays(int,java.nio.IntBuffer) -> glGenVertexArrays
    boolean glIsVertexArray(int) -> glIsVertexArray
    void glBeginTransformFeedback(int) -> glBeginTransformFeedback
    void glEndTransformFeedback() -> glEndTransformFeedback
    void glBindBufferRange(int,int,int,int,int) -> glBindBufferRange
    void glBindBufferBase(int,int,int) -> glBindBufferBase
    void glTransformFeedbackVaryings(int,java.lang.String[],int) -> glTransformFeedbackVaryings
    void glVertexAttribIPointer(int,int,int,int,int) -> glVertexAttribIPointer
    void glGetVertexAttribIiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribIiv
    void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribIuiv
    void glVertexAttribI4i(int,int,int,int,int) -> glVertexAttribI4i
    void glVertexAttribI4ui(int,int,int,int,int) -> glVertexAttribI4ui
    void glGetUniformuiv(int,int,java.nio.IntBuffer) -> glGetUniformuiv
    int glGetFragDataLocation(int,java.lang.String) -> glGetFragDataLocation
    void glUniform1uiv(int,int,java.nio.IntBuffer) -> glUniform1uiv
    void glUniform3uiv(int,int,java.nio.IntBuffer) -> glUniform3uiv
    void glUniform4uiv(int,int,java.nio.IntBuffer) -> glUniform4uiv
    void glClearBufferiv(int,int,java.nio.IntBuffer) -> glClearBufferiv
    void glClearBufferuiv(int,int,java.nio.IntBuffer) -> glClearBufferuiv
    void glClearBufferfv(int,int,java.nio.FloatBuffer) -> glClearBufferfv
    void glClearBufferfi(int,int,float,int) -> glClearBufferfi
    java.lang.String glGetStringi(int,int) -> glGetStringi
    void glCopyBufferSubData(int,int,int,int,int) -> glCopyBufferSubData
    void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer) -> glGetUniformIndices
    void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetActiveUniformsiv
    int glGetUniformBlockIndex(int,java.lang.String) -> glGetUniformBlockIndex
    void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer) -> glGetActiveUniformBlockiv
    void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer) -> glGetActiveUniformBlockName
    java.lang.String glGetActiveUniformBlockName(int,int) -> glGetActiveUniformBlockName
    void glUniformBlockBinding(int,int,int) -> glUniformBlockBinding
    void glDrawArraysInstanced(int,int,int,int) -> glDrawArraysInstanced
    void glDrawElementsInstanced(int,int,int,int,int) -> glDrawElementsInstanced
    void glGetInteger64v(int,java.nio.LongBuffer) -> glGetInteger64v
    void glGetBufferParameteri64v(int,int,java.nio.LongBuffer) -> glGetBufferParameteri64v
    void glGenSamplers(int,int[],int) -> glGenSamplers
    void glGenSamplers(int,java.nio.IntBuffer) -> glGenSamplers
    void glDeleteSamplers(int,int[],int) -> glDeleteSamplers
    void glDeleteSamplers(int,java.nio.IntBuffer) -> glDeleteSamplers
    boolean glIsSampler(int) -> glIsSampler
    void glBindSampler(int,int) -> glBindSampler
    void glSamplerParameteri(int,int,int) -> glSamplerParameteri
    void glSamplerParameteriv(int,int,java.nio.IntBuffer) -> glSamplerParameteriv
    void glSamplerParameterf(int,int,float) -> glSamplerParameterf
    void glSamplerParameterfv(int,int,java.nio.FloatBuffer) -> glSamplerParameterfv
    void glGetSamplerParameteriv(int,int,java.nio.IntBuffer) -> glGetSamplerParameteriv
    void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer) -> glGetSamplerParameterfv
    void glVertexAttribDivisor(int,int) -> glVertexAttribDivisor
    void glBindTransformFeedback(int,int) -> glBindTransformFeedback
    void glDeleteTransformFeedbacks(int,int[],int) -> glDeleteTransformFeedbacks
    void glDeleteTransformFeedbacks(int,java.nio.IntBuffer) -> glDeleteTransformFeedbacks
    void glGenTransformFeedbacks(int,int[],int) -> glGenTransformFeedbacks
    void glGenTransformFeedbacks(int,java.nio.IntBuffer) -> glGenTransformFeedbacks
    boolean glIsTransformFeedback(int) -> glIsTransformFeedback
    void glPauseTransformFeedback() -> glPauseTransformFeedback
    void glResumeTransformFeedback() -> glResumeTransformFeedback
    void glProgramParameteri(int,int,int) -> glProgramParameteri
    void glInvalidateFramebuffer(int,int,java.nio.IntBuffer) -> glInvalidateFramebuffer
    void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int) -> glInvalidateSubFramebuffer
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
com.badlogic.gdx.graphics.GLTexture -> com.badlogic.gdx.graphics.GLTexture:
    int glTarget -> glTarget
    int glHandle -> glHandle
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> minFilter
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> magFilter
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> uWrap
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> vWrap
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getDepth() -> getDepth
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    boolean isManaged() -> isManaged
    void reload() -> reload
    void bind() -> bind
    void bind(int) -> bind
    com.badlogic.gdx.graphics.Texture$TextureFilter getMinFilter() -> getMinFilter
    com.badlogic.gdx.graphics.Texture$TextureFilter getMagFilter() -> getMagFilter
    com.badlogic.gdx.graphics.Texture$TextureWrap getUWrap() -> getUWrap
    com.badlogic.gdx.graphics.Texture$TextureWrap getVWrap() -> getVWrap
    int getTextureObjectHandle() -> getTextureObjectHandle
    void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> unsafeSetWrap
    void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean) -> unsafeSetWrap
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> setWrap
    void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> unsafeSetFilter
    void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> unsafeSetFilter
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> setFilter
    void delete() -> delete
    void dispose() -> dispose
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData) -> uploadImageData
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData,int) -> uploadImageData
com.badlogic.gdx.graphics.Mesh -> com.badlogic.gdx.graphics.Mesh:
    java.util.Map meshes -> meshes
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> vertices
    com.badlogic.gdx.graphics.glutils.IndexData indices -> indices
    boolean autoBind -> autoBind
    boolean isVertexArray -> isVertexArray
    com.badlogic.gdx.math.Vector3 tmpV -> tmpV
    void <init>(com.badlogic.gdx.graphics.glutils.VertexData,com.badlogic.gdx.graphics.glutils.IndexData,boolean) -> <init>
    void <init>(boolean,int,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    void <init>(boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes) -> <init>
    void <init>(boolean,boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes) -> <init>
    com.badlogic.gdx.graphics.glutils.VertexData makeVertexBuffer(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> makeVertexBuffer
    void <init>(com.badlogic.gdx.graphics.Mesh$VertexDataType,boolean,int,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    com.badlogic.gdx.graphics.Mesh setVertices(float[]) -> setVertices
    com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int) -> setVertices
    com.badlogic.gdx.graphics.Mesh updateVertices(int,float[]) -> updateVertices
    com.badlogic.gdx.graphics.Mesh updateVertices(int,float[],int,int) -> updateVertices
    float[] getVertices(float[]) -> getVertices
    float[] getVertices(int,float[]) -> getVertices
    float[] getVertices(int,int,float[]) -> getVertices
    float[] getVertices(int,int,float[],int) -> getVertices
    com.badlogic.gdx.graphics.Mesh setIndices(short[]) -> setIndices
    com.badlogic.gdx.graphics.Mesh setIndices(short[],int,int) -> setIndices
    void getIndices(short[]) -> getIndices
    void getIndices(short[],int) -> getIndices
    void getIndices(int,short[],int) -> getIndices
    void getIndices(int,int,short[],int) -> getIndices
    int getNumIndices() -> getNumIndices
    int getNumVertices() -> getNumVertices
    int getMaxVertices() -> getMaxVertices
    int getMaxIndices() -> getMaxIndices
    int getVertexSize() -> getVertexSize
    void setAutoBind(boolean) -> setAutoBind
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> bind
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> bind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> unbind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> unbind
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int) -> render
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int) -> render
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean) -> render
    void dispose() -> dispose
    com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int) -> getVertexAttribute
    com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes() -> getVertexAttributes
    java.nio.FloatBuffer getVerticesBuffer() -> getVerticesBuffer
    com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox() -> calculateBoundingBox
    void calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox) -> calculateBoundingBox
    com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int) -> calculateBoundingBox
    com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4) -> calculateBoundingBox
    com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int) -> extendBoundingBox
    com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4) -> extendBoundingBox
    float calculateRadiusSquared(float,float,float,int,int,com.badlogic.gdx.math.Matrix4) -> calculateRadiusSquared
    float calculateRadius(float,float,float,int,int,com.badlogic.gdx.math.Matrix4) -> calculateRadius
    float calculateRadius(com.badlogic.gdx.math.Vector3,int,int,com.badlogic.gdx.math.Matrix4) -> calculateRadius
    float calculateRadius(float,float,float,int,int) -> calculateRadius
    float calculateRadius(com.badlogic.gdx.math.Vector3,int,int) -> calculateRadius
    float calculateRadius(float,float,float) -> calculateRadius
    float calculateRadius(com.badlogic.gdx.math.Vector3) -> calculateRadius
    java.nio.ShortBuffer getIndicesBuffer() -> getIndicesBuffer
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> addManagedMesh
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> invalidateAllMeshes
    void clearAllMeshes(com.badlogic.gdx.Application) -> clearAllMeshes
    java.lang.String getManagedStatus() -> getManagedStatus
    void scale(float,float,float) -> scale
    void transform(com.badlogic.gdx.math.Matrix4) -> transform
    void transform(com.badlogic.gdx.math.Matrix4,int,int) -> transform
    void transform(com.badlogic.gdx.math.Matrix4,float[],int,int,int,int,int) -> transform
    void transformUV(com.badlogic.gdx.math.Matrix3) -> transformUV
    void transformUV(com.badlogic.gdx.math.Matrix3,int,int) -> transformUV
    void transformUV(com.badlogic.gdx.math.Matrix3,float[],int,int,int,int) -> transformUV
    com.badlogic.gdx.graphics.Mesh copy(boolean,boolean,int[]) -> copy
    com.badlogic.gdx.graphics.Mesh copy(boolean) -> copy
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Mesh$1 -> com.badlogic.gdx.graphics.Mesh$1:
    int[] $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType -> $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Mesh$VertexDataType -> com.badlogic.gdx.graphics.Mesh$VertexDataType:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> VertexArray
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> VertexBufferObject
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> VertexBufferObjectSubData
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectWithVAO -> VertexBufferObjectWithVAO
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] values() -> values
    com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.OrthographicCamera -> com.badlogic.gdx.graphics.OrthographicCamera:
    float zoom -> zoom
    com.badlogic.gdx.math.Vector3 tmp -> tmp
    void <init>() -> <init>
    void <init>(float,float) -> <init>
    void update() -> update
    void update(boolean) -> update
    void setToOrtho(boolean) -> setToOrtho
    void setToOrtho(boolean,float,float) -> setToOrtho
    void rotate(float) -> rotate
    void translate(float,float) -> translate
    void translate(com.badlogic.gdx.math.Vector2) -> translate
com.badlogic.gdx.graphics.PerspectiveCamera -> com.badlogic.gdx.graphics.PerspectiveCamera:
    float fieldOfView -> fieldOfView
    com.badlogic.gdx.math.Vector3 tmp -> tmp
    void <init>() -> <init>
    void <init>(float,float,float) -> <init>
    void update() -> update
    void update(boolean) -> update
com.badlogic.gdx.graphics.Pixmap -> com.badlogic.gdx.graphics.Pixmap:
    com.badlogic.gdx.graphics.Pixmap$Blending blending -> blending
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> pixmap
    int color -> color
    boolean disposed -> disposed
    void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending) -> setBlending
    void setFilter(com.badlogic.gdx.graphics.Pixmap$Filter) -> setFilter
    void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format) -> <init>
    void <init>(byte[],int,int) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap) -> <init>
    void setColor(int) -> setColor
    void setColor(float,float,float,float) -> setColor
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void fill() -> fill
    void drawLine(int,int,int,int) -> drawLine
    void drawRectangle(int,int,int,int) -> drawRectangle
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int) -> drawPixmap
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int) -> drawPixmap
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int) -> drawPixmap
    void fillRectangle(int,int,int,int) -> fillRectangle
    void drawCircle(int,int,int) -> drawCircle
    void fillCircle(int,int,int) -> fillCircle
    void fillTriangle(int,int,int,int,int,int) -> fillTriangle
    int getPixel(int,int) -> getPixel
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void dispose() -> dispose
    void drawPixel(int,int) -> drawPixel
    void drawPixel(int,int,int) -> drawPixel
    int getGLFormat() -> getGLFormat
    int getGLInternalFormat() -> getGLInternalFormat
    int getGLType() -> getGLType
    java.nio.ByteBuffer getPixels() -> getPixels
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> getFormat
    com.badlogic.gdx.graphics.Pixmap$Blending getBlending() -> getBlending
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Pixmap$Blending -> com.badlogic.gdx.graphics.Pixmap$Blending:
    com.badlogic.gdx.graphics.Pixmap$Blending None -> None
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> SourceOver
    com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.Pixmap$Blending[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Pixmap$Filter -> com.badlogic.gdx.graphics.Pixmap$Filter:
    com.badlogic.gdx.graphics.Pixmap$Filter NearestNeighbour -> NearestNeighbour
    com.badlogic.gdx.graphics.Pixmap$Filter BiLinear -> BiLinear
    com.badlogic.gdx.graphics.Pixmap$Filter[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.Pixmap$Filter[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Filter valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Pixmap$Format -> com.badlogic.gdx.graphics.Pixmap$Format:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> Alpha
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> Intensity
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> LuminanceAlpha
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> RGB565
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> RGBA4444
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> RGB888
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> RGBA8888
    com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.Pixmap$Format[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> toGdx2DPixmapFormat
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> fromGdx2DPixmapFormat
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.PixmapIO -> com.badlogic.gdx.graphics.PixmapIO:
    void <init>() -> <init>
    void writeCIM(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap) -> writeCIM
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> readCIM
    void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap) -> writePNG
com.badlogic.gdx.graphics.PixmapIO$CIM -> com.badlogic.gdx.graphics.PixmapIO$CIM:
    int BUFFER_SIZE -> BUFFER_SIZE
    byte[] writeBuffer -> writeBuffer
    byte[] readBuffer -> readBuffer
    void <init>() -> <init>
    void write(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap) -> write
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> read
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.PixmapIO$PNG -> com.badlogic.gdx.graphics.PixmapIO$PNG:
    byte[] SIGNATURE -> SIGNATURE
    int IHDR -> IHDR
    int IDAT -> IDAT
    int IEND -> IEND
    byte COLOR_ARGB -> COLOR_ARGB
    byte COMPRESSION_DEFLATE -> COMPRESSION_DEFLATE
    byte FILTER_NONE -> FILTER_NONE
    byte INTERLACE_NONE -> INTERLACE_NONE
    byte PAETH -> PAETH
    com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer buffer -> buffer
    java.util.zip.DeflaterOutputStream deflaterOutput -> deflaterOutput
    java.util.zip.Deflater deflater -> deflater
    com.badlogic.gdx.utils.ByteArray lineOutBytes -> lineOutBytes
    com.badlogic.gdx.utils.ByteArray curLineBytes -> curLineBytes
    com.badlogic.gdx.utils.ByteArray prevLineBytes -> prevLineBytes
    boolean flipY -> flipY
    int lastLineLen -> lastLineLen
    void <init>() -> <init>
    void <init>(int) -> <init>
    void setFlipY(boolean) -> setFlipY
    void setCompression(int) -> setCompression
    void write(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap) -> write
    void write(java.io.OutputStream,com.badlogic.gdx.graphics.Pixmap) -> write
    void dispose() -> dispose
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer -> com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer:
    java.io.ByteArrayOutputStream buffer -> buffer
    java.util.zip.CRC32 crc -> crc
    void <init>(int) -> <init>
    void <init>(java.io.ByteArrayOutputStream,java.util.zip.CRC32) -> <init>
    void endChunk(java.io.DataOutputStream) -> endChunk
com.badlogic.gdx.graphics.Texture -> com.badlogic.gdx.graphics.Texture:
    com.badlogic.gdx.assets.AssetManager assetManager -> assetManager
    java.util.Map managedTextures -> managedTextures
    com.badlogic.gdx.graphics.TextureData data -> data
    void <init>(java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.Pixmap) -> <init>
    void <init>(com.badlogic.gdx.graphics.Pixmap,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> <init>
    void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format) -> <init>
    void <init>(com.badlogic.gdx.graphics.TextureData) -> <init>
    void load(com.badlogic.gdx.graphics.TextureData) -> load
    void reload() -> reload
    void draw(com.badlogic.gdx.graphics.Pixmap,int,int) -> draw
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getDepth() -> getDepth
    com.badlogic.gdx.graphics.TextureData getTextureData() -> getTextureData
    boolean isManaged() -> isManaged
    void dispose() -> dispose
    void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Texture) -> addManagedTexture
    void clearAllTextures(com.badlogic.gdx.Application) -> clearAllTextures
    void invalidateAllTextures(com.badlogic.gdx.Application) -> invalidateAllTextures
    void setAssetManager(com.badlogic.gdx.assets.AssetManager) -> setAssetManager
    java.lang.String getManagedStatus() -> getManagedStatus
    int getNumManagedTextures() -> getNumManagedTextures
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Texture$1 -> com.badlogic.gdx.graphics.Texture$1:
    int val$refCount -> val$refCount
    void <init>(int) -> <init>
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> finishedLoading
com.badlogic.gdx.graphics.Texture$TextureFilter -> com.badlogic.gdx.graphics.Texture$TextureFilter:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> Nearest
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> Linear
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> MipMap
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> MipMapNearestNearest
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> MipMapLinearNearest
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> MipMapNearestLinear
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> MipMapLinearLinear
    int glEnum -> glEnum
    com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.Texture$TextureFilter[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    boolean isMipMap() -> isMipMap
    int getGLEnum() -> getGLEnum
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Texture$TextureWrap -> com.badlogic.gdx.graphics.Texture$TextureWrap:
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> MirroredRepeat
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> ClampToEdge
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> Repeat
    int glEnum -> glEnum
    com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.Texture$TextureWrap[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getGLEnum() -> getGLEnum
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.TextureData -> com.badlogic.gdx.graphics.TextureData:
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> getType
    boolean isPrepared() -> isPrepared
    void prepare() -> prepare
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> consumePixmap
    boolean disposePixmap() -> disposePixmap
    void consumeCustomData(int) -> consumeCustomData
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> getFormat
    boolean useMipMaps() -> useMipMaps
    boolean isManaged() -> isManaged
com.badlogic.gdx.graphics.TextureData$Factory -> com.badlogic.gdx.graphics.TextureData$Factory:
    void <init>() -> <init>
    com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,boolean) -> loadFromFile
    com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> loadFromFile
com.badlogic.gdx.graphics.TextureData$TextureDataType -> com.badlogic.gdx.graphics.TextureData$TextureDataType:
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> Pixmap
    com.badlogic.gdx.graphics.TextureData$TextureDataType Custom -> Custom
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] values() -> values
    com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.VertexAttribute -> com.badlogic.gdx.graphics.VertexAttribute:
    int usage -> usage
    int numComponents -> numComponents
    boolean normalized -> normalized
    int type -> type
    int offset -> offset
    java.lang.String alias -> alias
    int unit -> unit
    int usageIndex -> usageIndex
    void <init>(int,int,java.lang.String) -> <init>
    void <init>(int,int,java.lang.String,int) -> <init>
    void <init>(int,int,int,boolean,java.lang.String) -> <init>
    void <init>(int,int,int,boolean,java.lang.String,int) -> <init>
    com.badlogic.gdx.graphics.VertexAttribute Position() -> Position
    com.badlogic.gdx.graphics.VertexAttribute TexCoords(int) -> TexCoords
    com.badlogic.gdx.graphics.VertexAttribute Normal() -> Normal
    com.badlogic.gdx.graphics.VertexAttribute ColorPacked() -> ColorPacked
    com.badlogic.gdx.graphics.VertexAttribute ColorUnpacked() -> ColorUnpacked
    com.badlogic.gdx.graphics.VertexAttribute Tangent() -> Tangent
    com.badlogic.gdx.graphics.VertexAttribute Binormal() -> Binormal
    com.badlogic.gdx.graphics.VertexAttribute BoneWeight(int) -> BoneWeight
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.VertexAttribute) -> equals
    int getKey() -> getKey
    int hashCode() -> hashCode
com.badlogic.gdx.graphics.VertexAttributes -> com.badlogic.gdx.graphics.VertexAttributes:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> attributes
    int vertexSize -> vertexSize
    long mask -> mask
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable iterable -> iterable
    void <init>(com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    int getOffset(int) -> getOffset
    com.badlogic.gdx.graphics.VertexAttribute findByUsage(int) -> findByUsage
    int calculateOffsets() -> calculateOffsets
    int size() -> size
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> get
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long getMask() -> getMask
    int compareTo(com.badlogic.gdx.graphics.VertexAttributes) -> compareTo
    java.util.Iterator iterator() -> iterator
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable -> com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable:
    java.lang.Object[] array -> array
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator1 -> iterator1
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator2 -> iterator2
    void <init>(java.lang.Object[]) -> <init>
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator -> com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator:
    java.lang.Object[] array -> array
    int index -> index
    boolean valid -> valid
    void <init>(java.lang.Object[]) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    void reset() -> reset
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.graphics.VertexAttributes$Usage -> com.badlogic.gdx.graphics.VertexAttributes$Usage:
    int Position -> Position
    int ColorUnpacked -> ColorUnpacked
    int ColorPacked -> ColorPacked
    int Normal -> Normal
    int TextureCoordinates -> TextureCoordinates
    int Generic -> Generic
    int BoneWeight -> BoneWeight
    int Tangent -> Tangent
    int BiNormal -> BiNormal
    void <init>() -> <init>
com.badlogic.gdx.graphics.g2d.Animation -> com.badlogic.gdx.graphics.g2d.Animation:
    com.badlogic.gdx.graphics.g2d.TextureRegion[] keyFrames -> keyFrames
    float frameDuration -> frameDuration
    float animationDuration -> animationDuration
    int lastFrameNumber -> lastFrameNumber
    float lastStateTime -> lastStateTime
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode playMode -> playMode
    void <init>(float,com.badlogic.gdx.utils.Array) -> <init>
    void <init>(float,com.badlogic.gdx.utils.Array,com.badlogic.gdx.graphics.g2d.Animation$PlayMode) -> <init>
    void <init>(float,com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> <init>
    com.badlogic.gdx.graphics.g2d.TextureRegion getKeyFrame(float,boolean) -> getKeyFrame
    com.badlogic.gdx.graphics.g2d.TextureRegion getKeyFrame(float) -> getKeyFrame
    int getKeyFrameIndex(float) -> getKeyFrameIndex
    com.badlogic.gdx.graphics.g2d.TextureRegion[] getKeyFrames() -> getKeyFrames
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode getPlayMode() -> getPlayMode
    void setPlayMode(com.badlogic.gdx.graphics.g2d.Animation$PlayMode) -> setPlayMode
    boolean isAnimationFinished(float) -> isAnimationFinished
    void setFrameDuration(float) -> setFrameDuration
    float getFrameDuration() -> getFrameDuration
    float getAnimationDuration() -> getAnimationDuration
com.badlogic.gdx.graphics.g2d.Animation$1 -> com.badlogic.gdx.graphics.g2d.Animation$1:
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$Animation$PlayMode -> $SwitchMap$com$badlogic$gdx$graphics$g2d$Animation$PlayMode
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.Animation$PlayMode -> com.badlogic.gdx.graphics.g2d.Animation$PlayMode:
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode NORMAL -> NORMAL
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode REVERSED -> REVERSED
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP -> LOOP
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_REVERSED -> LOOP_REVERSED
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_PINGPONG -> LOOP_PINGPONG
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_RANDOM -> LOOP_RANDOM
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode[] values() -> values
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.Batch -> com.badlogic.gdx.graphics.g2d.Batch:
    int X1 -> X1
    int Y1 -> Y1
    int C1 -> C1
    int U1 -> U1
    int V1 -> V1
    int X2 -> X2
    int Y2 -> Y2
    int C2 -> C2
    int U2 -> U2
    int V2 -> V2
    int X3 -> X3
    int Y3 -> Y3
    int C3 -> C3
    int U3 -> U3
    int V3 -> V3
    int X4 -> X4
    int Y4 -> Y4
    int C4 -> C4
    int U4 -> U4
    int V4 -> V4
    void begin() -> begin
    void end() -> end
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    void setColor(float) -> setColor
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    float getPackedColor() -> getPackedColor
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2) -> draw
    void flush() -> flush
    void disableBlending() -> disableBlending
    void enableBlending() -> enableBlending
    void setBlendFunction(int,int) -> setBlendFunction
    int getBlendSrcFunc() -> getBlendSrcFunc
    int getBlendDstFunc() -> getBlendDstFunc
    com.badlogic.gdx.math.Matrix4 getProjectionMatrix() -> getProjectionMatrix
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> getTransformMatrix
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> setProjectionMatrix
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> setTransformMatrix
    void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> setShader
    com.badlogic.gdx.graphics.glutils.ShaderProgram getShader() -> getShader
    boolean isBlendingEnabled() -> isBlendingEnabled
    boolean isDrawing() -> isDrawing
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.BitmapFont:
    int LOG2_PAGE_SIZE -> LOG2_PAGE_SIZE
    int PAGE_SIZE -> PAGE_SIZE
    int PAGES -> PAGES
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> data
    com.badlogic.gdx.utils.Array regions -> regions
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> cache
    boolean flipped -> flipped
    boolean integer -> integer
    boolean ownsTexture -> ownsTexture
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.utils.Array,boolean) -> <init>
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> load
    com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float) -> draw
    com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,float,int,boolean) -> draw
    com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,int,int,float,int,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> draw
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    float getScaleX() -> getScaleX
    float getScaleY() -> getScaleY
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> getRegion
    com.badlogic.gdx.utils.Array getRegions() -> getRegions
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(int) -> getRegion
    float getLineHeight() -> getLineHeight
    float getSpaceWidth() -> getSpaceWidth
    float getXHeight() -> getXHeight
    float getCapHeight() -> getCapHeight
    float getAscent() -> getAscent
    float getDescent() -> getDescent
    boolean isFlipped() -> isFlipped
    void dispose() -> dispose
    void setFixedWidthGlyphs(java.lang.CharSequence) -> setFixedWidthGlyphs
    void setUseIntegerPositions(boolean) -> setUseIntegerPositions
    boolean usesIntegerPositions() -> usesIntegerPositions
    com.badlogic.gdx.graphics.g2d.BitmapFontCache getCache() -> getCache
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData getData() -> getData
    boolean ownsTexture() -> ownsTexture
    void setOwnsTexture(boolean) -> setOwnsTexture
    com.badlogic.gdx.graphics.g2d.BitmapFontCache newFontCache() -> newFontCache
    java.lang.String toString() -> toString
    int indexOf(java.lang.CharSequence,char,int) -> indexOf
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData:
    java.lang.String[] imagePaths -> imagePaths
    com.badlogic.gdx.files.FileHandle fontFile -> fontFile
    boolean flipped -> flipped
    float padTop -> padTop
    float padRight -> padRight
    float padBottom -> padBottom
    float padLeft -> padLeft
    float lineHeight -> lineHeight
    float capHeight -> capHeight
    float ascent -> ascent
    float descent -> descent
    float down -> down
    float scaleX -> scaleX
    float scaleY -> scaleY
    boolean markupEnabled -> markupEnabled
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> glyphs
    float spaceWidth -> spaceWidth
    float xHeight -> xHeight
    char[] breakChars -> breakChars
    char[] xChars -> xChars
    char[] capChars -> capChars
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void load(com.badlogic.gdx.files.FileHandle,boolean) -> load
    void setGlyphRegion(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.TextureRegion) -> setGlyphRegion
    void setLineHeight(float) -> setLineHeight
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> setGlyph
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> getFirstGlyph
    boolean hasGlyph(char) -> hasGlyph
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> getGlyph
    void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int) -> getGlyphs
    int getWrapIndex(com.badlogic.gdx.utils.Array,int) -> getWrapIndex
    boolean isBreakChar(char) -> isBreakChar
    boolean isWhitespace(char) -> isWhitespace
    java.lang.String getImagePath(int) -> getImagePath
    java.lang.String[] getImagePaths() -> getImagePaths
    com.badlogic.gdx.files.FileHandle getFontFile() -> getFontFile
    void setScale(float,float) -> setScale
    void setScale(float) -> setScale
    void scale(float) -> scale
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph:
    int id -> id
    int srcX -> srcX
    int srcY -> srcY
    int width -> width
    int height -> height
    float u -> u
    float v -> v
    float u2 -> u2
    float v2 -> v2
    int xoffset -> xoffset
    int yoffset -> yoffset
    int xadvance -> xadvance
    byte[][] kerning -> kerning
    int page -> page
    void <init>() -> <init>
    int getKerning(char) -> getKerning
    void setKerning(int,int) -> setKerning
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.badlogic.gdx.graphics.g2d.BitmapFontCache:
    com.badlogic.gdx.graphics.Color tempColor -> tempColor
    float whiteTint -> whiteTint
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> font
    boolean integer -> integer
    com.badlogic.gdx.utils.Array layouts -> layouts
    com.badlogic.gdx.utils.Array pooledLayouts -> pooledLayouts
    int glyphCount -> glyphCount
    float x -> x
    float y -> y
    com.badlogic.gdx.graphics.Color color -> color
    float currentTint -> currentTint
    float[][] pageVertices -> pageVertices
    int[] idx -> idx
    com.badlogic.gdx.utils.IntArray[] pageGlyphIndices -> pageGlyphIndices
    int[] tempGlyphCount -> tempGlyphCount
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,boolean) -> <init>
    void setPosition(float,float) -> setPosition
    void translate(float,float) -> translate
    void tint(com.badlogic.gdx.graphics.Color) -> tint
    void setAlphas(float) -> setAlphas
    void setColors(float) -> setColors
    void setColors(com.badlogic.gdx.graphics.Color) -> setColors
    void setColors(float,float,float,float) -> setColors
    void setColors(com.badlogic.gdx.graphics.Color,int,int) -> setColors
    void setColors(float,int,int) -> setColors
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,int,int) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void clear() -> clear
    void requireGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout) -> requireGlyphs
    void requirePageGlyphs(int,int) -> requirePageGlyphs
    void addToCache(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> addToCache
    void addGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,float,float,float) -> addGlyph
    com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float) -> setText
    com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,float,int,boolean) -> setText
    com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,int,int,float,int,boolean) -> setText
    void setText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> setText
    com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float) -> addText
    com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,float,int,boolean) -> addText
    com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,int,int,float,int,boolean) -> addText
    void addText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> addText
    float getX() -> getX
    float getY() -> getY
    com.badlogic.gdx.graphics.g2d.BitmapFont getFont() -> getFont
    void setUseIntegerPositions(boolean) -> setUseIntegerPositions
    boolean usesIntegerPositions() -> usesIntegerPositions
    float[] getVertices() -> getVertices
    float[] getVertices(int) -> getVertices
    com.badlogic.gdx.utils.Array getLayouts() -> getLayouts
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch -> com.badlogic.gdx.graphics.g2d.CpuSpriteBatch:
    com.badlogic.gdx.math.Matrix4 virtualMatrix -> virtualMatrix
    com.badlogic.gdx.math.Affine2 adjustAffine -> adjustAffine
    boolean adjustNeeded -> adjustNeeded
    boolean haveIdentityRealMatrix -> haveIdentityRealMatrix
    com.badlogic.gdx.math.Affine2 tmpAffine -> tmpAffine
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    void flushAndSyncTransformMatrix() -> flushAndSyncTransformMatrix
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> getTransformMatrix
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> setTransformMatrix
    void setTransformMatrix(com.badlogic.gdx.math.Affine2) -> setTransformMatrix
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2) -> draw
    void drawAdjusted(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> drawAdjusted
    void drawAdjusted(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean) -> drawAdjusted
    void drawAdjustedUV(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,float,float,float,float,boolean,boolean) -> drawAdjustedUV
    void drawAdjusted(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean) -> drawAdjusted
    void drawAdjusted(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2) -> drawAdjusted
    void drawAdjusted(com.badlogic.gdx.graphics.Texture,float[],int,int) -> drawAdjusted
    boolean checkEqual(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Matrix4) -> checkEqual
    boolean checkEqual(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Affine2) -> checkEqual
    boolean checkIdt(com.badlogic.gdx.math.Matrix4) -> checkIdt
com.badlogic.gdx.graphics.g2d.DistanceFieldFont -> com.badlogic.gdx.graphics.g2d.DistanceFieldFont:
    float distanceFieldSmoothing -> distanceFieldSmoothing
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.utils.Array,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> load
    com.badlogic.gdx.graphics.g2d.BitmapFontCache newFontCache() -> newFontCache
    float getDistanceFieldSmoothing() -> getDistanceFieldSmoothing
    void setDistanceFieldSmoothing(float) -> setDistanceFieldSmoothing
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDistanceFieldShader() -> createDistanceFieldShader
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache -> com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache:
    void <init>(com.badlogic.gdx.graphics.g2d.DistanceFieldFont) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.DistanceFieldFont,boolean) -> <init>
    float getSmoothingFactor() -> getSmoothingFactor
    void setSmoothingUniform(com.badlogic.gdx.graphics.g2d.Batch,float) -> setSmoothingUniform
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,int,int) -> draw
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    int GDX2D_FORMAT_ALPHA -> GDX2D_FORMAT_ALPHA
    int GDX2D_FORMAT_LUMINANCE_ALPHA -> GDX2D_FORMAT_LUMINANCE_ALPHA
    int GDX2D_FORMAT_RGB888 -> GDX2D_FORMAT_RGB888
    int GDX2D_FORMAT_RGBA8888 -> GDX2D_FORMAT_RGBA8888
    int GDX2D_FORMAT_RGB565 -> GDX2D_FORMAT_RGB565
    int GDX2D_FORMAT_RGBA4444 -> GDX2D_FORMAT_RGBA4444
    int GDX2D_SCALE_NEAREST -> GDX2D_SCALE_NEAREST
    int GDX2D_SCALE_LINEAR -> GDX2D_SCALE_LINEAR
    int GDX2D_BLEND_NONE -> GDX2D_BLEND_NONE
    int GDX2D_BLEND_SRC_OVER -> GDX2D_BLEND_SRC_OVER
    long basePtr -> basePtr
    int width -> width
    int height -> height
    int format -> format
    java.nio.ByteBuffer pixelPtr -> pixelPtr
    long[] nativeData -> nativeData
    void <init>(byte[],int,int,int) -> <init>
    void <init>(java.io.InputStream,int) -> <init>
    void <init>(int,int,int) -> <init>
    void <init>(java.nio.ByteBuffer,long[]) -> <init>
    void convert(int) -> convert
    void dispose() -> dispose
    void clear(int) -> clear
    void setPixel(int,int,int) -> setPixel
    int getPixel(int,int) -> getPixel
    void drawLine(int,int,int,int,int) -> drawLine
    void drawRect(int,int,int,int,int) -> drawRect
    void drawCircle(int,int,int,int) -> drawCircle
    void fillRect(int,int,int,int,int) -> fillRect
    void fillCircle(int,int,int,int) -> fillCircle
    void fillTriangle(int,int,int,int,int,int,int) -> fillTriangle
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int) -> drawPixmap
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int) -> drawPixmap
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(java.io.InputStream,int) -> newPixmap
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(int,int,int) -> newPixmap
    java.nio.ByteBuffer getPixels() -> getPixels
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    int getFormat() -> getFormat
    int getGLInternalFormat() -> getGLInternalFormat
    int getGLFormat() -> getGLFormat
    int getGLType() -> getGLType
    java.lang.String getFormatString() -> getFormatString
    java.nio.ByteBuffer load(long[],byte[],int,int) -> load
    java.nio.ByteBuffer newPixmap(long[],int,int,int) -> newPixmap
    void free(long) -> free
    void clear(long,int) -> clear
    void setPixel(long,int,int,int) -> setPixel
    int getPixel(long,int,int) -> getPixel
    void drawLine(long,int,int,int,int,int) -> drawLine
    void drawRect(long,int,int,int,int,int) -> drawRect
    void drawCircle(long,int,int,int,int) -> drawCircle
    void fillRect(long,int,int,int,int,int) -> fillRect
    void fillCircle(long,int,int,int,int) -> fillCircle
    void fillTriangle(long,int,int,int,int,int,int,int) -> fillTriangle
    void drawPixmap(long,long,int,int,int,int,int,int,int,int) -> drawPixmap
    void setBlend(int) -> setBlend
    void setScale(int) -> setScale
    java.lang.String getFailureReason() -> getFailureReason
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.GlyphLayout -> com.badlogic.gdx.graphics.g2d.GlyphLayout:
    com.badlogic.gdx.utils.Array colorStack -> colorStack
    com.badlogic.gdx.utils.Array runs -> runs
    float width -> width
    float height -> height
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String) -> <init>
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence) -> setText
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean) -> setText
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String) -> setText
    void truncate(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,float,java.lang.String,int,com.badlogic.gdx.utils.Pool) -> truncate
    com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun wrap(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,com.badlogic.gdx.utils.Pool,int,int) -> wrap
    void adjustLastGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun) -> adjustLastGlyph
    int parseColorMarkup(java.lang.CharSequence,int,int,com.badlogic.gdx.utils.Pool) -> parseColorMarkup
    void reset() -> reset
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun -> com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun:
    com.badlogic.gdx.utils.Array glyphs -> glyphs
    com.badlogic.gdx.utils.FloatArray xAdvances -> xAdvances
    float x -> x
    float y -> y
    float width -> width
    com.badlogic.gdx.graphics.Color color -> color
    void <init>() -> <init>
    void reset() -> reset
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.NinePatch -> com.badlogic.gdx.graphics.g2d.NinePatch:
    int TOP_LEFT -> TOP_LEFT
    int TOP_CENTER -> TOP_CENTER
    int TOP_RIGHT -> TOP_RIGHT
    int MIDDLE_LEFT -> MIDDLE_LEFT
    int MIDDLE_CENTER -> MIDDLE_CENTER
    int MIDDLE_RIGHT -> MIDDLE_RIGHT
    int BOTTOM_LEFT -> BOTTOM_LEFT
    int BOTTOM_CENTER -> BOTTOM_CENTER
    int BOTTOM_RIGHT -> BOTTOM_RIGHT
    com.badlogic.gdx.graphics.Color tmpDrawColor -> tmpDrawColor
    com.badlogic.gdx.graphics.Texture texture -> texture
    int bottomLeft -> bottomLeft
    int bottomCenter -> bottomCenter
    int bottomRight -> bottomRight
    int middleLeft -> middleLeft
    int middleCenter -> middleCenter
    int middleRight -> middleRight
    int topLeft -> topLeft
    int topCenter -> topCenter
    int topRight -> topRight
    float leftWidth -> leftWidth
    float rightWidth -> rightWidth
    float middleWidth -> middleWidth
    float middleHeight -> middleHeight
    float topHeight -> topHeight
    float bottomHeight -> bottomHeight
    float[] vertices -> vertices
    int idx -> idx
    com.badlogic.gdx.graphics.Color color -> color
    int padLeft -> padLeft
    int padRight -> padRight
    int padTop -> padTop
    int padBottom -> padBottom
    void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture,com.badlogic.gdx.graphics.Color) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.graphics.Color) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.NinePatch) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.NinePatch,com.badlogic.gdx.graphics.Color) -> <init>
    void load(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> load
    int add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,boolean,boolean) -> add
    void set(int,float,float,float,float,float) -> set
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> draw
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    float getLeftWidth() -> getLeftWidth
    void setLeftWidth(float) -> setLeftWidth
    float getRightWidth() -> getRightWidth
    void setRightWidth(float) -> setRightWidth
    float getTopHeight() -> getTopHeight
    void setTopHeight(float) -> setTopHeight
    float getBottomHeight() -> getBottomHeight
    void setBottomHeight(float) -> setBottomHeight
    float getMiddleWidth() -> getMiddleWidth
    void setMiddleWidth(float) -> setMiddleWidth
    float getMiddleHeight() -> getMiddleHeight
    void setMiddleHeight(float) -> setMiddleHeight
    float getTotalWidth() -> getTotalWidth
    float getTotalHeight() -> getTotalHeight
    void setPadding(int,int,int,int) -> setPadding
    float getPadLeft() -> getPadLeft
    void setPadLeft(int) -> setPadLeft
    float getPadRight() -> getPadRight
    void setPadRight(int) -> setPadRight
    float getPadTop() -> getPadTop
    void setPadTop(int) -> setPadTop
    float getPadBottom() -> getPadBottom
    void setPadBottom(int) -> setPadBottom
    void scale(float,float) -> scale
    com.badlogic.gdx.graphics.Texture getTexture() -> getTexture
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.ParticleEffect -> com.badlogic.gdx.graphics.g2d.ParticleEffect:
    com.badlogic.gdx.utils.Array emitters -> emitters
    com.badlogic.gdx.math.collision.BoundingBox bounds -> bounds
    boolean ownsTexture -> ownsTexture
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.ParticleEffect) -> <init>
    void start() -> start
    void reset() -> reset
    void update(float) -> update
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void allowCompletion() -> allowCompletion
    boolean isComplete() -> isComplete
    void setDuration(int) -> setDuration
    void setPosition(float,float) -> setPosition
    void setFlip(boolean,boolean) -> setFlip
    void flipY() -> flipY
    com.badlogic.gdx.utils.Array getEmitters() -> getEmitters
    com.badlogic.gdx.graphics.g2d.ParticleEmitter findEmitter(java.lang.String) -> findEmitter
    void save(java.io.Writer) -> save
    void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> load
    void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas) -> load
    void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String) -> load
    void loadEmitters(com.badlogic.gdx.files.FileHandle) -> loadEmitters
    void loadEmitterImages(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> loadEmitterImages
    void loadEmitterImages(com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String) -> loadEmitterImages
    void loadEmitterImages(com.badlogic.gdx.files.FileHandle) -> loadEmitterImages
    com.badlogic.gdx.graphics.Texture loadTexture(com.badlogic.gdx.files.FileHandle) -> loadTexture
    void dispose() -> dispose
    com.badlogic.gdx.math.collision.BoundingBox getBoundingBox() -> getBoundingBox
    void scaleEffect(float) -> scaleEffect
    void setEmittersCleanUpBlendFunction(boolean) -> setEmittersCleanUpBlendFunction
com.badlogic.gdx.graphics.g2d.ParticleEffectPool -> com.badlogic.gdx.graphics.g2d.ParticleEffectPool:
    com.badlogic.gdx.graphics.g2d.ParticleEffect effect -> effect
    void <init>(com.badlogic.gdx.graphics.g2d.ParticleEffect,int,int) -> <init>
    com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect newObject() -> newObject
    com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect obtain() -> obtain
    java.lang.Object obtain() -> obtain
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect -> com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect:
    com.badlogic.gdx.graphics.g2d.ParticleEffectPool this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g2d.ParticleEffectPool,com.badlogic.gdx.graphics.g2d.ParticleEffect) -> <init>
    void reset() -> reset
    void free() -> free
com.badlogic.gdx.graphics.g2d.ParticleEmitter -> com.badlogic.gdx.graphics.g2d.ParticleEmitter:
    int UPDATE_SCALE -> UPDATE_SCALE
    int UPDATE_ANGLE -> UPDATE_ANGLE
    int UPDATE_ROTATION -> UPDATE_ROTATION
    int UPDATE_VELOCITY -> UPDATE_VELOCITY
    int UPDATE_WIND -> UPDATE_WIND
    int UPDATE_GRAVITY -> UPDATE_GRAVITY
    int UPDATE_TINT -> UPDATE_TINT
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue delayValue -> delayValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue lifeOffsetValue -> lifeOffsetValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue durationValue -> durationValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue lifeValue -> lifeValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue emissionValue -> emissionValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue scaleValue -> scaleValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue rotationValue -> rotationValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue velocityValue -> velocityValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue angleValue -> angleValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue windValue -> windValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue gravityValue -> gravityValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue transparencyValue -> transparencyValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue tintValue -> tintValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue xOffsetValue -> xOffsetValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue yOffsetValue -> yOffsetValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnWidthValue -> spawnWidthValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnHeightValue -> spawnHeightValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue spawnShapeValue -> spawnShapeValue
    float accumulator -> accumulator
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> sprite
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle[] particles -> particles
    int minParticleCount -> minParticleCount
    int maxParticleCount -> maxParticleCount
    float x -> x
    float y -> y
    java.lang.String name -> name
    java.lang.String imagePath -> imagePath
    int activeCount -> activeCount
    boolean[] active -> active
    boolean firstUpdate -> firstUpdate
    boolean flipX -> flipX
    boolean flipY -> flipY
    int updateFlags -> updateFlags
    boolean allowCompletion -> allowCompletion
    com.badlogic.gdx.math.collision.BoundingBox bounds -> bounds
    int emission -> emission
    int emissionDiff -> emissionDiff
    int emissionDelta -> emissionDelta
    int lifeOffset -> lifeOffset
    int lifeOffsetDiff -> lifeOffsetDiff
    int life -> life
    int lifeDiff -> lifeDiff
    float spawnWidth -> spawnWidth
    float spawnWidthDiff -> spawnWidthDiff
    float spawnHeight -> spawnHeight
    float spawnHeightDiff -> spawnHeightDiff
    float duration -> duration
    float durationTimer -> durationTimer
    float delay -> delay
    float delayTimer -> delayTimer
    boolean attached -> attached
    boolean continuous -> continuous
    boolean aligned -> aligned
    boolean behind -> behind
    boolean additive -> additive
    boolean premultipliedAlpha -> premultipliedAlpha
    boolean cleansUpBlendFunction -> cleansUpBlendFunction
    void <init>() -> <init>
    void <init>(java.io.BufferedReader) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.ParticleEmitter) -> <init>
    void initialize() -> initialize
    void setMaxParticleCount(int) -> setMaxParticleCount
    void addParticle() -> addParticle
    void addParticles(int) -> addParticles
    void update(float) -> update
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void start() -> start
    void reset() -> reset
    void restart() -> restart
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle newParticle(com.badlogic.gdx.graphics.g2d.Sprite) -> newParticle
    void activateParticle(int) -> activateParticle
    boolean updateParticle(com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle,float,int) -> updateParticle
    void setPosition(float,float) -> setPosition
    void setSprite(com.badlogic.gdx.graphics.g2d.Sprite) -> setSprite
    void allowCompletion() -> allowCompletion
    com.badlogic.gdx.graphics.g2d.Sprite getSprite() -> getSprite
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getLife() -> getLife
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getScale() -> getScale
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getRotation() -> getRotation
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue getTint() -> getTint
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getVelocity() -> getVelocity
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getWind() -> getWind
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getGravity() -> getGravity
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getAngle() -> getAngle
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getEmission() -> getEmission
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getTransparency() -> getTransparency
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getDuration() -> getDuration
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getDelay() -> getDelay
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getLifeOffset() -> getLifeOffset
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getXOffsetValue() -> getXOffsetValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue getYOffsetValue() -> getYOffsetValue
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getSpawnWidth() -> getSpawnWidth
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue getSpawnHeight() -> getSpawnHeight
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue getSpawnShape() -> getSpawnShape
    boolean isAttached() -> isAttached
    void setAttached(boolean) -> setAttached
    boolean isContinuous() -> isContinuous
    void setContinuous(boolean) -> setContinuous
    boolean isAligned() -> isAligned
    void setAligned(boolean) -> setAligned
    boolean isAdditive() -> isAdditive
    void setAdditive(boolean) -> setAdditive
    boolean cleansUpBlendFunction() -> cleansUpBlendFunction
    void setCleansUpBlendFunction(boolean) -> setCleansUpBlendFunction
    boolean isBehind() -> isBehind
    void setBehind(boolean) -> setBehind
    boolean isPremultipliedAlpha() -> isPremultipliedAlpha
    void setPremultipliedAlpha(boolean) -> setPremultipliedAlpha
    int getMinParticleCount() -> getMinParticleCount
    void setMinParticleCount(int) -> setMinParticleCount
    int getMaxParticleCount() -> getMaxParticleCount
    boolean isComplete() -> isComplete
    float getPercentComplete() -> getPercentComplete
    float getX() -> getX
    float getY() -> getY
    int getActiveCount() -> getActiveCount
    java.lang.String getImagePath() -> getImagePath
    void setImagePath(java.lang.String) -> setImagePath
    void setFlip(boolean,boolean) -> setFlip
    void flipY() -> flipY
    com.badlogic.gdx.math.collision.BoundingBox getBoundingBox() -> getBoundingBox
    void save(java.io.Writer) -> save
    void load(java.io.BufferedReader) -> load
    java.lang.String readString(java.lang.String) -> readString
    java.lang.String readString(java.io.BufferedReader,java.lang.String) -> readString
    boolean readBoolean(java.lang.String) -> readBoolean
    boolean readBoolean(java.io.BufferedReader,java.lang.String) -> readBoolean
    int readInt(java.io.BufferedReader,java.lang.String) -> readInt
    float readFloat(java.io.BufferedReader,java.lang.String) -> readFloat
com.badlogic.gdx.graphics.g2d.ParticleEmitter$1 -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$1:
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnEllipseSide -> $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnEllipseSide
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnShape -> $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnShape
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue:
    float[] temp -> temp
    float[] colors -> colors
    float[] timeline -> timeline
    void <init>() -> <init>
    float[] getTimeline() -> getTimeline
    void setTimeline(float[]) -> setTimeline
    float[] getColors() -> getColors
    void setColors(float[]) -> setColors
    float[] getColor(float) -> getColor
    void save(java.io.Writer) -> save
    void load(java.io.BufferedReader) -> load
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue) -> load
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue:
    float value -> value
    void <init>() -> <init>
    float getValue() -> getValue
    void setValue(float) -> setValue
    void save(java.io.Writer) -> save
    void load(java.io.BufferedReader) -> load
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue) -> load
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle:
    int life -> life
    int currentLife -> currentLife
    float scale -> scale
    float scaleDiff -> scaleDiff
    float rotation -> rotation
    float rotationDiff -> rotationDiff
    float velocity -> velocity
    float velocityDiff -> velocityDiff
    float angle -> angle
    float angleDiff -> angleDiff
    float angleCos -> angleCos
    float angleSin -> angleSin
    float transparency -> transparency
    float transparencyDiff -> transparencyDiff
    float wind -> wind
    float windDiff -> windDiff
    float gravity -> gravity
    float gravityDiff -> gravityDiff
    float[] tint -> tint
    void <init>(com.badlogic.gdx.graphics.g2d.Sprite) -> <init>
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue:
    boolean active -> active
    boolean alwaysActive -> alwaysActive
    void <init>() -> <init>
    void setAlwaysActive(boolean) -> setAlwaysActive
    boolean isAlwaysActive() -> isAlwaysActive
    boolean isActive() -> isActive
    void setActive(boolean) -> setActive
    void save(java.io.Writer) -> save
    void load(java.io.BufferedReader) -> load
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue) -> load
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue:
    float lowMin -> lowMin
    float lowMax -> lowMax
    void <init>() -> <init>
    float newLowValue() -> newLowValue
    void setLow(float) -> setLow
    void setLow(float,float) -> setLow
    float getLowMin() -> getLowMin
    void setLowMin(float) -> setLowMin
    float getLowMax() -> getLowMax
    void setLowMax(float) -> setLowMax
    void save(java.io.Writer) -> save
    void load(java.io.BufferedReader) -> load
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue) -> load
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue:
    float[] scaling -> scaling
    float[] timeline -> timeline
    float highMin -> highMin
    float highMax -> highMax
    boolean relative -> relative
    void <init>() -> <init>
    float newHighValue() -> newHighValue
    void setHigh(float) -> setHigh
    void setHigh(float,float) -> setHigh
    float getHighMin() -> getHighMin
    void setHighMin(float) -> setHighMin
    float getHighMax() -> getHighMax
    void setHighMax(float) -> setHighMax
    float[] getScaling() -> getScaling
    void setScaling(float[]) -> setScaling
    float[] getTimeline() -> getTimeline
    void setTimeline(float[]) -> setTimeline
    boolean isRelative() -> isRelative
    void setRelative(boolean) -> setRelative
    float getScale(float) -> getScale
    void save(java.io.Writer) -> save
    void load(java.io.BufferedReader) -> load
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue) -> load
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide both -> both
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide top -> top
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide bottom -> bottom
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] values() -> values
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape point -> point
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape line -> line
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape square -> square
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape ellipse -> ellipse
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] values() -> values
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape shape -> shape
    boolean edges -> edges
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide side -> side
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape getShape() -> getShape
    void setShape(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape) -> setShape
    boolean isEdges() -> isEdges
    void setEdges(boolean) -> setEdges
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide getSide() -> getSide
    void setSide(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide) -> setSide
    void save(java.io.Writer) -> save
    void load(java.io.BufferedReader) -> load
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue) -> load
com.badlogic.gdx.graphics.g2d.PixmapPacker -> com.badlogic.gdx.graphics.g2d.PixmapPacker:
    boolean debug -> debug
    java.lang.String ANONYMOUS -> ANONYMOUS
    int pageWidth -> pageWidth
    int pageHeight -> pageHeight
    com.badlogic.gdx.graphics.Pixmap$Format pageFormat -> pageFormat
    int padding -> padding
    boolean duplicateBorder -> duplicateBorder
    com.badlogic.gdx.utils.Array pages -> pages
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Page current -> current
    boolean packToTexture -> packToTexture
    boolean disposed -> disposed
    void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format,int,boolean) -> <init>
    com.badlogic.gdx.math.Rectangle pack(com.badlogic.gdx.graphics.Pixmap) -> pack
    com.badlogic.gdx.math.Rectangle pack(java.lang.String,com.badlogic.gdx.graphics.Pixmap) -> pack
    void newPage() -> newPage
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Node insert(com.badlogic.gdx.graphics.g2d.PixmapPacker$Node,com.badlogic.gdx.math.Rectangle) -> insert
    com.badlogic.gdx.utils.Array getPages() -> getPages
    com.badlogic.gdx.math.Rectangle getRect(java.lang.String) -> getRect
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Page getPage(java.lang.String) -> getPage
    int getPageIndex(java.lang.String) -> getPageIndex
    void dispose() -> dispose
    com.badlogic.gdx.graphics.g2d.TextureAtlas generateTextureAtlas(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> generateTextureAtlas
    void updateTextureAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> updateTextureAtlas
    void updateTextureRegions(com.badlogic.gdx.utils.Array,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> updateTextureRegions
    void updatePageTextures(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> updatePageTextures
    int getPageWidth() -> getPageWidth
    int getPageHeight() -> getPageHeight
    int getPadding() -> getPadding
    boolean getDuplicateBorder() -> getDuplicateBorder
    boolean getPackToTexture() -> getPackToTexture
    void setPackToTexture(boolean) -> setPackToTexture
com.badlogic.gdx.graphics.g2d.PixmapPacker$Node -> com.badlogic.gdx.graphics.g2d.PixmapPacker$Node:
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Node leftChild -> leftChild
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Node rightChild -> rightChild
    com.badlogic.gdx.math.Rectangle rect -> rect
    java.lang.String leafName -> leafName
    void <init>(int,int,int,int,com.badlogic.gdx.graphics.g2d.PixmapPacker$Node,com.badlogic.gdx.graphics.g2d.PixmapPacker$Node,java.lang.String) -> <init>
    void <init>() -> <init>
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page -> com.badlogic.gdx.graphics.g2d.PixmapPacker$Page:
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Node root -> root
    com.badlogic.gdx.utils.OrderedMap rects -> rects
    com.badlogic.gdx.graphics.Pixmap image -> image
    com.badlogic.gdx.graphics.Texture texture -> texture
    com.badlogic.gdx.utils.Array addedRects -> addedRects
    boolean dirty -> dirty
    void <init>() -> <init>
    com.badlogic.gdx.graphics.Pixmap getPixmap() -> getPixmap
    com.badlogic.gdx.utils.OrderedMap getRects() -> getRects
    com.badlogic.gdx.graphics.Texture getTexture() -> getTexture
    boolean updateTexture(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> updateTexture
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page$1 -> com.badlogic.gdx.graphics.g2d.PixmapPacker$Page$1:
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Page this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g2d.PixmapPacker$Page,com.badlogic.gdx.graphics.TextureData) -> <init>
    void dispose() -> dispose
com.badlogic.gdx.graphics.g2d.PixmapPackerIO -> com.badlogic.gdx.graphics.g2d.PixmapPackerIO:
    void <init>() -> <init>
    void save(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PixmapPacker) -> save
    void save(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PixmapPacker,com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters) -> save
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$1 -> com.badlogic.gdx.graphics.g2d.PixmapPackerIO$1:
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$PixmapPackerIO$ImageFormat -> $SwitchMap$com$badlogic$gdx$graphics$g2d$PixmapPackerIO$ImageFormat
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat -> com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat:
    com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat CIM -> CIM
    com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat PNG -> PNG
    java.lang.String extension -> extension
    com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat[] values() -> values
    com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat valueOf(java.lang.String) -> valueOf
    java.lang.String getExtension() -> getExtension
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters -> com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters:
    com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat format -> format
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> minFilter
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> magFilter
    void <init>() -> <init>
com.badlogic.gdx.graphics.g2d.PolygonRegion -> com.badlogic.gdx.graphics.g2d.PolygonRegion:
    float[] textureCoords -> textureCoords
    float[] vertices -> vertices
    short[] triangles -> triangles
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> region
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,float[],short[]) -> <init>
    float[] getVertices() -> getVertices
    short[] getTriangles() -> getTriangles
    float[] getTextureCoords() -> getTextureCoords
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> getRegion
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader -> com.badlogic.gdx.graphics.g2d.PolygonRegionLoader:
    com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters defaultParameters -> defaultParameters
    com.badlogic.gdx.math.EarClippingTriangulator triangulator -> triangulator
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.graphics.g2d.PolygonRegion load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters) -> load
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters) -> getDependencies
    com.badlogic.gdx.graphics.g2d.PolygonRegion load(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.files.FileHandle) -> load
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> load
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters -> com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters:
    java.lang.String texturePrefix -> texturePrefix
    int readerBuffer -> readerBuffer
    java.lang.String[] textureExtensions -> textureExtensions
    void <init>() -> <init>
com.badlogic.gdx.graphics.g2d.PolygonSprite -> com.badlogic.gdx.graphics.g2d.PolygonSprite:
    com.badlogic.gdx.graphics.g2d.PolygonRegion region -> region
    float x -> x
    float y -> y
    float width -> width
    float height -> height
    float scaleX -> scaleX
    float scaleY -> scaleY
    float rotation -> rotation
    float originX -> originX
    float originY -> originY
    float[] vertices -> vertices
    boolean dirty -> dirty
    com.badlogic.gdx.math.Rectangle bounds -> bounds
    com.badlogic.gdx.graphics.Color color -> color
    void <init>(com.badlogic.gdx.graphics.g2d.PolygonRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.PolygonSprite) -> <init>
    void set(com.badlogic.gdx.graphics.g2d.PolygonSprite) -> set
    void setBounds(float,float,float,float) -> setBounds
    void setSize(float,float) -> setSize
    void setPosition(float,float) -> setPosition
    void setX(float) -> setX
    void setY(float) -> setY
    void translateX(float) -> translateX
    void translateY(float) -> translateY
    void translate(float,float) -> translate
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    void setOrigin(float,float) -> setOrigin
    void setRotation(float) -> setRotation
    void rotate(float) -> rotate
    void setScale(float) -> setScale
    void setScale(float,float) -> setScale
    void scale(float) -> scale
    float[] getVertices() -> getVertices
    com.badlogic.gdx.math.Rectangle getBoundingRectangle() -> getBoundingRectangle
    void draw(com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch,float) -> draw
    float getX() -> getX
    float getY() -> getY
    float getWidth() -> getWidth
    float getHeight() -> getHeight
    float getOriginX() -> getOriginX
    float getOriginY() -> getOriginY
    float getRotation() -> getRotation
    float getScaleX() -> getScaleX
    float getScaleY() -> getScaleY
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    com.badlogic.gdx.graphics.Color getVertexColor() -> getVertexColor
    void setRegion(com.badlogic.gdx.graphics.g2d.PolygonRegion) -> setRegion
    com.badlogic.gdx.graphics.g2d.PolygonRegion getRegion() -> getRegion
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch -> com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch:
    com.badlogic.gdx.graphics.Mesh mesh -> mesh
    float[] vertices -> vertices
    short[] triangles -> triangles
    int vertexIndex -> vertexIndex
    int triangleIndex -> triangleIndex
    com.badlogic.gdx.graphics.Texture lastTexture -> lastTexture
    float invTexWidth -> invTexWidth
    float invTexHeight -> invTexHeight
    boolean drawing -> drawing
    com.badlogic.gdx.math.Matrix4 transformMatrix -> transformMatrix
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> projectionMatrix
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> combinedMatrix
    boolean blendingDisabled -> blendingDisabled
    int blendSrcFunc -> blendSrcFunc
    int blendDstFunc -> blendDstFunc
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> shader
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> customShader
    boolean ownsShader -> ownsShader
    float color -> color
    com.badlogic.gdx.graphics.Color tempColor -> tempColor
    int renderCalls -> renderCalls
    int totalRenderCalls -> totalRenderCalls
    int maxTrianglesInBatch -> maxTrianglesInBatch
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    void begin() -> begin
    void end() -> end
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    void setColor(float) -> setColor
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    float getPackedColor() -> getPackedColor
    void draw(com.badlogic.gdx.graphics.g2d.PolygonRegion,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.PolygonRegion,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.PolygonRegion,float,float,float,float,float,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int,short[],int,int) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2) -> draw
    void flush() -> flush
    void disableBlending() -> disableBlending
    void enableBlending() -> enableBlending
    void setBlendFunction(int,int) -> setBlendFunction
    int getBlendSrcFunc() -> getBlendSrcFunc
    int getBlendDstFunc() -> getBlendDstFunc
    void dispose() -> dispose
    com.badlogic.gdx.math.Matrix4 getProjectionMatrix() -> getProjectionMatrix
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> getTransformMatrix
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> setProjectionMatrix
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> setTransformMatrix
    void setupMatrices() -> setupMatrices
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> switchTexture
    void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> setShader
    com.badlogic.gdx.graphics.glutils.ShaderProgram getShader() -> getShader
    boolean isBlendingEnabled() -> isBlendingEnabled
    boolean isDrawing() -> isDrawing
com.badlogic.gdx.graphics.g2d.Sprite -> com.badlogic.gdx.graphics.g2d.Sprite:
    int VERTEX_SIZE -> VERTEX_SIZE
    int SPRITE_SIZE -> SPRITE_SIZE
    float[] vertices -> vertices
    com.badlogic.gdx.graphics.Color color -> color
    float x -> x
    float y -> y
    float width -> width
    float height -> height
    float originX -> originX
    float originY -> originY
    float rotation -> rotation
    float scaleX -> scaleX
    float scaleY -> scaleY
    boolean dirty -> dirty
    com.badlogic.gdx.math.Rectangle bounds -> bounds
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture,int,int) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.Sprite) -> <init>
    void set(com.badlogic.gdx.graphics.g2d.Sprite) -> set
    void setBounds(float,float,float,float) -> setBounds
    void setSize(float,float) -> setSize
    void setPosition(float,float) -> setPosition
    void setX(float) -> setX
    void setY(float) -> setY
    void setCenterX(float) -> setCenterX
    void setCenterY(float) -> setCenterY
    void setCenter(float,float) -> setCenter
    void translateX(float) -> translateX
    void translateY(float) -> translateY
    void translate(float,float) -> translate
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setAlpha(float) -> setAlpha
    void setColor(float,float,float,float) -> setColor
    void setColor(float) -> setColor
    void setOrigin(float,float) -> setOrigin
    void setOriginCenter() -> setOriginCenter
    void setRotation(float) -> setRotation
    float getRotation() -> getRotation
    void rotate(float) -> rotate
    void rotate90(boolean) -> rotate90
    void setScale(float) -> setScale
    void setScale(float,float) -> setScale
    void scale(float) -> scale
    float[] getVertices() -> getVertices
    com.badlogic.gdx.math.Rectangle getBoundingRectangle() -> getBoundingRectangle
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    float getX() -> getX
    float getY() -> getY
    float getWidth() -> getWidth
    float getHeight() -> getHeight
    float getOriginX() -> getOriginX
    float getOriginY() -> getOriginY
    float getScaleX() -> getScaleX
    float getScaleY() -> getScaleY
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    void setRegion(float,float,float,float) -> setRegion
    void setU(float) -> setU
    void setV(float) -> setV
    void setU2(float) -> setU2
    void setV2(float) -> setV2
    void setFlip(boolean,boolean) -> setFlip
    void flip(boolean,boolean) -> flip
    void scroll(float,float) -> scroll
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.SpriteBatch:
    com.badlogic.gdx.graphics.Mesh mesh -> mesh
    float[] vertices -> vertices
    int idx -> idx
    com.badlogic.gdx.graphics.Texture lastTexture -> lastTexture
    float invTexWidth -> invTexWidth
    float invTexHeight -> invTexHeight
    boolean drawing -> drawing
    com.badlogic.gdx.math.Matrix4 transformMatrix -> transformMatrix
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> projectionMatrix
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> combinedMatrix
    boolean blendingDisabled -> blendingDisabled
    int blendSrcFunc -> blendSrcFunc
    int blendDstFunc -> blendDstFunc
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> shader
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> customShader
    boolean ownsShader -> ownsShader
    float color -> color
    com.badlogic.gdx.graphics.Color tempColor -> tempColor
    int renderCalls -> renderCalls
    int totalRenderCalls -> totalRenderCalls
    int maxSpritesInBatch -> maxSpritesInBatch
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader() -> createDefaultShader
    void begin() -> begin
    void end() -> end
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    void setColor(float) -> setColor
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    float getPackedColor() -> getPackedColor
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2) -> draw
    void flush() -> flush
    void disableBlending() -> disableBlending
    void enableBlending() -> enableBlending
    void setBlendFunction(int,int) -> setBlendFunction
    int getBlendSrcFunc() -> getBlendSrcFunc
    int getBlendDstFunc() -> getBlendDstFunc
    void dispose() -> dispose
    com.badlogic.gdx.math.Matrix4 getProjectionMatrix() -> getProjectionMatrix
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> getTransformMatrix
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> setProjectionMatrix
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> setTransformMatrix
    void setupMatrices() -> setupMatrices
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> switchTexture
    void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> setShader
    com.badlogic.gdx.graphics.glutils.ShaderProgram getShader() -> getShader
    boolean isBlendingEnabled() -> isBlendingEnabled
    boolean isDrawing() -> isDrawing
com.badlogic.gdx.graphics.g2d.SpriteCache -> com.badlogic.gdx.graphics.g2d.SpriteCache:
    float[] tempVertices -> tempVertices
    com.badlogic.gdx.graphics.Mesh mesh -> mesh
    boolean drawing -> drawing
    com.badlogic.gdx.math.Matrix4 transformMatrix -> transformMatrix
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> projectionMatrix
    com.badlogic.gdx.utils.Array caches -> caches
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> combinedMatrix
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> shader
    com.badlogic.gdx.graphics.g2d.SpriteCache$Cache currentCache -> currentCache
    com.badlogic.gdx.utils.Array textures -> textures
    com.badlogic.gdx.utils.IntArray counts -> counts
    float color -> color
    com.badlogic.gdx.graphics.Color tempColor -> tempColor
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> customShader
    int renderCalls -> renderCalls
    int totalRenderCalls -> totalRenderCalls
    void <init>() -> <init>
    void <init>(int,boolean) -> <init>
    void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram,boolean) -> <init>
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    void setColor(float) -> setColor
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    void beginCache() -> beginCache
    void beginCache(int) -> beginCache
    int endCache() -> endCache
    void clear() -> clear
    void add(com.badlogic.gdx.graphics.Texture,float[],int,int) -> add
    void add(com.badlogic.gdx.graphics.Texture,float,float) -> add
    void add(com.badlogic.gdx.graphics.Texture,float,float,int,int,float,float,float,float,float) -> add
    void add(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int) -> add
    void add(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean) -> add
    void add(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean) -> add
    void add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> add
    void add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> add
    void add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> add
    void add(com.badlogic.gdx.graphics.g2d.Sprite) -> add
    void begin() -> begin
    void end() -> end
    void draw(int) -> draw
    void draw(int,int,int) -> draw
    void dispose() -> dispose
    com.badlogic.gdx.math.Matrix4 getProjectionMatrix() -> getProjectionMatrix
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> setProjectionMatrix
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> getTransformMatrix
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> setTransformMatrix
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader() -> createDefaultShader
    void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> setShader
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache -> com.badlogic.gdx.graphics.g2d.SpriteCache$Cache:
    int id -> id
    int offset -> offset
    int maxCount -> maxCount
    int textureCount -> textureCount
    com.badlogic.gdx.graphics.Texture[] textures -> textures
    int[] counts -> counts
    void <init>(int,int) -> <init>
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.badlogic.gdx.graphics.g2d.TextureAtlas:
    java.lang.String[] tuple -> tuple
    com.badlogic.gdx.utils.ObjectSet textures -> textures
    com.badlogic.gdx.utils.Array regions -> regions
    java.util.Comparator indexComparator -> indexComparator
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData) -> <init>
    void load(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData) -> load
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.Texture,int,int,int,int) -> addRegion
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.g2d.TextureRegion) -> addRegion
    com.badlogic.gdx.utils.Array getRegions() -> getRegions
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String) -> findRegion
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String,int) -> findRegion
    com.badlogic.gdx.utils.Array findRegions(java.lang.String) -> findRegions
    com.badlogic.gdx.utils.Array createSprites() -> createSprites
    com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String) -> createSprite
    com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String,int) -> createSprite
    com.badlogic.gdx.utils.Array createSprites(java.lang.String) -> createSprites
    com.badlogic.gdx.graphics.g2d.Sprite newSprite(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion) -> newSprite
    com.badlogic.gdx.graphics.g2d.NinePatch createPatch(java.lang.String) -> createPatch
    com.badlogic.gdx.utils.ObjectSet getTextures() -> getTextures
    void dispose() -> dispose
    java.lang.String readValue(java.io.BufferedReader) -> readValue
    int readTuple(java.io.BufferedReader) -> readTuple
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.TextureAtlas$1 -> com.badlogic.gdx.graphics.g2d.TextureAtlas$1:
    void <init>() -> <init>
    int compare(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region,com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion:
    int index -> index
    java.lang.String name -> name
    float offsetX -> offsetX
    float offsetY -> offsetY
    int packedWidth -> packedWidth
    int packedHeight -> packedHeight
    int originalWidth -> originalWidth
    int originalHeight -> originalHeight
    boolean rotate -> rotate
    int[] splits -> splits
    int[] pads -> pads
    void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion) -> <init>
    void flip(boolean,boolean) -> flip
    float getRotatedPackedWidth() -> getRotatedPackedWidth
    float getRotatedPackedHeight() -> getRotatedPackedHeight
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite -> com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion region -> region
    float originalOffsetX -> originalOffsetX
    float originalOffsetY -> originalOffsetY
    void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite) -> <init>
    void setPosition(float,float) -> setPosition
    void setX(float) -> setX
    void setY(float) -> setY
    void setBounds(float,float,float,float) -> setBounds
    void setSize(float,float) -> setSize
    void setOrigin(float,float) -> setOrigin
    void setOriginCenter() -> setOriginCenter
    void flip(boolean,boolean) -> flip
    void rotate90(boolean) -> rotate90
    float getX() -> getX
    float getY() -> getY
    float getOriginX() -> getOriginX
    float getOriginY() -> getOriginY
    float getWidth() -> getWidth
    float getHeight() -> getHeight
    float getWidthRatio() -> getWidthRatio
    float getHeightRatio() -> getHeightRatio
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion getAtlasRegion() -> getAtlasRegion
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData:
    com.badlogic.gdx.utils.Array pages -> pages
    com.badlogic.gdx.utils.Array regions -> regions
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    com.badlogic.gdx.utils.Array getPages() -> getPages
    com.badlogic.gdx.utils.Array getRegions() -> getRegions
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page -> com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page:
    com.badlogic.gdx.files.FileHandle textureFile -> textureFile
    com.badlogic.gdx.graphics.Texture texture -> texture
    float width -> width
    float height -> height
    boolean useMipMaps -> useMipMaps
    com.badlogic.gdx.graphics.Pixmap$Format format -> format
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> minFilter
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> magFilter
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> uWrap
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> vWrap
    void <init>(com.badlogic.gdx.files.FileHandle,float,float,boolean,com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> <init>
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page page -> page
    int index -> index
    java.lang.String name -> name
    float offsetX -> offsetX
    float offsetY -> offsetY
    int originalWidth -> originalWidth
    int originalHeight -> originalHeight
    boolean rotate -> rotate
    int left -> left
    int top -> top
    int width -> width
    int height -> height
    boolean flip -> flip
    int[] splits -> splits
    int[] pads -> pads
    void <init>() -> <init>
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.TextureRegion:
    com.badlogic.gdx.graphics.Texture texture -> texture
    float u -> u
    float v -> v
    float u2 -> u2
    float v2 -> v2
    int regionWidth -> regionWidth
    int regionHeight -> regionHeight
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture,int,int) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture,float,float,float,float) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int) -> <init>
    void setRegion(com.badlogic.gdx.graphics.Texture) -> setRegion
    void setRegion(int,int,int,int) -> setRegion
    void setRegion(float,float,float,float) -> setRegion
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> setRegion
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int) -> setRegion
    com.badlogic.gdx.graphics.Texture getTexture() -> getTexture
    void setTexture(com.badlogic.gdx.graphics.Texture) -> setTexture
    float getU() -> getU
    void setU(float) -> setU
    float getV() -> getV
    void setV(float) -> setV
    float getU2() -> getU2
    void setU2(float) -> setU2
    float getV2() -> getV2
    void setV2(float) -> setV2
    int getRegionX() -> getRegionX
    void setRegionX(int) -> setRegionX
    int getRegionY() -> getRegionY
    void setRegionY(int) -> setRegionY
    int getRegionWidth() -> getRegionWidth
    void setRegionWidth(int) -> setRegionWidth
    int getRegionHeight() -> getRegionHeight
    void setRegionHeight(int) -> setRegionHeight
    void flip(boolean,boolean) -> flip
    boolean isFlipX() -> isFlipX
    boolean isFlipY() -> isFlipY
    void scroll(float,float) -> scroll
    com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(int,int) -> split
    com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(com.badlogic.gdx.graphics.Texture,int,int) -> split
com.badlogic.gdx.graphics.g3d.Attribute -> com.badlogic.gdx.graphics.g3d.Attribute:
    com.badlogic.gdx.utils.Array types -> types
    long type -> type
    int typeBit -> typeBit
    long getAttributeType(java.lang.String) -> getAttributeType
    java.lang.String getAttributeAlias(long) -> getAttributeAlias
    long register(java.lang.String) -> register
    void <init>(long) -> <init>
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    boolean equals(com.badlogic.gdx.graphics.g3d.Attribute) -> equals
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.Attributes -> com.badlogic.gdx.graphics.g3d.Attributes:
    long mask -> mask
    com.badlogic.gdx.utils.Array attributes -> attributes
    boolean sorted -> sorted
    void <init>() -> <init>
    void sort() -> sort
    long getMask() -> getMask
    com.badlogic.gdx.graphics.g3d.Attribute get(long) -> get
    com.badlogic.gdx.graphics.g3d.Attribute get(java.lang.Class,long) -> get
    com.badlogic.gdx.utils.Array get(com.badlogic.gdx.utils.Array,long) -> get
    void clear() -> clear
    int size() -> size
    void enable(long) -> enable
    void disable(long) -> disable
    void set(com.badlogic.gdx.graphics.g3d.Attribute) -> set
    void set(com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute) -> set
    void set(com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute) -> set
    void set(com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute) -> set
    void set(com.badlogic.gdx.graphics.g3d.Attribute[]) -> set
    void set(java.lang.Iterable) -> set
    void remove(long) -> remove
    boolean has(long) -> has
    int indexOf(long) -> indexOf
    boolean same(com.badlogic.gdx.graphics.g3d.Attributes,boolean) -> same
    boolean same(com.badlogic.gdx.graphics.g3d.Attributes) -> same
    int compare(com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute) -> compare
    java.util.Iterator iterator() -> iterator
    int attributesHash() -> attributesHash
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(com.badlogic.gdx.graphics.g3d.Attributes) -> compareTo
    int compare(java.lang.Object,java.lang.Object) -> compare
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.Environment -> com.badlogic.gdx.graphics.g3d.Environment:
    com.badlogic.gdx.graphics.g3d.environment.ShadowMap shadowMap -> shadowMap
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.BaseLight[]) -> add
    com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.utils.Array) -> add
    com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.BaseLight) -> add
    com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.DirectionalLight) -> add
    com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.PointLight) -> add
    com.badlogic.gdx.graphics.g3d.Environment add(com.badlogic.gdx.graphics.g3d.environment.SpotLight) -> add
    com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.BaseLight[]) -> remove
    com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.utils.Array) -> remove
    com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.BaseLight) -> remove
    com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.DirectionalLight) -> remove
    com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.PointLight) -> remove
    com.badlogic.gdx.graphics.g3d.Environment remove(com.badlogic.gdx.graphics.g3d.environment.SpotLight) -> remove
com.badlogic.gdx.graphics.g3d.Material -> com.badlogic.gdx.graphics.g3d.Material:
    int counter -> counter
    java.lang.String id -> id
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Attribute[]) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.graphics.g3d.Attribute[]) -> <init>
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.utils.Array) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Material) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.graphics.g3d.Material) -> <init>
    com.badlogic.gdx.graphics.g3d.Material copy() -> copy
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.Model -> com.badlogic.gdx.graphics.g3d.Model:
    com.badlogic.gdx.utils.Array materials -> materials
    com.badlogic.gdx.utils.Array nodes -> nodes
    com.badlogic.gdx.utils.Array animations -> animations
    com.badlogic.gdx.utils.Array meshes -> meshes
    com.badlogic.gdx.utils.Array meshParts -> meshParts
    com.badlogic.gdx.utils.Array disposables -> disposables
    com.badlogic.gdx.utils.ObjectMap nodePartBones -> nodePartBones
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.model.data.ModelData) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> <init>
    void load(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> load
    void loadAnimations(java.lang.Iterable) -> loadAnimations
    void loadNodes(java.lang.Iterable) -> loadNodes
    com.badlogic.gdx.graphics.g3d.model.Node loadNode(com.badlogic.gdx.graphics.g3d.model.data.ModelNode) -> loadNode
    void loadMeshes(java.lang.Iterable) -> loadMeshes
    void convertMesh(com.badlogic.gdx.graphics.g3d.model.data.ModelMesh) -> convertMesh
    void loadMaterials(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> loadMaterials
    com.badlogic.gdx.graphics.g3d.Material convertMaterial(com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> convertMaterial
    void manageDisposable(com.badlogic.gdx.utils.Disposable) -> manageDisposable
    java.lang.Iterable getManagedDisposables() -> getManagedDisposables
    void dispose() -> dispose
    void calculateTransforms() -> calculateTransforms
    com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox) -> calculateBoundingBox
    com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox) -> extendBoundingBox
    com.badlogic.gdx.graphics.g3d.model.Animation getAnimation(java.lang.String) -> getAnimation
    com.badlogic.gdx.graphics.g3d.model.Animation getAnimation(java.lang.String,boolean) -> getAnimation
    com.badlogic.gdx.graphics.g3d.Material getMaterial(java.lang.String) -> getMaterial
    com.badlogic.gdx.graphics.g3d.Material getMaterial(java.lang.String,boolean) -> getMaterial
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String) -> getNode
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean) -> getNode
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean,boolean) -> getNode
com.badlogic.gdx.graphics.g3d.ModelBatch -> com.badlogic.gdx.graphics.g3d.ModelBatch:
    com.badlogic.gdx.graphics.Camera camera -> camera
    com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool renderablesPool -> renderablesPool
    com.badlogic.gdx.utils.Array renderables -> renderables
    com.badlogic.gdx.graphics.g3d.utils.RenderContext context -> context
    boolean ownContext -> ownContext
    com.badlogic.gdx.graphics.g3d.utils.ShaderProvider shaderProvider -> shaderProvider
    com.badlogic.gdx.graphics.g3d.utils.RenderableSorter sorter -> sorter
    void <init>(com.badlogic.gdx.graphics.g3d.utils.RenderContext,com.badlogic.gdx.graphics.g3d.utils.ShaderProvider,com.badlogic.gdx.graphics.g3d.utils.RenderableSorter) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.utils.RenderContext,com.badlogic.gdx.graphics.g3d.utils.ShaderProvider) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.utils.RenderContext,com.badlogic.gdx.graphics.g3d.utils.RenderableSorter) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.utils.RenderContext) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.utils.ShaderProvider,com.badlogic.gdx.graphics.g3d.utils.RenderableSorter) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.utils.RenderableSorter) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.utils.ShaderProvider) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>() -> <init>
    void begin(com.badlogic.gdx.graphics.Camera) -> begin
    void setCamera(com.badlogic.gdx.graphics.Camera) -> setCamera
    com.badlogic.gdx.graphics.Camera getCamera() -> getCamera
    boolean ownsRenderContext() -> ownsRenderContext
    com.badlogic.gdx.graphics.g3d.utils.RenderContext getRenderContext() -> getRenderContext
    com.badlogic.gdx.graphics.g3d.utils.ShaderProvider getShaderProvider() -> getShaderProvider
    com.badlogic.gdx.graphics.g3d.utils.RenderableSorter getRenderableSorter() -> getRenderableSorter
    void flush() -> flush
    void end() -> end
    void render(com.badlogic.gdx.graphics.g3d.Renderable) -> render
    void render(com.badlogic.gdx.graphics.g3d.RenderableProvider) -> render
    void render(java.lang.Iterable) -> render
    void render(com.badlogic.gdx.graphics.g3d.RenderableProvider,com.badlogic.gdx.graphics.g3d.Environment) -> render
    void render(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.Environment) -> render
    void render(com.badlogic.gdx.graphics.g3d.RenderableProvider,com.badlogic.gdx.graphics.g3d.Shader) -> render
    void render(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.Shader) -> render
    void render(com.badlogic.gdx.graphics.g3d.RenderableProvider,com.badlogic.gdx.graphics.g3d.Environment,com.badlogic.gdx.graphics.g3d.Shader) -> render
    void render(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.Environment,com.badlogic.gdx.graphics.g3d.Shader) -> render
    void dispose() -> dispose
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool -> com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool:
    com.badlogic.gdx.utils.Array obtained -> obtained
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.Renderable newObject() -> newObject
    com.badlogic.gdx.graphics.g3d.Renderable obtain() -> obtain
    void flush() -> flush
    java.lang.Object obtain() -> obtain
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.ModelInstance -> com.badlogic.gdx.graphics.g3d.ModelInstance:
    boolean defaultShareKeyframes -> defaultShareKeyframes
    com.badlogic.gdx.utils.Array materials -> materials
    com.badlogic.gdx.utils.Array nodes -> nodes
    com.badlogic.gdx.utils.Array animations -> animations
    com.badlogic.gdx.graphics.g3d.Model model -> model
    com.badlogic.gdx.math.Matrix4 transform -> transform
    java.lang.Object userData -> userData
    com.badlogic.gdx.utils.ObjectMap nodePartBones -> nodePartBones
    void <init>(com.badlogic.gdx.graphics.g3d.Model) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,java.lang.String,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,java.lang.String,boolean,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String,boolean,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,java.lang.String,boolean,boolean,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String,boolean,boolean,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String,boolean,boolean,boolean,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,java.lang.String[]) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,java.lang.String[]) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.utils.Array) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.utils.Array) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.utils.Array,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Vector3) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,float,float,float) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.math.Matrix4) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.ModelInstance) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.ModelInstance,com.badlogic.gdx.math.Matrix4) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.ModelInstance,com.badlogic.gdx.math.Matrix4,boolean) -> <init>
    com.badlogic.gdx.graphics.g3d.ModelInstance copy() -> copy
    void copyNodes(com.badlogic.gdx.utils.Array) -> copyNodes
    void copyNodes(com.badlogic.gdx.utils.Array,java.lang.String[]) -> copyNodes
    void copyNodes(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Array) -> copyNodes
    void setBones() -> setBones
    com.badlogic.gdx.graphics.g3d.model.Node copyNode(com.badlogic.gdx.graphics.g3d.model.Node) -> copyNode
    com.badlogic.gdx.graphics.g3d.model.NodePart copyNodePart(com.badlogic.gdx.graphics.g3d.model.NodePart) -> copyNodePart
    void copyAnimations(java.lang.Iterable,boolean) -> copyAnimations
    void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool) -> getRenderables
    com.badlogic.gdx.graphics.g3d.Renderable getRenderable(com.badlogic.gdx.graphics.g3d.Renderable) -> getRenderable
    com.badlogic.gdx.graphics.g3d.Renderable getRenderable(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.model.Node) -> getRenderable
    com.badlogic.gdx.graphics.g3d.Renderable getRenderable(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.model.Node,com.badlogic.gdx.graphics.g3d.model.NodePart) -> getRenderable
    void getRenderables(com.badlogic.gdx.graphics.g3d.model.Node,com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool) -> getRenderables
    void calculateTransforms() -> calculateTransforms
    com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox) -> calculateBoundingBox
    com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox) -> extendBoundingBox
    com.badlogic.gdx.graphics.g3d.model.Animation getAnimation(java.lang.String) -> getAnimation
    com.badlogic.gdx.graphics.g3d.model.Animation getAnimation(java.lang.String,boolean) -> getAnimation
    com.badlogic.gdx.graphics.g3d.Material getMaterial(java.lang.String) -> getMaterial
    com.badlogic.gdx.graphics.g3d.Material getMaterial(java.lang.String,boolean) -> getMaterial
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String) -> getNode
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean) -> getNode
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean,boolean) -> getNode
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.Renderable -> com.badlogic.gdx.graphics.g3d.Renderable:
    com.badlogic.gdx.math.Matrix4 worldTransform -> worldTransform
    com.badlogic.gdx.graphics.Mesh mesh -> mesh
    int meshPartOffset -> meshPartOffset
    int meshPartSize -> meshPartSize
    int primitiveType -> primitiveType
    com.badlogic.gdx.graphics.g3d.Material material -> material
    com.badlogic.gdx.graphics.g3d.Environment environment -> environment
    com.badlogic.gdx.math.Matrix4[] bones -> bones
    com.badlogic.gdx.graphics.g3d.Shader shader -> shader
    java.lang.Object userData -> userData
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.Renderable set(com.badlogic.gdx.graphics.g3d.Renderable) -> set
com.badlogic.gdx.graphics.g3d.RenderableProvider -> com.badlogic.gdx.graphics.g3d.RenderableProvider:
    void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool) -> getRenderables
com.badlogic.gdx.graphics.g3d.Shader -> com.badlogic.gdx.graphics.g3d.Shader:
    void init() -> init
    int compareTo(com.badlogic.gdx.graphics.g3d.Shader) -> compareTo
    boolean canRender(com.badlogic.gdx.graphics.g3d.Renderable) -> canRender
    void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext) -> begin
    void render(com.badlogic.gdx.graphics.g3d.Renderable) -> render
    void end() -> end
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute -> com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute:
    java.lang.String Alias -> Alias
    long Type -> Type
    boolean blended -> blended
    int sourceFunction -> sourceFunction
    int destFunction -> destFunction
    float opacity -> opacity
    boolean is(long) -> is
    void <init>() -> <init>
    void <init>(boolean,int,int,float) -> <init>
    void <init>(int,int,float) -> <init>
    void <init>(int,int) -> <init>
    void <init>(boolean,float) -> <init>
    void <init>(float) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute) -> <init>
    com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute -> com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute:
    java.lang.String DiffuseAlias -> DiffuseAlias
    long Diffuse -> Diffuse
    java.lang.String SpecularAlias -> SpecularAlias
    long Specular -> Specular
    java.lang.String AmbientAlias -> AmbientAlias
    long Ambient -> Ambient
    java.lang.String EmissiveAlias -> EmissiveAlias
    long Emissive -> Emissive
    java.lang.String ReflectionAlias -> ReflectionAlias
    long Reflection -> Reflection
    java.lang.String AmbientLightAlias -> AmbientLightAlias
    long AmbientLight -> AmbientLight
    java.lang.String FogAlias -> FogAlias
    long Fog -> Fog
    long Mask -> Mask
    com.badlogic.gdx.graphics.Color color -> color
    boolean is(long) -> is
    com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createAmbient(com.badlogic.gdx.graphics.Color) -> createAmbient
    com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createAmbient(float,float,float,float) -> createAmbient
    com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createDiffuse(com.badlogic.gdx.graphics.Color) -> createDiffuse
    com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createDiffuse(float,float,float,float) -> createDiffuse
    com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createSpecular(com.badlogic.gdx.graphics.Color) -> createSpecular
    com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createSpecular(float,float,float,float) -> createSpecular
    com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createReflection(com.badlogic.gdx.graphics.Color) -> createReflection
    com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute createReflection(float,float,float,float) -> createReflection
    void <init>(long) -> <init>
    void <init>(long,com.badlogic.gdx.graphics.Color) -> <init>
    void <init>(long,float,float,float,float) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute) -> <init>
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute -> com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute:
    java.lang.String EnvironmentMapAlias -> EnvironmentMapAlias
    long EnvironmentMap -> EnvironmentMap
    long Mask -> Mask
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor textureDescription -> textureDescription
    boolean is(long) -> is
    void <init>(long) -> <init>
    void <init>(long,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> <init>
    void <init>(long,com.badlogic.gdx.graphics.Cubemap) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute) -> <init>
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute -> com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute:
    java.lang.String Alias -> Alias
    long Type -> Type
    long Mask -> Mask
    int depthFunc -> depthFunc
    float depthRangeNear -> depthRangeNear
    float depthRangeFar -> depthRangeFar
    boolean depthMask -> depthMask
    boolean is(long) -> is
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(int) -> <init>
    void <init>(int,boolean) -> <init>
    void <init>(int,float,float) -> <init>
    void <init>(int,float,float,boolean) -> <init>
    void <init>(long,int,float,float,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute) -> <init>
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute -> com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute:
    java.lang.String Alias -> Alias
    long Type -> Type
    com.badlogic.gdx.utils.Array lights -> lights
    boolean is(long) -> is
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute) -> <init>
    com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute -> com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute:
    java.lang.String ShininessAlias -> ShininessAlias
    long Shininess -> Shininess
    java.lang.String AlphaTestAlias -> AlphaTestAlias
    long AlphaTest -> AlphaTest
    float value -> value
    com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute createShininess(float) -> createShininess
    com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute createAlphaTest(float) -> createAlphaTest
    void <init>(long) -> <init>
    void <init>(long,float) -> <init>
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute -> com.badlogic.gdx.graphics.g3d.attributes.IntAttribute:
    java.lang.String CullFaceAlias -> CullFaceAlias
    long CullFace -> CullFace
    int value -> value
    com.badlogic.gdx.graphics.g3d.attributes.IntAttribute createCullFace(int) -> createCullFace
    void <init>(long) -> <init>
    void <init>(long,int) -> <init>
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute -> com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute:
    java.lang.String Alias -> Alias
    long Type -> Type
    com.badlogic.gdx.utils.Array lights -> lights
    boolean is(long) -> is
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute) -> <init>
    com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute -> com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute:
    java.lang.String Alias -> Alias
    long Type -> Type
    com.badlogic.gdx.utils.Array lights -> lights
    boolean is(long) -> is
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute) -> <init>
    com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute -> com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute:
    java.lang.String DiffuseAlias -> DiffuseAlias
    long Diffuse -> Diffuse
    java.lang.String SpecularAlias -> SpecularAlias
    long Specular -> Specular
    java.lang.String BumpAlias -> BumpAlias
    long Bump -> Bump
    java.lang.String NormalAlias -> NormalAlias
    long Normal -> Normal
    java.lang.String AmbientAlias -> AmbientAlias
    long Ambient -> Ambient
    java.lang.String EmissiveAlias -> EmissiveAlias
    long Emissive -> Emissive
    java.lang.String ReflectionAlias -> ReflectionAlias
    long Reflection -> Reflection
    long Mask -> Mask
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor textureDescription -> textureDescription
    float offsetU -> offsetU
    float offsetV -> offsetV
    float scaleU -> scaleU
    float scaleV -> scaleV
    int uvIndex -> uvIndex
    boolean is(long) -> is
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createDiffuse(com.badlogic.gdx.graphics.Texture) -> createDiffuse
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createDiffuse(com.badlogic.gdx.graphics.g2d.TextureRegion) -> createDiffuse
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createSpecular(com.badlogic.gdx.graphics.Texture) -> createSpecular
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createSpecular(com.badlogic.gdx.graphics.g2d.TextureRegion) -> createSpecular
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createNormal(com.badlogic.gdx.graphics.Texture) -> createNormal
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createNormal(com.badlogic.gdx.graphics.g2d.TextureRegion) -> createNormal
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createBump(com.badlogic.gdx.graphics.Texture) -> createBump
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createBump(com.badlogic.gdx.graphics.g2d.TextureRegion) -> createBump
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createAmbient(com.badlogic.gdx.graphics.Texture) -> createAmbient
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createAmbient(com.badlogic.gdx.graphics.g2d.TextureRegion) -> createAmbient
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createEmissive(com.badlogic.gdx.graphics.Texture) -> createEmissive
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createEmissive(com.badlogic.gdx.graphics.g2d.TextureRegion) -> createEmissive
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createReflection(com.badlogic.gdx.graphics.Texture) -> createReflection
    com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute createReflection(com.badlogic.gdx.graphics.g2d.TextureRegion) -> createReflection
    void <init>(long) -> <init>
    void <init>(long,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> <init>
    void <init>(long,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor,float,float,float,float,int) -> <init>
    void <init>(long,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor,float,float,float,float) -> <init>
    void <init>(long,com.badlogic.gdx.graphics.Texture) -> <init>
    void <init>(long,com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute) -> <init>
    void set(com.badlogic.gdx.graphics.g2d.TextureRegion) -> set
    com.badlogic.gdx.graphics.g3d.Attribute copy() -> copy
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy -> com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy:
    int GROUP_OPAQUE -> GROUP_OPAQUE
    int GROUP_BLEND -> GROUP_BLEND
    com.badlogic.gdx.utils.Pool arrayPool -> arrayPool
    com.badlogic.gdx.utils.Array usedArrays -> usedArrays
    com.badlogic.gdx.utils.ObjectMap materialGroups -> materialGroups
    com.badlogic.gdx.graphics.Camera camera -> camera
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> shader
    java.util.Comparator cameraSorter -> cameraSorter
    void <init>(com.badlogic.gdx.graphics.Camera) -> <init>
    void <init>(com.badlogic.gdx.graphics.Camera,java.util.Comparator) -> <init>
    void setCamera(com.badlogic.gdx.graphics.Camera) -> setCamera
    com.badlogic.gdx.graphics.Camera getCamera() -> getCamera
    int decideGroup(com.badlogic.gdx.graphics.g3d.decals.Decal) -> decideGroup
    void beforeGroup(int,com.badlogic.gdx.utils.Array) -> beforeGroup
    void afterGroup(int) -> afterGroup
    void beforeGroups() -> beforeGroups
    void afterGroups() -> afterGroups
    void createDefaultShader() -> createDefaultShader
    com.badlogic.gdx.graphics.glutils.ShaderProgram getGroupShader(int) -> getGroupShader
    void dispose() -> dispose
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1 -> com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1:
    com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy,int) -> <init>
    com.badlogic.gdx.utils.Array newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2 -> com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2:
    com.badlogic.gdx.graphics.Camera val$camera -> val$camera
    void <init>(com.badlogic.gdx.graphics.Camera) -> <init>
    int compare(com.badlogic.gdx.graphics.g3d.decals.Decal,com.badlogic.gdx.graphics.g3d.decals.Decal) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g3d.decals.Decal -> com.badlogic.gdx.graphics.g3d.decals.Decal:
    int VERTEX_SIZE -> VERTEX_SIZE
    int SIZE -> SIZE
    com.badlogic.gdx.math.Vector3 tmp -> tmp
    com.badlogic.gdx.math.Vector3 tmp2 -> tmp2
    int value -> value
    float[] vertices -> vertices
    com.badlogic.gdx.math.Vector3 position -> position
    com.badlogic.gdx.math.Quaternion rotation -> rotation
    com.badlogic.gdx.math.Vector2 scale -> scale
    com.badlogic.gdx.graphics.Color color -> color
    com.badlogic.gdx.math.Vector2 transformationOffset -> transformationOffset
    com.badlogic.gdx.math.Vector2 dimensions -> dimensions
    com.badlogic.gdx.graphics.g3d.decals.DecalMaterial material -> material
    boolean updated -> updated
    com.badlogic.gdx.math.Vector3 dir -> dir
    int X1 -> X1
    int Y1 -> Y1
    int Z1 -> Z1
    int C1 -> C1
    int U1 -> U1
    int V1 -> V1
    int X2 -> X2
    int Y2 -> Y2
    int Z2 -> Z2
    int C2 -> C2
    int U2 -> U2
    int V2 -> V2
    int X3 -> X3
    int Y3 -> Y3
    int Z3 -> Z3
    int C3 -> C3
    int U3 -> U3
    int V3 -> V3
    int X4 -> X4
    int Y4 -> Y4
    int Z4 -> Z4
    int C4 -> C4
    int U4 -> U4
    int V4 -> V4
    com.badlogic.gdx.math.Quaternion rotator -> rotator
    void <init>() -> <init>
    void setColor(float,float,float,float) -> setColor
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float) -> setColor
    void setRotationX(float) -> setRotationX
    void setRotationY(float) -> setRotationY
    void setRotationZ(float) -> setRotationZ
    void rotateX(float) -> rotateX
    void rotateY(float) -> rotateY
    void rotateZ(float) -> rotateZ
    void setRotation(float,float,float) -> setRotation
    void setRotation(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> setRotation
    void setRotation(com.badlogic.gdx.math.Quaternion) -> setRotation
    com.badlogic.gdx.math.Quaternion getRotation() -> getRotation
    void translateX(float) -> translateX
    void setX(float) -> setX
    float getX() -> getX
    void translateY(float) -> translateY
    void setY(float) -> setY
    float getY() -> getY
    void translateZ(float) -> translateZ
    void setZ(float) -> setZ
    float getZ() -> getZ
    void translate(float,float,float) -> translate
    void translate(com.badlogic.gdx.math.Vector3) -> translate
    void setPosition(float,float,float) -> setPosition
    void setPosition(com.badlogic.gdx.math.Vector3) -> setPosition
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    com.badlogic.gdx.math.Vector3 getPosition() -> getPosition
    void setScaleX(float) -> setScaleX
    float getScaleX() -> getScaleX
    void setScaleY(float) -> setScaleY
    float getScaleY() -> getScaleY
    void setScale(float,float) -> setScale
    void setScale(float) -> setScale
    void setWidth(float) -> setWidth
    float getWidth() -> getWidth
    void setHeight(float) -> setHeight
    float getHeight() -> getHeight
    void setDimensions(float,float) -> setDimensions
    float[] getVertices() -> getVertices
    void update() -> update
    void transformVertices() -> transformVertices
    void resetVertices() -> resetVertices
    void updateUVs() -> updateUVs
    void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> setTextureRegion
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> getTextureRegion
    void setBlending(int,int) -> setBlending
    com.badlogic.gdx.graphics.g3d.decals.DecalMaterial getMaterial() -> getMaterial
    void lookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> lookAt
    com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(com.badlogic.gdx.graphics.g2d.TextureRegion) -> newDecal
    com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(com.badlogic.gdx.graphics.g2d.TextureRegion,boolean) -> newDecal
    com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(float,float,com.badlogic.gdx.graphics.g2d.TextureRegion) -> newDecal
    com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(float,float,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean) -> newDecal
    com.badlogic.gdx.graphics.g3d.decals.Decal newDecal(float,float,com.badlogic.gdx.graphics.g2d.TextureRegion,int,int) -> newDecal
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.decals.DecalBatch -> com.badlogic.gdx.graphics.g3d.decals.DecalBatch:
    int DEFAULT_SIZE -> DEFAULT_SIZE
    float[] vertices -> vertices
    com.badlogic.gdx.graphics.Mesh mesh -> mesh
    com.badlogic.gdx.utils.SortedIntList groupList -> groupList
    com.badlogic.gdx.graphics.g3d.decals.GroupStrategy groupStrategy -> groupStrategy
    com.badlogic.gdx.utils.Pool groupPool -> groupPool
    com.badlogic.gdx.utils.Array usedGroups -> usedGroups
    void <init>(com.badlogic.gdx.graphics.g3d.decals.GroupStrategy) -> <init>
    void <init>(int,com.badlogic.gdx.graphics.g3d.decals.GroupStrategy) -> <init>
    void setGroupStrategy(com.badlogic.gdx.graphics.g3d.decals.GroupStrategy) -> setGroupStrategy
    void initialize(int) -> initialize
    int getSize() -> getSize
    void add(com.badlogic.gdx.graphics.g3d.decals.Decal) -> add
    void flush() -> flush
    void render() -> render
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,com.badlogic.gdx.utils.Array) -> render
    void flush(com.badlogic.gdx.graphics.glutils.ShaderProgram,int) -> flush
    void clear() -> clear
    void dispose() -> dispose
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1 -> com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1:
    com.badlogic.gdx.graphics.g3d.decals.DecalBatch this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.decals.DecalBatch,int) -> <init>
    com.badlogic.gdx.utils.Array newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial -> com.badlogic.gdx.graphics.g3d.decals.DecalMaterial:
    int NO_BLEND -> NO_BLEND
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> textureRegion
    int srcBlendFactor -> srcBlendFactor
    int dstBlendFactor -> dstBlendFactor
    void <init>() -> <init>
    void set() -> set
    boolean isOpaque() -> isOpaque
    int getSrcBlendFactor() -> getSrcBlendFactor
    int getDstBlendFactor() -> getDstBlendFactor
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.graphics.g3d.decals.GroupPlug -> com.badlogic.gdx.graphics.g3d.decals.GroupPlug:
    void beforeGroup(com.badlogic.gdx.utils.Array) -> beforeGroup
    void afterGroup() -> afterGroup
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy -> com.badlogic.gdx.graphics.g3d.decals.GroupStrategy:
    com.badlogic.gdx.graphics.glutils.ShaderProgram getGroupShader(int) -> getGroupShader
    int decideGroup(com.badlogic.gdx.graphics.g3d.decals.Decal) -> decideGroup
    void beforeGroup(int,com.badlogic.gdx.utils.Array) -> beforeGroup
    void afterGroup(int) -> afterGroup
    void beforeGroups() -> beforeGroups
    void afterGroups() -> afterGroups
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy -> com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy:
    com.badlogic.gdx.utils.IntMap plugs -> plugs
    void <init>() -> <init>
    void beforeGroup(int,com.badlogic.gdx.utils.Array) -> beforeGroup
    void afterGroup(int) -> afterGroup
    void plugIn(com.badlogic.gdx.graphics.g3d.decals.GroupPlug,int) -> plugIn
    com.badlogic.gdx.graphics.g3d.decals.GroupPlug unPlug(int) -> unPlug
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy -> com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy:
    com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator comparator -> comparator
    int GROUP_OPAQUE -> GROUP_OPAQUE
    int GROUP_BLEND -> GROUP_BLEND
    void <init>() -> <init>
    int decideGroup(com.badlogic.gdx.graphics.g3d.decals.Decal) -> decideGroup
    void beforeGroup(int,com.badlogic.gdx.utils.Array) -> beforeGroup
    void afterGroup(int) -> afterGroup
    void beforeGroups() -> beforeGroups
    void afterGroups() -> afterGroups
    com.badlogic.gdx.graphics.glutils.ShaderProgram getGroupShader(int) -> getGroupShader
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator -> com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator:
    com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy) -> <init>
    int compare(com.badlogic.gdx.graphics.g3d.decals.Decal,com.badlogic.gdx.graphics.g3d.decals.Decal) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap -> com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap:
    float[] data -> data
    float clamp(float) -> clamp
    void <init>() -> <init>
    void <init>(float[]) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap) -> <init>
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap set(float[]) -> set
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap set(com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap) -> set
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap set(com.badlogic.gdx.graphics.Color) -> set
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap set(float,float,float) -> set
    com.badlogic.gdx.graphics.Color getColor(com.badlogic.gdx.graphics.Color,int) -> getColor
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap clear() -> clear
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap clamp() -> clamp
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(float,float,float) -> add
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color) -> add
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(float,float,float,float,float,float) -> add
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3) -> add
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(float,float,float,com.badlogic.gdx.math.Vector3) -> add
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color,float,float,float) -> add
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> add
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap add(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float) -> add
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g3d.environment.BaseLight -> com.badlogic.gdx.graphics.g3d.environment.BaseLight:
    com.badlogic.gdx.graphics.Color color -> color
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight -> com.badlogic.gdx.graphics.g3d.environment.DirectionalLight:
    com.badlogic.gdx.math.Vector3 direction -> direction
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(com.badlogic.gdx.graphics.g3d.environment.DirectionalLight) -> set
    com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3) -> set
    com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(float,float,float,com.badlogic.gdx.math.Vector3) -> set
    com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(com.badlogic.gdx.graphics.Color,float,float,float) -> set
    com.badlogic.gdx.graphics.g3d.environment.DirectionalLight set(float,float,float,float,float,float) -> set
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.g3d.environment.DirectionalLight) -> equals
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight -> com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight:
    com.badlogic.gdx.graphics.glutils.FrameBuffer fbo -> fbo
    com.badlogic.gdx.graphics.Camera cam -> cam
    float halfDepth -> halfDepth
    float halfHeight -> halfHeight
    com.badlogic.gdx.math.Vector3 tmpV -> tmpV
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor textureDesc -> textureDesc
    void <init>(int,int,float,float,float,float) -> <init>
    void update(com.badlogic.gdx.graphics.Camera) -> update
    void update(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> update
    void begin(com.badlogic.gdx.graphics.Camera) -> begin
    void begin(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> begin
    void begin() -> begin
    void end() -> end
    com.badlogic.gdx.graphics.glutils.FrameBuffer getFrameBuffer() -> getFrameBuffer
    com.badlogic.gdx.graphics.Camera getCamera() -> getCamera
    com.badlogic.gdx.math.Matrix4 getProjViewTrans() -> getProjViewTrans
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor getDepthMap() -> getDepthMap
    void dispose() -> dispose
com.badlogic.gdx.graphics.g3d.environment.PointLight -> com.badlogic.gdx.graphics.g3d.environment.PointLight:
    com.badlogic.gdx.math.Vector3 position -> position
    float intensity -> intensity
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.environment.PointLight set(com.badlogic.gdx.graphics.g3d.environment.PointLight) -> set
    com.badlogic.gdx.graphics.g3d.environment.PointLight set(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,float) -> set
    com.badlogic.gdx.graphics.g3d.environment.PointLight set(float,float,float,com.badlogic.gdx.math.Vector3,float) -> set
    com.badlogic.gdx.graphics.g3d.environment.PointLight set(com.badlogic.gdx.graphics.Color,float,float,float,float) -> set
    com.badlogic.gdx.graphics.g3d.environment.PointLight set(float,float,float,float,float,float,float) -> set
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.g3d.environment.PointLight) -> equals
com.badlogic.gdx.graphics.g3d.environment.ShadowMap -> com.badlogic.gdx.graphics.g3d.environment.ShadowMap:
    com.badlogic.gdx.math.Matrix4 getProjViewTrans() -> getProjViewTrans
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor getDepthMap() -> getDepthMap
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics -> com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics:
    float[] coeff -> coeff
    float[] data -> data
    float clamp(float) -> clamp
    void <init>() -> <init>
    void <init>(float[]) -> <init>
    com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics set(float[]) -> set
    com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics set(com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap) -> set
    com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics set(com.badlogic.gdx.graphics.Color) -> set
    com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics set(float,float,float) -> set
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.environment.SpotLight -> com.badlogic.gdx.graphics.g3d.environment.SpotLight:
    com.badlogic.gdx.math.Vector3 position -> position
    com.badlogic.gdx.math.Vector3 direction -> direction
    float intensity -> intensity
    float cutoffAngle -> cutoffAngle
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.environment.SpotLight set(com.badlogic.gdx.graphics.g3d.environment.SpotLight) -> set
    com.badlogic.gdx.graphics.g3d.environment.SpotLight set(com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> set
    com.badlogic.gdx.graphics.g3d.environment.SpotLight set(float,float,float,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> set
    com.badlogic.gdx.graphics.g3d.environment.SpotLight set(com.badlogic.gdx.graphics.Color,float,float,float,float,float,float,float,float) -> set
    com.badlogic.gdx.graphics.g3d.environment.SpotLight set(float,float,float,float,float,float,float,float,float,float,float) -> set
    com.badlogic.gdx.graphics.g3d.environment.SpotLight setTarget(com.badlogic.gdx.math.Vector3) -> setTarget
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.g3d.environment.SpotLight) -> equals
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader -> com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader:
    short VERSION_HI -> VERSION_HI
    short VERSION_LO -> VERSION_LO
    com.badlogic.gdx.utils.BaseJsonReader reader -> reader
    com.badlogic.gdx.math.Quaternion tempQ -> tempQ
    void <init>(com.badlogic.gdx.utils.BaseJsonReader) -> <init>
    void <init>(com.badlogic.gdx.utils.BaseJsonReader,com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> loadModelData
    com.badlogic.gdx.graphics.g3d.model.data.ModelData parseModel(com.badlogic.gdx.files.FileHandle) -> parseModel
    void parseMeshes(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> parseMeshes
    int parseType(java.lang.String) -> parseType
    com.badlogic.gdx.graphics.VertexAttribute[] parseAttributes(com.badlogic.gdx.utils.JsonValue) -> parseAttributes
    void parseMaterials(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue,java.lang.String) -> parseMaterials
    int parseTextureUsage(java.lang.String) -> parseTextureUsage
    com.badlogic.gdx.graphics.Color parseColor(com.badlogic.gdx.utils.JsonValue) -> parseColor
    com.badlogic.gdx.math.Vector2 readVector2(com.badlogic.gdx.utils.JsonValue,float,float) -> readVector2
    com.badlogic.gdx.utils.Array parseNodes(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> parseNodes
    com.badlogic.gdx.graphics.g3d.model.data.ModelNode parseNodesRecursively(com.badlogic.gdx.utils.JsonValue) -> parseNodesRecursively
    void parseAnimations(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> parseAnimations
com.badlogic.gdx.graphics.g3d.loader.MtlLoader -> com.badlogic.gdx.graphics.g3d.loader.MtlLoader:
    com.badlogic.gdx.utils.Array materials -> materials
    void <init>() -> <init>
    void load(com.badlogic.gdx.files.FileHandle) -> load
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial getMaterial(java.lang.String) -> getMaterial
com.badlogic.gdx.graphics.g3d.loader.ObjLoader -> com.badlogic.gdx.graphics.g3d.loader.ObjLoader:
    boolean logWarning -> logWarning
    com.badlogic.gdx.utils.FloatArray verts -> verts
    com.badlogic.gdx.utils.FloatArray norms -> norms
    com.badlogic.gdx.utils.FloatArray uvs -> uvs
    com.badlogic.gdx.utils.Array groups -> groups
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.graphics.g3d.Model loadModel(com.badlogic.gdx.files.FileHandle,boolean) -> loadModel
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters) -> loadModelData
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,boolean) -> loadModelData
    com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group setActiveGroup(java.lang.String) -> setActiveGroup
    int getIndex(java.lang.String,int) -> getIndex
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> loadModelData
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group -> com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group:
    java.lang.String name -> name
    java.lang.String materialName -> materialName
    com.badlogic.gdx.utils.Array faces -> faces
    int numFaces -> numFaces
    boolean hasNorms -> hasNorms
    boolean hasUVs -> hasUVs
    com.badlogic.gdx.graphics.g3d.Material mat -> mat
    com.badlogic.gdx.graphics.g3d.loader.ObjLoader this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.loader.ObjLoader,java.lang.String) -> <init>
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters -> com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters:
    boolean flipV -> flipV
    void <init>() -> <init>
    void <init>(boolean) -> <init>
com.badlogic.gdx.graphics.g3d.model.Animation -> com.badlogic.gdx.graphics.g3d.model.Animation:
    java.lang.String id -> id
    float duration -> duration
    com.badlogic.gdx.utils.Array nodeAnimations -> nodeAnimations
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.MeshPart -> com.badlogic.gdx.graphics.g3d.model.MeshPart:
    java.lang.String id -> id
    int primitiveType -> primitiveType
    int indexOffset -> indexOffset
    int numVertices -> numVertices
    com.badlogic.gdx.graphics.Mesh mesh -> mesh
    void <init>() -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.graphics.Mesh,int,int,int) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.model.MeshPart) -> <init>
    boolean equals(com.badlogic.gdx.graphics.g3d.model.MeshPart) -> equals
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g3d.model.Node -> com.badlogic.gdx.graphics.g3d.model.Node:
    java.lang.String id -> id
    boolean inheritTransform -> inheritTransform
    boolean isAnimated -> isAnimated
    com.badlogic.gdx.math.Vector3 translation -> translation
    com.badlogic.gdx.math.Quaternion rotation -> rotation
    com.badlogic.gdx.math.Vector3 scale -> scale
    com.badlogic.gdx.math.Matrix4 localTransform -> localTransform
    com.badlogic.gdx.math.Matrix4 globalTransform -> globalTransform
    com.badlogic.gdx.utils.Array parts -> parts
    com.badlogic.gdx.graphics.g3d.model.Node parent -> parent
    com.badlogic.gdx.utils.Array children -> children
    void <init>() -> <init>
    com.badlogic.gdx.math.Matrix4 calculateLocalTransform() -> calculateLocalTransform
    com.badlogic.gdx.math.Matrix4 calculateWorldTransform() -> calculateWorldTransform
    void calculateTransforms(boolean) -> calculateTransforms
    void calculateBoneTransforms(boolean) -> calculateBoneTransforms
    com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox) -> calculateBoundingBox
    com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,boolean) -> calculateBoundingBox
    com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox) -> extendBoundingBox
    com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,boolean) -> extendBoundingBox
    void attachTo(com.badlogic.gdx.graphics.g3d.model.Node) -> attachTo
    void detach() -> detach
    boolean hasChildren() -> hasChildren
    int getChildCount() -> getChildCount
    com.badlogic.gdx.graphics.g3d.model.Node getChild(int) -> getChild
    com.badlogic.gdx.graphics.g3d.model.Node getChild(java.lang.String,boolean,boolean) -> getChild
    int addChild(com.badlogic.gdx.graphics.g3d.model.Node) -> addChild
    int addChildren(java.lang.Iterable) -> addChildren
    int insertChild(int,com.badlogic.gdx.graphics.g3d.model.Node) -> insertChild
    int insertChildren(int,java.lang.Iterable) -> insertChildren
    boolean removeChild(com.badlogic.gdx.graphics.g3d.model.Node) -> removeChild
    java.lang.Iterable getChildren() -> getChildren
    com.badlogic.gdx.graphics.g3d.model.Node getParent() -> getParent
    boolean hasParent() -> hasParent
    com.badlogic.gdx.graphics.g3d.model.Node getNode(com.badlogic.gdx.utils.Array,java.lang.String,boolean,boolean) -> getNode
com.badlogic.gdx.graphics.g3d.model.NodeAnimation -> com.badlogic.gdx.graphics.g3d.model.NodeAnimation:
    com.badlogic.gdx.graphics.g3d.model.Node node -> node
    com.badlogic.gdx.utils.Array translation -> translation
    com.badlogic.gdx.utils.Array rotation -> rotation
    com.badlogic.gdx.utils.Array scaling -> scaling
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe -> com.badlogic.gdx.graphics.g3d.model.NodeKeyframe:
    float keytime -> keytime
    java.lang.Object value -> value
    void <init>(float,java.lang.Object) -> <init>
com.badlogic.gdx.graphics.g3d.model.NodePart -> com.badlogic.gdx.graphics.g3d.model.NodePart:
    com.badlogic.gdx.graphics.g3d.model.MeshPart meshPart -> meshPart
    com.badlogic.gdx.graphics.g3d.Material material -> material
    com.badlogic.gdx.utils.ArrayMap invBoneBindTransforms -> invBoneBindTransforms
    com.badlogic.gdx.math.Matrix4[] bones -> bones
    boolean enabled -> enabled
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.model.MeshPart,com.badlogic.gdx.graphics.g3d.Material) -> <init>
    com.badlogic.gdx.graphics.g3d.Renderable setRenderable(com.badlogic.gdx.graphics.g3d.Renderable) -> setRenderable
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation -> com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation:
    java.lang.String id -> id
    com.badlogic.gdx.utils.Array nodeAnimations -> nodeAnimations
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.data.ModelData -> com.badlogic.gdx.graphics.g3d.model.data.ModelData:
    java.lang.String id -> id
    short[] version -> version
    com.badlogic.gdx.utils.Array meshes -> meshes
    com.badlogic.gdx.utils.Array materials -> materials
    com.badlogic.gdx.utils.Array nodes -> nodes
    com.badlogic.gdx.utils.Array animations -> animations
    void <init>() -> <init>
    void addMesh(com.badlogic.gdx.graphics.g3d.model.data.ModelMesh) -> addMesh
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial -> com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial:
    java.lang.String id -> id
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType type -> type
    com.badlogic.gdx.graphics.Color ambient -> ambient
    com.badlogic.gdx.graphics.Color diffuse -> diffuse
    com.badlogic.gdx.graphics.Color specular -> specular
    com.badlogic.gdx.graphics.Color emissive -> emissive
    com.badlogic.gdx.graphics.Color reflection -> reflection
    float shininess -> shininess
    float opacity -> opacity
    com.badlogic.gdx.utils.Array textures -> textures
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType -> com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType:
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType Lambert -> Lambert
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType Phong -> Phong
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType[] values() -> values
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh -> com.badlogic.gdx.graphics.g3d.model.data.ModelMesh:
    java.lang.String id -> id
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> attributes
    float[] vertices -> vertices
    com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart[] parts -> parts
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart -> com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart:
    java.lang.String id -> id
    short[] indices -> indices
    int primitiveType -> primitiveType
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.data.ModelNode -> com.badlogic.gdx.graphics.g3d.model.data.ModelNode:
    java.lang.String id -> id
    int boneId -> boneId
    com.badlogic.gdx.math.Vector3 translation -> translation
    com.badlogic.gdx.math.Quaternion rotation -> rotation
    com.badlogic.gdx.math.Vector3 scale -> scale
    java.lang.String meshId -> meshId
    com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart[] parts -> parts
    com.badlogic.gdx.graphics.g3d.model.data.ModelNode[] children -> children
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation -> com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation:
    java.lang.String nodeId -> nodeId
    com.badlogic.gdx.utils.Array translation -> translation
    com.badlogic.gdx.utils.Array rotation -> rotation
    com.badlogic.gdx.utils.Array scaling -> scaling
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe -> com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe:
    float keytime -> keytime
    java.lang.Object value -> value
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart -> com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart:
    java.lang.String materialId -> materialId
    java.lang.String meshPartId -> meshPartId
    com.badlogic.gdx.utils.ArrayMap bones -> bones
    int[][] uvMapping -> uvMapping
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture -> com.badlogic.gdx.graphics.g3d.model.data.ModelTexture:
    int USAGE_UNKNOWN -> USAGE_UNKNOWN
    int USAGE_NONE -> USAGE_NONE
    int USAGE_DIFFUSE -> USAGE_DIFFUSE
    int USAGE_EMISSIVE -> USAGE_EMISSIVE
    int USAGE_AMBIENT -> USAGE_AMBIENT
    int USAGE_SPECULAR -> USAGE_SPECULAR
    int USAGE_SHININESS -> USAGE_SHININESS
    int USAGE_NORMAL -> USAGE_NORMAL
    int USAGE_BUMP -> USAGE_BUMP
    int USAGE_TRANSPARENCY -> USAGE_TRANSPARENCY
    int USAGE_REFLECTION -> USAGE_REFLECTION
    java.lang.String id -> id
    java.lang.String fileName -> fileName
    com.badlogic.gdx.math.Vector2 uvTranslation -> uvTranslation
    com.badlogic.gdx.math.Vector2 uvScaling -> uvScaling
    int usage -> usage
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.particles.ParallelArray -> com.badlogic.gdx.graphics.g3d.particles.ParallelArray:
    com.badlogic.gdx.utils.Array arrays -> arrays
    int capacity -> capacity
    int size -> size
    void <init>(int) -> <init>
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel addChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor) -> addChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel addChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor,com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelInitializer) -> addChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel allocateChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor) -> allocateChannel
    void removeArray(int) -> removeArray
    int findIndex(int) -> findIndex
    void addElement(java.lang.Object[]) -> addElement
    void removeElement(int) -> removeElement
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel getChannel(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor) -> getChannel
    void clear() -> clear
    void setCapacity(int) -> setCapacity
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel -> com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel:
    int id -> id
    java.lang.Object data -> data
    int strideSize -> strideSize
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParallelArray,int,java.lang.Object,int) -> <init>
    void add(int,java.lang.Object[]) -> add
    void swap(int,int) -> swap
    void setCapacity(int) -> setCapacity
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor -> com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor:
    int id -> id
    java.lang.Class type -> type
    int count -> count
    void <init>(int,java.lang.Class,int) -> <init>
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelInitializer -> com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelInitializer:
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel) -> init
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel -> com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel:
    float[] data -> data
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParallelArray,int,int,int) -> <init>
    void add(int,java.lang.Object[]) -> add
    void swap(int,int) -> swap
    void setCapacity(int) -> setCapacity
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel -> com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel:
    int[] data -> data
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParallelArray,int,int,int) -> <init>
    void add(int,java.lang.Object[]) -> add
    void swap(int,int) -> swap
    void setCapacity(int) -> setCapacity
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel -> com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel:
    java.lang.Class componentType -> componentType
    java.lang.Object[] data -> data
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParallelArray,int,int,int,java.lang.Class) -> <init>
    void add(int,java.lang.Object[]) -> add
    void swap(int,int) -> swap
    void setCapacity(int) -> setCapacity
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels -> com.badlogic.gdx.graphics.g3d.particles.ParticleChannels:
    int currentGlobalId -> currentGlobalId
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Life -> Life
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Position -> Position
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor PreviousPosition -> PreviousPosition
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Color -> Color
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor TextureRegion -> TextureRegion
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Rotation2D -> Rotation2D
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Rotation3D -> Rotation3D
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Scale -> Scale
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor ModelInstance -> ModelInstance
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor ParticleController -> ParticleController
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Acceleration -> Acceleration
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor AngularVelocity2D -> AngularVelocity2D
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor AngularVelocity3D -> AngularVelocity3D
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Interpolation -> Interpolation
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Interpolation4 -> Interpolation4
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor Interpolation6 -> Interpolation6
    int CurrentLifeOffset -> CurrentLifeOffset
    int TotalLifeOffset -> TotalLifeOffset
    int LifePercentOffset -> LifePercentOffset
    int RedOffset -> RedOffset
    int GreenOffset -> GreenOffset
    int BlueOffset -> BlueOffset
    int AlphaOffset -> AlphaOffset
    int InterpolationStartOffset -> InterpolationStartOffset
    int InterpolationDiffOffset -> InterpolationDiffOffset
    int VelocityStrengthStartOffset -> VelocityStrengthStartOffset
    int VelocityStrengthDiffOffset -> VelocityStrengthDiffOffset
    int VelocityThetaStartOffset -> VelocityThetaStartOffset
    int VelocityThetaDiffOffset -> VelocityThetaDiffOffset
    int VelocityPhiStartOffset -> VelocityPhiStartOffset
    int VelocityPhiDiffOffset -> VelocityPhiDiffOffset
    int XOffset -> XOffset
    int YOffset -> YOffset
    int ZOffset -> ZOffset
    int WOffset -> WOffset
    int UOffset -> UOffset
    int VOffset -> VOffset
    int U2Offset -> U2Offset
    int V2Offset -> V2Offset
    int HalfWidthOffset -> HalfWidthOffset
    int HalfHeightOffset -> HalfHeightOffset
    int CosineOffset -> CosineOffset
    int SineOffset -> SineOffset
    int currentId -> currentId
    int newGlobalId() -> newGlobalId
    void <init>() -> <init>
    int newId() -> newId
    void resetIds() -> resetIds
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer -> com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer:
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer instance -> instance
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer get() -> get
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel) -> init
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel) -> init
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer -> com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer:
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer instance -> instance
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer get() -> get
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel) -> init
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel) -> init
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer -> com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer:
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer instance -> instance
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer get() -> get
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel) -> init
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel) -> init
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer -> com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer:
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer instance -> instance
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer get() -> get
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel) -> init
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel) -> init
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer -> com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer:
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer instance -> instance
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer get() -> get
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel) -> init
    void init(com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel) -> init
com.badlogic.gdx.graphics.g3d.particles.ParticleController -> com.badlogic.gdx.graphics.g3d.particles.ParticleController:
    float DEFAULT_TIME_STEP -> DEFAULT_TIME_STEP
    java.lang.String name -> name
    com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter emitter -> emitter
    com.badlogic.gdx.utils.Array influencers -> influencers
    com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer renderer -> renderer
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray particles -> particles
    com.badlogic.gdx.graphics.g3d.particles.ParticleChannels particleChannels -> particleChannels
    com.badlogic.gdx.math.Matrix4 transform -> transform
    com.badlogic.gdx.math.Vector3 scale -> scale
    com.badlogic.gdx.math.collision.BoundingBox boundingBox -> boundingBox
    float deltaTime -> deltaTime
    float deltaTimeSqr -> deltaTimeSqr
    void <init>() -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter,com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer,com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer[]) -> <init>
    void setTimeStep(float) -> setTimeStep
    void setTransform(com.badlogic.gdx.math.Matrix4) -> setTransform
    void setTransform(float,float,float,float,float,float,float,float) -> setTransform
    void rotate(com.badlogic.gdx.math.Quaternion) -> rotate
    void rotate(com.badlogic.gdx.math.Vector3,float) -> rotate
    void translate(com.badlogic.gdx.math.Vector3) -> translate
    void setTranslation(com.badlogic.gdx.math.Vector3) -> setTranslation
    void scale(float,float,float) -> scale
    void scale(com.badlogic.gdx.math.Vector3) -> scale
    void mul(com.badlogic.gdx.math.Matrix4) -> mul
    void getTransform(com.badlogic.gdx.math.Matrix4) -> getTransform
    void init() -> init
    void allocateChannels(int) -> allocateChannels
    void bind() -> bind
    void start() -> start
    void reset() -> reset
    void end() -> end
    void activateParticles(int,int) -> activateParticles
    void killParticles(int,int) -> killParticles
    void update() -> update
    void draw() -> draw
    com.badlogic.gdx.graphics.g3d.particles.ParticleController copy() -> copy
    void dispose() -> dispose
    com.badlogic.gdx.math.collision.BoundingBox getBoundingBox() -> getBoundingBox
    void calculateBoundingBox() -> calculateBoundingBox
    int findIndex(java.lang.Class) -> findIndex
    com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer findInfluencer(java.lang.Class) -> findInfluencer
    void removeInfluencer(java.lang.Class) -> removeInfluencer
    boolean replaceInfluencer(java.lang.Class,com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer) -> replaceInfluencer
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent -> com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent:
    com.badlogic.gdx.math.Vector3 TMP_V1 -> TMP_V1
    com.badlogic.gdx.math.Vector3 TMP_V2 -> TMP_V2
    com.badlogic.gdx.math.Vector3 TMP_V3 -> TMP_V3
    com.badlogic.gdx.math.Vector3 TMP_V4 -> TMP_V4
    com.badlogic.gdx.math.Vector3 TMP_V5 -> TMP_V5
    com.badlogic.gdx.math.Vector3 TMP_V6 -> TMP_V6
    com.badlogic.gdx.math.Quaternion TMP_Q -> TMP_Q
    com.badlogic.gdx.math.Quaternion TMP_Q2 -> TMP_Q2
    com.badlogic.gdx.math.Matrix3 TMP_M3 -> TMP_M3
    com.badlogic.gdx.math.Matrix4 TMP_M4 -> TMP_M4
    com.badlogic.gdx.graphics.g3d.particles.ParticleController controller -> controller
    void <init>() -> <init>
    void activateParticles(int,int) -> activateParticles
    void killParticles(int,int) -> killParticles
    void update() -> update
    void init() -> init
    void start() -> start
    void end() -> end
    void dispose() -> dispose
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
    void allocateChannels() -> allocateChannels
    void set(com.badlogic.gdx.graphics.g3d.particles.ParticleController) -> set
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect -> com.badlogic.gdx.graphics.g3d.particles.ParticleEffect:
    com.badlogic.gdx.utils.Array controllers -> controllers
    com.badlogic.gdx.math.collision.BoundingBox bounds -> bounds
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParticleEffect) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParticleController[]) -> <init>
    void init() -> init
    void start() -> start
    void end() -> end
    void reset() -> reset
    void update() -> update
    void draw() -> draw
    void setTransform(com.badlogic.gdx.math.Matrix4) -> setTransform
    void rotate(com.badlogic.gdx.math.Quaternion) -> rotate
    void rotate(com.badlogic.gdx.math.Vector3,float) -> rotate
    void translate(com.badlogic.gdx.math.Vector3) -> translate
    void scale(float,float,float) -> scale
    void scale(com.badlogic.gdx.math.Vector3) -> scale
    com.badlogic.gdx.utils.Array getControllers() -> getControllers
    com.badlogic.gdx.graphics.g3d.particles.ParticleController findController(java.lang.String) -> findController
    void dispose() -> dispose
    com.badlogic.gdx.math.collision.BoundingBox getBoundingBox() -> getBoundingBox
    void setBatch(com.badlogic.gdx.utils.Array) -> setBatch
    com.badlogic.gdx.graphics.g3d.particles.ParticleEffect copy() -> copy
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader -> com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader:
    com.badlogic.gdx.utils.Array items -> items
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter) -> getDependencies
    void save(com.badlogic.gdx.graphics.g3d.particles.ParticleEffect,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter) -> save
    com.badlogic.gdx.graphics.g3d.particles.ParticleEffect loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter) -> loadSync
    java.lang.Object find(com.badlogic.gdx.utils.Array,java.lang.Class) -> find
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter -> com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter:
    com.badlogic.gdx.utils.Array batches -> batches
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter -> com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter:
    com.badlogic.gdx.utils.Array batches -> batches
    com.badlogic.gdx.files.FileHandle file -> file
    com.badlogic.gdx.assets.AssetManager manager -> manager
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.utils.Array) -> <init>
com.badlogic.gdx.graphics.g3d.particles.ParticleShader -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader:
    java.lang.String defaultVertexShader -> defaultVertexShader
    java.lang.String defaultFragmentShader -> defaultFragmentShader
    long implementedFlags -> implementedFlags
    com.badlogic.gdx.math.Vector3 TMP_VECTOR3 -> TMP_VECTOR3
    com.badlogic.gdx.graphics.g3d.Renderable renderable -> renderable
    long materialMask -> materialMask
    long vertexMask -> vertexMask
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config config -> config
    long optionalAttributes -> optionalAttributes
    com.badlogic.gdx.graphics.g3d.Material currentMaterial -> currentMaterial
    java.lang.String getDefaultVertexShader() -> getDefaultVertexShader
    java.lang.String getDefaultFragmentShader() -> getDefaultFragmentShader
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    void init() -> init
    java.lang.String createPrefix(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config) -> createPrefix
    boolean canRender(com.badlogic.gdx.graphics.g3d.Renderable) -> canRender
    int compareTo(com.badlogic.gdx.graphics.g3d.Shader) -> compareTo
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.g3d.particles.ParticleShader) -> equals
    void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext) -> begin
    void render(com.badlogic.gdx.graphics.g3d.Renderable) -> render
    void end() -> end
    void bindMaterial(com.badlogic.gdx.graphics.g3d.Renderable) -> bindMaterial
    void dispose() -> dispose
    int getDefaultCullFace() -> getDefaultCullFace
    void setDefaultCullFace(int) -> setDefaultCullFace
    int getDefaultDepthFunc() -> getDefaultDepthFunc
    void setDefaultDepthFunc(int) -> setDefaultDepthFunc
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode:
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode Screen -> Screen
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode ViewPoint -> ViewPoint
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode[] values() -> values
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config:
    java.lang.String vertexShader -> vertexShader
    java.lang.String fragmentShader -> fragmentShader
    boolean ignoreUnimplemented -> ignoreUnimplemented
    int defaultCullFace -> defaultCullFace
    int defaultDepthFunc -> defaultDepthFunc
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode align -> align
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType type -> type
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs:
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraRight -> cameraRight
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraInvDirection -> cameraInvDirection
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform screenWidth -> screenWidth
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform regionSize -> regionSize
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType:
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType Billboard -> Billboard
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType Point -> Point
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType[] values() -> values
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters:
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraRight -> cameraRight
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraUp -> cameraUp
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraInvDirection -> cameraInvDirection
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraPosition -> cameraPosition
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter screenWidth -> screenWidth
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter worldViewTrans -> worldViewTrans
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$1 -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$1:
    void <init>() -> <init>
    boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int) -> isGlobal
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$2 -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$2:
    void <init>() -> <init>
    boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int) -> isGlobal
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$3 -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$3:
    void <init>() -> <init>
    boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int) -> isGlobal
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$4 -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$4:
    void <init>() -> <init>
    boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int) -> isGlobal
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$5 -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$5:
    void <init>() -> <init>
    boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int) -> isGlobal
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6 -> com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6:
    com.badlogic.gdx.math.Matrix4 temp -> temp
    void <init>() -> <init>
    boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int) -> isGlobal
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter -> com.badlogic.gdx.graphics.g3d.particles.ParticleSorter:
    com.badlogic.gdx.math.Vector3 TMP_V1 -> TMP_V1
    com.badlogic.gdx.graphics.Camera camera -> camera
    void <init>() -> <init>
    int[] sort(com.badlogic.gdx.utils.Array) -> sort
    void setCamera(com.badlogic.gdx.graphics.Camera) -> setCamera
    void ensureCapacity(int) -> ensureCapacity
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance -> com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance:
    float[] distances -> distances
    int[] particleIndices -> particleIndices
    int[] particleOffsets -> particleOffsets
    int currentSize -> currentSize
    void <init>() -> <init>
    void ensureCapacity(int) -> ensureCapacity
    int[] sort(com.badlogic.gdx.utils.Array) -> sort
    void qsort(int,int) -> qsort
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None -> com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None:
    int currentCapacity -> currentCapacity
    int[] indices -> indices
    void <init>() -> <init>
    void ensureCapacity(int) -> ensureCapacity
    int[] sort(com.badlogic.gdx.utils.Array) -> sort
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem -> com.badlogic.gdx.graphics.g3d.particles.ParticleSystem:
    com.badlogic.gdx.graphics.g3d.particles.ParticleSystem instance -> instance
    com.badlogic.gdx.utils.Array batches -> batches
    com.badlogic.gdx.utils.Array effects -> effects
    com.badlogic.gdx.graphics.g3d.particles.ParticleSystem get() -> get
    void <init>() -> <init>
    void add(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch) -> add
    void add(com.badlogic.gdx.graphics.g3d.particles.ParticleEffect) -> add
    void remove(com.badlogic.gdx.graphics.g3d.particles.ParticleEffect) -> remove
    void removeAll() -> removeAll
    void update() -> update
    void updateAndDraw() -> updateAndDraw
    void begin() -> begin
    void draw() -> draw
    void end() -> end
    void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool) -> getRenderables
    com.badlogic.gdx.utils.Array getBatches() -> getBatches
com.badlogic.gdx.graphics.g3d.particles.ResourceData -> com.badlogic.gdx.graphics.g3d.particles.ResourceData:
    com.badlogic.gdx.utils.ObjectMap uniqueData -> uniqueData
    com.badlogic.gdx.utils.Array data -> data
    com.badlogic.gdx.utils.Array sharedAssets -> sharedAssets
    int currentLoadIndex -> currentLoadIndex
    java.lang.Object resource -> resource
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    int getAssetData(java.lang.String,java.lang.Class) -> getAssetData
    com.badlogic.gdx.utils.Array getAssetDescriptors() -> getAssetDescriptors
    com.badlogic.gdx.utils.Array getAssets() -> getAssets
    com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData createSaveData() -> createSaveData
    com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData createSaveData(java.lang.String) -> createSaveData
    com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData getSaveData() -> getSaveData
    com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData getSaveData(java.lang.String) -> getSaveData
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData -> com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData:
    java.lang.String filename -> filename
    java.lang.Class type -> type
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.Class) -> <init>
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.ResourceData$Configurable -> com.badlogic.gdx.graphics.g3d.particles.ResourceData$Configurable:
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData -> com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData:
    com.badlogic.gdx.utils.ObjectMap data -> data
    com.badlogic.gdx.utils.IntArray assets -> assets
    int loadIndex -> loadIndex
    com.badlogic.gdx.graphics.g3d.particles.ResourceData resources -> resources
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> <init>
    void saveAsset(java.lang.String,java.lang.Class) -> saveAsset
    void save(java.lang.String,java.lang.Object) -> save
    com.badlogic.gdx.assets.AssetDescriptor loadAsset() -> loadAsset
    java.lang.Object load(java.lang.String) -> load
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch -> com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch:
    com.badlogic.gdx.math.Vector3 TMP_V1 -> TMP_V1
    com.badlogic.gdx.math.Vector3 TMP_V2 -> TMP_V2
    com.badlogic.gdx.math.Vector3 TMP_V3 -> TMP_V3
    com.badlogic.gdx.math.Vector3 TMP_V4 -> TMP_V4
    com.badlogic.gdx.math.Vector3 TMP_V5 -> TMP_V5
    com.badlogic.gdx.math.Vector3 TMP_V6 -> TMP_V6
    com.badlogic.gdx.math.Matrix3 TMP_M3 -> TMP_M3
    int sizeAndRotationUsage -> sizeAndRotationUsage
    int directionUsage -> directionUsage
    com.badlogic.gdx.graphics.VertexAttributes GPU_ATTRIBUTES -> GPU_ATTRIBUTES
    com.badlogic.gdx.graphics.VertexAttributes CPU_ATTRIBUTES -> CPU_ATTRIBUTES
    int GPU_POSITION_OFFSET -> GPU_POSITION_OFFSET
    int GPU_UV_OFFSET -> GPU_UV_OFFSET
    int GPU_SIZE_ROTATION_OFFSET -> GPU_SIZE_ROTATION_OFFSET
    int GPU_COLOR_OFFSET -> GPU_COLOR_OFFSET
    int GPU_VERTEX_SIZE -> GPU_VERTEX_SIZE
    int CPU_POSITION_OFFSET -> CPU_POSITION_OFFSET
    int CPU_UV_OFFSET -> CPU_UV_OFFSET
    int CPU_COLOR_OFFSET -> CPU_COLOR_OFFSET
    int CPU_VERTEX_SIZE -> CPU_VERTEX_SIZE
    int MAX_PARTICLES_PER_MESH -> MAX_PARTICLES_PER_MESH
    int MAX_VERTICES_PER_MESH -> MAX_VERTICES_PER_MESH
    com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool renderablePool -> renderablePool
    com.badlogic.gdx.utils.Array renderables -> renderables
    float[] vertices -> vertices
    short[] indices -> indices
    int currentVertexSize -> currentVertexSize
    com.badlogic.gdx.graphics.VertexAttributes currentAttributes -> currentAttributes
    boolean useGPU -> useGPU
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode mode -> mode
    com.badlogic.gdx.graphics.Texture texture -> texture
    com.badlogic.gdx.graphics.g3d.Shader shader -> shader
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode,boolean,int) -> <init>
    void <init>() -> <init>
    void <init>(int) -> <init>
    void allocParticlesData(int) -> allocParticlesData
    com.badlogic.gdx.graphics.g3d.Renderable allocRenderable() -> allocRenderable
    void allocIndices() -> allocIndices
    void allocRenderables(int) -> allocRenderables
    com.badlogic.gdx.graphics.g3d.Shader getShader(com.badlogic.gdx.graphics.g3d.Renderable) -> getShader
    void allocShader() -> allocShader
    void clearRenderablesPool() -> clearRenderablesPool
    void setVertexData() -> setVertexData
    void initRenderData() -> initRenderData
    void setAlignMode(com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode) -> setAlignMode
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode getAlignMode() -> getAlignMode
    void setUseGpu(boolean) -> setUseGpu
    boolean isUseGPU() -> isUseGPU
    void setTexture(com.badlogic.gdx.graphics.Texture) -> setTexture
    com.badlogic.gdx.graphics.Texture getTexture() -> getTexture
    void begin() -> begin
    void putVertex(float[],int,float,float,float,float,float,float,float,float,float,float,float,float,float) -> putVertex
    void putVertex(float[],int,com.badlogic.gdx.math.Vector3,float,float,float,float,float,float) -> putVertex
    void fillVerticesGPU(int[]) -> fillVerticesGPU
    void fillVerticesToViewPointCPU(int[]) -> fillVerticesToViewPointCPU
    void fillVerticesToScreenCPU(int[]) -> fillVerticesToScreenCPU
    void flush(int[]) -> flush
    void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool) -> getRenderables
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config -> com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config:
    boolean useGPU -> useGPU
    com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode mode -> mode
    void <init>() -> <init>
    void <init>(boolean,com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode) -> <init>
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool -> com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool:
    com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch) -> <init>
    com.badlogic.gdx.graphics.g3d.Renderable newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch -> com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch:
    com.badlogic.gdx.utils.Array renderData -> renderData
    int bufferedParticlesCount -> bufferedParticlesCount
    int currentCapacity -> currentCapacity
    com.badlogic.gdx.graphics.g3d.particles.ParticleSorter sorter -> sorter
    com.badlogic.gdx.graphics.Camera camera -> camera
    void <init>(java.lang.Class) -> <init>
    void begin() -> begin
    void draw(com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData) -> draw
    void end() -> end
    void ensureCapacity(int) -> ensureCapacity
    void resetCapacity() -> resetCapacity
    void allocParticlesData(int) -> allocParticlesData
    void setCamera(com.badlogic.gdx.graphics.Camera) -> setCamera
    com.badlogic.gdx.graphics.g3d.particles.ParticleSorter getSorter() -> getSorter
    void setSorter(com.badlogic.gdx.graphics.g3d.particles.ParticleSorter) -> setSorter
    void flush(int[]) -> flush
    int getBufferedCount() -> getBufferedCount
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch -> com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch:
    com.badlogic.gdx.utils.Array controllersRenderData -> controllersRenderData
    int bufferedParticlesCount -> bufferedParticlesCount
    void <init>() -> <init>
    void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool) -> getRenderables
    int getBufferedCount() -> getBufferedCount
    void begin() -> begin
    void end() -> end
    void draw(com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData) -> draw
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
    void draw(com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData) -> draw
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch -> com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch:
    void begin() -> begin
    void draw(com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData) -> draw
    void end() -> end
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch -> com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch:
    boolean pointSpritesEnabled -> pointSpritesEnabled
    com.badlogic.gdx.math.Vector3 TMP_V1 -> TMP_V1
    int sizeAndRotationUsage -> sizeAndRotationUsage
    com.badlogic.gdx.graphics.VertexAttributes CPU_ATTRIBUTES -> CPU_ATTRIBUTES
    int CPU_VERTEX_SIZE -> CPU_VERTEX_SIZE
    int CPU_POSITION_OFFSET -> CPU_POSITION_OFFSET
    int CPU_COLOR_OFFSET -> CPU_COLOR_OFFSET
    int CPU_REGION_OFFSET -> CPU_REGION_OFFSET
    int CPU_SIZE_AND_ROTATION_OFFSET -> CPU_SIZE_AND_ROTATION_OFFSET
    float[] vertices -> vertices
    com.badlogic.gdx.graphics.g3d.Renderable renderable -> renderable
    void enablePointSprites() -> enablePointSprites
    void <init>() -> <init>
    void <init>(int) -> <init>
    void allocParticlesData(int) -> allocParticlesData
    void allocRenderable() -> allocRenderable
    void setTexture(com.badlogic.gdx.graphics.Texture) -> setTexture
    com.badlogic.gdx.graphics.Texture getTexture() -> getTexture
    void flush(int[]) -> flush
    void getRenderables(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Pool) -> getRenderables
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter -> com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter:
    int minParticleCount -> minParticleCount
    int maxParticleCount -> maxParticleCount
    float percent -> percent
    void <init>(com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter) -> <init>
    void <init>() -> <init>
    void init() -> init
    void end() -> end
    int getMinParticleCount() -> getMinParticleCount
    void setMinParticleCount(int) -> setMinParticleCount
    int getMaxParticleCount() -> getMaxParticleCount
    void setMaxParticleCount(int) -> setMaxParticleCount
    void setParticleCount(int,int) -> setParticleCount
    void set(com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter) -> set
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter -> com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter:
    com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue delayValue -> delayValue
    com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue durationValue -> durationValue
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue lifeOffsetValue -> lifeOffsetValue
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue lifeValue -> lifeValue
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue emissionValue -> emissionValue
    int emission -> emission
    int emissionDiff -> emissionDiff
    int emissionDelta -> emissionDelta
    int lifeOffset -> lifeOffset
    int lifeOffsetDiff -> lifeOffsetDiff
    int life -> life
    int lifeDiff -> lifeDiff
    float duration -> duration
    float delay -> delay
    float durationTimer -> durationTimer
    float delayTimer -> delayTimer
    boolean continuous -> continuous
    com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode emissionMode -> emissionMode
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel -> lifeChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter) -> <init>
    void allocateChannels() -> allocateChannels
    void start() -> start
    void init() -> init
    void activateParticles(int,int) -> activateParticles
    void update() -> update
    void addParticles(int) -> addParticles
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getLife() -> getLife
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getEmission() -> getEmission
    com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue getDuration() -> getDuration
    com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue getDelay() -> getDelay
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getLifeOffset() -> getLifeOffset
    boolean isContinuous() -> isContinuous
    void setContinuous(boolean) -> setContinuous
    com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode getEmissionMode() -> getEmissionMode
    void setEmissionMode(com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode) -> setEmissionMode
    boolean isComplete() -> isComplete
    float getPercentComplete() -> getPercentComplete
    void set(com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter) -> set
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode -> com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode:
    com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode Enabled -> Enabled
    com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode EnabledUntilCycleEnd -> EnabledUntilCycleEnd
    com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode Disabled -> Disabled
    com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode[] values() -> values
    com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel -> colorChannel
    void <init>() -> <init>
    void allocateChannels() -> allocateChannels
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random -> com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel -> colorChannel
    void <init>() -> <init>
    void allocateChannels() -> allocateChannels
    void activateParticles(int,int) -> activateParticles
    com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single -> com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel alphaInterpolationChannel -> alphaInterpolationChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel -> lifeChannel
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue alphaValue -> alphaValue
    com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue colorValue -> colorValue
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single) -> <init>
    void set(com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single) -> set
    void allocateChannels() -> allocateChannels
    void activateParticles(int,int) -> activateParticles
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single copy() -> copy
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer:
    com.badlogic.gdx.utils.Array velocities -> velocities
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel accellerationChannel -> accellerationChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel -> positionChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel previousPositionChannel -> previousPositionChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel -> rotationChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel angularVelocityChannel -> angularVelocityChannel
    boolean hasAcceleration -> hasAcceleration
    boolean has2dAngularVelocity -> has2dAngularVelocity
    boolean has3dAngularVelocity -> has3dAngularVelocity
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier[]) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer) -> <init>
    void allocateChannels() -> allocateChannels
    void set(com.badlogic.gdx.graphics.g3d.particles.ParticleController) -> set
    void init() -> init
    void activateParticles(int,int) -> activateParticles
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer copy() -> copy
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier:
    com.badlogic.gdx.math.Vector3 TMP_V1 -> TMP_V1
    com.badlogic.gdx.math.Vector3 TMP_V2 -> TMP_V2
    com.badlogic.gdx.math.Vector3 TMP_V3 -> TMP_V3
    com.badlogic.gdx.math.Quaternion TMP_Q -> TMP_Q
    boolean isGlobal -> isGlobal
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel -> lifeChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier) -> <init>
    void allocateChannels() -> allocateChannels
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel angularChannel -> angularChannel
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue thetaValue -> thetaValue
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue phiValue -> phiValue
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular) -> <init>
    void allocateChannels() -> allocateChannels
    void activateParticles(int,int) -> activateParticles
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel accelerationChannel -> accelerationChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration) -> <init>
    void allocateChannels() -> allocateChannels
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel accelerationChannel -> accelerationChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel -> positionChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration) -> <init>
    void allocateChannels() -> allocateChannels
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel -> rotationChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel accellerationChannel -> accellerationChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection) -> <init>
    void allocateChannels() -> allocateChannels
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel directionalVelocityChannel -> directionalVelocityChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration) -> <init>
    void allocateChannels() -> allocateChannels
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationalVelocity2dChannel -> rotationalVelocity2dChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D) -> <init>
    void allocateChannels() -> allocateChannels
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel -> rotationChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationalForceChannel -> rotationalForceChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D) -> <init>
    void allocateChannels() -> allocateChannels
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel strengthChannel -> strengthChannel
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue strengthValue -> strengthValue
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength) -> <init>
    void allocateChannels() -> allocateChannels
    void activateParticles(int,int) -> activateParticles
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration -> com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel directionalVelocityChannel -> directionalVelocityChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel -> positionChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration) -> <init>
    void allocateChannels() -> allocateChannels
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer:
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer:
    com.badlogic.gdx.utils.Array models -> models
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel modelChannel -> modelChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model[]) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer) -> <init>
    void allocateChannels() -> allocateChannels
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random -> com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random:
    com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool pool -> pool
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model[]) -> <init>
    void init() -> init
    void activateParticles(int,int) -> activateParticles
    void killParticles(int,int) -> killParticles
    com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool -> com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool:
    com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random) -> <init>
    com.badlogic.gdx.graphics.g3d.ModelInstance newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single -> com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single:
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Model[]) -> <init>
    void init() -> init
    com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel -> positionChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel scaleChannel -> scaleChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel -> rotationChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel controllerChannel -> controllerChannel
    boolean hasScale -> hasScale
    boolean hasRotation -> hasRotation
    void <init>() -> <init>
    void init() -> init
    void allocateChannels() -> allocateChannels
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer:
    com.badlogic.gdx.utils.Array templates -> templates
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel particleControllerChannel -> particleControllerChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParticleController[]) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer) -> <init>
    void allocateChannels() -> allocateChannels
    void end() -> end
    void dispose() -> dispose
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random -> com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random:
    com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool pool -> pool
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParticleController[]) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random) -> <init>
    void init() -> init
    void dispose() -> dispose
    void activateParticles(int,int) -> activateParticles
    void killParticles(int,int) -> killParticles
    com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool -> com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool:
    com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random) -> <init>
    com.badlogic.gdx.graphics.g3d.particles.ParticleController newObject() -> newObject
    void clear() -> clear
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single -> com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single:
    void <init>(com.badlogic.gdx.graphics.g3d.particles.ParticleController[]) -> <init>
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single) -> <init>
    void init() -> init
    void activateParticles(int,int) -> activateParticles
    void killParticles(int,int) -> killParticles
    com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer:
    com.badlogic.gdx.utils.Array regions -> regions
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel regionChannel -> regionChannel
    void <init>(int) -> <init>
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer) -> <init>
    void add(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> add
    void clear() -> clear
    void allocateChannels() -> allocateChannels
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated -> com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel -> lifeChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture) -> <init>
    void allocateChannels() -> allocateChannels
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion -> com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion:
    float u -> u
    float v -> v
    float u2 -> u2
    float v2 -> v2
    float halfInvAspectRatio -> halfInvAspectRatio
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void set(com.badlogic.gdx.graphics.g2d.TextureRegion) -> set
    void set(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion) -> set
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random -> com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random:
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture) -> <init>
    void activateParticles(int,int) -> activateParticles
    com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single -> com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single:
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture) -> <init>
    void init() -> init
    com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single copy() -> copy
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer:
    void <init>() -> <init>
    void activateParticles(int,int) -> activateParticles
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer) -> <init>
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer:
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue value -> value
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel valueChannel -> valueChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel interpolationChannel -> interpolationChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel lifeChannel -> lifeChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor valueChannelDescriptor -> valueChannelDescriptor
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer) -> <init>
    void set(com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer) -> set
    void allocateChannels() -> allocateChannels
    void activateParticles(int,int) -> activateParticles
    void update() -> update
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer -> com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer:
    com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue spawnShapeValue -> spawnShapeValue
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel -> positionChannel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer) -> <init>
    void init() -> init
    void allocateChannels() -> allocateChannels
    void start() -> start
    void activateParticles(int,int) -> activateParticles
    com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer copy() -> copy
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData -> com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel regionChannel -> regionChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel -> colorChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel scaleChannel -> scaleChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel -> rotationChannel
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer -> com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer:
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch) -> <init>
    void allocateChannels() -> allocateChannels
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
    boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch) -> isCompatible
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData -> com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel modelInstanceChannel -> modelInstanceChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel -> colorChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel scaleChannel -> scaleChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel -> rotationChannel
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer -> com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer:
    boolean hasColor -> hasColor
    boolean hasScale -> hasScale
    boolean hasRotation -> hasRotation
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch) -> <init>
    void allocateChannels() -> allocateChannels
    void init() -> init
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
    boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch) -> isCompatible
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer -> com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel controllerChannel -> controllerChannel
    void <init>() -> <init>
    void init() -> init
    void update() -> update
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
    boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch) -> isCompatible
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData -> com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData:
    com.badlogic.gdx.graphics.g3d.particles.ParticleController controller -> controller
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel positionChannel -> positionChannel
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer -> com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer:
    com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch batch -> batch
    com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData renderData -> renderData
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData) -> <init>
    void update() -> update
    boolean setBatch(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch) -> setBatch
    boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch) -> isCompatible
    void set(com.badlogic.gdx.graphics.g3d.particles.ParticleController) -> set
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData -> com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData:
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel regionChannel -> regionChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel colorChannel -> colorChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel scaleChannel -> scaleChannel
    com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel rotationChannel -> rotationChannel
    void <init>() -> <init>
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer -> com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer:
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch) -> <init>
    void allocateChannels() -> allocateChannels
    boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch) -> isCompatible
    com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue:
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue) -> <init>
    void <init>() -> <init>
    void spawnAux(com.badlogic.gdx.math.Vector3,float) -> spawnAux
    com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue:
    com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide side -> side
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue) -> <init>
    void <init>() -> <init>
    void spawnAux(com.badlogic.gdx.math.Vector3,float) -> spawnAux
    com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide getSide() -> getSide
    void setSide(com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide) -> setSide
    void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue) -> load
    com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy() -> copy
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue -> com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue:
    float[] temp -> temp
    float[] colors -> colors
    float[] timeline -> timeline
    void <init>() -> <init>
    float[] getTimeline() -> getTimeline
    void setTimeline(float[]) -> setTimeline
    float[] getColors() -> getColors
    void setColors(float[]) -> setColors
    float[] getColor(float) -> getColor
    void getColor(float,float[],int) -> getColor
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
    void load(com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue) -> load
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue:
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue) -> <init>
    void <init>() -> <init>
    void spawnAux(com.badlogic.gdx.math.Vector3,float) -> spawnAux
    com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue:
    com.badlogic.gdx.graphics.Mesh mesh -> mesh
    com.badlogic.gdx.graphics.g3d.Model model -> model
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue) -> <init>
    void <init>() -> <init>
    void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue) -> load
    void setMesh(com.badlogic.gdx.graphics.Mesh,com.badlogic.gdx.graphics.g3d.Model) -> setMesh
    void setMesh(com.badlogic.gdx.graphics.Mesh) -> setMesh
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle -> com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle:
    float x1 -> x1
    float y1 -> y1
    float z1 -> z1
    float x2 -> x2
    float y2 -> y2
    float z2 -> z2
    float x3 -> x3
    float y3 -> y3
    float z3 -> z3
    void <init>(float,float,float,float,float,float,float,float,float) -> <init>
    com.badlogic.gdx.math.Vector3 pick(float,float,float,float,float,float,float,float,float,com.badlogic.gdx.math.Vector3) -> pick
    com.badlogic.gdx.math.Vector3 pick(com.badlogic.gdx.math.Vector3) -> pick
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue -> com.badlogic.gdx.graphics.g3d.particles.values.NumericValue:
    float value -> value
    void <init>() -> <init>
    float getValue() -> getValue
    void setValue(float) -> setValue
    void load(com.badlogic.gdx.graphics.g3d.particles.values.NumericValue) -> load
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue -> com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue:
    boolean active -> active
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue) -> <init>
    boolean isActive() -> isActive
    void setActive(boolean) -> setActive
    void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue) -> load
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue:
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue) -> <init>
    void <init>() -> <init>
    void spawnAux(com.badlogic.gdx.math.Vector3,float) -> spawnAux
    com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue:
    com.badlogic.gdx.math.Vector3 TMP_V1 -> TMP_V1
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue spawnWidthValue -> spawnWidthValue
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue spawnHeightValue -> spawnHeightValue
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue spawnDepthValue -> spawnDepthValue
    float spawnWidth -> spawnWidth
    float spawnWidthDiff -> spawnWidthDiff
    float spawnHeight -> spawnHeight
    float spawnHeightDiff -> spawnHeightDiff
    float spawnDepth -> spawnDepth
    float spawnDepthDiff -> spawnDepthDiff
    boolean edges -> edges
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue) -> <init>
    void setActive(boolean) -> setActive
    boolean isEdges() -> isEdges
    void setEdges(boolean) -> setEdges
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getSpawnWidth() -> getSpawnWidth
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getSpawnHeight() -> getSpawnHeight
    com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue getSpawnDepth() -> getSpawnDepth
    void setDimensions(float,float,float) -> setDimensions
    void start() -> start
    void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue) -> load
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide -> com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide:
    com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide both -> both
    com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide top -> top
    com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide bottom -> bottom
    com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide[] values() -> values
    com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue -> com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue:
    float lowMin -> lowMin
    float lowMax -> lowMax
    void <init>() -> <init>
    float newLowValue() -> newLowValue
    void setLow(float) -> setLow
    void setLow(float,float) -> setLow
    float getLowMin() -> getLowMin
    void setLowMin(float) -> setLowMin
    float getLowMax() -> getLowMax
    void setLowMax(float) -> setLowMax
    void load(com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue) -> load
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue:
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue) -> <init>
    void <init>() -> <init>
    void spawnAux(com.badlogic.gdx.math.Vector3,float) -> spawnAux
    com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue -> com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue:
    float[] scaling -> scaling
    float[] timeline -> timeline
    float highMin -> highMin
    float highMax -> highMax
    boolean relative -> relative
    void <init>() -> <init>
    float newHighValue() -> newHighValue
    void setHigh(float) -> setHigh
    void setHigh(float,float) -> setHigh
    float getHighMin() -> getHighMin
    void setHighMin(float) -> setHighMin
    float getHighMax() -> getHighMax
    void setHighMax(float) -> setHighMax
    float[] getScaling() -> getScaling
    void setScaling(float[]) -> setScaling
    float[] getTimeline() -> getTimeline
    void setTimeline(float[]) -> setTimeline
    boolean isRelative() -> isRelative
    void setRelative(boolean) -> setRelative
    float getScale(float) -> getScale
    void load(com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue) -> load
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue:
    com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue xOffsetValue -> xOffsetValue
    com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue yOffsetValue -> yOffsetValue
    com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue zOffsetValue -> zOffsetValue
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue) -> <init>
    void spawnAux(com.badlogic.gdx.math.Vector3,float) -> spawnAux
    com.badlogic.gdx.math.Vector3 spawn(com.badlogic.gdx.math.Vector3,float) -> spawn
    void init() -> init
    void start() -> start
    void load(com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue) -> load
    com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy() -> copy
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
    void save(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> save
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> load
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue:
    float[] vertices -> vertices
    short[] indices -> indices
    int positionOffset -> positionOffset
    int vertexSize -> vertexSize
    int vertexCount -> vertexCount
    int triangleCount -> triangleCount
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue) -> <init>
    void <init>() -> <init>
    void setMesh(com.badlogic.gdx.graphics.Mesh,com.badlogic.gdx.graphics.g3d.Model) -> setMesh
    void spawnAux(com.badlogic.gdx.math.Vector3,float) -> spawnAux
    com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy() -> copy
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue -> com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue:
    com.badlogic.gdx.math.CumulativeDistribution distribution -> distribution
    void <init>(com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue) -> <init>
    void <init>() -> <init>
    void init() -> init
    void calculateWeights() -> calculateWeights
    void spawnAux(com.badlogic.gdx.math.Vector3,float) -> spawnAux
    com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue copy() -> copy
com.badlogic.gdx.graphics.g3d.shaders.BaseShader -> com.badlogic.gdx.graphics.g3d.shaders.BaseShader:
    com.badlogic.gdx.utils.Array uniforms -> uniforms
    com.badlogic.gdx.utils.Array validators -> validators
    com.badlogic.gdx.utils.Array setters -> setters
    int[] locations -> locations
    com.badlogic.gdx.utils.IntArray globalUniforms -> globalUniforms
    com.badlogic.gdx.utils.IntArray localUniforms -> localUniforms
    com.badlogic.gdx.utils.IntIntMap attributes -> attributes
    com.badlogic.gdx.graphics.glutils.ShaderProgram program -> program
    com.badlogic.gdx.graphics.g3d.utils.RenderContext context -> context
    com.badlogic.gdx.graphics.Camera camera -> camera
    com.badlogic.gdx.graphics.Mesh currentMesh -> currentMesh
    com.badlogic.gdx.utils.IntArray tempArray -> tempArray
    com.badlogic.gdx.graphics.g3d.Attributes combinedAttributes -> combinedAttributes
    void <init>() -> <init>
    int register(java.lang.String,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter) -> register
    int register(java.lang.String,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator) -> register
    int register(java.lang.String,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter) -> register
    int register(java.lang.String) -> register
    int register(com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform,com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter) -> register
    int register(com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform) -> register
    int getUniformID(java.lang.String) -> getUniformID
    java.lang.String getUniformAlias(int) -> getUniformAlias
    void init(com.badlogic.gdx.graphics.glutils.ShaderProgram,com.badlogic.gdx.graphics.g3d.Renderable) -> init
    void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext) -> begin
    int[] getAttributeLocations(com.badlogic.gdx.graphics.VertexAttributes) -> getAttributeLocations
    void render(com.badlogic.gdx.graphics.g3d.Renderable) -> render
    void render(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> render
    void end() -> end
    void dispose() -> dispose
    boolean has(int) -> has
    int loc(int) -> loc
    boolean set(int,com.badlogic.gdx.math.Matrix4) -> set
    boolean set(int,com.badlogic.gdx.math.Matrix3) -> set
    boolean set(int,com.badlogic.gdx.math.Vector3) -> set
    boolean set(int,com.badlogic.gdx.math.Vector2) -> set
    boolean set(int,com.badlogic.gdx.graphics.Color) -> set
    boolean set(int,float) -> set
    boolean set(int,float,float) -> set
    boolean set(int,float,float,float) -> set
    boolean set(int,float,float,float,float) -> set
    boolean set(int,int) -> set
    boolean set(int,int,int) -> set
    boolean set(int,int,int,int) -> set
    boolean set(int,int,int,int,int) -> set
    boolean set(int,com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> set
    boolean set(int,com.badlogic.gdx.graphics.GLTexture) -> set
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$GlobalSetter -> com.badlogic.gdx.graphics.g3d.shaders.BaseShader$GlobalSetter:
    void <init>() -> <init>
    boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int) -> isGlobal
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$LocalSetter -> com.badlogic.gdx.graphics.g3d.shaders.BaseShader$LocalSetter:
    void <init>() -> <init>
    boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int) -> isGlobal
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter -> com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter:
    boolean isGlobal(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int) -> isGlobal
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform -> com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform:
    java.lang.String alias -> alias
    long materialMask -> materialMask
    long environmentMask -> environmentMask
    long overallMask -> overallMask
    void <init>(java.lang.String,long,long,long) -> <init>
    void <init>(java.lang.String,long,long) -> <init>
    void <init>(java.lang.String,long) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean validate(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable) -> validate
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator -> com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator:
    boolean validate(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable) -> validate
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader:
    java.lang.String defaultVertexShader -> defaultVertexShader
    java.lang.String defaultFragmentShader -> defaultFragmentShader
    long implementedFlags -> implementedFlags
    int defaultCullFace -> defaultCullFace
    int defaultDepthFunc -> defaultDepthFunc
    int u_projTrans -> u_projTrans
    int u_viewTrans -> u_viewTrans
    int u_projViewTrans -> u_projViewTrans
    int u_cameraPosition -> u_cameraPosition
    int u_cameraDirection -> u_cameraDirection
    int u_cameraUp -> u_cameraUp
    int u_time -> u_time
    int u_worldTrans -> u_worldTrans
    int u_viewWorldTrans -> u_viewWorldTrans
    int u_projViewWorldTrans -> u_projViewWorldTrans
    int u_normalMatrix -> u_normalMatrix
    int u_bones -> u_bones
    int u_shininess -> u_shininess
    int u_opacity -> u_opacity
    int u_diffuseColor -> u_diffuseColor
    int u_diffuseTexture -> u_diffuseTexture
    int u_diffuseUVTransform -> u_diffuseUVTransform
    int u_specularColor -> u_specularColor
    int u_specularTexture -> u_specularTexture
    int u_specularUVTransform -> u_specularUVTransform
    int u_emissiveColor -> u_emissiveColor
    int u_emissiveTexture -> u_emissiveTexture
    int u_emissiveUVTransform -> u_emissiveUVTransform
    int u_reflectionColor -> u_reflectionColor
    int u_reflectionTexture -> u_reflectionTexture
    int u_reflectionUVTransform -> u_reflectionUVTransform
    int u_normalTexture -> u_normalTexture
    int u_normalUVTransform -> u_normalUVTransform
    int u_ambientTexture -> u_ambientTexture
    int u_ambientUVTransform -> u_ambientUVTransform
    int u_alphaTest -> u_alphaTest
    int u_ambientCubemap -> u_ambientCubemap
    int u_environmentCubemap -> u_environmentCubemap
    int u_dirLights0color -> u_dirLights0color
    int u_dirLights0direction -> u_dirLights0direction
    int u_dirLights1color -> u_dirLights1color
    int u_pointLights0color -> u_pointLights0color
    int u_pointLights0position -> u_pointLights0position
    int u_pointLights0intensity -> u_pointLights0intensity
    int u_pointLights1color -> u_pointLights1color
    int u_fogColor -> u_fogColor
    int u_shadowMapProjViewTrans -> u_shadowMapProjViewTrans
    int u_shadowTexture -> u_shadowTexture
    int u_shadowPCFOffset -> u_shadowPCFOffset
    int dirLightsLoc -> dirLightsLoc
    int dirLightsColorOffset -> dirLightsColorOffset
    int dirLightsDirectionOffset -> dirLightsDirectionOffset
    int dirLightsSize -> dirLightsSize
    int pointLightsLoc -> pointLightsLoc
    int pointLightsColorOffset -> pointLightsColorOffset
    int pointLightsPositionOffset -> pointLightsPositionOffset
    int pointLightsIntensityOffset -> pointLightsIntensityOffset
    int pointLightsSize -> pointLightsSize
    boolean lighting -> lighting
    boolean environmentCubemap -> environmentCubemap
    boolean shadowMap -> shadowMap
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap ambientCubemap -> ambientCubemap
    com.badlogic.gdx.graphics.g3d.environment.DirectionalLight[] directionalLights -> directionalLights
    com.badlogic.gdx.graphics.g3d.environment.PointLight[] pointLights -> pointLights
    com.badlogic.gdx.graphics.g3d.Renderable renderable -> renderable
    long attributesMask -> attributesMask
    long vertexMask -> vertexMask
    com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config config -> config
    long optionalAttributes -> optionalAttributes
    com.badlogic.gdx.graphics.g3d.Attributes tmpAttributes -> tmpAttributes
    com.badlogic.gdx.math.Matrix3 normalMatrix -> normalMatrix
    com.badlogic.gdx.graphics.Camera camera -> camera
    float time -> time
    boolean lightsSet -> lightsSet
    com.badlogic.gdx.math.Vector3 tmpV1 -> tmpV1
    java.lang.String getDefaultVertexShader() -> getDefaultVertexShader
    java.lang.String getDefaultFragmentShader() -> getDefaultFragmentShader
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    void init() -> init
    boolean and(long,long) -> and
    boolean or(long,long) -> or
    com.badlogic.gdx.graphics.g3d.Attributes combineAttributes(com.badlogic.gdx.graphics.g3d.Renderable) -> combineAttributes
    java.lang.String createPrefix(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config) -> createPrefix
    boolean canRender(com.badlogic.gdx.graphics.g3d.Renderable) -> canRender
    int compareTo(com.badlogic.gdx.graphics.g3d.Shader) -> compareTo
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.g3d.shaders.DefaultShader) -> equals
    void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext) -> begin
    void render(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> render
    void end() -> end
    void bindMaterial(com.badlogic.gdx.graphics.g3d.Attributes) -> bindMaterial
    void bindLights(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> bindLights
    void dispose() -> dispose
    int getDefaultCullFace() -> getDefaultCullFace
    void setDefaultCullFace(int) -> setDefaultCullFace
    int getDefaultDepthFunc() -> getDefaultDepthFunc
    void setDefaultDepthFunc(int) -> setDefaultDepthFunc
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config:
    java.lang.String vertexShader -> vertexShader
    java.lang.String fragmentShader -> fragmentShader
    int numDirectionalLights -> numDirectionalLights
    int numPointLights -> numPointLights
    int numSpotLights -> numSpotLights
    int numBones -> numBones
    boolean ignoreUnimplemented -> ignoreUnimplemented
    int defaultCullFace -> defaultCullFace
    int defaultDepthFunc -> defaultDepthFunc
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs:
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform projTrans -> projTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform viewTrans -> viewTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform projViewTrans -> projViewTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraPosition -> cameraPosition
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraDirection -> cameraDirection
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform cameraUp -> cameraUp
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform worldTrans -> worldTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform viewWorldTrans -> viewWorldTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform projViewWorldTrans -> projViewWorldTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform normalMatrix -> normalMatrix
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform bones -> bones
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform shininess -> shininess
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform opacity -> opacity
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform diffuseColor -> diffuseColor
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform diffuseTexture -> diffuseTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform diffuseUVTransform -> diffuseUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform specularColor -> specularColor
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform specularTexture -> specularTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform specularUVTransform -> specularUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform emissiveColor -> emissiveColor
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform emissiveTexture -> emissiveTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform emissiveUVTransform -> emissiveUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform reflectionColor -> reflectionColor
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform reflectionTexture -> reflectionTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform reflectionUVTransform -> reflectionUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform normalTexture -> normalTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform normalUVTransform -> normalUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform ambientTexture -> ambientTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform ambientUVTransform -> ambientUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform alphaTest -> alphaTest
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform ambientCube -> ambientCube
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform dirLights -> dirLights
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform pointLights -> pointLights
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform environmentCubemap -> environmentCubemap
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters:
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter projTrans -> projTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter viewTrans -> viewTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter projViewTrans -> projViewTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraPosition -> cameraPosition
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraDirection -> cameraDirection
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter cameraUp -> cameraUp
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter worldTrans -> worldTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter viewWorldTrans -> viewWorldTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter projViewWorldTrans -> projViewWorldTrans
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter normalMatrix -> normalMatrix
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter shininess -> shininess
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter diffuseColor -> diffuseColor
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter diffuseTexture -> diffuseTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter diffuseUVTransform -> diffuseUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter specularColor -> specularColor
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter specularTexture -> specularTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter specularUVTransform -> specularUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter emissiveColor -> emissiveColor
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter emissiveTexture -> emissiveTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter emissiveUVTransform -> emissiveUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter reflectionColor -> reflectionColor
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter reflectionTexture -> reflectionTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter reflectionUVTransform -> reflectionUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter normalTexture -> normalTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter normalUVTransform -> normalUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter ambientTexture -> ambientTexture
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter ambientUVTransform -> ambientUVTransform
    com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter environmentCubemap -> environmentCubemap
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$1 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$1:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$10 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$10:
    com.badlogic.gdx.math.Matrix3 tmpM -> tmpM
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$11 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$11:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$12 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$12:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$13 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$13:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$14 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$14:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$15 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$15:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$16 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$16:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$17 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$17:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$18 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$18:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$19 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$19:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$2 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$2:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$20 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$20:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$21 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$21:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$22 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$22:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$23 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$23:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$24 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$24:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$25 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$25:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$26 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$26:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$27 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$27:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$28 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$28:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$3 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$3:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$4 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$4:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$5 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$5:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$6 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$6:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$7 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$7:
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$8 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$8:
    com.badlogic.gdx.math.Matrix4 temp -> temp
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$9 -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$9:
    com.badlogic.gdx.math.Matrix4 temp -> temp
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap:
    float[] ones -> ones
    com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap cacheAmbientCubemap -> cacheAmbientCubemap
    com.badlogic.gdx.math.Vector3 tmpV1 -> tmpV1
    int dirLightsOffset -> dirLightsOffset
    int pointLightsOffset -> pointLightsOffset
    void <init>(int,int) -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones:
    com.badlogic.gdx.math.Matrix4 idtMatrix -> idtMatrix
    float[] bones -> bones
    void <init>(int) -> <init>
    void set(com.badlogic.gdx.graphics.g3d.shaders.BaseShader,int,com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> set
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.shaders.DepthShader -> com.badlogic.gdx.graphics.g3d.shaders.DepthShader:
    java.lang.String defaultVertexShader -> defaultVertexShader
    java.lang.String defaultFragmentShader -> defaultFragmentShader
    int numBones -> numBones
    int weights -> weights
    com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute alphaTestAttribute -> alphaTestAttribute
    com.badlogic.gdx.graphics.g3d.Attributes tmpAttributes -> tmpAttributes
    java.lang.String getDefaultVertexShader() -> getDefaultVertexShader
    java.lang.String getDefaultFragmentShader() -> getDefaultFragmentShader
    java.lang.String createPrefix(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config) -> createPrefix
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    void begin(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g3d.utils.RenderContext) -> begin
    void end() -> end
    boolean canRender(com.badlogic.gdx.graphics.g3d.Renderable) -> canRender
    void render(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Attributes) -> render
    com.badlogic.gdx.graphics.g3d.Attributes combineAttributes(com.badlogic.gdx.graphics.g3d.Renderable) -> combineAttributes
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config -> com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config:
    boolean depthBufferOnly -> depthBufferOnly
    float defaultAlphaTest -> defaultAlphaTest
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
com.badlogic.gdx.graphics.g3d.utils.AnimationController -> com.badlogic.gdx.graphics.g3d.utils.AnimationController:
    com.badlogic.gdx.utils.Pool animationPool -> animationPool
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc current -> current
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queued -> queued
    float queuedTransitionTime -> queuedTransitionTime
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc previous -> previous
    float transitionCurrentTime -> transitionCurrentTime
    float transitionTargetTime -> transitionTargetTime
    boolean inAction -> inAction
    boolean paused -> paused
    boolean allowSameAnimation -> allowSameAnimation
    boolean justChangedAnimation -> justChangedAnimation
    void <init>(com.badlogic.gdx.graphics.g3d.ModelInstance) -> <init>
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc obtain(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener) -> obtain
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc obtain(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener) -> obtain
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc obtain(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc) -> obtain
    void update(float) -> update
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String) -> setAnimation
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,int) -> setAnimation
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener) -> setAnimation
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,int,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener) -> setAnimation
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener) -> setAnimation
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener) -> setAnimation
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener) -> setAnimation
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc setAnimation(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc) -> setAnimation
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,float) -> animate
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> animate
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,int,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> animate
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> animate
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> animate
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> animate
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc animate(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc,float) -> animate
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queue(java.lang.String,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> queue
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queue(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> queue
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queue(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> queue
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc queue(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc,float) -> queue
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc action(java.lang.String,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> action
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc action(java.lang.String,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> action
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc action(com.badlogic.gdx.graphics.g3d.model.Animation,float,float,int,float,com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener,float) -> action
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc action(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc,float) -> action
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1 -> com.badlogic.gdx.graphics.g3d.utils.AnimationController$1:
    com.badlogic.gdx.graphics.g3d.utils.AnimationController this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.utils.AnimationController) -> <init>
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc -> com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc:
    com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener listener -> listener
    com.badlogic.gdx.graphics.g3d.model.Animation animation -> animation
    float speed -> speed
    float time -> time
    float offset -> offset
    float duration -> duration
    int loopCount -> loopCount
    void <init>() -> <init>
    float update(float) -> update
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener -> com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener:
    void onEnd(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc) -> onEnd
    void onLoop(com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc) -> onLoop
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController -> com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController:
    com.badlogic.gdx.utils.Pool transformPool -> transformPool
    com.badlogic.gdx.utils.ObjectMap transforms -> transforms
    boolean applying -> applying
    com.badlogic.gdx.graphics.g3d.ModelInstance target -> target
    com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform tmpT -> tmpT
    void <init>(com.badlogic.gdx.graphics.g3d.ModelInstance) -> <init>
    void begin() -> begin
    void apply(com.badlogic.gdx.graphics.g3d.model.Animation,float,float) -> apply
    void end() -> end
    void applyAnimation(com.badlogic.gdx.graphics.g3d.model.Animation,float) -> applyAnimation
    void applyAnimations(com.badlogic.gdx.graphics.g3d.model.Animation,float,com.badlogic.gdx.graphics.g3d.model.Animation,float,float) -> applyAnimations
    int getFirstKeyframeIndexAtTime(com.badlogic.gdx.utils.Array,float) -> getFirstKeyframeIndexAtTime
    com.badlogic.gdx.math.Vector3 getTranslationAtTime(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float,com.badlogic.gdx.math.Vector3) -> getTranslationAtTime
    com.badlogic.gdx.math.Quaternion getRotationAtTime(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float,com.badlogic.gdx.math.Quaternion) -> getRotationAtTime
    com.badlogic.gdx.math.Vector3 getScalingAtTime(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float,com.badlogic.gdx.math.Vector3) -> getScalingAtTime
    com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform getNodeAnimationTransform(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float) -> getNodeAnimationTransform
    void applyNodeAnimationDirectly(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,float) -> applyNodeAnimationDirectly
    void applyNodeAnimationBlending(com.badlogic.gdx.graphics.g3d.model.NodeAnimation,com.badlogic.gdx.utils.ObjectMap,com.badlogic.gdx.utils.Pool,float,float) -> applyNodeAnimationBlending
    void applyAnimation(com.badlogic.gdx.utils.ObjectMap,com.badlogic.gdx.utils.Pool,float,com.badlogic.gdx.graphics.g3d.model.Animation,float) -> applyAnimation
    void removeAnimation(com.badlogic.gdx.graphics.g3d.model.Animation) -> removeAnimation
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1 -> com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1:
    com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController this$0 -> this$0
    void <init>(com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController) -> <init>
    com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform -> com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform:
    com.badlogic.gdx.math.Vector3 translation -> translation
    com.badlogic.gdx.math.Quaternion rotation -> rotation
    com.badlogic.gdx.math.Vector3 scale -> scale
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform idt() -> idt
    com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3) -> set
    com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform set(com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform) -> set
    com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform lerp(com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform,float) -> lerp
    com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform lerp(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3,float) -> lerp
    com.badlogic.gdx.math.Matrix4 toMatrix4(com.badlogic.gdx.math.Matrix4) -> toMatrix4
    void reset() -> reset
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider -> com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider:
    com.badlogic.gdx.utils.Array shaders -> shaders
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.Shader getShader(com.badlogic.gdx.graphics.g3d.Renderable) -> getShader
    com.badlogic.gdx.graphics.g3d.Shader createShader(com.badlogic.gdx.graphics.g3d.Renderable) -> createShader
    void dispose() -> dispose
com.badlogic.gdx.graphics.g3d.utils.CameraInputController -> com.badlogic.gdx.graphics.g3d.utils.CameraInputController:
    int rotateButton -> rotateButton
    float rotateAngle -> rotateAngle
    int translateButton -> translateButton
    float translateUnits -> translateUnits
    int forwardButton -> forwardButton
    int activateKey -> activateKey
    boolean activatePressed -> activatePressed
    boolean alwaysScroll -> alwaysScroll
    float scrollFactor -> scrollFactor
    float pinchZoomFactor -> pinchZoomFactor
    boolean autoUpdate -> autoUpdate
    com.badlogic.gdx.math.Vector3 target -> target
    boolean translateTarget -> translateTarget
    boolean forwardTarget -> forwardTarget
    boolean scrollTarget -> scrollTarget
    int forwardKey -> forwardKey
    boolean forwardPressed -> forwardPressed
    int backwardKey -> backwardKey
    boolean backwardPressed -> backwardPressed
    int rotateRightKey -> rotateRightKey
    boolean rotateRightPressed -> rotateRightPressed
    int rotateLeftKey -> rotateLeftKey
    boolean rotateLeftPressed -> rotateLeftPressed
    com.badlogic.gdx.graphics.Camera camera -> camera
    int button -> button
    float startX -> startX
    float startY -> startY
    com.badlogic.gdx.math.Vector3 tmpV1 -> tmpV1
    com.badlogic.gdx.math.Vector3 tmpV2 -> tmpV2
    com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener gestureListener -> gestureListener
    int touched -> touched
    boolean multiTouch -> multiTouch
    void <init>(com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener,com.badlogic.gdx.graphics.Camera) -> <init>
    void <init>(com.badlogic.gdx.graphics.Camera) -> <init>
    void update() -> update
    boolean touchDown(int,int,int,int) -> touchDown
    boolean touchUp(int,int,int,int) -> touchUp
    boolean process(float,float,int) -> process
    boolean touchDragged(int,int,int) -> touchDragged
    boolean scrolled(int) -> scrolled
    boolean zoom(float) -> zoom
    boolean pinchZoom(float) -> pinchZoom
    boolean keyDown(int) -> keyDown
    boolean keyUp(int) -> keyUp
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener -> com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener:
    com.badlogic.gdx.graphics.g3d.utils.CameraInputController controller -> controller
    float previousZoom -> previousZoom
    void <init>() -> <init>
    boolean touchDown(float,float,int,int) -> touchDown
    boolean tap(float,float,int,int) -> tap
    boolean longPress(float,float) -> longPress
    boolean fling(float,float,int) -> fling
    boolean pan(float,float,float,float) -> pan
    boolean zoom(float,float) -> zoom
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> pinch
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter -> com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter:
    com.badlogic.gdx.graphics.Camera camera -> camera
    com.badlogic.gdx.math.Vector3 tmpV1 -> tmpV1
    com.badlogic.gdx.math.Vector3 tmpV2 -> tmpV2
    void <init>() -> <init>
    void sort(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.utils.Array) -> sort
    int compare(com.badlogic.gdx.graphics.g3d.Renderable,com.badlogic.gdx.graphics.g3d.Renderable) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider -> com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider:
    com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config config -> config
    void <init>(com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.Shader createShader(com.badlogic.gdx.graphics.g3d.Renderable) -> createShader
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder -> com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder:
    int ROUNDROBIN -> ROUNDROBIN
    int WEIGHTED -> WEIGHTED
    int MAX_GLES_UNITS -> MAX_GLES_UNITS
    int offset -> offset
    int count -> count
    int reuseWeight -> reuseWeight
    com.badlogic.gdx.graphics.GLTexture[] textures -> textures
    int[] weights -> weights
    int method -> method
    boolean reused -> reused
    int reuseCount -> reuseCount
    int bindCount -> bindCount
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor tempDesc -> tempDesc
    int currentTexture -> currentTexture
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void <init>(int,int,int) -> <init>
    void <init>(int,int,int,int) -> <init>
    int getMaxTextureUnits() -> getMaxTextureUnits
    void begin() -> begin
    void end() -> end
    int bind(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> bind
    int bind(com.badlogic.gdx.graphics.GLTexture) -> bind
    int bindTexture(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor,boolean) -> bindTexture
    int bindTextureRoundRobin(com.badlogic.gdx.graphics.GLTexture) -> bindTextureRoundRobin
    int bindTextureWeighted(com.badlogic.gdx.graphics.GLTexture) -> bindTextureWeighted
    int getBindCount() -> getBindCount
    int getReuseCount() -> getReuseCount
    void resetCounts() -> resetCounts
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider -> com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider:
    com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config config -> config
    void <init>(com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.Shader createShader(com.badlogic.gdx.graphics.g3d.Renderable) -> createShader
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController -> com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController:
    com.badlogic.gdx.graphics.Camera camera -> camera
    com.badlogic.gdx.utils.IntIntMap keys -> keys
    int STRAFE_LEFT -> STRAFE_LEFT
    int STRAFE_RIGHT -> STRAFE_RIGHT
    int FORWARD -> FORWARD
    int BACKWARD -> BACKWARD
    int UP -> UP
    int DOWN -> DOWN
    float velocity -> velocity
    float degreesPerPixel -> degreesPerPixel
    com.badlogic.gdx.math.Vector3 tmp -> tmp
    void <init>(com.badlogic.gdx.graphics.Camera) -> <init>
    boolean keyDown(int) -> keyDown
    boolean keyUp(int) -> keyUp
    void setVelocity(float) -> setVelocity
    void setDegreesPerPixel(float) -> setDegreesPerPixel
    boolean touchDragged(int,int,int) -> touchDragged
    void update() -> update
    void update(float) -> update
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder -> com.badlogic.gdx.graphics.g3d.utils.MeshBuilder:
    com.badlogic.gdx.utils.ShortArray tmpIndices -> tmpIndices
    com.badlogic.gdx.utils.FloatArray tmpVertices -> tmpVertices
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp1 -> vertTmp1
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp2 -> vertTmp2
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp3 -> vertTmp3
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp4 -> vertTmp4
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp5 -> vertTmp5
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp6 -> vertTmp6
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp7 -> vertTmp7
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo vertTmp8 -> vertTmp8
    com.badlogic.gdx.math.Matrix4 matTmp1 -> matTmp1
    com.badlogic.gdx.math.Vector3 tempV1 -> tempV1
    com.badlogic.gdx.math.Vector3 tempV2 -> tempV2
    com.badlogic.gdx.math.Vector3 tempV3 -> tempV3
    com.badlogic.gdx.math.Vector3 tempV4 -> tempV4
    com.badlogic.gdx.math.Vector3 tempV5 -> tempV5
    com.badlogic.gdx.math.Vector3 tempV6 -> tempV6
    com.badlogic.gdx.math.Vector3 tempV7 -> tempV7
    com.badlogic.gdx.math.Vector3 tempV8 -> tempV8
    com.badlogic.gdx.graphics.Color tempC1 -> tempC1
    com.badlogic.gdx.graphics.VertexAttributes attributes -> attributes
    com.badlogic.gdx.utils.FloatArray vertices -> vertices
    com.badlogic.gdx.utils.ShortArray indices -> indices
    int stride -> stride
    short vindex -> vindex
    int istart -> istart
    int posOffset -> posOffset
    int posSize -> posSize
    int norOffset -> norOffset
    int colOffset -> colOffset
    int colSize -> colSize
    int cpOffset -> cpOffset
    int uvOffset -> uvOffset
    com.badlogic.gdx.graphics.g3d.model.MeshPart part -> part
    com.badlogic.gdx.utils.Array parts -> parts
    com.badlogic.gdx.graphics.Color color -> color
    boolean hasColor -> hasColor
    int primitiveType -> primitiveType
    float uOffset -> uOffset
    float uScale -> uScale
    float vOffset -> vOffset
    float vScale -> vScale
    boolean hasUVTransform -> hasUVTransform
    float[] vertex -> vertex
    boolean vertexTransformationEnabled -> vertexTransformationEnabled
    com.badlogic.gdx.math.Matrix4 positionTransform -> positionTransform
    com.badlogic.gdx.math.Matrix3 normalTransform -> normalTransform
    com.badlogic.gdx.utils.Pool vectorPool -> vectorPool
    com.badlogic.gdx.utils.Array vectorArray -> vectorArray
    com.badlogic.gdx.utils.Pool matrices4Pool -> matrices4Pool
    com.badlogic.gdx.utils.Array matrices4Array -> matrices4Array
    short lastIndex -> lastIndex
    com.badlogic.gdx.math.Vector3 vTmp -> vTmp
    com.badlogic.gdx.math.Vector3 tmpNormal -> tmpNormal
    com.badlogic.gdx.utils.IntIntMap indicesMap -> indicesMap
    void <init>() -> <init>
    com.badlogic.gdx.graphics.VertexAttributes createAttributes(long) -> createAttributes
    void begin(long) -> begin
    void begin(com.badlogic.gdx.graphics.VertexAttributes) -> begin
    void begin(long,int) -> begin
    void begin(com.badlogic.gdx.graphics.VertexAttributes,int) -> begin
    void endpart() -> endpart
    com.badlogic.gdx.graphics.g3d.model.MeshPart part(java.lang.String,int) -> part
    com.badlogic.gdx.graphics.g3d.model.MeshPart part(java.lang.String,int,com.badlogic.gdx.graphics.g3d.model.MeshPart) -> part
    com.badlogic.gdx.graphics.Mesh end(com.badlogic.gdx.graphics.Mesh) -> end
    com.badlogic.gdx.graphics.Mesh end() -> end
    int getNumVertices() -> getNumVertices
    int getNumIndices() -> getNumIndices
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> getAttributes
    com.badlogic.gdx.graphics.g3d.model.MeshPart getMeshPart() -> getMeshPart
    com.badlogic.gdx.math.Vector3 tmp(float,float,float) -> tmp
    com.badlogic.gdx.math.Vector3 tmp(com.badlogic.gdx.math.Vector3) -> tmp
    com.badlogic.gdx.math.Matrix4 tmp() -> tmp
    com.badlogic.gdx.math.Matrix4 tmp(com.badlogic.gdx.math.Matrix4) -> tmp
    void cleanup() -> cleanup
    void setColor(float,float,float,float) -> setColor
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setUVRange(float,float,float,float) -> setUVRange
    void setUVRange(com.badlogic.gdx.graphics.g2d.TextureRegion) -> setUVRange
    com.badlogic.gdx.math.Matrix4 getVertexTransform(com.badlogic.gdx.math.Matrix4) -> getVertexTransform
    void setVertexTransform(com.badlogic.gdx.math.Matrix4) -> setVertexTransform
    boolean isVertexTransformationEnabled() -> isVertexTransformationEnabled
    void setVertexTransformationEnabled(boolean) -> setVertexTransformationEnabled
    void ensureVertices(int) -> ensureVertices
    void ensureIndices(int) -> ensureIndices
    void ensureCapacity(int,int) -> ensureCapacity
    void ensureTriangleIndices(int) -> ensureTriangleIndices
    void ensureTriangles(int,int) -> ensureTriangles
    void ensureTriangles(int) -> ensureTriangles
    void ensureRectangleIndices(int) -> ensureRectangleIndices
    void ensureRectangles(int,int) -> ensureRectangles
    void ensureRectangles(int) -> ensureRectangles
    short lastIndex() -> lastIndex
    void transformPosition(float[],int,int,com.badlogic.gdx.math.Matrix4) -> transformPosition
    void transformNormal(float[],int,int,com.badlogic.gdx.math.Matrix3) -> transformNormal
    void addVertex(float[],int) -> addVertex
    short vertex(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector2) -> vertex
    short vertex(float[]) -> vertex
    short vertex(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> vertex
    void index(short) -> index
    void index(short,short) -> index
    void index(short,short,short) -> index
    void index(short,short,short,short) -> index
    void index(short,short,short,short,short,short) -> index
    void index(short,short,short,short,short,short,short,short) -> index
    void line(short,short) -> line
    void line(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> line
    void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> line
    void line(float,float,float,float,float,float) -> line
    void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color) -> line
    void triangle(short,short,short) -> triangle
    void triangle(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> triangle
    void triangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> triangle
    void triangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color) -> triangle
    void rect(short,short,short,short) -> rect
    void rect(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> rect
    void rect(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> rect
    void rect(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> rect
    void patch(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,int,int) -> patch
    void patch(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,int,int) -> patch
    void patch(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int,int) -> patch
    void box(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> box
    void box(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> box
    void box(com.badlogic.gdx.math.Matrix4) -> box
    void box(float,float,float) -> box
    void box(float,float,float,float,float,float) -> box
    void circle(float,int,float,float,float,float,float,float) -> circle
    void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> circle
    void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> circle
    void circle(float,int,float,float,float,float,float,float,float,float,float,float,float,float) -> circle
    void circle(float,int,float,float,float,float,float,float,float,float) -> circle
    void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> circle
    void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> circle
    void circle(float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> circle
    void ellipse(float,float,int,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> ellipse
    void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> ellipse
    void ellipse(float,float,int,float,float,float,float,float,float,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,int,float,float,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> ellipse
    void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> ellipse
    void ellipse(float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> ellipse
    void ellipse(float,float,float,float,int,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,float,float,int,float,float,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> ellipse
    void cylinder(float,float,float,int) -> cylinder
    void cylinder(float,float,float,int,float,float) -> cylinder
    void cylinder(float,float,float,int,float,float,boolean) -> cylinder
    void cone(float,float,float,int) -> cone
    void cone(float,float,float,int,float,float) -> cone
    void sphere(float,float,float,int,int) -> sphere
    void sphere(com.badlogic.gdx.math.Matrix4,float,float,float,int,int) -> sphere
    void sphere(float,float,float,int,int,float,float,float,float) -> sphere
    void sphere(com.badlogic.gdx.math.Matrix4,float,float,float,int,int,float,float,float,float) -> sphere
    void capsule(float,float,int) -> capsule
    void arrow(float,float,float,float,float,float,float,float,int) -> arrow
    void addMesh(com.badlogic.gdx.graphics.Mesh) -> addMesh
    void addMesh(com.badlogic.gdx.graphics.g3d.model.MeshPart) -> addMesh
    void addMesh(com.badlogic.gdx.graphics.Mesh,int,int) -> addMesh
    void addMesh(float[],short[],int,int) -> addMesh
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder$1 -> com.badlogic.gdx.graphics.g3d.utils.MeshBuilder$1:
    void <init>() -> <init>
    com.badlogic.gdx.math.Vector3 newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder$2 -> com.badlogic.gdx.graphics.g3d.utils.MeshBuilder$2:
    void <init>() -> <init>
    com.badlogic.gdx.math.Matrix4 newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder -> com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder:
    com.badlogic.gdx.graphics.g3d.model.MeshPart getMeshPart() -> getMeshPart
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> getAttributes
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    void setUVRange(float,float,float,float) -> setUVRange
    void setUVRange(com.badlogic.gdx.graphics.g2d.TextureRegion) -> setUVRange
    com.badlogic.gdx.math.Matrix4 getVertexTransform(com.badlogic.gdx.math.Matrix4) -> getVertexTransform
    void setVertexTransform(com.badlogic.gdx.math.Matrix4) -> setVertexTransform
    boolean isVertexTransformationEnabled() -> isVertexTransformationEnabled
    void setVertexTransformationEnabled(boolean) -> setVertexTransformationEnabled
    short vertex(float[]) -> vertex
    short vertex(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector2) -> vertex
    short vertex(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> vertex
    short lastIndex() -> lastIndex
    void index(short) -> index
    void index(short,short) -> index
    void index(short,short,short) -> index
    void index(short,short,short,short) -> index
    void index(short,short,short,short,short,short) -> index
    void index(short,short,short,short,short,short,short,short) -> index
    void line(short,short) -> line
    void line(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> line
    void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> line
    void line(float,float,float,float,float,float) -> line
    void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color) -> line
    void triangle(short,short,short) -> triangle
    void triangle(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> triangle
    void triangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> triangle
    void triangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color) -> triangle
    void rect(short,short,short,short) -> rect
    void rect(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> rect
    void rect(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> rect
    void rect(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> rect
    void patch(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,int,int) -> patch
    void patch(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,int,int) -> patch
    void patch(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int,int) -> patch
    void box(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> box
    void box(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> box
    void box(com.badlogic.gdx.math.Matrix4) -> box
    void box(float,float,float) -> box
    void box(float,float,float,float,float,float) -> box
    void circle(float,int,float,float,float,float,float,float) -> circle
    void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> circle
    void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> circle
    void circle(float,int,float,float,float,float,float,float,float,float,float,float,float,float) -> circle
    void circle(float,int,float,float,float,float,float,float,float,float) -> circle
    void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> circle
    void circle(float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> circle
    void circle(float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> circle
    void ellipse(float,float,int,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> ellipse
    void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> ellipse
    void ellipse(float,float,int,float,float,float,float,float,float,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,int,float,float,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> ellipse
    void ellipse(float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float,float) -> ellipse
    void ellipse(float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,float,float,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,float,float,int,float,float,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,float,float,int,float,float,float,float,float,float) -> ellipse
    void ellipse(float,float,float,float,int,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> ellipse
    void cylinder(float,float,float,int) -> cylinder
    void cylinder(float,float,float,int,float,float) -> cylinder
    void cylinder(float,float,float,int,float,float,boolean) -> cylinder
    void cone(float,float,float,int) -> cone
    void cone(float,float,float,int,float,float) -> cone
    void sphere(float,float,float,int,int) -> sphere
    void sphere(com.badlogic.gdx.math.Matrix4,float,float,float,int,int) -> sphere
    void sphere(float,float,float,int,int,float,float,float,float) -> sphere
    void sphere(com.badlogic.gdx.math.Matrix4,float,float,float,int,int,float,float,float,float) -> sphere
    void capsule(float,float,int) -> capsule
    void arrow(float,float,float,float,float,float,float,float,int) -> arrow
    void addMesh(com.badlogic.gdx.graphics.Mesh) -> addMesh
    void addMesh(com.badlogic.gdx.graphics.g3d.model.MeshPart) -> addMesh
    void addMesh(com.badlogic.gdx.graphics.Mesh,int,int) -> addMesh
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo -> com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo:
    com.badlogic.gdx.math.Vector3 position -> position
    boolean hasPosition -> hasPosition
    com.badlogic.gdx.math.Vector3 normal -> normal
    boolean hasNormal -> hasNormal
    com.badlogic.gdx.graphics.Color color -> color
    boolean hasColor -> hasColor
    com.badlogic.gdx.math.Vector2 uv -> uv
    boolean hasUV -> hasUV
    void <init>() -> <init>
    void reset() -> reset
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.math.Vector2) -> set
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo set(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo) -> set
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setPos(float,float,float) -> setPos
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setPos(com.badlogic.gdx.math.Vector3) -> setPos
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setNor(float,float,float) -> setNor
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setNor(com.badlogic.gdx.math.Vector3) -> setNor
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setCol(float,float,float,float) -> setCol
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setCol(com.badlogic.gdx.graphics.Color) -> setCol
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setUV(float,float) -> setUV
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo setUV(com.badlogic.gdx.math.Vector2) -> setUV
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo lerp(com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo,float) -> lerp
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder -> com.badlogic.gdx.graphics.g3d.utils.ModelBuilder:
    com.badlogic.gdx.graphics.g3d.Model model -> model
    com.badlogic.gdx.graphics.g3d.model.Node node -> node
    com.badlogic.gdx.utils.Array builders -> builders
    com.badlogic.gdx.math.Matrix4 tmpTransform -> tmpTransform
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g3d.utils.MeshBuilder getBuilder(com.badlogic.gdx.graphics.VertexAttributes) -> getBuilder
    void begin() -> begin
    com.badlogic.gdx.graphics.g3d.Model end() -> end
    void endnode() -> endnode
    com.badlogic.gdx.graphics.g3d.model.Node node(com.badlogic.gdx.graphics.g3d.model.Node) -> node
    com.badlogic.gdx.graphics.g3d.model.Node node() -> node
    com.badlogic.gdx.graphics.g3d.model.Node node(java.lang.String,com.badlogic.gdx.graphics.g3d.Model) -> node
    void manage(com.badlogic.gdx.utils.Disposable) -> manage
    void part(com.badlogic.gdx.graphics.g3d.model.MeshPart,com.badlogic.gdx.graphics.g3d.Material) -> part
    com.badlogic.gdx.graphics.g3d.model.MeshPart part(java.lang.String,com.badlogic.gdx.graphics.Mesh,int,int,int,com.badlogic.gdx.graphics.g3d.Material) -> part
    com.badlogic.gdx.graphics.g3d.model.MeshPart part(java.lang.String,com.badlogic.gdx.graphics.Mesh,int,com.badlogic.gdx.graphics.g3d.Material) -> part
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder part(java.lang.String,int,com.badlogic.gdx.graphics.VertexAttributes,com.badlogic.gdx.graphics.g3d.Material) -> part
    com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder part(java.lang.String,int,long,com.badlogic.gdx.graphics.g3d.Material) -> part
    com.badlogic.gdx.graphics.g3d.Model createBox(float,float,float,com.badlogic.gdx.graphics.g3d.Material,long) -> createBox
    com.badlogic.gdx.graphics.g3d.Model createBox(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createBox
    com.badlogic.gdx.graphics.g3d.Model createRect(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,com.badlogic.gdx.graphics.g3d.Material,long) -> createRect
    com.badlogic.gdx.graphics.g3d.Model createRect(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createRect
    com.badlogic.gdx.graphics.g3d.Model createCylinder(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createCylinder
    com.badlogic.gdx.graphics.g3d.Model createCylinder(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createCylinder
    com.badlogic.gdx.graphics.g3d.Model createCylinder(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float) -> createCylinder
    com.badlogic.gdx.graphics.g3d.Model createCylinder(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float) -> createCylinder
    com.badlogic.gdx.graphics.g3d.Model createCone(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createCone
    com.badlogic.gdx.graphics.g3d.Model createCone(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createCone
    com.badlogic.gdx.graphics.g3d.Model createCone(float,float,float,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float) -> createCone
    com.badlogic.gdx.graphics.g3d.Model createCone(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float) -> createCone
    com.badlogic.gdx.graphics.g3d.Model createSphere(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createSphere
    com.badlogic.gdx.graphics.g3d.Model createSphere(float,float,float,int,int,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createSphere
    com.badlogic.gdx.graphics.g3d.Model createSphere(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float,float,float) -> createSphere
    com.badlogic.gdx.graphics.g3d.Model createSphere(float,float,float,int,int,int,com.badlogic.gdx.graphics.g3d.Material,long,float,float,float,float) -> createSphere
    com.badlogic.gdx.graphics.g3d.Model createCapsule(float,float,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createCapsule
    com.badlogic.gdx.graphics.g3d.Model createCapsule(float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createCapsule
    void rebuildReferences(com.badlogic.gdx.graphics.g3d.Model) -> rebuildReferences
    void rebuildReferences(com.badlogic.gdx.graphics.g3d.Model,com.badlogic.gdx.graphics.g3d.model.Node) -> rebuildReferences
    com.badlogic.gdx.graphics.g3d.Model createXYZCoordinates(float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createXYZCoordinates
    com.badlogic.gdx.graphics.g3d.Model createXYZCoordinates(float,com.badlogic.gdx.graphics.g3d.Material,long) -> createXYZCoordinates
    com.badlogic.gdx.graphics.g3d.Model createArrow(float,float,float,float,float,float,float,float,int,int,com.badlogic.gdx.graphics.g3d.Material,long) -> createArrow
    com.badlogic.gdx.graphics.g3d.Model createArrow(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.graphics.g3d.Material,long) -> createArrow
    com.badlogic.gdx.graphics.g3d.Model createLineGrid(int,int,float,float,com.badlogic.gdx.graphics.g3d.Material,long) -> createLineGrid
com.badlogic.gdx.graphics.g3d.utils.RenderContext -> com.badlogic.gdx.graphics.g3d.utils.RenderContext:
    com.badlogic.gdx.graphics.g3d.utils.TextureBinder textureBinder -> textureBinder
    boolean blending -> blending
    int blendSFactor -> blendSFactor
    int blendDFactor -> blendDFactor
    int depthFunc -> depthFunc
    float depthRangeNear -> depthRangeNear
    float depthRangeFar -> depthRangeFar
    boolean depthMask -> depthMask
    int cullFace -> cullFace
    void <init>(com.badlogic.gdx.graphics.g3d.utils.TextureBinder) -> <init>
    void begin() -> begin
    void end() -> end
    void setDepthMask(boolean) -> setDepthMask
    void setDepthTest(int) -> setDepthTest
    void setDepthTest(int,float,float) -> setDepthTest
    void setBlending(boolean,int,int) -> setBlending
    void setCullFace(int) -> setCullFace
com.badlogic.gdx.graphics.g3d.utils.RenderableSorter -> com.badlogic.gdx.graphics.g3d.utils.RenderableSorter:
    void sort(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.utils.Array) -> sort
com.badlogic.gdx.graphics.g3d.utils.ShaderProvider -> com.badlogic.gdx.graphics.g3d.utils.ShaderProvider:
    com.badlogic.gdx.graphics.g3d.Shader getShader(com.badlogic.gdx.graphics.g3d.Renderable) -> getShader
    void dispose() -> dispose
com.badlogic.gdx.graphics.g3d.utils.TextureBinder -> com.badlogic.gdx.graphics.g3d.utils.TextureBinder:
    void begin() -> begin
    void end() -> end
    int bind(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> bind
    int bind(com.badlogic.gdx.graphics.GLTexture) -> bind
    int getBindCount() -> getBindCount
    int getReuseCount() -> getReuseCount
    void resetCounts() -> resetCounts
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor -> com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor:
    com.badlogic.gdx.graphics.GLTexture texture -> texture
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> minFilter
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> magFilter
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> uWrap
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> vWrap
    void <init>(com.badlogic.gdx.graphics.GLTexture,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> <init>
    void <init>(com.badlogic.gdx.graphics.GLTexture) -> <init>
    void <init>() -> <init>
    void set(com.badlogic.gdx.graphics.GLTexture,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> set
    void set(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> set
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.utils.TextureProvider -> com.badlogic.gdx.graphics.g3d.utils.TextureProvider:
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> load
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider -> com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider:
    com.badlogic.gdx.assets.AssetManager assetManager -> assetManager
    void <init>(com.badlogic.gdx.assets.AssetManager) -> <init>
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> load
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider -> com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider:
    void <init>() -> <init>
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> load
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int PKM_HEADER_SIZE -> PKM_HEADER_SIZE
    int ETC1_RGB8_OES -> ETC1_RGB8_OES
    void <init>() -> <init>
    int getPixelSize(com.badlogic.gdx.graphics.Pixmap$Format) -> getPixelSize
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImage(com.badlogic.gdx.graphics.Pixmap) -> encodeImage
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImagePKM(com.badlogic.gdx.graphics.Pixmap) -> encodeImagePKM
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> decodeImage
    int getCompressedDataSize(int,int) -> getCompressedDataSize
    void formatHeader(java.nio.ByteBuffer,int,int,int) -> formatHeader
    int getWidthPKM(java.nio.ByteBuffer,int) -> getWidthPKM
    int getHeightPKM(java.nio.ByteBuffer,int) -> getHeightPKM
    boolean isValidPKM(java.nio.ByteBuffer,int) -> isValidPKM
    void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> decodeImage
    java.nio.ByteBuffer encodeImage(java.nio.ByteBuffer,int,int,int,int) -> encodeImage
    java.nio.ByteBuffer encodeImagePKM(java.nio.ByteBuffer,int,int,int,int) -> encodeImagePKM
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data:
    int width -> width
    int height -> height
    java.nio.ByteBuffer compressedData -> compressedData
    int dataOffset -> dataOffset
    void <init>(int,int,java.nio.ByteBuffer,int) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void checkNPOT() -> checkNPOT
    boolean hasPKMHeader() -> hasPKMHeader
    void write(com.badlogic.gdx.files.FileHandle) -> write
    void dispose() -> dispose
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.ETC1TextureData:
    com.badlogic.gdx.files.FileHandle file -> file
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> data
    boolean useMipMaps -> useMipMaps
    int width -> width
    int height -> height
    boolean isPrepared -> isPrepared
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,boolean) -> <init>
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> getType
    boolean isPrepared() -> isPrepared
    void prepare() -> prepare
    void consumeCustomData(int) -> consumeCustomData
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> consumePixmap
    boolean disposePixmap() -> disposePixmap
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> getFormat
    boolean useMipMaps() -> useMipMaps
    boolean isManaged() -> isManaged
com.badlogic.gdx.graphics.glutils.FacedCubemapData -> com.badlogic.gdx.graphics.glutils.FacedCubemapData:
    com.badlogic.gdx.graphics.TextureData[] data -> data
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap) -> <init>
    void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,boolean) -> <init>
    void <init>(int,int,int,com.badlogic.gdx.graphics.Pixmap$Format) -> <init>
    void <init>(com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData) -> <init>
    boolean isManaged() -> isManaged
    void load(com.badlogic.gdx.graphics.Cubemap$CubemapSide,com.badlogic.gdx.files.FileHandle) -> load
    void load(com.badlogic.gdx.graphics.Cubemap$CubemapSide,com.badlogic.gdx.graphics.Pixmap) -> load
    boolean isComplete() -> isComplete
    com.badlogic.gdx.graphics.TextureData getTextureData(com.badlogic.gdx.graphics.Cubemap$CubemapSide) -> getTextureData
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean isPrepared() -> isPrepared
    void prepare() -> prepare
    void consumeCubemapData() -> consumeCubemapData
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.badlogic.gdx.graphics.glutils.FileTextureData:
    boolean copyToPOT -> copyToPOT
    com.badlogic.gdx.files.FileHandle file -> file
    int width -> width
    int height -> height
    com.badlogic.gdx.graphics.Pixmap$Format format -> format
    com.badlogic.gdx.graphics.Pixmap pixmap -> pixmap
    boolean useMipMaps -> useMipMaps
    boolean isPrepared -> isPrepared
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> <init>
    boolean isPrepared() -> isPrepared
    void prepare() -> prepare
    com.badlogic.gdx.graphics.Pixmap ensurePot(com.badlogic.gdx.graphics.Pixmap) -> ensurePot
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> consumePixmap
    boolean disposePixmap() -> disposePixmap
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> getFormat
    boolean useMipMaps() -> useMipMaps
    boolean isManaged() -> isManaged
    com.badlogic.gdx.files.FileHandle getFileHandle() -> getFileHandle
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> getType
    void consumeCustomData(int) -> consumeCustomData
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer -> com.badlogic.gdx.graphics.glutils.FloatFrameBuffer:
    void <init>(int,int,boolean) -> <init>
    void setupTexture() -> setupTexture
com.badlogic.gdx.graphics.glutils.FloatTextureData -> com.badlogic.gdx.graphics.glutils.FloatTextureData:
    int width -> width
    int height -> height
    boolean isPrepared -> isPrepared
    java.nio.FloatBuffer buffer -> buffer
    void <init>(int,int) -> <init>
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> getType
    boolean isPrepared() -> isPrepared
    void prepare() -> prepare
    void consumeCustomData(int) -> consumeCustomData
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> consumePixmap
    boolean disposePixmap() -> disposePixmap
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> getFormat
    boolean useMipMaps() -> useMipMaps
    boolean isManaged() -> isManaged
com.badlogic.gdx.graphics.glutils.FrameBuffer -> com.badlogic.gdx.graphics.glutils.FrameBuffer:
    java.util.Map buffers -> buffers
    com.badlogic.gdx.graphics.Texture colorTexture -> colorTexture
    int defaultFramebufferHandle -> defaultFramebufferHandle
    boolean defaultFramebufferHandleInitialized -> defaultFramebufferHandleInitialized
    int framebufferHandle -> framebufferHandle
    int depthbufferHandle -> depthbufferHandle
    int stencilbufferHandle -> stencilbufferHandle
    int width -> width
    int height -> height
    boolean hasDepth -> hasDepth
    boolean hasStencil -> hasStencil
    com.badlogic.gdx.graphics.Pixmap$Format format -> format
    void <init>(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean,boolean) -> <init>
    void setupTexture() -> setupTexture
    void build() -> build
    void dispose() -> dispose
    void bind() -> bind
    void unbind() -> unbind
    void begin() -> begin
    void setFrameBufferViewport() -> setFrameBufferViewport
    void end() -> end
    void setDefaultFrameBufferViewport() -> setDefaultFrameBufferViewport
    void end(int,int,int,int) -> end
    com.badlogic.gdx.graphics.Texture getColorBufferTexture() -> getColorBufferTexture
    int getHeight() -> getHeight
    int getWidth() -> getWidth
    void addManagedFrameBuffer(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.FrameBuffer) -> addManagedFrameBuffer
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> invalidateAllFrameBuffers
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> clearAllFrameBuffers
    java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder) -> getManagedStatus
    java.lang.String getManagedStatus() -> getManagedStatus
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer:
    void begin(com.badlogic.gdx.math.Matrix4,int) -> begin
    void flush() -> flush
    void color(com.badlogic.gdx.graphics.Color) -> color
    void color(float,float,float,float) -> color
    void color(float) -> color
    void texCoord(float,float) -> texCoord
    void normal(float,float,float) -> normal
    void vertex(float,float,float) -> vertex
    void end() -> end
    int getNumVertices() -> getNumVertices
    int getMaxVertices() -> getMaxVertices
    void dispose() -> dispose
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20:
    int primitiveType -> primitiveType
    int vertexIdx -> vertexIdx
    int numSetTexCoords -> numSetTexCoords
    int maxVertices -> maxVertices
    int numVertices -> numVertices
    com.badlogic.gdx.graphics.Mesh mesh -> mesh
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> shader
    boolean ownsShader -> ownsShader
    int numTexCoords -> numTexCoords
    int vertexSize -> vertexSize
    int normalOffset -> normalOffset
    int colorOffset -> colorOffset
    int texCoordOffset -> texCoordOffset
    com.badlogic.gdx.math.Matrix4 projModelView -> projModelView
    float[] vertices -> vertices
    java.lang.String[] shaderUniformNames -> shaderUniformNames
    void <init>(boolean,boolean,int) -> <init>
    void <init>(int,boolean,boolean,int) -> <init>
    void <init>(int,boolean,boolean,int,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes(boolean,boolean,int) -> buildVertexAttributes
    void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> setShader
    void begin(com.badlogic.gdx.math.Matrix4,int) -> begin
    void color(com.badlogic.gdx.graphics.Color) -> color
    void color(float,float,float,float) -> color
    void color(float) -> color
    void texCoord(float,float) -> texCoord
    void normal(float,float,float) -> normal
    void vertex(float,float,float) -> vertex
    void flush() -> flush
    void end() -> end
    int getNumVertices() -> getNumVertices
    int getMaxVertices() -> getMaxVertices
    void dispose() -> dispose
    java.lang.String createVertexShader(boolean,boolean,int) -> createVertexShader
    java.lang.String createFragmentShader(boolean,boolean,int) -> createFragmentShader
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader(boolean,boolean,int) -> createDefaultShader
com.badlogic.gdx.graphics.glutils.IndexArray -> com.badlogic.gdx.graphics.glutils.IndexArray:
    java.nio.IntBuffer tmpHandle -> tmpHandle
    java.nio.ShortBuffer buffer -> buffer
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    boolean empty -> empty
    void <init>(int) -> <init>
    int getNumIndices() -> getNumIndices
    int getNumMaxIndices() -> getNumMaxIndices
    void setIndices(short[],int,int) -> setIndices
    void setIndices(java.nio.ShortBuffer) -> setIndices
    java.nio.ShortBuffer getBuffer() -> getBuffer
    void bind() -> bind
    void unbind() -> unbind
    void invalidate() -> invalidate
    void dispose() -> dispose
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.badlogic.gdx.graphics.glutils.IndexBufferObject:
    java.nio.ShortBuffer buffer -> buffer
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    int bufferHandle -> bufferHandle
    boolean isDirect -> isDirect
    boolean isDirty -> isDirty
    boolean isBound -> isBound
    int usage -> usage
    boolean empty -> empty
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    int getNumIndices() -> getNumIndices
    int getNumMaxIndices() -> getNumMaxIndices
    void setIndices(short[],int,int) -> setIndices
    void setIndices(java.nio.ShortBuffer) -> setIndices
    java.nio.ShortBuffer getBuffer() -> getBuffer
    void bind() -> bind
    void unbind() -> unbind
    void invalidate() -> invalidate
    void dispose() -> dispose
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData:
    java.nio.ShortBuffer buffer -> buffer
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    int bufferHandle -> bufferHandle
    boolean isDirect -> isDirect
    boolean isDirty -> isDirty
    boolean isBound -> isBound
    int usage -> usage
    void <init>(boolean,int) -> <init>
    void <init>(int) -> <init>
    int createBufferObject() -> createBufferObject
    int getNumIndices() -> getNumIndices
    int getNumMaxIndices() -> getNumMaxIndices
    void setIndices(short[],int,int) -> setIndices
    void setIndices(java.nio.ShortBuffer) -> setIndices
    java.nio.ShortBuffer getBuffer() -> getBuffer
    void bind() -> bind
    void unbind() -> unbind
    void invalidate() -> invalidate
    void dispose() -> dispose
com.badlogic.gdx.graphics.glutils.IndexData -> com.badlogic.gdx.graphics.glutils.IndexData:
    int getNumIndices() -> getNumIndices
    int getNumMaxIndices() -> getNumMaxIndices
    void setIndices(short[],int,int) -> setIndices
    void setIndices(java.nio.ShortBuffer) -> setIndices
    java.nio.ShortBuffer getBuffer() -> getBuffer
    void bind() -> bind
    void unbind() -> unbind
    void invalidate() -> invalidate
    void dispose() -> dispose
com.badlogic.gdx.graphics.glutils.KTXTextureData -> com.badlogic.gdx.graphics.glutils.KTXTextureData:
    com.badlogic.gdx.files.FileHandle file -> file
    int glType -> glType
    int glTypeSize -> glTypeSize
    int glFormat -> glFormat
    int glInternalFormat -> glInternalFormat
    int glBaseInternalFormat -> glBaseInternalFormat
    int pixelWidth -> pixelWidth
    int pixelHeight -> pixelHeight
    int pixelDepth -> pixelDepth
    int numberOfArrayElements -> numberOfArrayElements
    int numberOfFaces -> numberOfFaces
    int numberOfMipmapLevels -> numberOfMipmapLevels
    int imagePos -> imagePos
    java.nio.ByteBuffer compressedData -> compressedData
    boolean useMipMaps -> useMipMaps
    int GL_TEXTURE_1D -> GL_TEXTURE_1D
    int GL_TEXTURE_3D -> GL_TEXTURE_3D
    int GL_TEXTURE_1D_ARRAY_EXT -> GL_TEXTURE_1D_ARRAY_EXT
    int GL_TEXTURE_2D_ARRAY_EXT -> GL_TEXTURE_2D_ARRAY_EXT
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> getType
    boolean isPrepared() -> isPrepared
    void prepare() -> prepare
    void consumeCubemapData() -> consumeCubemapData
    void consumeCustomData(int) -> consumeCustomData
    void disposePreparedData() -> disposePreparedData
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> consumePixmap
    boolean disposePixmap() -> disposePixmap
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getNumberOfMipMapLevels() -> getNumberOfMipMapLevels
    int getNumberOfFaces() -> getNumberOfFaces
    int getGlInternalFormat() -> getGlInternalFormat
    java.nio.ByteBuffer getData(int,int) -> getData
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> getFormat
    boolean useMipMaps() -> useMipMaps
    boolean isManaged() -> isManaged
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.badlogic.gdx.graphics.glutils.MipMapGenerator:
    boolean useHWMipMap -> useHWMipMap
    void <init>() -> <init>
    void setUseHardwareMipMap(boolean) -> setUseHardwareMipMap
    void generateMipMap(com.badlogic.gdx.graphics.Pixmap,int,int) -> generateMipMap
    void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> generateMipMap
    void generateMipMapGLES20(int,com.badlogic.gdx.graphics.Pixmap) -> generateMipMapGLES20
    void generateMipMapDesktop(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> generateMipMapDesktop
    void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> generateMipMapCPU
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.MipMapTextureData -> com.badlogic.gdx.graphics.glutils.MipMapTextureData:
    com.badlogic.gdx.graphics.TextureData[] mips -> mips
    void <init>(com.badlogic.gdx.graphics.TextureData[]) -> <init>
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> getType
    boolean isPrepared() -> isPrepared
    void prepare() -> prepare
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> consumePixmap
    boolean disposePixmap() -> disposePixmap
    void consumeCustomData(int) -> consumeCustomData
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> getFormat
    boolean useMipMaps() -> useMipMaps
    boolean isManaged() -> isManaged
com.badlogic.gdx.graphics.glutils.PixmapTextureData -> com.badlogic.gdx.graphics.glutils.PixmapTextureData:
    com.badlogic.gdx.graphics.Pixmap pixmap -> pixmap
    com.badlogic.gdx.graphics.Pixmap$Format format -> format
    boolean useMipMaps -> useMipMaps
    boolean disposePixmap -> disposePixmap
    boolean managed -> managed
    void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean,boolean,boolean) -> <init>
    boolean disposePixmap() -> disposePixmap
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> consumePixmap
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> getFormat
    boolean useMipMaps() -> useMipMaps
    boolean isManaged() -> isManaged
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> getType
    void consumeCustomData(int) -> consumeCustomData
    boolean isPrepared() -> isPrepared
    void prepare() -> prepare
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.badlogic.gdx.graphics.glutils.ShaderProgram:
    java.lang.String POSITION_ATTRIBUTE -> POSITION_ATTRIBUTE
    java.lang.String NORMAL_ATTRIBUTE -> NORMAL_ATTRIBUTE
    java.lang.String COLOR_ATTRIBUTE -> COLOR_ATTRIBUTE
    java.lang.String TEXCOORD_ATTRIBUTE -> TEXCOORD_ATTRIBUTE
    java.lang.String TANGENT_ATTRIBUTE -> TANGENT_ATTRIBUTE
    java.lang.String BINORMAL_ATTRIBUTE -> BINORMAL_ATTRIBUTE
    boolean pedantic -> pedantic
    com.badlogic.gdx.utils.ObjectMap shaders -> shaders
    java.lang.String log -> log
    boolean isCompiled -> isCompiled
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> uniforms
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> uniformTypes
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> uniformSizes
    java.lang.String[] uniformNames -> uniformNames
    com.badlogic.gdx.utils.ObjectIntMap attributes -> attributes
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> attributeTypes
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> attributeSizes
    java.lang.String[] attributeNames -> attributeNames
    int program -> program
    int vertexShaderHandle -> vertexShaderHandle
    int fragmentShaderHandle -> fragmentShaderHandle
    java.nio.FloatBuffer matrix -> matrix
    java.lang.String vertexShaderSource -> vertexShaderSource
    java.lang.String fragmentShaderSource -> fragmentShaderSource
    boolean invalidated -> invalidated
    int refCount -> refCount
    java.nio.IntBuffer intbuf -> intbuf
    java.nio.IntBuffer params -> params
    java.nio.IntBuffer type -> type
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> <init>
    void compileShaders(java.lang.String,java.lang.String) -> compileShaders
    int loadShader(int,java.lang.String) -> loadShader
    int linkProgram() -> linkProgram
    java.lang.String getLog() -> getLog
    boolean isCompiled() -> isCompiled
    int fetchAttributeLocation(java.lang.String) -> fetchAttributeLocation
    int fetchUniformLocation(java.lang.String) -> fetchUniformLocation
    int fetchUniformLocation(java.lang.String,boolean) -> fetchUniformLocation
    void setUniformi(java.lang.String,int) -> setUniformi
    void setUniformi(int,int) -> setUniformi
    void setUniformi(java.lang.String,int,int) -> setUniformi
    void setUniformi(int,int,int) -> setUniformi
    void setUniformi(java.lang.String,int,int,int) -> setUniformi
    void setUniformi(int,int,int,int) -> setUniformi
    void setUniformi(java.lang.String,int,int,int,int) -> setUniformi
    void setUniformi(int,int,int,int,int) -> setUniformi
    void setUniformf(java.lang.String,float) -> setUniformf
    void setUniformf(int,float) -> setUniformf
    void setUniformf(java.lang.String,float,float) -> setUniformf
    void setUniformf(int,float,float) -> setUniformf
    void setUniformf(java.lang.String,float,float,float) -> setUniformf
    void setUniformf(int,float,float,float) -> setUniformf
    void setUniformf(java.lang.String,float,float,float,float) -> setUniformf
    void setUniformf(int,float,float,float,float) -> setUniformf
    void setUniform1fv(java.lang.String,float[],int,int) -> setUniform1fv
    void setUniform1fv(int,float[],int,int) -> setUniform1fv
    void setUniform2fv(java.lang.String,float[],int,int) -> setUniform2fv
    void setUniform2fv(int,float[],int,int) -> setUniform2fv
    void setUniform3fv(java.lang.String,float[],int,int) -> setUniform3fv
    void setUniform3fv(int,float[],int,int) -> setUniform3fv
    void setUniform4fv(java.lang.String,float[],int,int) -> setUniform4fv
    void setUniform4fv(int,float[],int,int) -> setUniform4fv
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> setUniformMatrix
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4,boolean) -> setUniformMatrix
    void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4) -> setUniformMatrix
    void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4,boolean) -> setUniformMatrix
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3) -> setUniformMatrix
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3,boolean) -> setUniformMatrix
    void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3) -> setUniformMatrix
    void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3,boolean) -> setUniformMatrix
    void setUniformMatrix3fv(java.lang.String,java.nio.FloatBuffer,int,boolean) -> setUniformMatrix3fv
    void setUniformMatrix4fv(java.lang.String,java.nio.FloatBuffer,int,boolean) -> setUniformMatrix4fv
    void setUniformMatrix4fv(int,float[],int,int) -> setUniformMatrix4fv
    void setUniformMatrix4fv(java.lang.String,float[],int,int) -> setUniformMatrix4fv
    void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector2) -> setUniformf
    void setUniformf(int,com.badlogic.gdx.math.Vector2) -> setUniformf
    void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector3) -> setUniformf
    void setUniformf(int,com.badlogic.gdx.math.Vector3) -> setUniformf
    void setUniformf(java.lang.String,com.badlogic.gdx.graphics.Color) -> setUniformf
    void setUniformf(int,com.badlogic.gdx.graphics.Color) -> setUniformf
    void setVertexAttribute(java.lang.String,int,int,boolean,int,java.nio.Buffer) -> setVertexAttribute
    void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer) -> setVertexAttribute
    void setVertexAttribute(java.lang.String,int,int,boolean,int,int) -> setVertexAttribute
    void setVertexAttribute(int,int,int,boolean,int,int) -> setVertexAttribute
    void begin() -> begin
    void end() -> end
    void dispose() -> dispose
    void disableVertexAttribute(java.lang.String) -> disableVertexAttribute
    void disableVertexAttribute(int) -> disableVertexAttribute
    void enableVertexAttribute(java.lang.String) -> enableVertexAttribute
    void enableVertexAttribute(int) -> enableVertexAttribute
    void checkManaged() -> checkManaged
    void addManagedShader(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> addManagedShader
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> invalidateAllShaderPrograms
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> clearAllShaderPrograms
    java.lang.String getManagedStatus() -> getManagedStatus
    void setAttributef(java.lang.String,float,float,float,float) -> setAttributef
    void fetchUniforms() -> fetchUniforms
    void fetchAttributes() -> fetchAttributes
    boolean hasAttribute(java.lang.String) -> hasAttribute
    int getAttributeType(java.lang.String) -> getAttributeType
    int getAttributeLocation(java.lang.String) -> getAttributeLocation
    int getAttributeSize(java.lang.String) -> getAttributeSize
    boolean hasUniform(java.lang.String) -> hasUniform
    int getUniformType(java.lang.String) -> getUniformType
    int getUniformLocation(java.lang.String) -> getUniformLocation
    int getUniformSize(java.lang.String) -> getUniformSize
    java.lang.String[] getAttributes() -> getAttributes
    java.lang.String[] getUniforms() -> getUniforms
    java.lang.String getVertexShaderSource() -> getVertexShaderSource
    java.lang.String getFragmentShaderSource() -> getFragmentShaderSource
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> com.badlogic.gdx.graphics.glutils.ShapeRenderer:
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer -> renderer
    boolean matrixDirty -> matrixDirty
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> projectionMatrix
    com.badlogic.gdx.math.Matrix4 transformMatrix -> transformMatrix
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> combinedMatrix
    com.badlogic.gdx.math.Vector2 tmp -> tmp
    com.badlogic.gdx.graphics.Color color -> color
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType shapeType -> shapeType
    boolean autoShapeType -> autoShapeType
    float defaultRectLineWidth -> defaultRectLineWidth
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    void updateMatrices() -> updateMatrices
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> setProjectionMatrix
    com.badlogic.gdx.math.Matrix4 getProjectionMatrix() -> getProjectionMatrix
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> setTransformMatrix
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> getTransformMatrix
    void identity() -> identity
    void translate(float,float,float) -> translate
    void rotate(float,float,float,float) -> rotate
    void scale(float,float,float) -> scale
    void setAutoShapeType(boolean) -> setAutoShapeType
    void begin() -> begin
    void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> begin
    void set(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> set
    void point(float,float,float) -> point
    void line(float,float,float,float,float,float) -> line
    void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> line
    void line(float,float,float,float) -> line
    void line(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> line
    void line(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> line
    void line(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> line
    void curve(float,float,float,float,float,float,float,float,int) -> curve
    void triangle(float,float,float,float,float,float) -> triangle
    void triangle(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> triangle
    void rect(float,float,float,float) -> rect
    void rect(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> rect
    void rect(float,float,float,float,float,float,float,float,float) -> rect
    void rect(float,float,float,float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> rect
    void rectLine(float,float,float,float,float) -> rectLine
    void rectLine(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float) -> rectLine
    void box(float,float,float,float,float,float) -> box
    void x(float,float,float) -> x
    void x(com.badlogic.gdx.math.Vector2,float) -> x
    void arc(float,float,float,float,float) -> arc
    void arc(float,float,float,float,float,int) -> arc
    void circle(float,float,float) -> circle
    void circle(float,float,float,int) -> circle
    void ellipse(float,float,float,float) -> ellipse
    void ellipse(float,float,float,float,int) -> ellipse
    void cone(float,float,float,float,float) -> cone
    void cone(float,float,float,float,float,int) -> cone
    void polygon(float[],int,int) -> polygon
    void polygon(float[]) -> polygon
    void polyline(float[],int,int) -> polyline
    void polyline(float[]) -> polyline
    void check(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,int) -> check
    void end() -> end
    void flush() -> flush
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType getCurrentType() -> getCurrentType
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer getRenderer() -> getRenderer
    boolean isDrawing() -> isDrawing
    void dispose() -> dispose
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> Point
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> Line
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Filled -> Filled
    int glType -> glType
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] $VALUES -> $VALUES
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] values() -> values
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getGlType() -> getGlType
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.VertexArray -> com.badlogic.gdx.graphics.glutils.VertexArray:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> attributes
    java.nio.FloatBuffer buffer -> buffer
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    boolean isBound -> isBound
    void <init>(int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    void <init>(int,com.badlogic.gdx.graphics.VertexAttributes) -> <init>
    void dispose() -> dispose
    java.nio.FloatBuffer getBuffer() -> getBuffer
    int getNumVertices() -> getNumVertices
    int getNumMaxVertices() -> getNumMaxVertices
    void setVertices(float[],int,int) -> setVertices
    void updateVertices(int,float[],int,int) -> updateVertices
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> bind
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> bind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> unbind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> unbind
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> getAttributes
    void invalidate() -> invalidate
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.badlogic.gdx.graphics.glutils.VertexBufferObject:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> attributes
    java.nio.FloatBuffer buffer -> buffer
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    boolean ownsBuffer -> ownsBuffer
    int bufferHandle -> bufferHandle
    int usage -> usage
    boolean isDirty -> isDirty
    boolean isBound -> isBound
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> <init>
    void <init>(int,java.nio.ByteBuffer,boolean,com.badlogic.gdx.graphics.VertexAttributes) -> <init>
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> getAttributes
    int getNumVertices() -> getNumVertices
    int getNumMaxVertices() -> getNumMaxVertices
    java.nio.FloatBuffer getBuffer() -> getBuffer
    void setBuffer(java.nio.Buffer,boolean,com.badlogic.gdx.graphics.VertexAttributes) -> setBuffer
    void bufferChanged() -> bufferChanged
    void setVertices(float[],int,int) -> setVertices
    void updateVertices(int,float[],int,int) -> updateVertices
    int getUsage() -> getUsage
    void setUsage(int) -> setUsage
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> bind
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> bind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> unbind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> unbind
    void invalidate() -> invalidate
    void dispose() -> dispose
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> attributes
    java.nio.FloatBuffer buffer -> buffer
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    int bufferHandle -> bufferHandle
    boolean isDirect -> isDirect
    boolean isStatic -> isStatic
    int usage -> usage
    boolean isDirty -> isDirty
    boolean isBound -> isBound
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    int createBufferObject() -> createBufferObject
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> getAttributes
    int getNumVertices() -> getNumVertices
    int getNumMaxVertices() -> getNumMaxVertices
    java.nio.FloatBuffer getBuffer() -> getBuffer
    void bufferChanged() -> bufferChanged
    void setVertices(float[],int,int) -> setVertices
    void updateVertices(int,float[],int,int) -> updateVertices
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> bind
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> bind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> unbind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> unbind
    void invalidate() -> invalidate
    void dispose() -> dispose
    int getBufferHandle() -> getBufferHandle
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO -> com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO:
    java.nio.IntBuffer tmpHandle -> tmpHandle
    com.badlogic.gdx.graphics.VertexAttributes attributes -> attributes
    java.nio.FloatBuffer buffer -> buffer
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    int bufferHandle -> bufferHandle
    boolean isStatic -> isStatic
    int usage -> usage
    boolean isDirty -> isDirty
    boolean isBound -> isBound
    boolean vaoDirty -> vaoDirty
    int vaoHandle -> vaoHandle
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> <init>
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> getAttributes
    int getNumVertices() -> getNumVertices
    int getNumMaxVertices() -> getNumMaxVertices
    java.nio.FloatBuffer getBuffer() -> getBuffer
    void bufferChanged() -> bufferChanged
    void setVertices(float[],int,int) -> setVertices
    void updateVertices(int,float[],int,int) -> updateVertices
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> bind
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> bind
    void bindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> bindAttributes
    void bindData(com.badlogic.gdx.graphics.GL20) -> bindData
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> unbind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> unbind
    void invalidate() -> invalidate
    void dispose() -> dispose
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.VertexData -> com.badlogic.gdx.graphics.glutils.VertexData:
    int getNumVertices() -> getNumVertices
    int getNumMaxVertices() -> getNumMaxVertices
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> getAttributes
    void setVertices(float[],int,int) -> setVertices
    void updateVertices(int,float[],int,int) -> updateVertices
    java.nio.FloatBuffer getBuffer() -> getBuffer
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> bind
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> bind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> unbind
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> unbind
    void invalidate() -> invalidate
    void dispose() -> dispose
com.badlogic.gdx.graphics.profiling.GL20Profiler -> com.badlogic.gdx.graphics.profiling.GL20Profiler:
    com.badlogic.gdx.graphics.GL20 gl20 -> gl20
    void <init>(com.badlogic.gdx.graphics.GL20) -> <init>
    void glActiveTexture(int) -> glActiveTexture
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearDepthf(float) -> glClearDepthf
    void glClearStencil(int) -> glClearStencil
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDisable(int) -> glDisable
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFrontFace(int) -> glFrontFace
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGetError() -> glGetError
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glHint(int,int) -> glHint
    void glLineWidth(float) -> glLineWidth
    void glPixelStorei(int,int) -> glPixelStorei
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glScissor(int,int,int,int) -> glScissor
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glViewport(int,int,int,int) -> glViewport
    void glAttachShader(int,int) -> glAttachShader
    void glBindAttribLocation(int,int,java.lang.String) -> glBindAttribLocation
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBlendColor(float,float,float,float) -> glBlendColor
    void glBlendEquation(int) -> glBlendEquation
    void glBlendEquationSeparate(int,int) -> glBlendEquationSeparate
    void glBlendFuncSeparate(int,int,int,int) -> glBlendFuncSeparate
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glCompileShader(int) -> glCompileShader
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteShader(int) -> glDeleteShader
    void glDetachShader(int,int) -> glDetachShader
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer) -> glGetAttachedShaders
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetBooleanv(int,java.nio.Buffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer) -> glGetFramebufferAttachmentParameteriv
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer) -> glGetRenderbufferParameteriv
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetShaderPrecisionFormat
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetUniformfv(int,int,java.nio.FloatBuffer) -> glGetUniformfv
    void glGetUniformiv(int,int,java.nio.IntBuffer) -> glGetUniformiv
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glGetVertexAttribfv(int,int,java.nio.FloatBuffer) -> glGetVertexAttribfv
    void glGetVertexAttribiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribiv
    void glGetVertexAttribPointerv(int,int,java.nio.Buffer) -> glGetVertexAttribPointerv
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsFramebuffer(int) -> glIsFramebuffer
    boolean glIsProgram(int) -> glIsProgram
    boolean glIsRenderbuffer(int) -> glIsRenderbuffer
    boolean glIsShader(int) -> glIsShader
    boolean glIsTexture(int) -> glIsTexture
    void glLinkProgram(int) -> glLinkProgram
    void glReleaseShaderCompiler() -> glReleaseShaderCompiler
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int) -> glShaderBinary
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glStencilFuncSeparate(int,int,int,int) -> glStencilFuncSeparate
    void glStencilMaskSeparate(int,int) -> glStencilMaskSeparate
    void glStencilOpSeparate(int,int,int,int) -> glStencilOpSeparate
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glUniform1f(int,float) -> glUniform1f
    void glUniform1fv(int,int,java.nio.FloatBuffer) -> glUniform1fv
    void glUniform1i(int,int) -> glUniform1i
    void glUniform1iv(int,int,java.nio.IntBuffer) -> glUniform1iv
    void glUniform2f(int,float,float) -> glUniform2f
    void glUniform2fv(int,int,java.nio.FloatBuffer) -> glUniform2fv
    void glUniform2i(int,int,int) -> glUniform2i
    void glUniform2iv(int,int,java.nio.IntBuffer) -> glUniform2iv
    void glUniform3f(int,float,float,float) -> glUniform3f
    void glUniform3fv(int,int,java.nio.FloatBuffer) -> glUniform3fv
    void glUniform3i(int,int,int,int) -> glUniform3i
    void glUniform3iv(int,int,java.nio.IntBuffer) -> glUniform3iv
    void glUniform4f(int,float,float,float,float) -> glUniform4f
    void glUniform4fv(int,int,java.nio.FloatBuffer) -> glUniform4fv
    void glUniform4i(int,int,int,int,int) -> glUniform4i
    void glUniform4iv(int,int,java.nio.IntBuffer) -> glUniform4iv
    void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2fv
    void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3fv
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glValidateProgram(int) -> glValidateProgram
    void glVertexAttrib1f(int,float) -> glVertexAttrib1f
    void glVertexAttrib1fv(int,java.nio.FloatBuffer) -> glVertexAttrib1fv
    void glVertexAttrib2f(int,float,float) -> glVertexAttrib2f
    void glVertexAttrib2fv(int,java.nio.FloatBuffer) -> glVertexAttrib2fv
    void glVertexAttrib3f(int,float,float,float) -> glVertexAttrib3f
    void glVertexAttrib3fv(int,java.nio.FloatBuffer) -> glVertexAttrib3fv
    void glVertexAttrib4f(int,float,float,float,float) -> glVertexAttrib4f
    void glVertexAttrib4fv(int,java.nio.FloatBuffer) -> glVertexAttrib4fv
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
    void glDeleteTexture(int) -> glDeleteTexture
    int glGenTexture() -> glGenTexture
    void glDeleteBuffer(int) -> glDeleteBuffer
    void glDeleteFramebuffer(int) -> glDeleteFramebuffer
    void glDeleteRenderbuffer(int) -> glDeleteRenderbuffer
    int glGenBuffer() -> glGenBuffer
    int glGenFramebuffer() -> glGenFramebuffer
    int glGenRenderbuffer() -> glGenRenderbuffer
    void glUniform1fv(int,int,float[],int) -> glUniform1fv
    void glUniform1iv(int,int,int[],int) -> glUniform1iv
    void glUniform2fv(int,int,float[],int) -> glUniform2fv
    void glUniform2iv(int,int,int[],int) -> glUniform2iv
    void glUniform3fv(int,int,float[],int) -> glUniform3fv
    void glUniform3iv(int,int,int[],int) -> glUniform3iv
    void glUniform4fv(int,int,float[],int) -> glUniform4fv
    void glUniform4iv(int,int,int[],int) -> glUniform4iv
    void glUniformMatrix2fv(int,int,boolean,float[],int) -> glUniformMatrix2fv
    void glUniformMatrix3fv(int,int,boolean,float[],int) -> glUniformMatrix3fv
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> glUniformMatrix4fv
com.badlogic.gdx.graphics.profiling.GL30Profiler -> com.badlogic.gdx.graphics.profiling.GL30Profiler:
    com.badlogic.gdx.graphics.GL30 gl30 -> gl30
    void <init>(com.badlogic.gdx.graphics.GL30) -> <init>
    void glActiveTexture(int) -> glActiveTexture
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearDepthf(float) -> glClearDepthf
    void glClearStencil(int) -> glClearStencil
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDisable(int) -> glDisable
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFrontFace(int) -> glFrontFace
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGetError() -> glGetError
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glHint(int,int) -> glHint
    void glLineWidth(float) -> glLineWidth
    void glPixelStorei(int,int) -> glPixelStorei
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glScissor(int,int,int,int) -> glScissor
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glViewport(int,int,int,int) -> glViewport
    void glAttachShader(int,int) -> glAttachShader
    void glBindAttribLocation(int,int,java.lang.String) -> glBindAttribLocation
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBlendColor(float,float,float,float) -> glBlendColor
    void glBlendEquation(int) -> glBlendEquation
    void glBlendEquationSeparate(int,int) -> glBlendEquationSeparate
    void glBlendFuncSeparate(int,int,int,int) -> glBlendFuncSeparate
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glCompileShader(int) -> glCompileShader
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> glDeleteFramebuffers
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> glDeleteRenderbuffers
    void glDeleteShader(int) -> glDeleteShader
    void glDetachShader(int,int) -> glDetachShader
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGenerateMipmap(int) -> glGenerateMipmap
    void glGenFramebuffers(int,java.nio.IntBuffer) -> glGenFramebuffers
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> glGenRenderbuffers
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer) -> glGetAttachedShaders
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetBooleanv(int,java.nio.Buffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer) -> glGetFramebufferAttachmentParameteriv
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer) -> glGetRenderbufferParameteriv
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer) -> glGetShaderPrecisionFormat
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetUniformfv(int,int,java.nio.FloatBuffer) -> glGetUniformfv
    void glGetUniformiv(int,int,java.nio.IntBuffer) -> glGetUniformiv
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glGetVertexAttribfv(int,int,java.nio.FloatBuffer) -> glGetVertexAttribfv
    void glGetVertexAttribiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribiv
    void glGetVertexAttribPointerv(int,int,java.nio.Buffer) -> glGetVertexAttribPointerv
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsFramebuffer(int) -> glIsFramebuffer
    boolean glIsProgram(int) -> glIsProgram
    boolean glIsRenderbuffer(int) -> glIsRenderbuffer
    boolean glIsShader(int) -> glIsShader
    boolean glIsTexture(int) -> glIsTexture
    void glLinkProgram(int) -> glLinkProgram
    void glReleaseShaderCompiler() -> glReleaseShaderCompiler
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int) -> glShaderBinary
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glStencilFuncSeparate(int,int,int,int) -> glStencilFuncSeparate
    void glStencilMaskSeparate(int,int) -> glStencilMaskSeparate
    void glStencilOpSeparate(int,int,int,int) -> glStencilOpSeparate
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glUniform1f(int,float) -> glUniform1f
    void glUniform1fv(int,int,java.nio.FloatBuffer) -> glUniform1fv
    void glUniform1i(int,int) -> glUniform1i
    void glUniform1iv(int,int,java.nio.IntBuffer) -> glUniform1iv
    void glUniform2f(int,float,float) -> glUniform2f
    void glUniform2fv(int,int,java.nio.FloatBuffer) -> glUniform2fv
    void glUniform2i(int,int,int) -> glUniform2i
    void glUniform2iv(int,int,java.nio.IntBuffer) -> glUniform2iv
    void glUniform3f(int,float,float,float) -> glUniform3f
    void glUniform3fv(int,int,java.nio.FloatBuffer) -> glUniform3fv
    void glUniform3i(int,int,int,int) -> glUniform3i
    void glUniform3iv(int,int,java.nio.IntBuffer) -> glUniform3iv
    void glUniform4f(int,float,float,float,float) -> glUniform4f
    void glUniform4fv(int,int,java.nio.FloatBuffer) -> glUniform4fv
    void glUniform4i(int,int,int,int,int) -> glUniform4i
    void glUniform4iv(int,int,java.nio.IntBuffer) -> glUniform4iv
    void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2fv
    void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3fv
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glValidateProgram(int) -> glValidateProgram
    void glVertexAttrib1f(int,float) -> glVertexAttrib1f
    void glVertexAttrib1fv(int,java.nio.FloatBuffer) -> glVertexAttrib1fv
    void glVertexAttrib2f(int,float,float) -> glVertexAttrib2f
    void glVertexAttrib2fv(int,java.nio.FloatBuffer) -> glVertexAttrib2fv
    void glVertexAttrib3f(int,float,float,float) -> glVertexAttrib3f
    void glVertexAttrib3fv(int,java.nio.FloatBuffer) -> glVertexAttrib3fv
    void glVertexAttrib4f(int,float,float,float,float) -> glVertexAttrib4f
    void glVertexAttrib4fv(int,java.nio.FloatBuffer) -> glVertexAttrib4fv
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
    void glReadBuffer(int) -> glReadBuffer
    void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer) -> glDrawRangeElements
    void glDrawRangeElements(int,int,int,int,int,int) -> glDrawRangeElements
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage3D
    void glTexImage3D(int,int,int,int,int,int,int,int,int,int) -> glTexImage3D
    void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage3D
    void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int) -> glTexSubImage3D
    void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int) -> glCopyTexSubImage3D
    void glGenQueries(int,int[],int) -> glGenQueries
    void glGenQueries(int,java.nio.IntBuffer) -> glGenQueries
    void glDeleteQueries(int,int[],int) -> glDeleteQueries
    void glDeleteQueries(int,java.nio.IntBuffer) -> glDeleteQueries
    boolean glIsQuery(int) -> glIsQuery
    void glBeginQuery(int,int) -> glBeginQuery
    void glEndQuery(int) -> glEndQuery
    void glGetQueryiv(int,int,java.nio.IntBuffer) -> glGetQueryiv
    void glGetQueryObjectuiv(int,int,java.nio.IntBuffer) -> glGetQueryObjectuiv
    boolean glUnmapBuffer(int) -> glUnmapBuffer
    java.nio.Buffer glGetBufferPointerv(int,int) -> glGetBufferPointerv
    void glDrawBuffers(int,java.nio.IntBuffer) -> glDrawBuffers
    void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2x3fv
    void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3x2fv
    void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix2x4fv
    void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4x2fv
    void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix3x4fv
    void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer) -> glUniformMatrix4x3fv
    void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int) -> glBlitFramebuffer
    void glRenderbufferStorageMultisample(int,int,int,int,int) -> glRenderbufferStorageMultisample
    void glFramebufferTextureLayer(int,int,int,int,int) -> glFramebufferTextureLayer
    void glFlushMappedBufferRange(int,int,int) -> glFlushMappedBufferRange
    void glBindVertexArray(int) -> glBindVertexArray
    void glDeleteVertexArrays(int,int[],int) -> glDeleteVertexArrays
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> glDeleteVertexArrays
    void glGenVertexArrays(int,int[],int) -> glGenVertexArrays
    void glGenVertexArrays(int,java.nio.IntBuffer) -> glGenVertexArrays
    boolean glIsVertexArray(int) -> glIsVertexArray
    void glBeginTransformFeedback(int) -> glBeginTransformFeedback
    void glEndTransformFeedback() -> glEndTransformFeedback
    void glBindBufferRange(int,int,int,int,int) -> glBindBufferRange
    void glBindBufferBase(int,int,int) -> glBindBufferBase
    void glTransformFeedbackVaryings(int,java.lang.String[],int) -> glTransformFeedbackVaryings
    void glVertexAttribIPointer(int,int,int,int,int) -> glVertexAttribIPointer
    void glGetVertexAttribIiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribIiv
    void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer) -> glGetVertexAttribIuiv
    void glVertexAttribI4i(int,int,int,int,int) -> glVertexAttribI4i
    void glVertexAttribI4ui(int,int,int,int,int) -> glVertexAttribI4ui
    void glGetUniformuiv(int,int,java.nio.IntBuffer) -> glGetUniformuiv
    int glGetFragDataLocation(int,java.lang.String) -> glGetFragDataLocation
    void glUniform1uiv(int,int,java.nio.IntBuffer) -> glUniform1uiv
    void glUniform3uiv(int,int,java.nio.IntBuffer) -> glUniform3uiv
    void glUniform4uiv(int,int,java.nio.IntBuffer) -> glUniform4uiv
    void glClearBufferiv(int,int,java.nio.IntBuffer) -> glClearBufferiv
    void glClearBufferuiv(int,int,java.nio.IntBuffer) -> glClearBufferuiv
    void glClearBufferfv(int,int,java.nio.FloatBuffer) -> glClearBufferfv
    void glClearBufferfi(int,int,float,int) -> glClearBufferfi
    java.lang.String glGetStringi(int,int) -> glGetStringi
    void glCopyBufferSubData(int,int,int,int,int) -> glCopyBufferSubData
    void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer) -> glGetUniformIndices
    void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer) -> glGetActiveUniformsiv
    int glGetUniformBlockIndex(int,java.lang.String) -> glGetUniformBlockIndex
    void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer) -> glGetActiveUniformBlockiv
    void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer) -> glGetActiveUniformBlockName
    java.lang.String glGetActiveUniformBlockName(int,int) -> glGetActiveUniformBlockName
    void glUniformBlockBinding(int,int,int) -> glUniformBlockBinding
    void glDrawArraysInstanced(int,int,int,int) -> glDrawArraysInstanced
    void glDrawElementsInstanced(int,int,int,int,int) -> glDrawElementsInstanced
    void glGetInteger64v(int,java.nio.LongBuffer) -> glGetInteger64v
    void glGetBufferParameteri64v(int,int,java.nio.LongBuffer) -> glGetBufferParameteri64v
    void glGenSamplers(int,int[],int) -> glGenSamplers
    void glGenSamplers(int,java.nio.IntBuffer) -> glGenSamplers
    void glDeleteSamplers(int,int[],int) -> glDeleteSamplers
    void glDeleteSamplers(int,java.nio.IntBuffer) -> glDeleteSamplers
    boolean glIsSampler(int) -> glIsSampler
    void glBindSampler(int,int) -> glBindSampler
    void glSamplerParameteri(int,int,int) -> glSamplerParameteri
    void glSamplerParameteriv(int,int,java.nio.IntBuffer) -> glSamplerParameteriv
    void glSamplerParameterf(int,int,float) -> glSamplerParameterf
    void glSamplerParameterfv(int,int,java.nio.FloatBuffer) -> glSamplerParameterfv
    void glGetSamplerParameteriv(int,int,java.nio.IntBuffer) -> glGetSamplerParameteriv
    void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer) -> glGetSamplerParameterfv
    void glVertexAttribDivisor(int,int) -> glVertexAttribDivisor
    void glBindTransformFeedback(int,int) -> glBindTransformFeedback
    void glDeleteTransformFeedbacks(int,int[],int) -> glDeleteTransformFeedbacks
    void glDeleteTransformFeedbacks(int,java.nio.IntBuffer) -> glDeleteTransformFeedbacks
    void glGenTransformFeedbacks(int,int[],int) -> glGenTransformFeedbacks
    void glGenTransformFeedbacks(int,java.nio.IntBuffer) -> glGenTransformFeedbacks
    boolean glIsTransformFeedback(int) -> glIsTransformFeedback
    void glPauseTransformFeedback() -> glPauseTransformFeedback
    void glResumeTransformFeedback() -> glResumeTransformFeedback
    void glProgramParameteri(int,int,int) -> glProgramParameteri
    void glInvalidateFramebuffer(int,int,java.nio.IntBuffer) -> glInvalidateFramebuffer
    void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int) -> glInvalidateSubFramebuffer
    void glDeleteTexture(int) -> glDeleteTexture
    int glGenTexture() -> glGenTexture
    void glDeleteBuffer(int) -> glDeleteBuffer
    void glDeleteFramebuffer(int) -> glDeleteFramebuffer
    void glDeleteRenderbuffer(int) -> glDeleteRenderbuffer
    int glGenBuffer() -> glGenBuffer
    int glGenFramebuffer() -> glGenFramebuffer
    int glGenRenderbuffer() -> glGenRenderbuffer
    void glUniform1fv(int,int,float[],int) -> glUniform1fv
    void glUniform1iv(int,int,int[],int) -> glUniform1iv
    void glUniform2fv(int,int,float[],int) -> glUniform2fv
    void glUniform2iv(int,int,int[],int) -> glUniform2iv
    void glUniform3fv(int,int,float[],int) -> glUniform3fv
    void glUniform3iv(int,int,int[],int) -> glUniform3iv
    void glUniform4fv(int,int,float[],int) -> glUniform4fv
    void glUniform4iv(int,int,int[],int) -> glUniform4iv
    void glUniformMatrix2fv(int,int,boolean,float[],int) -> glUniformMatrix2fv
    void glUniformMatrix3fv(int,int,boolean,float[],int) -> glUniformMatrix3fv
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> glUniformMatrix4fv
com.badlogic.gdx.graphics.profiling.GLProfiler -> com.badlogic.gdx.graphics.profiling.GLProfiler:
    int calls -> calls
    int textureBindings -> textureBindings
    int drawCalls -> drawCalls
    int shaderSwitches -> shaderSwitches
    com.badlogic.gdx.math.FloatCounter vertexCount -> vertexCount
    void <init>() -> <init>
    void enable() -> enable
    void disable() -> disable
    boolean isEnabled() -> isEnabled
    void reset() -> reset
    void <clinit>() -> <clinit>
com.badlogic.gdx.input.GestureDetector -> com.badlogic.gdx.input.GestureDetector:
    com.badlogic.gdx.input.GestureDetector$GestureListener listener -> listener
    float tapSquareSize -> tapSquareSize
    long tapCountInterval -> tapCountInterval
    float longPressSeconds -> longPressSeconds
    long maxFlingDelay -> maxFlingDelay
    boolean inTapSquare -> inTapSquare
    int tapCount -> tapCount
    long lastTapTime -> lastTapTime
    float lastTapX -> lastTapX
    float lastTapY -> lastTapY
    int lastTapButton -> lastTapButton
    int lastTapPointer -> lastTapPointer
    boolean longPressFired -> longPressFired
    boolean pinching -> pinching
    boolean panning -> panning
    com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker -> tracker
    float tapSquareCenterX -> tapSquareCenterX
    float tapSquareCenterY -> tapSquareCenterY
    long gestureStartTime -> gestureStartTime
    com.badlogic.gdx.math.Vector2 pointer1 -> pointer1
    com.badlogic.gdx.math.Vector2 pointer2 -> pointer2
    com.badlogic.gdx.math.Vector2 initialPointer1 -> initialPointer1
    com.badlogic.gdx.math.Vector2 initialPointer2 -> initialPointer2
    com.badlogic.gdx.utils.Timer$Task longPressTask -> longPressTask
    void <init>(com.badlogic.gdx.input.GestureDetector$GestureListener) -> <init>
    void <init>(float,float,float,float,com.badlogic.gdx.input.GestureDetector$GestureListener) -> <init>
    boolean touchDown(int,int,int,int) -> touchDown
    boolean touchDown(float,float,int,int) -> touchDown
    boolean touchDragged(int,int,int) -> touchDragged
    boolean touchDragged(float,float,int) -> touchDragged
    boolean touchUp(int,int,int,int) -> touchUp
    boolean touchUp(float,float,int,int) -> touchUp
    void cancel() -> cancel
    boolean isLongPressed() -> isLongPressed
    boolean isLongPressed(float) -> isLongPressed
    boolean isPanning() -> isPanning
    void reset() -> reset
    boolean isWithinTapSquare(float,float,float,float) -> isWithinTapSquare
    void invalidateTapSquare() -> invalidateTapSquare
    void setTapSquareSize(float) -> setTapSquareSize
    void setTapCountInterval(float) -> setTapCountInterval
    void setLongPressSeconds(float) -> setLongPressSeconds
    void setMaxFlingDelay(long) -> setMaxFlingDelay
com.badlogic.gdx.input.GestureDetector$1 -> com.badlogic.gdx.input.GestureDetector$1:
    com.badlogic.gdx.input.GestureDetector this$0 -> this$0
    void <init>(com.badlogic.gdx.input.GestureDetector) -> <init>
    void run() -> run
com.badlogic.gdx.input.GestureDetector$GestureAdapter -> com.badlogic.gdx.input.GestureDetector$GestureAdapter:
    void <init>() -> <init>
    boolean touchDown(float,float,int,int) -> touchDown
    boolean tap(float,float,int,int) -> tap
    boolean longPress(float,float) -> longPress
    boolean fling(float,float,int) -> fling
    boolean pan(float,float,float,float) -> pan
    boolean panStop(float,float,int,int) -> panStop
    boolean zoom(float,float) -> zoom
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> pinch
com.badlogic.gdx.input.GestureDetector$GestureListener -> com.badlogic.gdx.input.GestureDetector$GestureListener:
    boolean touchDown(float,float,int,int) -> touchDown
    boolean tap(float,float,int,int) -> tap
    boolean longPress(float,float) -> longPress
    boolean fling(float,float,int) -> fling
    boolean pan(float,float,float,float) -> pan
    boolean panStop(float,float,int,int) -> panStop
    boolean zoom(float,float) -> zoom
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> pinch
com.badlogic.gdx.input.GestureDetector$VelocityTracker -> com.badlogic.gdx.input.GestureDetector$VelocityTracker:
    int sampleSize -> sampleSize
    float lastX -> lastX
    float lastY -> lastY
    float deltaX -> deltaX
    float deltaY -> deltaY
    long lastTime -> lastTime
    int numSamples -> numSamples
    float[] meanX -> meanX
    float[] meanY -> meanY
    long[] meanTime -> meanTime
    void <init>() -> <init>
    void start(float,float,long) -> start
    void update(float,float,long) -> update
    float getVelocityX() -> getVelocityX
    float getVelocityY() -> getVelocityY
    float getAverage(float[],int) -> getAverage
    long getAverage(long[],int) -> getAverage
    float getSum(float[],int) -> getSum
com.badlogic.gdx.input.RemoteInput -> com.badlogic.gdx.input.RemoteInput:
    int DEFAULT_PORT -> DEFAULT_PORT
    java.net.ServerSocket serverSocket -> serverSocket
    float[] accel -> accel
    float[] compass -> compass
    boolean multiTouch -> multiTouch
    float remoteWidth -> remoteWidth
    float remoteHeight -> remoteHeight
    boolean connected -> connected
    com.badlogic.gdx.input.RemoteInput$RemoteInputListener listener -> listener
    int keyCount -> keyCount
    boolean[] keys -> keys
    boolean keyJustPressed -> keyJustPressed
    boolean[] justPressedKeys -> justPressedKeys
    int[] touchX -> touchX
    int[] touchY -> touchY
    boolean[] isTouched -> isTouched
    boolean justTouched -> justTouched
    com.badlogic.gdx.InputProcessor processor -> processor
    int port -> port
    java.lang.String[] ips -> ips
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.input.RemoteInput$RemoteInputListener) -> <init>
    void <init>(int) -> <init>
    void <init>(int,com.badlogic.gdx.input.RemoteInput$RemoteInputListener) -> <init>
    void run() -> run
    boolean isConnected() -> isConnected
    float getAccelerometerX() -> getAccelerometerX
    float getAccelerometerY() -> getAccelerometerY
    float getAccelerometerZ() -> getAccelerometerZ
    int getX() -> getX
    int getX(int) -> getX
    int getY() -> getY
    int getY(int) -> getY
    boolean isTouched() -> isTouched
    boolean justTouched() -> justTouched
    boolean isTouched(int) -> isTouched
    boolean isButtonPressed(int) -> isButtonPressed
    boolean isKeyPressed(int) -> isKeyPressed
    boolean isKeyJustPressed(int) -> isKeyJustPressed
    void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String) -> getTextInput
    void setOnscreenKeyboardVisible(boolean) -> setOnscreenKeyboardVisible
    void vibrate(int) -> vibrate
    void vibrate(long[],int) -> vibrate
    void cancelVibrate() -> cancelVibrate
    float getAzimuth() -> getAzimuth
    float getPitch() -> getPitch
    float getRoll() -> getRoll
    void setCatchBackKey(boolean) -> setCatchBackKey
    boolean isCatchBackKey() -> isCatchBackKey
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> setInputProcessor
    com.badlogic.gdx.InputProcessor getInputProcessor() -> getInputProcessor
    java.lang.String[] getIPs() -> getIPs
    boolean isPeripheralAvailable(com.badlogic.gdx.Input$Peripheral) -> isPeripheralAvailable
    int getRotation() -> getRotation
    com.badlogic.gdx.Input$Orientation getNativeOrientation() -> getNativeOrientation
    void setCursorCatched(boolean) -> setCursorCatched
    boolean isCursorCatched() -> isCursorCatched
    int getDeltaX() -> getDeltaX
    int getDeltaX(int) -> getDeltaX
    int getDeltaY() -> getDeltaY
    int getDeltaY(int) -> getDeltaY
    void setCursorPosition(int,int) -> setCursorPosition
    void setCursorImage(com.badlogic.gdx.graphics.Pixmap,int,int) -> setCursorImage
    void setCatchMenuKey(boolean) -> setCatchMenuKey
    long getCurrentEventTime() -> getCurrentEventTime
    void getRotationMatrix(float[]) -> getRotationMatrix
    void <clinit>() -> <clinit>
com.badlogic.gdx.input.RemoteInput$EventTrigger -> com.badlogic.gdx.input.RemoteInput$EventTrigger:
    com.badlogic.gdx.input.RemoteInput$TouchEvent touchEvent -> touchEvent
    com.badlogic.gdx.input.RemoteInput$KeyEvent keyEvent -> keyEvent
    com.badlogic.gdx.input.RemoteInput this$0 -> this$0
    void <init>(com.badlogic.gdx.input.RemoteInput,com.badlogic.gdx.input.RemoteInput$TouchEvent,com.badlogic.gdx.input.RemoteInput$KeyEvent) -> <init>
    void run() -> run
com.badlogic.gdx.input.RemoteInput$KeyEvent -> com.badlogic.gdx.input.RemoteInput$KeyEvent:
    int KEY_DOWN -> KEY_DOWN
    int KEY_UP -> KEY_UP
    int KEY_TYPED -> KEY_TYPED
    long timeStamp -> timeStamp
    int type -> type
    int keyCode -> keyCode
    char keyChar -> keyChar
    com.badlogic.gdx.input.RemoteInput this$0 -> this$0
    void <init>(com.badlogic.gdx.input.RemoteInput) -> <init>
com.badlogic.gdx.input.RemoteInput$RemoteInputListener -> com.badlogic.gdx.input.RemoteInput$RemoteInputListener:
    void onConnected() -> onConnected
    void onDisconnected() -> onDisconnected
com.badlogic.gdx.input.RemoteInput$TouchEvent -> com.badlogic.gdx.input.RemoteInput$TouchEvent:
    int TOUCH_DOWN -> TOUCH_DOWN
    int TOUCH_UP -> TOUCH_UP
    int TOUCH_DRAGGED -> TOUCH_DRAGGED
    long timeStamp -> timeStamp
    int type -> type
    int x -> x
    int y -> y
    int pointer -> pointer
    com.badlogic.gdx.input.RemoteInput this$0 -> this$0
    void <init>(com.badlogic.gdx.input.RemoteInput) -> <init>
com.badlogic.gdx.input.RemoteSender -> com.badlogic.gdx.input.RemoteSender:
    java.io.DataOutputStream out -> out
    boolean connected -> connected
    int KEY_DOWN -> KEY_DOWN
    int KEY_UP -> KEY_UP
    int KEY_TYPED -> KEY_TYPED
    int TOUCH_DOWN -> TOUCH_DOWN
    int TOUCH_UP -> TOUCH_UP
    int TOUCH_DRAGGED -> TOUCH_DRAGGED
    int ACCEL -> ACCEL
    int COMPASS -> COMPASS
    int SIZE -> SIZE
    void <init>(java.lang.String,int) -> <init>
    void sendUpdate() -> sendUpdate
    boolean keyDown(int) -> keyDown
    boolean keyUp(int) -> keyUp
    boolean keyTyped(char) -> keyTyped
    boolean touchDown(int,int,int,int) -> touchDown
    boolean touchUp(int,int,int,int) -> touchUp
    boolean touchDragged(int,int,int) -> touchDragged
    boolean mouseMoved(int,int) -> mouseMoved
    boolean scrolled(int) -> scrolled
    boolean isConnected() -> isConnected
com.badlogic.gdx.maps.ImageResolver -> com.badlogic.gdx.maps.ImageResolver:
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> getImage
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver -> com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver:
    com.badlogic.gdx.assets.AssetManager assetManager -> assetManager
    void <init>(com.badlogic.gdx.assets.AssetManager) -> <init>
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> getImage
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver -> com.badlogic.gdx.maps.ImageResolver$DirectImageResolver:
    com.badlogic.gdx.utils.ObjectMap images -> images
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> getImage
com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver -> com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver:
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> atlas
    void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> <init>
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> getImage
com.badlogic.gdx.maps.Map -> com.badlogic.gdx.maps.Map:
    com.badlogic.gdx.maps.MapLayers layers -> layers
    com.badlogic.gdx.maps.MapProperties properties -> properties
    void <init>() -> <init>
    com.badlogic.gdx.maps.MapLayers getLayers() -> getLayers
    com.badlogic.gdx.maps.MapProperties getProperties() -> getProperties
    void dispose() -> dispose
com.badlogic.gdx.maps.MapLayer -> com.badlogic.gdx.maps.MapLayer:
    java.lang.String name -> name
    float opacity -> opacity
    boolean visible -> visible
    com.badlogic.gdx.maps.MapObjects objects -> objects
    com.badlogic.gdx.maps.MapProperties properties -> properties
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    float getOpacity() -> getOpacity
    void setOpacity(float) -> setOpacity
    com.badlogic.gdx.maps.MapObjects getObjects() -> getObjects
    boolean isVisible() -> isVisible
    void setVisible(boolean) -> setVisible
    com.badlogic.gdx.maps.MapProperties getProperties() -> getProperties
com.badlogic.gdx.maps.MapLayers -> com.badlogic.gdx.maps.MapLayers:
    com.badlogic.gdx.utils.Array layers -> layers
    void <init>() -> <init>
    com.badlogic.gdx.maps.MapLayer get(int) -> get
    com.badlogic.gdx.maps.MapLayer get(java.lang.String) -> get
    int getCount() -> getCount
    void add(com.badlogic.gdx.maps.MapLayer) -> add
    void remove(int) -> remove
    void remove(com.badlogic.gdx.maps.MapLayer) -> remove
    com.badlogic.gdx.utils.Array getByType(java.lang.Class) -> getByType
    com.badlogic.gdx.utils.Array getByType(java.lang.Class,com.badlogic.gdx.utils.Array) -> getByType
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.maps.MapObject -> com.badlogic.gdx.maps.MapObject:
    java.lang.String name -> name
    float opacity -> opacity
    boolean visible -> visible
    com.badlogic.gdx.maps.MapProperties properties -> properties
    com.badlogic.gdx.graphics.Color color -> color
    void <init>() -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    float getOpacity() -> getOpacity
    void setOpacity(float) -> setOpacity
    boolean isVisible() -> isVisible
    void setVisible(boolean) -> setVisible
    com.badlogic.gdx.maps.MapProperties getProperties() -> getProperties
com.badlogic.gdx.maps.MapObjects -> com.badlogic.gdx.maps.MapObjects:
    com.badlogic.gdx.utils.Array objects -> objects
    void <init>() -> <init>
    com.badlogic.gdx.maps.MapObject get(int) -> get
    com.badlogic.gdx.maps.MapObject get(java.lang.String) -> get
    void add(com.badlogic.gdx.maps.MapObject) -> add
    void remove(int) -> remove
    void remove(com.badlogic.gdx.maps.MapObject) -> remove
    int getCount() -> getCount
    com.badlogic.gdx.utils.Array getByType(java.lang.Class) -> getByType
    com.badlogic.gdx.utils.Array getByType(java.lang.Class,com.badlogic.gdx.utils.Array) -> getByType
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.maps.MapProperties -> com.badlogic.gdx.maps.MapProperties:
    com.badlogic.gdx.utils.ObjectMap properties -> properties
    void <init>() -> <init>
    boolean containsKey(java.lang.String) -> containsKey
    java.lang.Object get(java.lang.String) -> get
    java.lang.Object get(java.lang.String,java.lang.Class) -> get
    java.lang.Object get(java.lang.String,java.lang.Object,java.lang.Class) -> get
    void put(java.lang.String,java.lang.Object) -> put
    void putAll(com.badlogic.gdx.maps.MapProperties) -> putAll
    void remove(java.lang.String) -> remove
    void clear() -> clear
    java.util.Iterator getKeys() -> getKeys
    java.util.Iterator getValues() -> getValues
com.badlogic.gdx.maps.MapRenderer -> com.badlogic.gdx.maps.MapRenderer:
    void setView(com.badlogic.gdx.graphics.OrthographicCamera) -> setView
    void setView(com.badlogic.gdx.math.Matrix4,float,float,float,float) -> setView
    void render() -> render
    void render(int[]) -> render
com.badlogic.gdx.maps.objects.CircleMapObject -> com.badlogic.gdx.maps.objects.CircleMapObject:
    com.badlogic.gdx.math.Circle circle -> circle
    com.badlogic.gdx.math.Circle getCircle() -> getCircle
    void <init>() -> <init>
    void <init>(float,float,float) -> <init>
com.badlogic.gdx.maps.objects.EllipseMapObject -> com.badlogic.gdx.maps.objects.EllipseMapObject:
    com.badlogic.gdx.math.Ellipse ellipse -> ellipse
    com.badlogic.gdx.math.Ellipse getEllipse() -> getEllipse
    void <init>() -> <init>
    void <init>(float,float,float,float) -> <init>
com.badlogic.gdx.maps.objects.PolygonMapObject -> com.badlogic.gdx.maps.objects.PolygonMapObject:
    com.badlogic.gdx.math.Polygon polygon -> polygon
    com.badlogic.gdx.math.Polygon getPolygon() -> getPolygon
    void setPolygon(com.badlogic.gdx.math.Polygon) -> setPolygon
    void <init>() -> <init>
    void <init>(float[]) -> <init>
    void <init>(com.badlogic.gdx.math.Polygon) -> <init>
com.badlogic.gdx.maps.objects.PolylineMapObject -> com.badlogic.gdx.maps.objects.PolylineMapObject:
    com.badlogic.gdx.math.Polyline polyline -> polyline
    com.badlogic.gdx.math.Polyline getPolyline() -> getPolyline
    void setPolyline(com.badlogic.gdx.math.Polyline) -> setPolyline
    void <init>() -> <init>
    void <init>(float[]) -> <init>
    void <init>(com.badlogic.gdx.math.Polyline) -> <init>
com.badlogic.gdx.maps.objects.RectangleMapObject -> com.badlogic.gdx.maps.objects.RectangleMapObject:
    com.badlogic.gdx.math.Rectangle rectangle -> rectangle
    com.badlogic.gdx.math.Rectangle getRectangle() -> getRectangle
    void <init>() -> <init>
    void <init>(float,float,float,float) -> <init>
com.badlogic.gdx.maps.objects.TextureMapObject -> com.badlogic.gdx.maps.objects.TextureMapObject:
    float x -> x
    float y -> y
    float originX -> originX
    float originY -> originY
    float scaleX -> scaleX
    float scaleY -> scaleY
    float rotation -> rotation
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> textureRegion
    float getX() -> getX
    void setX(float) -> setX
    float getY() -> getY
    void setY(float) -> setY
    float getOriginX() -> getOriginX
    void setOriginX(float) -> setOriginX
    float getOriginY() -> getOriginY
    void setOriginY(float) -> setOriginY
    float getScaleX() -> getScaleX
    void setScaleX(float) -> setScaleX
    float getScaleY() -> getScaleY
    void setScaleY(float) -> setScaleY
    float getRotation() -> getRotation
    void setRotation(float) -> setRotation
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> getTextureRegion
    void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> setTextureRegion
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader:
    com.badlogic.gdx.utils.Array trackedTextures -> trackedTextures
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String) -> load
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters) -> getDependencies
    com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters) -> load
    com.badlogic.gdx.files.FileHandle loadAtlas(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle) -> loadAtlas
    void setTextureFilters(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> setTextureFilters
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters) -> loadAsync
    com.badlogic.gdx.maps.tiled.TiledMap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters) -> loadSync
    com.badlogic.gdx.maps.tiled.TiledMap loadMap(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver) -> loadMap
    void loadTileset(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver) -> loadTileset
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver:
    com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas(java.lang.String) -> getAtlas
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver:
    com.badlogic.gdx.assets.AssetManager assetManager -> assetManager
    void <init>(com.badlogic.gdx.assets.AssetManager) -> <init>
    com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas(java.lang.String) -> getAtlas
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver:
    com.badlogic.gdx.utils.ObjectMap atlases -> atlases
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas(java.lang.String) -> getAtlas
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters:
    boolean forceTextureFilters -> forceTextureFilters
    void <init>() -> <init>
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader -> com.badlogic.gdx.maps.tiled.BaseTmxMapLoader:
    int FLAG_FLIP_HORIZONTALLY -> FLAG_FLIP_HORIZONTALLY
    int FLAG_FLIP_VERTICALLY -> FLAG_FLIP_VERTICALLY
    int FLAG_FLIP_DIAGONALLY -> FLAG_FLIP_DIAGONALLY
    int MASK_CLEAR -> MASK_CLEAR
    com.badlogic.gdx.utils.XmlReader xml -> xml
    com.badlogic.gdx.utils.XmlReader$Element root -> root
    boolean convertObjectToTileSpace -> convertObjectToTileSpace
    boolean flipY -> flipY
    int mapTileWidth -> mapTileWidth
    int mapTileHeight -> mapTileHeight
    int mapWidthInPixels -> mapWidthInPixels
    int mapHeightInPixels -> mapHeightInPixels
    com.badlogic.gdx.maps.tiled.TiledMap map -> map
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    void loadTileLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element) -> loadTileLayer
    void loadObjectGroup(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element) -> loadObjectGroup
    void loadImageLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> loadImageLayer
    void loadBasicLayerInfo(com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element) -> loadBasicLayerInfo
    void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element) -> loadObject
    void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element) -> loadProperties
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell createTileLayerCell(boolean,boolean,boolean) -> createTileLayerCell
    int[] getTileIds(com.badlogic.gdx.utils.XmlReader$Element,int,int) -> getTileIds
    int unsignedByteToInt(byte) -> unsignedByteToInt
    com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> getRelativeFileHandle
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters -> com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters:
    boolean generateMipMaps -> generateMipMaps
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMinFilter -> textureMinFilter
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMagFilter -> textureMagFilter
    boolean convertObjectToTileSpace -> convertObjectToTileSpace
    boolean flipY -> flipY
    void <init>() -> <init>
com.badlogic.gdx.maps.tiled.TideMapLoader -> com.badlogic.gdx.maps.tiled.TideMapLoader:
    com.badlogic.gdx.utils.XmlReader xml -> xml
    com.badlogic.gdx.utils.XmlReader$Element root -> root
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String) -> load
    com.badlogic.gdx.maps.tiled.TiledMap load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters) -> load
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters) -> getDependencies
    com.badlogic.gdx.maps.tiled.TiledMap loadMap(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> loadMap
    com.badlogic.gdx.utils.Array loadTileSheets(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle) -> loadTileSheets
    void loadTileSheet(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> loadTileSheet
    void loadLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element) -> loadLayer
    void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element) -> loadProperties
    com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> getRelativeFileHandle
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> load
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters -> com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters:
    void <init>() -> <init>
com.badlogic.gdx.maps.tiled.TiledMap -> com.badlogic.gdx.maps.tiled.TiledMap:
    com.badlogic.gdx.maps.tiled.TiledMapTileSets tilesets -> tilesets
    com.badlogic.gdx.utils.Array ownedResources -> ownedResources
    com.badlogic.gdx.maps.tiled.TiledMapTileSets getTileSets() -> getTileSets
    void <init>() -> <init>
    void setOwnedResources(com.badlogic.gdx.utils.Array) -> setOwnedResources
    void dispose() -> dispose
com.badlogic.gdx.maps.tiled.TiledMapImageLayer -> com.badlogic.gdx.maps.tiled.TiledMapImageLayer:
    int x -> x
    int y -> y
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> region
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int) -> <init>
    int getX() -> getX
    int getY() -> getY
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> getTextureRegion
com.badlogic.gdx.maps.tiled.TiledMapRenderer -> com.badlogic.gdx.maps.tiled.TiledMapRenderer:
    void renderObjects(com.badlogic.gdx.maps.MapLayer) -> renderObjects
    void renderObject(com.badlogic.gdx.maps.MapObject) -> renderObject
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> renderTileLayer
    void renderImageLayer(com.badlogic.gdx.maps.tiled.TiledMapImageLayer) -> renderImageLayer
com.badlogic.gdx.maps.tiled.TiledMapTile -> com.badlogic.gdx.maps.tiled.TiledMapTile:
    int getId() -> getId
    void setId(int) -> setId
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode getBlendMode() -> getBlendMode
    void setBlendMode(com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode) -> setBlendMode
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> getTextureRegion
    void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> setTextureRegion
    float getOffsetX() -> getOffsetX
    void setOffsetX(float) -> setOffsetX
    float getOffsetY() -> getOffsetY
    void setOffsetY(float) -> setOffsetY
    com.badlogic.gdx.maps.MapProperties getProperties() -> getProperties
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode -> com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode:
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode NONE -> NONE
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode ALPHA -> ALPHA
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] $VALUES -> $VALUES
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] values() -> values
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.maps.tiled.TiledMapTileLayer -> com.badlogic.gdx.maps.tiled.TiledMapTileLayer:
    int width -> width
    int height -> height
    float tileWidth -> tileWidth
    float tileHeight -> tileHeight
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell[][] cells -> cells
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    float getTileWidth() -> getTileWidth
    float getTileHeight() -> getTileHeight
    void <init>(int,int,int,int) -> <init>
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell getCell(int,int) -> getCell
    void setCell(int,int,com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell) -> setCell
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell -> com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell:
    com.badlogic.gdx.maps.tiled.TiledMapTile tile -> tile
    boolean flipHorizontally -> flipHorizontally
    boolean flipVertically -> flipVertically
    int rotation -> rotation
    int ROTATE_0 -> ROTATE_0
    int ROTATE_90 -> ROTATE_90
    int ROTATE_180 -> ROTATE_180
    int ROTATE_270 -> ROTATE_270
    void <init>() -> <init>
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile() -> getTile
    void setTile(com.badlogic.gdx.maps.tiled.TiledMapTile) -> setTile
    boolean getFlipHorizontally() -> getFlipHorizontally
    void setFlipHorizontally(boolean) -> setFlipHorizontally
    boolean getFlipVertically() -> getFlipVertically
    void setFlipVertically(boolean) -> setFlipVertically
    int getRotation() -> getRotation
    void setRotation(int) -> setRotation
com.badlogic.gdx.maps.tiled.TiledMapTileSet -> com.badlogic.gdx.maps.tiled.TiledMapTileSet:
    java.lang.String name -> name
    com.badlogic.gdx.utils.IntMap tiles -> tiles
    com.badlogic.gdx.maps.MapProperties properties -> properties
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    com.badlogic.gdx.maps.MapProperties getProperties() -> getProperties
    void <init>() -> <init>
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int) -> getTile
    java.util.Iterator iterator() -> iterator
    void putTile(int,com.badlogic.gdx.maps.tiled.TiledMapTile) -> putTile
    void removeTile(int) -> removeTile
    int size() -> size
com.badlogic.gdx.maps.tiled.TiledMapTileSets -> com.badlogic.gdx.maps.tiled.TiledMapTileSets:
    com.badlogic.gdx.utils.Array tilesets -> tilesets
    void <init>() -> <init>
    com.badlogic.gdx.maps.tiled.TiledMapTileSet getTileSet(int) -> getTileSet
    com.badlogic.gdx.maps.tiled.TiledMapTileSet getTileSet(java.lang.String) -> getTileSet
    void addTileSet(com.badlogic.gdx.maps.tiled.TiledMapTileSet) -> addTileSet
    void removeTileSet(int) -> removeTileSet
    void removeTileSet(com.badlogic.gdx.maps.tiled.TiledMapTileSet) -> removeTileSet
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int) -> getTile
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.maps.tiled.TmxMapLoader -> com.badlogic.gdx.maps.tiled.TmxMapLoader:
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver) -> <init>
    com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String) -> load
    com.badlogic.gdx.maps.tiled.TiledMap load(java.lang.String,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters) -> load
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters) -> loadAsync
    com.badlogic.gdx.maps.tiled.TiledMap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters) -> loadSync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters) -> getDependencies
    com.badlogic.gdx.maps.tiled.TiledMap loadTilemap(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> loadTilemap
    com.badlogic.gdx.utils.Array loadTilesets(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle) -> loadTilesets
    com.badlogic.gdx.utils.Array loadImages(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle) -> loadImages
    void loadTileSet(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> loadTileSet
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadSync
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> loadAsync
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> getDependencies
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters -> com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters:
    void <init>() -> <init>
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer:
    int NUM_VERTICES -> NUM_VERTICES
    com.badlogic.gdx.maps.tiled.TiledMap map -> map
    float unitScale -> unitScale
    com.badlogic.gdx.graphics.g2d.Batch batch -> batch
    com.badlogic.gdx.math.Rectangle viewBounds -> viewBounds
    com.badlogic.gdx.math.Rectangle imageBounds -> imageBounds
    boolean ownsBatch -> ownsBatch
    float[] vertices -> vertices
    com.badlogic.gdx.maps.tiled.TiledMap getMap() -> getMap
    void setMap(com.badlogic.gdx.maps.tiled.TiledMap) -> setMap
    float getUnitScale() -> getUnitScale
    com.badlogic.gdx.graphics.g2d.Batch getBatch() -> getBatch
    com.badlogic.gdx.math.Rectangle getViewBounds() -> getViewBounds
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void setView(com.badlogic.gdx.graphics.OrthographicCamera) -> setView
    void setView(com.badlogic.gdx.math.Matrix4,float,float,float,float) -> setView
    void render() -> render
    void render(int[]) -> render
    void renderObjects(com.badlogic.gdx.maps.MapLayer) -> renderObjects
    void renderObject(com.badlogic.gdx.maps.MapObject) -> renderObject
    void renderImageLayer(com.badlogic.gdx.maps.tiled.TiledMapImageLayer) -> renderImageLayer
    void beginRender() -> beginRender
    void endRender() -> endRender
    void dispose() -> dispose
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer:
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> renderTileLayer
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer:
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> renderTileLayer
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer:
    com.badlogic.gdx.math.Matrix4 isoTransform -> isoTransform
    com.badlogic.gdx.math.Matrix4 invIsotransform -> invIsotransform
    com.badlogic.gdx.math.Vector3 screenPos -> screenPos
    com.badlogic.gdx.math.Vector2 topRight -> topRight
    com.badlogic.gdx.math.Vector2 bottomLeft -> bottomLeft
    com.badlogic.gdx.math.Vector2 topLeft -> topLeft
    com.badlogic.gdx.math.Vector2 bottomRight -> bottomRight
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void init() -> init
    com.badlogic.gdx.math.Vector3 translateScreenToIso(com.badlogic.gdx.math.Vector2) -> translateScreenToIso
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> renderTileLayer
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer:
    float tolerance -> tolerance
    int NUM_VERTICES -> NUM_VERTICES
    com.badlogic.gdx.maps.tiled.TiledMap map -> map
    com.badlogic.gdx.graphics.g2d.SpriteCache spriteCache -> spriteCache
    float[] vertices -> vertices
    boolean blending -> blending
    float unitScale -> unitScale
    com.badlogic.gdx.math.Rectangle viewBounds -> viewBounds
    com.badlogic.gdx.math.Rectangle cacheBounds -> cacheBounds
    float overCache -> overCache
    float maxTileWidth -> maxTileWidth
    float maxTileHeight -> maxTileHeight
    boolean cached -> cached
    int count -> count
    boolean canCacheMoreN -> canCacheMoreN
    boolean canCacheMoreE -> canCacheMoreE
    boolean canCacheMoreW -> canCacheMoreW
    boolean canCacheMoreS -> canCacheMoreS
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float,int) -> <init>
    void setView(com.badlogic.gdx.graphics.OrthographicCamera) -> setView
    void setView(com.badlogic.gdx.math.Matrix4,float,float,float,float) -> setView
    void render() -> render
    void render(int[]) -> render
    void renderObjects(com.badlogic.gdx.maps.MapLayer) -> renderObjects
    void renderObject(com.badlogic.gdx.maps.MapObject) -> renderObject
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> renderTileLayer
    void renderImageLayer(com.badlogic.gdx.maps.tiled.TiledMapImageLayer) -> renderImageLayer
    void invalidateCache() -> invalidateCache
    boolean isCached() -> isCached
    void setOverCache(float) -> setOverCache
    void setMaxTileSize(float,float) -> setMaxTileSize
    void setBlending(boolean) -> setBlending
    com.badlogic.gdx.graphics.g2d.SpriteCache getSpriteCache() -> getSpriteCache
    void dispose() -> dispose
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer:
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.TiledMap,float,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> renderTileLayer
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile -> com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile:
    long lastTiledMapRenderTime -> lastTiledMapRenderTime
    int id -> id
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode blendMode -> blendMode
    com.badlogic.gdx.maps.MapProperties properties -> properties
    com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile[] frameTiles -> frameTiles
    int[] animationIntervals -> animationIntervals
    int frameCount -> frameCount
    int loopDuration -> loopDuration
    long initialTimeOffset -> initialTimeOffset
    int getId() -> getId
    void setId(int) -> setId
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode getBlendMode() -> getBlendMode
    void setBlendMode(com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode) -> setBlendMode
    int getCurrentFrameIndex() -> getCurrentFrameIndex
    com.badlogic.gdx.maps.tiled.TiledMapTile getCurrentFrame() -> getCurrentFrame
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> getTextureRegion
    void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> setTextureRegion
    float getOffsetX() -> getOffsetX
    void setOffsetX(float) -> setOffsetX
    float getOffsetY() -> getOffsetY
    void setOffsetY(float) -> setOffsetY
    int[] getAnimationIntervals() -> getAnimationIntervals
    void setAnimationIntervals(int[]) -> setAnimationIntervals
    com.badlogic.gdx.maps.MapProperties getProperties() -> getProperties
    void updateAnimationBaseTime() -> updateAnimationBaseTime
    void <init>(float,com.badlogic.gdx.utils.Array) -> <init>
    void <init>(com.badlogic.gdx.utils.IntArray,com.badlogic.gdx.utils.Array) -> <init>
    com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile[] getFrameTiles() -> getFrameTiles
    void <clinit>() -> <clinit>
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile -> com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile:
    int id -> id
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode blendMode -> blendMode
    com.badlogic.gdx.maps.MapProperties properties -> properties
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> textureRegion
    float offsetX -> offsetX
    float offsetY -> offsetY
    int getId() -> getId
    void setId(int) -> setId
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode getBlendMode() -> getBlendMode
    void setBlendMode(com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode) -> setBlendMode
    com.badlogic.gdx.maps.MapProperties getProperties() -> getProperties
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> getTextureRegion
    void setTextureRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> setTextureRegion
    float getOffsetX() -> getOffsetX
    void setOffsetX(float) -> setOffsetX
    float getOffsetY() -> getOffsetY
    void setOffsetY(float) -> setOffsetY
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile) -> <init>
com.badlogic.gdx.math.Affine2 -> com.badlogic.gdx.math.Affine2:
    long serialVersionUID -> serialVersionUID
    float m00 -> m00
    float m01 -> m01
    float m02 -> m02
    float m10 -> m10
    float m11 -> m11
    float m12 -> m12
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Affine2) -> <init>
    com.badlogic.gdx.math.Affine2 idt() -> idt
    com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Affine2) -> set
    com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix3) -> set
    com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix4) -> set
    com.badlogic.gdx.math.Affine2 setToTranslation(float,float) -> setToTranslation
    com.badlogic.gdx.math.Affine2 setToTranslation(com.badlogic.gdx.math.Vector2) -> setToTranslation
    com.badlogic.gdx.math.Affine2 setToScaling(float,float) -> setToScaling
    com.badlogic.gdx.math.Affine2 setToScaling(com.badlogic.gdx.math.Vector2) -> setToScaling
    com.badlogic.gdx.math.Affine2 setToRotation(float) -> setToRotation
    com.badlogic.gdx.math.Affine2 setToRotationRad(float) -> setToRotationRad
    com.badlogic.gdx.math.Affine2 setToRotation(float,float) -> setToRotation
    com.badlogic.gdx.math.Affine2 setToShearing(float,float) -> setToShearing
    com.badlogic.gdx.math.Affine2 setToShearing(com.badlogic.gdx.math.Vector2) -> setToShearing
    com.badlogic.gdx.math.Affine2 setToTrnRotScl(float,float,float,float,float) -> setToTrnRotScl
    com.badlogic.gdx.math.Affine2 setToTrnRotScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2) -> setToTrnRotScl
    com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(float,float,float,float,float) -> setToTrnRotRadScl
    com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2) -> setToTrnRotRadScl
    com.badlogic.gdx.math.Affine2 setToTrnScl(float,float,float,float) -> setToTrnScl
    com.badlogic.gdx.math.Affine2 setToTrnScl(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> setToTrnScl
    com.badlogic.gdx.math.Affine2 setToProduct(com.badlogic.gdx.math.Affine2,com.badlogic.gdx.math.Affine2) -> setToProduct
    com.badlogic.gdx.math.Affine2 inv() -> inv
    com.badlogic.gdx.math.Affine2 mul(com.badlogic.gdx.math.Affine2) -> mul
    com.badlogic.gdx.math.Affine2 preMul(com.badlogic.gdx.math.Affine2) -> preMul
    com.badlogic.gdx.math.Affine2 translate(float,float) -> translate
    com.badlogic.gdx.math.Affine2 translate(com.badlogic.gdx.math.Vector2) -> translate
    com.badlogic.gdx.math.Affine2 preTranslate(float,float) -> preTranslate
    com.badlogic.gdx.math.Affine2 preTranslate(com.badlogic.gdx.math.Vector2) -> preTranslate
    com.badlogic.gdx.math.Affine2 scale(float,float) -> scale
    com.badlogic.gdx.math.Affine2 scale(com.badlogic.gdx.math.Vector2) -> scale
    com.badlogic.gdx.math.Affine2 preScale(float,float) -> preScale
    com.badlogic.gdx.math.Affine2 preScale(com.badlogic.gdx.math.Vector2) -> preScale
    com.badlogic.gdx.math.Affine2 rotate(float) -> rotate
    com.badlogic.gdx.math.Affine2 rotateRad(float) -> rotateRad
    com.badlogic.gdx.math.Affine2 preRotate(float) -> preRotate
    com.badlogic.gdx.math.Affine2 preRotateRad(float) -> preRotateRad
    com.badlogic.gdx.math.Affine2 shear(float,float) -> shear
    com.badlogic.gdx.math.Affine2 shear(com.badlogic.gdx.math.Vector2) -> shear
    com.badlogic.gdx.math.Affine2 preShear(float,float) -> preShear
    com.badlogic.gdx.math.Affine2 preShear(com.badlogic.gdx.math.Vector2) -> preShear
    float det() -> det
    com.badlogic.gdx.math.Vector2 getTranslation(com.badlogic.gdx.math.Vector2) -> getTranslation
    boolean isTranslation() -> isTranslation
    boolean isIdt() -> isIdt
    void applyTo(com.badlogic.gdx.math.Vector2) -> applyTo
    java.lang.String toString() -> toString
com.badlogic.gdx.math.BSpline -> com.badlogic.gdx.math.BSpline:
    float d6 -> d6
    com.badlogic.gdx.math.Vector[] controlPoints -> controlPoints
    com.badlogic.gdx.utils.Array knots -> knots
    int degree -> degree
    boolean continuous -> continuous
    int spanCount -> spanCount
    com.badlogic.gdx.math.Vector tmp -> tmp
    com.badlogic.gdx.math.Vector tmp2 -> tmp2
    com.badlogic.gdx.math.Vector tmp3 -> tmp3
    com.badlogic.gdx.math.Vector cubic(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector) -> cubic
    com.badlogic.gdx.math.Vector cubic_derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector) -> cubic_derivative
    com.badlogic.gdx.math.Vector cubic(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector) -> cubic
    com.badlogic.gdx.math.Vector cubic_derivative(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector) -> cubic_derivative
    com.badlogic.gdx.math.Vector calculate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],int,boolean,com.badlogic.gdx.math.Vector) -> calculate
    com.badlogic.gdx.math.Vector derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],int,boolean,com.badlogic.gdx.math.Vector) -> derivative
    com.badlogic.gdx.math.Vector calculate(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],int,boolean,com.badlogic.gdx.math.Vector) -> calculate
    com.badlogic.gdx.math.Vector derivative(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],int,boolean,com.badlogic.gdx.math.Vector) -> derivative
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Vector[],int,boolean) -> <init>
    com.badlogic.gdx.math.BSpline set(com.badlogic.gdx.math.Vector[],int,boolean) -> set
    com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,float) -> valueAt
    com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,int,float) -> valueAt
    com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,float) -> derivativeAt
    com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,int,float) -> derivativeAt
    int nearest(com.badlogic.gdx.math.Vector) -> nearest
    int nearest(com.badlogic.gdx.math.Vector,int,int) -> nearest
    float approximate(com.badlogic.gdx.math.Vector) -> approximate
    float approximate(com.badlogic.gdx.math.Vector,int,int) -> approximate
    float approximate(com.badlogic.gdx.math.Vector,int) -> approximate
    float locate(com.badlogic.gdx.math.Vector) -> locate
    float approxLength(int) -> approxLength
    float locate(java.lang.Object) -> locate
    float approximate(java.lang.Object) -> approximate
    java.lang.Object valueAt(java.lang.Object,float) -> valueAt
    java.lang.Object derivativeAt(java.lang.Object,float) -> derivativeAt
com.badlogic.gdx.math.Bezier -> com.badlogic.gdx.math.Bezier:
    com.badlogic.gdx.utils.Array points -> points
    com.badlogic.gdx.math.Vector tmp -> tmp
    com.badlogic.gdx.math.Vector tmp2 -> tmp2
    com.badlogic.gdx.math.Vector tmp3 -> tmp3
    com.badlogic.gdx.math.Vector linear(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector) -> linear
    com.badlogic.gdx.math.Vector linear_derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector) -> linear_derivative
    com.badlogic.gdx.math.Vector quadratic(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector) -> quadratic
    com.badlogic.gdx.math.Vector quadratic_derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector) -> quadratic_derivative
    com.badlogic.gdx.math.Vector cubic(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector) -> cubic
    com.badlogic.gdx.math.Vector cubic_derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector) -> cubic_derivative
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Vector[]) -> <init>
    void <init>(com.badlogic.gdx.math.Vector[],int,int) -> <init>
    void <init>(com.badlogic.gdx.utils.Array,int,int) -> <init>
    com.badlogic.gdx.math.Bezier set(com.badlogic.gdx.math.Vector[]) -> set
    com.badlogic.gdx.math.Bezier set(com.badlogic.gdx.math.Vector[],int,int) -> set
    com.badlogic.gdx.math.Bezier set(com.badlogic.gdx.utils.Array,int,int) -> set
    com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,float) -> valueAt
    com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,float) -> derivativeAt
    float approximate(com.badlogic.gdx.math.Vector) -> approximate
    float locate(com.badlogic.gdx.math.Vector) -> locate
    float approxLength(int) -> approxLength
    float locate(java.lang.Object) -> locate
    float approximate(java.lang.Object) -> approximate
    java.lang.Object valueAt(java.lang.Object,float) -> valueAt
    java.lang.Object derivativeAt(java.lang.Object,float) -> derivativeAt
com.badlogic.gdx.math.Bresenham2 -> com.badlogic.gdx.math.Bresenham2:
    com.badlogic.gdx.utils.Array points -> points
    com.badlogic.gdx.utils.Pool pool -> pool
    void <init>() -> <init>
    com.badlogic.gdx.utils.Array line(com.badlogic.gdx.math.GridPoint2,com.badlogic.gdx.math.GridPoint2) -> line
    com.badlogic.gdx.utils.Array line(int,int,int,int) -> line
    com.badlogic.gdx.utils.Array line(int,int,int,int,com.badlogic.gdx.utils.Pool,com.badlogic.gdx.utils.Array) -> line
com.badlogic.gdx.math.Bresenham2$1 -> com.badlogic.gdx.math.Bresenham2$1:
    com.badlogic.gdx.math.Bresenham2 this$0 -> this$0
    void <init>(com.badlogic.gdx.math.Bresenham2) -> <init>
    com.badlogic.gdx.math.GridPoint2 newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.math.CatmullRomSpline -> com.badlogic.gdx.math.CatmullRomSpline:
    com.badlogic.gdx.math.Vector[] controlPoints -> controlPoints
    boolean continuous -> continuous
    int spanCount -> spanCount
    com.badlogic.gdx.math.Vector tmp -> tmp
    com.badlogic.gdx.math.Vector tmp2 -> tmp2
    com.badlogic.gdx.math.Vector tmp3 -> tmp3
    com.badlogic.gdx.math.Vector calculate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector) -> calculate
    com.badlogic.gdx.math.Vector calculate(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector) -> calculate
    com.badlogic.gdx.math.Vector derivative(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector) -> derivative
    com.badlogic.gdx.math.Vector derivative(com.badlogic.gdx.math.Vector,int,float,com.badlogic.gdx.math.Vector[],boolean,com.badlogic.gdx.math.Vector) -> derivative
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Vector[],boolean) -> <init>
    com.badlogic.gdx.math.CatmullRomSpline set(com.badlogic.gdx.math.Vector[],boolean) -> set
    com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,float) -> valueAt
    com.badlogic.gdx.math.Vector valueAt(com.badlogic.gdx.math.Vector,int,float) -> valueAt
    com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,float) -> derivativeAt
    com.badlogic.gdx.math.Vector derivativeAt(com.badlogic.gdx.math.Vector,int,float) -> derivativeAt
    int nearest(com.badlogic.gdx.math.Vector) -> nearest
    int nearest(com.badlogic.gdx.math.Vector,int,int) -> nearest
    float approximate(com.badlogic.gdx.math.Vector) -> approximate
    float approximate(com.badlogic.gdx.math.Vector,int,int) -> approximate
    float approximate(com.badlogic.gdx.math.Vector,int) -> approximate
    float locate(com.badlogic.gdx.math.Vector) -> locate
    float approxLength(int) -> approxLength
    float locate(java.lang.Object) -> locate
    float approximate(java.lang.Object) -> approximate
    java.lang.Object valueAt(java.lang.Object,float) -> valueAt
    java.lang.Object derivativeAt(java.lang.Object,float) -> derivativeAt
com.badlogic.gdx.math.Circle -> com.badlogic.gdx.math.Circle:
    float x -> x
    float y -> y
    float radius -> radius
    void <init>() -> <init>
    void <init>(float,float,float) -> <init>
    void <init>(com.badlogic.gdx.math.Vector2,float) -> <init>
    void <init>(com.badlogic.gdx.math.Circle) -> <init>
    void <init>(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> <init>
    void set(float,float,float) -> set
    void set(com.badlogic.gdx.math.Vector2,float) -> set
    void set(com.badlogic.gdx.math.Circle) -> set
    void set(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> set
    void setPosition(com.badlogic.gdx.math.Vector2) -> setPosition
    void setPosition(float,float) -> setPosition
    void setX(float) -> setX
    void setY(float) -> setY
    void setRadius(float) -> setRadius
    boolean contains(float,float) -> contains
    boolean contains(com.badlogic.gdx.math.Vector2) -> contains
    boolean contains(com.badlogic.gdx.math.Circle) -> contains
    boolean overlaps(com.badlogic.gdx.math.Circle) -> overlaps
    java.lang.String toString() -> toString
    float circumference() -> circumference
    float area() -> area
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.math.ConvexHull -> com.badlogic.gdx.math.ConvexHull:
    com.badlogic.gdx.utils.IntArray quicksortStack -> quicksortStack
    float[] sortedPoints -> sortedPoints
    com.badlogic.gdx.utils.FloatArray hull -> hull
    com.badlogic.gdx.utils.IntArray indices -> indices
    com.badlogic.gdx.utils.ShortArray originalIndices -> originalIndices
    void <init>() -> <init>
    com.badlogic.gdx.utils.FloatArray computePolygon(com.badlogic.gdx.utils.FloatArray,boolean) -> computePolygon
    com.badlogic.gdx.utils.FloatArray computePolygon(float[],boolean) -> computePolygon
    com.badlogic.gdx.utils.FloatArray computePolygon(float[],int,int,boolean) -> computePolygon
    com.badlogic.gdx.utils.IntArray computeIndices(com.badlogic.gdx.utils.FloatArray,boolean,boolean) -> computeIndices
    com.badlogic.gdx.utils.IntArray computeIndices(float[],boolean,boolean) -> computeIndices
    com.badlogic.gdx.utils.IntArray computeIndices(float[],int,int,boolean,boolean) -> computeIndices
    float ccw(float,float) -> ccw
    void sort(float[],int) -> sort
    int quicksortPartition(float[],int,int) -> quicksortPartition
    void sortWithIndices(float[],int,boolean) -> sortWithIndices
    int quicksortPartitionWithIndices(float[],int,int,boolean,short[]) -> quicksortPartitionWithIndices
com.badlogic.gdx.math.CumulativeDistribution -> com.badlogic.gdx.math.CumulativeDistribution:
    com.badlogic.gdx.utils.Array values -> values
    void <init>() -> <init>
    void add(java.lang.Object,float) -> add
    void add(java.lang.Object) -> add
    void generate() -> generate
    void generateNormalized() -> generateNormalized
    void generateUniform() -> generateUniform
    java.lang.Object value(float) -> value
    java.lang.Object value() -> value
    int size() -> size
    float getInterval(int) -> getInterval
    java.lang.Object getValue(int) -> getValue
    void setInterval(java.lang.Object,float) -> setInterval
    void setInterval(int,float) -> setInterval
    void clear() -> clear
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue -> com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue:
    java.lang.Object value -> value
    float frequency -> frequency
    float interval -> interval
    com.badlogic.gdx.math.CumulativeDistribution this$0 -> this$0
    void <init>(com.badlogic.gdx.math.CumulativeDistribution,java.lang.Object,float,float) -> <init>
com.badlogic.gdx.math.DelaunayTriangulator -> com.badlogic.gdx.math.DelaunayTriangulator:
    float EPSILON -> EPSILON
    int INSIDE -> INSIDE
    int COMPLETE -> COMPLETE
    int INCOMPLETE -> INCOMPLETE
    com.badlogic.gdx.utils.IntArray quicksortStack -> quicksortStack
    float[] sortedPoints -> sortedPoints
    com.badlogic.gdx.utils.ShortArray triangles -> triangles
    com.badlogic.gdx.utils.ShortArray originalIndices -> originalIndices
    com.badlogic.gdx.utils.IntArray edges -> edges
    com.badlogic.gdx.utils.BooleanArray complete -> complete
    float[] superTriangle -> superTriangle
    com.badlogic.gdx.math.Vector2 centroid -> centroid
    void <init>() -> <init>
    com.badlogic.gdx.utils.ShortArray computeTriangles(com.badlogic.gdx.utils.FloatArray,boolean) -> computeTriangles
    com.badlogic.gdx.utils.ShortArray computeTriangles(float[],boolean) -> computeTriangles
    com.badlogic.gdx.utils.ShortArray computeTriangles(float[],int,int,boolean) -> computeTriangles
    int circumCircle(float,float,float,float,float,float,float,float) -> circumCircle
    void sort(float[],int) -> sort
    int quicksortPartition(float[],int,int,short[]) -> quicksortPartition
    void trim(com.badlogic.gdx.utils.ShortArray,float[],float[],int,int) -> trim
com.badlogic.gdx.math.EarClippingTriangulator -> com.badlogic.gdx.math.EarClippingTriangulator:
    int CONCAVE -> CONCAVE
    int TANGENTIAL -> TANGENTIAL
    int CONVEX -> CONVEX
    com.badlogic.gdx.utils.ShortArray indicesArray -> indicesArray
    short[] indices -> indices
    float[] vertices -> vertices
    int vertexCount -> vertexCount
    com.badlogic.gdx.utils.IntArray vertexTypes -> vertexTypes
    com.badlogic.gdx.utils.ShortArray triangles -> triangles
    void <init>() -> <init>
    com.badlogic.gdx.utils.ShortArray computeTriangles(com.badlogic.gdx.utils.FloatArray) -> computeTriangles
    com.badlogic.gdx.utils.ShortArray computeTriangles(float[]) -> computeTriangles
    com.badlogic.gdx.utils.ShortArray computeTriangles(float[],int,int) -> computeTriangles
    void triangulate() -> triangulate
    int classifyVertex(int) -> classifyVertex
    int findEarTip() -> findEarTip
    boolean isEarTip(int) -> isEarTip
    void cutEarTip(int) -> cutEarTip
    int previousIndex(int) -> previousIndex
    int nextIndex(int) -> nextIndex
    boolean areVerticesClockwise(float[],int,int) -> areVerticesClockwise
    int computeSpannedAreaSign(float,float,float,float,float,float) -> computeSpannedAreaSign
com.badlogic.gdx.math.Ellipse -> com.badlogic.gdx.math.Ellipse:
    float x -> x
    float y -> y
    float width -> width
    float height -> height
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Ellipse) -> <init>
    void <init>(float,float,float,float) -> <init>
    void <init>(com.badlogic.gdx.math.Vector2,float,float) -> <init>
    void <init>(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> <init>
    void <init>(com.badlogic.gdx.math.Circle) -> <init>
    boolean contains(float,float) -> contains
    boolean contains(com.badlogic.gdx.math.Vector2) -> contains
    void set(float,float,float,float) -> set
    void set(com.badlogic.gdx.math.Ellipse) -> set
    void set(com.badlogic.gdx.math.Circle) -> set
    void set(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> set
    com.badlogic.gdx.math.Ellipse setPosition(com.badlogic.gdx.math.Vector2) -> setPosition
    com.badlogic.gdx.math.Ellipse setPosition(float,float) -> setPosition
    com.badlogic.gdx.math.Ellipse setSize(float,float) -> setSize
    float area() -> area
    float circumference() -> circumference
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.math.FloatCounter -> com.badlogic.gdx.math.FloatCounter:
    int count -> count
    float total -> total
    float min -> min
    float max -> max
    float average -> average
    float latest -> latest
    float value -> value
    com.badlogic.gdx.math.WindowedMean mean -> mean
    void <init>(int) -> <init>
    void put(float) -> put
    void reset() -> reset
com.badlogic.gdx.math.Frustum -> com.badlogic.gdx.math.Frustum:
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> clipSpacePlanePoints
    float[] clipSpacePlanePointsArray -> clipSpacePlanePointsArray
    com.badlogic.gdx.math.Vector3 tmpV -> tmpV
    com.badlogic.gdx.math.Plane[] planes -> planes
    com.badlogic.gdx.math.Vector3[] planePoints -> planePoints
    float[] planePointsArray -> planePointsArray
    void <init>() -> <init>
    void update(com.badlogic.gdx.math.Matrix4) -> update
    boolean pointInFrustum(com.badlogic.gdx.math.Vector3) -> pointInFrustum
    boolean pointInFrustum(float,float,float) -> pointInFrustum
    boolean sphereInFrustum(com.badlogic.gdx.math.Vector3,float) -> sphereInFrustum
    boolean sphereInFrustum(float,float,float,float) -> sphereInFrustum
    boolean sphereInFrustumWithoutNearFar(com.badlogic.gdx.math.Vector3,float) -> sphereInFrustumWithoutNearFar
    boolean sphereInFrustumWithoutNearFar(float,float,float,float) -> sphereInFrustumWithoutNearFar
    boolean boundsInFrustum(com.badlogic.gdx.math.collision.BoundingBox) -> boundsInFrustum
    boolean boundsInFrustum(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> boundsInFrustum
    boolean boundsInFrustum(float,float,float,float,float,float) -> boundsInFrustum
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.GeometryUtils -> com.badlogic.gdx.math.GeometryUtils:
    com.badlogic.gdx.math.Vector2 tmp1 -> tmp1
    com.badlogic.gdx.math.Vector2 tmp2 -> tmp2
    com.badlogic.gdx.math.Vector2 tmp3 -> tmp3
    void <init>() -> <init>
    com.badlogic.gdx.math.Vector2 toBarycoord(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> toBarycoord
    boolean barycoordInsideTriangle(com.badlogic.gdx.math.Vector2) -> barycoordInsideTriangle
    com.badlogic.gdx.math.Vector2 fromBarycoord(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> fromBarycoord
    float fromBarycoord(com.badlogic.gdx.math.Vector2,float,float,float) -> fromBarycoord
    float lowestPositiveRoot(float,float,float) -> lowestPositiveRoot
    boolean colinear(float,float,float,float,float,float) -> colinear
    com.badlogic.gdx.math.Vector2 triangleCentroid(float,float,float,float,float,float,com.badlogic.gdx.math.Vector2) -> triangleCentroid
    com.badlogic.gdx.math.Vector2 triangleCircumcenter(float,float,float,float,float,float,com.badlogic.gdx.math.Vector2) -> triangleCircumcenter
    float triangleArea(float,float,float,float,float,float) -> triangleArea
    com.badlogic.gdx.math.Vector2 quadrilateralCentroid(float,float,float,float,float,float,float,float,com.badlogic.gdx.math.Vector2) -> quadrilateralCentroid
    com.badlogic.gdx.math.Vector2 polygonCentroid(float[],int,int,com.badlogic.gdx.math.Vector2) -> polygonCentroid
    float polygonArea(float[],int,int) -> polygonArea
    void ensureCCW(float[]) -> ensureCCW
    boolean areVerticesClockwise(float[],int,int) -> areVerticesClockwise
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.GridPoint2 -> com.badlogic.gdx.math.GridPoint2:
    int x -> x
    int y -> y
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void <init>(com.badlogic.gdx.math.GridPoint2) -> <init>
    com.badlogic.gdx.math.GridPoint2 set(com.badlogic.gdx.math.GridPoint2) -> set
    com.badlogic.gdx.math.GridPoint2 set(int,int) -> set
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.math.GridPoint3 -> com.badlogic.gdx.math.GridPoint3:
    int x -> x
    int y -> y
    int z -> z
    void <init>() -> <init>
    void <init>(int,int,int) -> <init>
    void <init>(com.badlogic.gdx.math.GridPoint3) -> <init>
    com.badlogic.gdx.math.GridPoint3 set(com.badlogic.gdx.math.GridPoint3) -> set
    com.badlogic.gdx.math.GridPoint3 set(int,int,int) -> set
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.math.Interpolation -> com.badlogic.gdx.math.Interpolation:
    com.badlogic.gdx.math.Interpolation linear -> linear
    com.badlogic.gdx.math.Interpolation fade -> fade
    com.badlogic.gdx.math.Interpolation$Pow pow2 -> pow2
    com.badlogic.gdx.math.Interpolation$PowIn pow2In -> pow2In
    com.badlogic.gdx.math.Interpolation$PowOut pow2Out -> pow2Out
    com.badlogic.gdx.math.Interpolation$Pow pow3 -> pow3
    com.badlogic.gdx.math.Interpolation$PowIn pow3In -> pow3In
    com.badlogic.gdx.math.Interpolation$PowOut pow3Out -> pow3Out
    com.badlogic.gdx.math.Interpolation$Pow pow4 -> pow4
    com.badlogic.gdx.math.Interpolation$PowIn pow4In -> pow4In
    com.badlogic.gdx.math.Interpolation$PowOut pow4Out -> pow4Out
    com.badlogic.gdx.math.Interpolation$Pow pow5 -> pow5
    com.badlogic.gdx.math.Interpolation$PowIn pow5In -> pow5In
    com.badlogic.gdx.math.Interpolation$PowOut pow5Out -> pow5Out
    com.badlogic.gdx.math.Interpolation sine -> sine
    com.badlogic.gdx.math.Interpolation sineIn -> sineIn
    com.badlogic.gdx.math.Interpolation sineOut -> sineOut
    com.badlogic.gdx.math.Interpolation$Exp exp10 -> exp10
    com.badlogic.gdx.math.Interpolation$ExpIn exp10In -> exp10In
    com.badlogic.gdx.math.Interpolation$ExpOut exp10Out -> exp10Out
    com.badlogic.gdx.math.Interpolation$Exp exp5 -> exp5
    com.badlogic.gdx.math.Interpolation$ExpIn exp5In -> exp5In
    com.badlogic.gdx.math.Interpolation$ExpOut exp5Out -> exp5Out
    com.badlogic.gdx.math.Interpolation circle -> circle
    com.badlogic.gdx.math.Interpolation circleIn -> circleIn
    com.badlogic.gdx.math.Interpolation circleOut -> circleOut
    com.badlogic.gdx.math.Interpolation$Elastic elastic -> elastic
    com.badlogic.gdx.math.Interpolation$ElasticIn elasticIn -> elasticIn
    com.badlogic.gdx.math.Interpolation$ElasticOut elasticOut -> elasticOut
    com.badlogic.gdx.math.Interpolation$Swing swing -> swing
    com.badlogic.gdx.math.Interpolation$SwingIn swingIn -> swingIn
    com.badlogic.gdx.math.Interpolation$SwingOut swingOut -> swingOut
    com.badlogic.gdx.math.Interpolation$Bounce bounce -> bounce
    com.badlogic.gdx.math.Interpolation$BounceIn bounceIn -> bounceIn
    com.badlogic.gdx.math.Interpolation$BounceOut bounceOut -> bounceOut
    void <init>() -> <init>
    float apply(float) -> apply
    float apply(float,float,float) -> apply
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Interpolation$1 -> com.badlogic.gdx.math.Interpolation$1:
    void <init>() -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$2 -> com.badlogic.gdx.math.Interpolation$2:
    void <init>() -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$3 -> com.badlogic.gdx.math.Interpolation$3:
    void <init>() -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$4 -> com.badlogic.gdx.math.Interpolation$4:
    void <init>() -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$5 -> com.badlogic.gdx.math.Interpolation$5:
    void <init>() -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$6 -> com.badlogic.gdx.math.Interpolation$6:
    void <init>() -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$7 -> com.badlogic.gdx.math.Interpolation$7:
    void <init>() -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$8 -> com.badlogic.gdx.math.Interpolation$8:
    void <init>() -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$Bounce -> com.badlogic.gdx.math.Interpolation$Bounce:
    void <init>(float[],float[]) -> <init>
    void <init>(int) -> <init>
    float out(float) -> out
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$BounceIn -> com.badlogic.gdx.math.Interpolation$BounceIn:
    void <init>(float[],float[]) -> <init>
    void <init>(int) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$BounceOut -> com.badlogic.gdx.math.Interpolation$BounceOut:
    float[] widths -> widths
    float[] heights -> heights
    void <init>(float[],float[]) -> <init>
    void <init>(int) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$Elastic -> com.badlogic.gdx.math.Interpolation$Elastic:
    float value -> value
    float power -> power
    float scale -> scale
    float bounces -> bounces
    void <init>(float,float,int,float) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$ElasticIn -> com.badlogic.gdx.math.Interpolation$ElasticIn:
    void <init>(float,float,int,float) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$ElasticOut -> com.badlogic.gdx.math.Interpolation$ElasticOut:
    void <init>(float,float,int,float) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$Exp -> com.badlogic.gdx.math.Interpolation$Exp:
    float value -> value
    float power -> power
    float min -> min
    float scale -> scale
    void <init>(float,float) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$ExpIn -> com.badlogic.gdx.math.Interpolation$ExpIn:
    void <init>(float,float) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$ExpOut -> com.badlogic.gdx.math.Interpolation$ExpOut:
    void <init>(float,float) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$Pow -> com.badlogic.gdx.math.Interpolation$Pow:
    int power -> power
    void <init>(int) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$PowIn -> com.badlogic.gdx.math.Interpolation$PowIn:
    void <init>(int) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$PowOut -> com.badlogic.gdx.math.Interpolation$PowOut:
    void <init>(int) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$Swing -> com.badlogic.gdx.math.Interpolation$Swing:
    float scale -> scale
    void <init>(float) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$SwingIn -> com.badlogic.gdx.math.Interpolation$SwingIn:
    float scale -> scale
    void <init>(float) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Interpolation$SwingOut -> com.badlogic.gdx.math.Interpolation$SwingOut:
    float scale -> scale
    void <init>(float) -> <init>
    float apply(float) -> apply
com.badlogic.gdx.math.Intersector -> com.badlogic.gdx.math.Intersector:
    com.badlogic.gdx.math.Vector3 v0 -> v0
    com.badlogic.gdx.math.Vector3 v1 -> v1
    com.badlogic.gdx.math.Vector3 v2 -> v2
    com.badlogic.gdx.math.Plane p -> p
    com.badlogic.gdx.math.Vector3 i -> i
    com.badlogic.gdx.math.Vector3 dir -> dir
    com.badlogic.gdx.math.Vector3 start -> start
    com.badlogic.gdx.math.Vector3 best -> best
    com.badlogic.gdx.math.Vector3 tmp -> tmp
    com.badlogic.gdx.math.Vector3 tmp1 -> tmp1
    com.badlogic.gdx.math.Vector3 tmp2 -> tmp2
    com.badlogic.gdx.math.Vector3 tmp3 -> tmp3
    com.badlogic.gdx.math.Vector2 v2tmp -> v2tmp
    com.badlogic.gdx.math.Vector3 intersection -> intersection
    void <init>() -> <init>
    boolean isPointInTriangle(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> isPointInTriangle
    boolean isPointInTriangle(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> isPointInTriangle
    boolean isPointInTriangle(float,float,float,float,float,float,float,float) -> isPointInTriangle
    boolean intersectSegmentPlane(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Plane,com.badlogic.gdx.math.Vector3) -> intersectSegmentPlane
    int pointLineSide(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> pointLineSide
    int pointLineSide(float,float,float,float,float,float) -> pointLineSide
    boolean isPointInPolygon(com.badlogic.gdx.utils.Array,com.badlogic.gdx.math.Vector2) -> isPointInPolygon
    boolean isPointInPolygon(float[],int,int,float,float) -> isPointInPolygon
    float distanceLinePoint(float,float,float,float,float,float) -> distanceLinePoint
    float distanceSegmentPoint(float,float,float,float,float,float) -> distanceSegmentPoint
    float distanceSegmentPoint(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> distanceSegmentPoint
    com.badlogic.gdx.math.Vector2 nearestSegmentPoint(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> nearestSegmentPoint
    com.badlogic.gdx.math.Vector2 nearestSegmentPoint(float,float,float,float,float,float,com.badlogic.gdx.math.Vector2) -> nearestSegmentPoint
    boolean intersectSegmentCircle(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float) -> intersectSegmentCircle
    float intersectSegmentCircleDisplace(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2) -> intersectSegmentCircleDisplace
    float intersectRayRay(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> intersectRayRay
    boolean intersectRayPlane(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.Plane,com.badlogic.gdx.math.Vector3) -> intersectRayPlane
    float intersectLinePlane(float,float,float,float,float,float,com.badlogic.gdx.math.Plane,com.badlogic.gdx.math.Vector3) -> intersectLinePlane
    boolean intersectRayTriangle(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> intersectRayTriangle
    boolean intersectRaySphere(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.Vector3,float,com.badlogic.gdx.math.Vector3) -> intersectRaySphere
    boolean intersectRayBounds(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.collision.BoundingBox,com.badlogic.gdx.math.Vector3) -> intersectRayBounds
    boolean intersectRayBoundsFast(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.collision.BoundingBox) -> intersectRayBoundsFast
    boolean intersectRayBoundsFast(com.badlogic.gdx.math.collision.Ray,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> intersectRayBoundsFast
    boolean intersectRayTriangles(com.badlogic.gdx.math.collision.Ray,float[],com.badlogic.gdx.math.Vector3) -> intersectRayTriangles
    boolean intersectRayTriangles(com.badlogic.gdx.math.collision.Ray,float[],short[],int,com.badlogic.gdx.math.Vector3) -> intersectRayTriangles
    boolean intersectRayTriangles(com.badlogic.gdx.math.collision.Ray,java.util.List,com.badlogic.gdx.math.Vector3) -> intersectRayTriangles
    boolean intersectLines(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> intersectLines
    boolean intersectLines(float,float,float,float,float,float,float,float,com.badlogic.gdx.math.Vector2) -> intersectLines
    boolean intersectLinePolygon(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Polygon) -> intersectLinePolygon
    boolean intersectRectangles(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> intersectRectangles
    boolean intersectSegmentPolygon(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Polygon) -> intersectSegmentPolygon
    boolean intersectSegments(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> intersectSegments
    boolean intersectSegments(float,float,float,float,float,float,float,float,com.badlogic.gdx.math.Vector2) -> intersectSegments
    float det(float,float,float,float) -> det
    double detd(double,double,double,double) -> detd
    boolean overlaps(com.badlogic.gdx.math.Circle,com.badlogic.gdx.math.Circle) -> overlaps
    boolean overlaps(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> overlaps
    boolean overlaps(com.badlogic.gdx.math.Circle,com.badlogic.gdx.math.Rectangle) -> overlaps
    boolean overlapConvexPolygons(com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Polygon) -> overlapConvexPolygons
    boolean overlapConvexPolygons(com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Polygon,com.badlogic.gdx.math.Intersector$MinimumTranslationVector) -> overlapConvexPolygons
    boolean overlapConvexPolygons(float[],float[],com.badlogic.gdx.math.Intersector$MinimumTranslationVector) -> overlapConvexPolygons
    boolean overlapConvexPolygons(float[],int,int,float[],int,int,com.badlogic.gdx.math.Intersector$MinimumTranslationVector) -> overlapConvexPolygons
    void splitTriangle(float[],com.badlogic.gdx.math.Plane,com.badlogic.gdx.math.Intersector$SplitTriangle) -> splitTriangle
    void splitEdge(float[],int,int,int,com.badlogic.gdx.math.Plane,float[],int) -> splitEdge
    void main(java.lang.String[]) -> main
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Intersector$MinimumTranslationVector -> com.badlogic.gdx.math.Intersector$MinimumTranslationVector:
    com.badlogic.gdx.math.Vector2 normal -> normal
    float depth -> depth
    void <init>() -> <init>
com.badlogic.gdx.math.Intersector$SplitTriangle -> com.badlogic.gdx.math.Intersector$SplitTriangle:
    float[] front -> front
    float[] back -> back
    float[] edgeSplit -> edgeSplit
    int numFront -> numFront
    int numBack -> numBack
    int total -> total
    boolean frontCurrent -> frontCurrent
    int frontOffset -> frontOffset
    int backOffset -> backOffset
    void <init>(int) -> <init>
    java.lang.String toString() -> toString
    void setSide(boolean) -> setSide
    boolean getSide() -> getSide
    void add(float[],int,int) -> add
    void reset() -> reset
com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.math.MathUtils:
    float nanoToSec -> nanoToSec
    float FLOAT_ROUNDING_ERROR -> FLOAT_ROUNDING_ERROR
    float PI -> PI
    float PI2 -> PI2
    float E -> E
    int SIN_BITS -> SIN_BITS
    int SIN_MASK -> SIN_MASK
    int SIN_COUNT -> SIN_COUNT
    float radFull -> radFull
    float degFull -> degFull
    float radToIndex -> radToIndex
    float degToIndex -> degToIndex
    float radiansToDegrees -> radiansToDegrees
    float radDeg -> radDeg
    float degreesToRadians -> degreesToRadians
    float degRad -> degRad
    int ATAN2_BITS -> ATAN2_BITS
    int ATAN2_BITS2 -> ATAN2_BITS2
    int ATAN2_MASK -> ATAN2_MASK
    int ATAN2_COUNT -> ATAN2_COUNT
    int ATAN2_DIM -> ATAN2_DIM
    float INV_ATAN2_DIM_MINUS_1 -> INV_ATAN2_DIM_MINUS_1
    java.util.Random random -> random
    int BIG_ENOUGH_INT -> BIG_ENOUGH_INT
    double BIG_ENOUGH_FLOOR -> BIG_ENOUGH_FLOOR
    double CEIL -> CEIL
    double BIG_ENOUGH_CEIL -> BIG_ENOUGH_CEIL
    double BIG_ENOUGH_ROUND -> BIG_ENOUGH_ROUND
    void <init>() -> <init>
    float sin(float) -> sin
    float cos(float) -> cos
    float sinDeg(float) -> sinDeg
    float cosDeg(float) -> cosDeg
    float atan2(float,float) -> atan2
    int random(int) -> random
    int random(int,int) -> random
    long random(long) -> random
    long random(long,long) -> random
    boolean randomBoolean() -> randomBoolean
    boolean randomBoolean(float) -> randomBoolean
    float random() -> random
    float random(float) -> random
    float random(float,float) -> random
    int randomSign() -> randomSign
    float randomTriangular() -> randomTriangular
    float randomTriangular(float) -> randomTriangular
    float randomTriangular(float,float) -> randomTriangular
    float randomTriangular(float,float,float) -> randomTriangular
    int nextPowerOfTwo(int) -> nextPowerOfTwo
    boolean isPowerOfTwo(int) -> isPowerOfTwo
    short clamp(short,short,short) -> clamp
    int clamp(int,int,int) -> clamp
    long clamp(long,long,long) -> clamp
    float clamp(float,float,float) -> clamp
    double clamp(double,double,double) -> clamp
    float lerp(float,float,float) -> lerp
    int floor(float) -> floor
    int floorPositive(float) -> floorPositive
    int ceil(float) -> ceil
    int ceilPositive(float) -> ceilPositive
    int round(float) -> round
    int roundPositive(float) -> roundPositive
    boolean isZero(float) -> isZero
    boolean isZero(float,float) -> isZero
    boolean isEqual(float,float) -> isEqual
    boolean isEqual(float,float,float) -> isEqual
    float log(float,float) -> log
    float log2(float) -> log2
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.MathUtils$Atan2 -> com.badlogic.gdx.math.MathUtils$Atan2:
    float[] table -> table
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.MathUtils$Sin -> com.badlogic.gdx.math.MathUtils$Sin:
    float[] table -> table
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Matrix3 -> com.badlogic.gdx.math.Matrix3:
    long serialVersionUID -> serialVersionUID
    int M00 -> M00
    int M01 -> M01
    int M02 -> M02
    int M10 -> M10
    int M11 -> M11
    int M12 -> M12
    int M20 -> M20
    int M21 -> M21
    int M22 -> M22
    float[] val -> val
    float[] tmp -> tmp
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Matrix3) -> <init>
    void <init>(float[]) -> <init>
    com.badlogic.gdx.math.Matrix3 idt() -> idt
    com.badlogic.gdx.math.Matrix3 mul(com.badlogic.gdx.math.Matrix3) -> mul
    com.badlogic.gdx.math.Matrix3 mulLeft(com.badlogic.gdx.math.Matrix3) -> mulLeft
    com.badlogic.gdx.math.Matrix3 setToRotation(float) -> setToRotation
    com.badlogic.gdx.math.Matrix3 setToRotationRad(float) -> setToRotationRad
    com.badlogic.gdx.math.Matrix3 setToRotation(com.badlogic.gdx.math.Vector3,float) -> setToRotation
    com.badlogic.gdx.math.Matrix3 setToRotation(com.badlogic.gdx.math.Vector3,float,float) -> setToRotation
    com.badlogic.gdx.math.Matrix3 setToTranslation(float,float) -> setToTranslation
    com.badlogic.gdx.math.Matrix3 setToTranslation(com.badlogic.gdx.math.Vector2) -> setToTranslation
    com.badlogic.gdx.math.Matrix3 setToScaling(float,float) -> setToScaling
    com.badlogic.gdx.math.Matrix3 setToScaling(com.badlogic.gdx.math.Vector2) -> setToScaling
    java.lang.String toString() -> toString
    float det() -> det
    com.badlogic.gdx.math.Matrix3 inv() -> inv
    com.badlogic.gdx.math.Matrix3 set(com.badlogic.gdx.math.Matrix3) -> set
    com.badlogic.gdx.math.Matrix3 set(com.badlogic.gdx.math.Affine2) -> set
    com.badlogic.gdx.math.Matrix3 set(com.badlogic.gdx.math.Matrix4) -> set
    com.badlogic.gdx.math.Matrix3 set(float[]) -> set
    com.badlogic.gdx.math.Matrix3 trn(com.badlogic.gdx.math.Vector2) -> trn
    com.badlogic.gdx.math.Matrix3 trn(float,float) -> trn
    com.badlogic.gdx.math.Matrix3 trn(com.badlogic.gdx.math.Vector3) -> trn
    com.badlogic.gdx.math.Matrix3 translate(float,float) -> translate
    com.badlogic.gdx.math.Matrix3 translate(com.badlogic.gdx.math.Vector2) -> translate
    com.badlogic.gdx.math.Matrix3 rotate(float) -> rotate
    com.badlogic.gdx.math.Matrix3 rotateRad(float) -> rotateRad
    com.badlogic.gdx.math.Matrix3 scale(float,float) -> scale
    com.badlogic.gdx.math.Matrix3 scale(com.badlogic.gdx.math.Vector2) -> scale
    float[] getValues() -> getValues
    com.badlogic.gdx.math.Vector2 getTranslation(com.badlogic.gdx.math.Vector2) -> getTranslation
    com.badlogic.gdx.math.Vector2 getScale(com.badlogic.gdx.math.Vector2) -> getScale
    float getRotation() -> getRotation
    float getRotationRad() -> getRotationRad
    com.badlogic.gdx.math.Matrix3 scl(float) -> scl
    com.badlogic.gdx.math.Matrix3 scl(com.badlogic.gdx.math.Vector2) -> scl
    com.badlogic.gdx.math.Matrix3 scl(com.badlogic.gdx.math.Vector3) -> scl
    com.badlogic.gdx.math.Matrix3 transpose() -> transpose
    void mul(float[],float[]) -> mul
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    long serialVersionUID -> serialVersionUID
    int M00 -> M00
    int M01 -> M01
    int M02 -> M02
    int M03 -> M03
    int M10 -> M10
    int M11 -> M11
    int M12 -> M12
    int M13 -> M13
    int M20 -> M20
    int M21 -> M21
    int M22 -> M22
    int M23 -> M23
    int M30 -> M30
    int M31 -> M31
    int M32 -> M32
    int M33 -> M33
    float[] tmp -> tmp
    float[] val -> val
    com.badlogic.gdx.math.Quaternion quat -> quat
    com.badlogic.gdx.math.Quaternion quat2 -> quat2
    com.badlogic.gdx.math.Vector3 l_vez -> l_vez
    com.badlogic.gdx.math.Vector3 l_vex -> l_vex
    com.badlogic.gdx.math.Vector3 l_vey -> l_vey
    com.badlogic.gdx.math.Vector3 tmpVec -> tmpVec
    com.badlogic.gdx.math.Matrix4 tmpMat -> tmpMat
    com.badlogic.gdx.math.Vector3 right -> right
    com.badlogic.gdx.math.Vector3 tmpForward -> tmpForward
    com.badlogic.gdx.math.Vector3 tmpUp -> tmpUp
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Matrix4) -> <init>
    void <init>(float[]) -> <init>
    void <init>(com.badlogic.gdx.math.Quaternion) -> <init>
    void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3) -> <init>
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> set
    com.badlogic.gdx.math.Matrix4 set(float[]) -> set
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Quaternion) -> set
    com.badlogic.gdx.math.Matrix4 set(float,float,float,float) -> set
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion) -> set
    com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float) -> set
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3) -> set
    com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float,float,float,float) -> set
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> set
    com.badlogic.gdx.math.Matrix4 cpy() -> cpy
    com.badlogic.gdx.math.Matrix4 trn(com.badlogic.gdx.math.Vector3) -> trn
    com.badlogic.gdx.math.Matrix4 trn(float,float,float) -> trn
    float[] getValues() -> getValues
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> mul
    com.badlogic.gdx.math.Matrix4 mulLeft(com.badlogic.gdx.math.Matrix4) -> mulLeft
    com.badlogic.gdx.math.Matrix4 tra() -> tra
    com.badlogic.gdx.math.Matrix4 idt() -> idt
    com.badlogic.gdx.math.Matrix4 inv() -> inv
    float det() -> det
    float det3x3() -> det3x3
    com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float) -> setToProjection
    com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float,float,float) -> setToProjection
    com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float) -> setToOrtho2D
    com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float,float,float) -> setToOrtho2D
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> setToOrtho
    com.badlogic.gdx.math.Matrix4 setTranslation(com.badlogic.gdx.math.Vector3) -> setTranslation
    com.badlogic.gdx.math.Matrix4 setTranslation(float,float,float) -> setTranslation
    com.badlogic.gdx.math.Matrix4 setToTranslation(com.badlogic.gdx.math.Vector3) -> setToTranslation
    com.badlogic.gdx.math.Matrix4 setToTranslation(float,float,float) -> setToTranslation
    com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> setToTranslationAndScaling
    com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(float,float,float,float,float,float) -> setToTranslationAndScaling
    com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,float) -> setToRotation
    com.badlogic.gdx.math.Matrix4 setToRotationRad(com.badlogic.gdx.math.Vector3,float) -> setToRotationRad
    com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float) -> setToRotation
    com.badlogic.gdx.math.Matrix4 setToRotationRad(float,float,float,float) -> setToRotationRad
    com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> setToRotation
    com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float,float,float) -> setToRotation
    com.badlogic.gdx.math.Matrix4 setFromEulerAngles(float,float,float) -> setFromEulerAngles
    com.badlogic.gdx.math.Matrix4 setToScaling(com.badlogic.gdx.math.Vector3) -> setToScaling
    com.badlogic.gdx.math.Matrix4 setToScaling(float,float,float) -> setToScaling
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> setToLookAt
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> setToLookAt
    com.badlogic.gdx.math.Matrix4 setToWorld(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> setToWorld
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Matrix4 lerp(com.badlogic.gdx.math.Matrix4,float) -> lerp
    com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4,float) -> avg
    com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[]) -> avg
    com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[],float[]) -> avg
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix3) -> set
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Affine2) -> set
    com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Affine2) -> setAsAffine
    com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Matrix4) -> setAsAffine
    com.badlogic.gdx.math.Matrix4 scl(com.badlogic.gdx.math.Vector3) -> scl
    com.badlogic.gdx.math.Matrix4 scl(float,float,float) -> scl
    com.badlogic.gdx.math.Matrix4 scl(float) -> scl
    com.badlogic.gdx.math.Vector3 getTranslation(com.badlogic.gdx.math.Vector3) -> getTranslation
    com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion,boolean) -> getRotation
    com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion) -> getRotation
    float getScaleXSquared() -> getScaleXSquared
    float getScaleYSquared() -> getScaleYSquared
    float getScaleZSquared() -> getScaleZSquared
    float getScaleX() -> getScaleX
    float getScaleY() -> getScaleY
    float getScaleZ() -> getScaleZ
    com.badlogic.gdx.math.Vector3 getScale(com.badlogic.gdx.math.Vector3) -> getScale
    com.badlogic.gdx.math.Matrix4 toNormalMatrix() -> toNormalMatrix
    void mul(float[],float[]) -> mul
    void mulVec(float[],float[]) -> mulVec
    void mulVec(float[],float[],int,int,int) -> mulVec
    void prj(float[],float[]) -> prj
    void prj(float[],float[],int,int,int) -> prj
    void rot(float[],float[]) -> rot
    void rot(float[],float[],int,int,int) -> rot
    boolean inv(float[]) -> inv
    float det(float[]) -> det
    com.badlogic.gdx.math.Matrix4 translate(com.badlogic.gdx.math.Vector3) -> translate
    com.badlogic.gdx.math.Matrix4 translate(float,float,float) -> translate
    com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,float) -> rotate
    com.badlogic.gdx.math.Matrix4 rotateRad(com.badlogic.gdx.math.Vector3,float) -> rotateRad
    com.badlogic.gdx.math.Matrix4 rotate(float,float,float,float) -> rotate
    com.badlogic.gdx.math.Matrix4 rotateRad(float,float,float,float) -> rotateRad
    com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Quaternion) -> rotate
    com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> rotate
    com.badlogic.gdx.math.Matrix4 scale(float,float,float) -> scale
    void extract4x3Matrix(float[]) -> extract4x3Matrix
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Path -> com.badlogic.gdx.math.Path:
    java.lang.Object derivativeAt(java.lang.Object,float) -> derivativeAt
    java.lang.Object valueAt(java.lang.Object,float) -> valueAt
    float approximate(java.lang.Object) -> approximate
    float locate(java.lang.Object) -> locate
    float approxLength(int) -> approxLength
com.badlogic.gdx.math.Plane -> com.badlogic.gdx.math.Plane:
    long serialVersionUID -> serialVersionUID
    com.badlogic.gdx.math.Vector3 normal -> normal
    float d -> d
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Vector3,float) -> <init>
    void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> <init>
    void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> <init>
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> set
    void set(float,float,float,float) -> set
    float distance(com.badlogic.gdx.math.Vector3) -> distance
    com.badlogic.gdx.math.Plane$PlaneSide testPoint(com.badlogic.gdx.math.Vector3) -> testPoint
    com.badlogic.gdx.math.Plane$PlaneSide testPoint(float,float,float) -> testPoint
    boolean isFrontFacing(com.badlogic.gdx.math.Vector3) -> isFrontFacing
    com.badlogic.gdx.math.Vector3 getNormal() -> getNormal
    float getD() -> getD
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> set
    void set(float,float,float,float,float,float) -> set
    void set(com.badlogic.gdx.math.Plane) -> set
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Plane$PlaneSide -> com.badlogic.gdx.math.Plane$PlaneSide:
    com.badlogic.gdx.math.Plane$PlaneSide OnPlane -> OnPlane
    com.badlogic.gdx.math.Plane$PlaneSide Back -> Back
    com.badlogic.gdx.math.Plane$PlaneSide Front -> Front
    com.badlogic.gdx.math.Plane$PlaneSide[] $VALUES -> $VALUES
    com.badlogic.gdx.math.Plane$PlaneSide[] values() -> values
    com.badlogic.gdx.math.Plane$PlaneSide valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Polygon -> com.badlogic.gdx.math.Polygon:
    float[] localVertices -> localVertices
    float[] worldVertices -> worldVertices
    float x -> x
    float y -> y
    float originX -> originX
    float originY -> originY
    float rotation -> rotation
    float scaleX -> scaleX
    float scaleY -> scaleY
    boolean dirty -> dirty
    com.badlogic.gdx.math.Rectangle bounds -> bounds
    void <init>() -> <init>
    void <init>(float[]) -> <init>
    float[] getVertices() -> getVertices
    float[] getTransformedVertices() -> getTransformedVertices
    void setOrigin(float,float) -> setOrigin
    void setPosition(float,float) -> setPosition
    void setVertices(float[]) -> setVertices
    void translate(float,float) -> translate
    void setRotation(float) -> setRotation
    void rotate(float) -> rotate
    void setScale(float,float) -> setScale
    void scale(float) -> scale
    void dirty() -> dirty
    float area() -> area
    com.badlogic.gdx.math.Rectangle getBoundingRectangle() -> getBoundingRectangle
    boolean contains(float,float) -> contains
    float getX() -> getX
    float getY() -> getY
    float getOriginX() -> getOriginX
    float getOriginY() -> getOriginY
    float getRotation() -> getRotation
    float getScaleX() -> getScaleX
    float getScaleY() -> getScaleY
com.badlogic.gdx.math.Polyline -> com.badlogic.gdx.math.Polyline:
    float[] localVertices -> localVertices
    float[] worldVertices -> worldVertices
    float x -> x
    float y -> y
    float originX -> originX
    float originY -> originY
    float rotation -> rotation
    float scaleX -> scaleX
    float scaleY -> scaleY
    float length -> length
    float scaledLength -> scaledLength
    boolean calculateScaledLength -> calculateScaledLength
    boolean calculateLength -> calculateLength
    boolean dirty -> dirty
    void <init>() -> <init>
    void <init>(float[]) -> <init>
    float[] getVertices() -> getVertices
    float[] getTransformedVertices() -> getTransformedVertices
    float getLength() -> getLength
    float getScaledLength() -> getScaledLength
    float getX() -> getX
    float getY() -> getY
    float getOriginX() -> getOriginX
    float getOriginY() -> getOriginY
    float getRotation() -> getRotation
    float getScaleX() -> getScaleX
    float getScaleY() -> getScaleY
    void setOrigin(float,float) -> setOrigin
    void setPosition(float,float) -> setPosition
    void setVertices(float[]) -> setVertices
    void setRotation(float) -> setRotation
    void rotate(float) -> rotate
    void setScale(float,float) -> setScale
    void scale(float) -> scale
    void calculateLength() -> calculateLength
    void calculateScaledLength() -> calculateScaledLength
    void dirty() -> dirty
    void translate(float,float) -> translate
com.badlogic.gdx.math.Quaternion -> com.badlogic.gdx.math.Quaternion:
    long serialVersionUID -> serialVersionUID
    com.badlogic.gdx.math.Quaternion tmp1 -> tmp1
    com.badlogic.gdx.math.Quaternion tmp2 -> tmp2
    float x -> x
    float y -> y
    float z -> z
    float w -> w
    void <init>(float,float,float,float) -> <init>
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Quaternion) -> <init>
    void <init>(com.badlogic.gdx.math.Vector3,float) -> <init>
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> set
    com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Quaternion) -> set
    com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Vector3,float) -> set
    com.badlogic.gdx.math.Quaternion cpy() -> cpy
    float len(float,float,float,float) -> len
    float len() -> len
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Quaternion setEulerAngles(float,float,float) -> setEulerAngles
    com.badlogic.gdx.math.Quaternion setEulerAnglesRad(float,float,float) -> setEulerAnglesRad
    int getGimbalPole() -> getGimbalPole
    float getRollRad() -> getRollRad
    float getRoll() -> getRoll
    float getPitchRad() -> getPitchRad
    float getPitch() -> getPitch
    float getYawRad() -> getYawRad
    float getYaw() -> getYaw
    float len2(float,float,float,float) -> len2
    float len2() -> len2
    com.badlogic.gdx.math.Quaternion nor() -> nor
    com.badlogic.gdx.math.Quaternion conjugate() -> conjugate
    com.badlogic.gdx.math.Vector3 transform(com.badlogic.gdx.math.Vector3) -> transform
    com.badlogic.gdx.math.Quaternion mul(com.badlogic.gdx.math.Quaternion) -> mul
    com.badlogic.gdx.math.Quaternion mul(float,float,float,float) -> mul
    com.badlogic.gdx.math.Quaternion mulLeft(com.badlogic.gdx.math.Quaternion) -> mulLeft
    com.badlogic.gdx.math.Quaternion mulLeft(float,float,float,float) -> mulLeft
    com.badlogic.gdx.math.Quaternion add(com.badlogic.gdx.math.Quaternion) -> add
    com.badlogic.gdx.math.Quaternion add(float,float,float,float) -> add
    void toMatrix(float[]) -> toMatrix
    com.badlogic.gdx.math.Quaternion idt() -> idt
    boolean isIdentity() -> isIdentity
    boolean isIdentity(float) -> isIdentity
    com.badlogic.gdx.math.Quaternion setFromAxis(com.badlogic.gdx.math.Vector3,float) -> setFromAxis
    com.badlogic.gdx.math.Quaternion setFromAxisRad(com.badlogic.gdx.math.Vector3,float) -> setFromAxisRad
    com.badlogic.gdx.math.Quaternion setFromAxis(float,float,float,float) -> setFromAxis
    com.badlogic.gdx.math.Quaternion setFromAxisRad(float,float,float,float) -> setFromAxisRad
    com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix4) -> setFromMatrix
    com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix4) -> setFromMatrix
    com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix3) -> setFromMatrix
    com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix3) -> setFromMatrix
    com.badlogic.gdx.math.Quaternion setFromAxes(float,float,float,float,float,float,float,float,float) -> setFromAxes
    com.badlogic.gdx.math.Quaternion setFromAxes(boolean,float,float,float,float,float,float,float,float,float) -> setFromAxes
    com.badlogic.gdx.math.Quaternion setFromCross(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> setFromCross
    com.badlogic.gdx.math.Quaternion setFromCross(float,float,float,float,float,float) -> setFromCross
    com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion,float) -> slerp
    com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[]) -> slerp
    com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[],float[]) -> slerp
    com.badlogic.gdx.math.Quaternion exp(float) -> exp
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    float dot(float,float,float,float,float,float,float,float) -> dot
    float dot(com.badlogic.gdx.math.Quaternion) -> dot
    float dot(float,float,float,float) -> dot
    com.badlogic.gdx.math.Quaternion mul(float) -> mul
    float getAxisAngle(com.badlogic.gdx.math.Vector3) -> getAxisAngle
    float getAxisAngleRad(com.badlogic.gdx.math.Vector3) -> getAxisAngleRad
    float getAngleRad() -> getAngleRad
    float getAngle() -> getAngle
    void getSwingTwist(float,float,float,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion) -> getSwingTwist
    void getSwingTwist(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion) -> getSwingTwist
    float getAngleAroundRad(float,float,float) -> getAngleAroundRad
    float getAngleAroundRad(com.badlogic.gdx.math.Vector3) -> getAngleAroundRad
    float getAngleAround(float,float,float) -> getAngleAround
    float getAngleAround(com.badlogic.gdx.math.Vector3) -> getAngleAround
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.RandomXS128 -> com.badlogic.gdx.math.RandomXS128:
    double NORM_DOUBLE -> NORM_DOUBLE
    double NORM_FLOAT -> NORM_FLOAT
    long seed0 -> seed0
    long seed1 -> seed1
    void <init>() -> <init>
    void <init>(long) -> <init>
    void <init>(long,long) -> <init>
    long nextLong() -> nextLong
    int next(int) -> next
    int nextInt() -> nextInt
    int nextInt(int) -> nextInt
    long nextLong(long) -> nextLong
    double nextDouble() -> nextDouble
    float nextFloat() -> nextFloat
    boolean nextBoolean() -> nextBoolean
    void nextBytes(byte[]) -> nextBytes
    void setSeed(long) -> setSeed
    void setState(long,long) -> setState
    long getState(int) -> getState
    long murmurHash3(long) -> murmurHash3
com.badlogic.gdx.math.Rectangle -> com.badlogic.gdx.math.Rectangle:
    com.badlogic.gdx.math.Rectangle tmp -> tmp
    com.badlogic.gdx.math.Rectangle tmp2 -> tmp2
    long serialVersionUID -> serialVersionUID
    float x -> x
    float y -> y
    float width -> width
    float height -> height
    void <init>() -> <init>
    void <init>(float,float,float,float) -> <init>
    void <init>(com.badlogic.gdx.math.Rectangle) -> <init>
    com.badlogic.gdx.math.Rectangle set(float,float,float,float) -> set
    float getX() -> getX
    com.badlogic.gdx.math.Rectangle setX(float) -> setX
    float getY() -> getY
    com.badlogic.gdx.math.Rectangle setY(float) -> setY
    float getWidth() -> getWidth
    com.badlogic.gdx.math.Rectangle setWidth(float) -> setWidth
    float getHeight() -> getHeight
    com.badlogic.gdx.math.Rectangle setHeight(float) -> setHeight
    com.badlogic.gdx.math.Vector2 getPosition(com.badlogic.gdx.math.Vector2) -> getPosition
    com.badlogic.gdx.math.Rectangle setPosition(com.badlogic.gdx.math.Vector2) -> setPosition
    com.badlogic.gdx.math.Rectangle setPosition(float,float) -> setPosition
    com.badlogic.gdx.math.Rectangle setSize(float,float) -> setSize
    com.badlogic.gdx.math.Rectangle setSize(float) -> setSize
    com.badlogic.gdx.math.Vector2 getSize(com.badlogic.gdx.math.Vector2) -> getSize
    boolean contains(float,float) -> contains
    boolean contains(com.badlogic.gdx.math.Vector2) -> contains
    boolean contains(com.badlogic.gdx.math.Rectangle) -> contains
    boolean overlaps(com.badlogic.gdx.math.Rectangle) -> overlaps
    com.badlogic.gdx.math.Rectangle set(com.badlogic.gdx.math.Rectangle) -> set
    com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Rectangle) -> merge
    com.badlogic.gdx.math.Rectangle merge(float,float) -> merge
    com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Vector2) -> merge
    com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Vector2[]) -> merge
    float getAspectRatio() -> getAspectRatio
    com.badlogic.gdx.math.Vector2 getCenter(com.badlogic.gdx.math.Vector2) -> getCenter
    com.badlogic.gdx.math.Rectangle setCenter(float,float) -> setCenter
    com.badlogic.gdx.math.Rectangle setCenter(com.badlogic.gdx.math.Vector2) -> setCenter
    com.badlogic.gdx.math.Rectangle fitOutside(com.badlogic.gdx.math.Rectangle) -> fitOutside
    com.badlogic.gdx.math.Rectangle fitInside(com.badlogic.gdx.math.Rectangle) -> fitInside
    java.lang.String toString() -> toString
    float area() -> area
    float perimeter() -> perimeter
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Shape2D -> com.badlogic.gdx.math.Shape2D:
com.badlogic.gdx.math.Vector -> com.badlogic.gdx.math.Vector:
    com.badlogic.gdx.math.Vector cpy() -> cpy
    float len() -> len
    float len2() -> len2
    com.badlogic.gdx.math.Vector limit(float) -> limit
    com.badlogic.gdx.math.Vector limit2(float) -> limit2
    com.badlogic.gdx.math.Vector setLength(float) -> setLength
    com.badlogic.gdx.math.Vector setLength2(float) -> setLength2
    com.badlogic.gdx.math.Vector clamp(float,float) -> clamp
    com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector) -> set
    com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector) -> sub
    com.badlogic.gdx.math.Vector nor() -> nor
    com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector) -> add
    float dot(com.badlogic.gdx.math.Vector) -> dot
    com.badlogic.gdx.math.Vector scl(float) -> scl
    com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector) -> scl
    float dst(com.badlogic.gdx.math.Vector) -> dst
    float dst2(com.badlogic.gdx.math.Vector) -> dst2
    com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float) -> lerp
    com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation) -> interpolate
    boolean isUnit() -> isUnit
    boolean isUnit(float) -> isUnit
    boolean isZero() -> isZero
    boolean isZero(float) -> isZero
    boolean isOnLine(com.badlogic.gdx.math.Vector,float) -> isOnLine
    boolean isOnLine(com.badlogic.gdx.math.Vector) -> isOnLine
    boolean isCollinear(com.badlogic.gdx.math.Vector,float) -> isCollinear
    boolean isCollinear(com.badlogic.gdx.math.Vector) -> isCollinear
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float) -> isCollinearOpposite
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector) -> isCollinearOpposite
    boolean isPerpendicular(com.badlogic.gdx.math.Vector) -> isPerpendicular
    boolean isPerpendicular(com.badlogic.gdx.math.Vector,float) -> isPerpendicular
    boolean hasSameDirection(com.badlogic.gdx.math.Vector) -> hasSameDirection
    boolean hasOppositeDirection(com.badlogic.gdx.math.Vector) -> hasOppositeDirection
    boolean epsilonEquals(com.badlogic.gdx.math.Vector,float) -> epsilonEquals
    com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float) -> mulAdd
    com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector) -> mulAdd
    com.badlogic.gdx.math.Vector setZero() -> setZero
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.math.Vector2:
    long serialVersionUID -> serialVersionUID
    com.badlogic.gdx.math.Vector2 X -> X
    com.badlogic.gdx.math.Vector2 Y -> Y
    com.badlogic.gdx.math.Vector2 Zero -> Zero
    float x -> x
    float y -> y
    void <init>() -> <init>
    void <init>(float,float) -> <init>
    void <init>(com.badlogic.gdx.math.Vector2) -> <init>
    com.badlogic.gdx.math.Vector2 cpy() -> cpy
    float len(float,float) -> len
    float len() -> len
    float len2(float,float) -> len2
    float len2() -> len2
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> set
    com.badlogic.gdx.math.Vector2 set(float,float) -> set
    com.badlogic.gdx.math.Vector2 sub(com.badlogic.gdx.math.Vector2) -> sub
    com.badlogic.gdx.math.Vector2 sub(float,float) -> sub
    com.badlogic.gdx.math.Vector2 nor() -> nor
    com.badlogic.gdx.math.Vector2 add(com.badlogic.gdx.math.Vector2) -> add
    com.badlogic.gdx.math.Vector2 add(float,float) -> add
    float dot(float,float,float,float) -> dot
    float dot(com.badlogic.gdx.math.Vector2) -> dot
    float dot(float,float) -> dot
    com.badlogic.gdx.math.Vector2 scl(float) -> scl
    com.badlogic.gdx.math.Vector2 scl(float,float) -> scl
    com.badlogic.gdx.math.Vector2 scl(com.badlogic.gdx.math.Vector2) -> scl
    com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,float) -> mulAdd
    com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> mulAdd
    float dst(float,float,float,float) -> dst
    float dst(com.badlogic.gdx.math.Vector2) -> dst
    float dst(float,float) -> dst
    float dst2(float,float,float,float) -> dst2
    float dst2(com.badlogic.gdx.math.Vector2) -> dst2
    float dst2(float,float) -> dst2
    com.badlogic.gdx.math.Vector2 limit(float) -> limit
    com.badlogic.gdx.math.Vector2 limit2(float) -> limit2
    com.badlogic.gdx.math.Vector2 clamp(float,float) -> clamp
    com.badlogic.gdx.math.Vector2 setLength(float) -> setLength
    com.badlogic.gdx.math.Vector2 setLength2(float) -> setLength2
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Vector2 mul(com.badlogic.gdx.math.Matrix3) -> mul
    float crs(com.badlogic.gdx.math.Vector2) -> crs
    float crs(float,float) -> crs
    float angle() -> angle
    float angle(com.badlogic.gdx.math.Vector2) -> angle
    float angleRad() -> angleRad
    float angleRad(com.badlogic.gdx.math.Vector2) -> angleRad
    com.badlogic.gdx.math.Vector2 setAngle(float) -> setAngle
    com.badlogic.gdx.math.Vector2 setAngleRad(float) -> setAngleRad
    com.badlogic.gdx.math.Vector2 rotate(float) -> rotate
    com.badlogic.gdx.math.Vector2 rotateRad(float) -> rotateRad
    com.badlogic.gdx.math.Vector2 rotate90(int) -> rotate90
    com.badlogic.gdx.math.Vector2 lerp(com.badlogic.gdx.math.Vector2,float) -> lerp
    com.badlogic.gdx.math.Vector2 interpolate(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Interpolation) -> interpolate
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean epsilonEquals(com.badlogic.gdx.math.Vector2,float) -> epsilonEquals
    boolean epsilonEquals(float,float,float) -> epsilonEquals
    boolean isUnit() -> isUnit
    boolean isUnit(float) -> isUnit
    boolean isZero() -> isZero
    boolean isZero(float) -> isZero
    boolean isOnLine(com.badlogic.gdx.math.Vector2) -> isOnLine
    boolean isOnLine(com.badlogic.gdx.math.Vector2,float) -> isOnLine
    boolean isCollinear(com.badlogic.gdx.math.Vector2,float) -> isCollinear
    boolean isCollinear(com.badlogic.gdx.math.Vector2) -> isCollinear
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2,float) -> isCollinearOpposite
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2) -> isCollinearOpposite
    boolean isPerpendicular(com.badlogic.gdx.math.Vector2) -> isPerpendicular
    boolean isPerpendicular(com.badlogic.gdx.math.Vector2,float) -> isPerpendicular
    boolean hasSameDirection(com.badlogic.gdx.math.Vector2) -> hasSameDirection
    boolean hasOppositeDirection(com.badlogic.gdx.math.Vector2) -> hasOppositeDirection
    com.badlogic.gdx.math.Vector2 setZero() -> setZero
    com.badlogic.gdx.math.Vector setZero() -> setZero
    com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector) -> mulAdd
    com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float) -> mulAdd
    boolean epsilonEquals(com.badlogic.gdx.math.Vector,float) -> epsilonEquals
    boolean hasOppositeDirection(com.badlogic.gdx.math.Vector) -> hasOppositeDirection
    boolean hasSameDirection(com.badlogic.gdx.math.Vector) -> hasSameDirection
    boolean isPerpendicular(com.badlogic.gdx.math.Vector,float) -> isPerpendicular
    boolean isPerpendicular(com.badlogic.gdx.math.Vector) -> isPerpendicular
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector) -> isCollinearOpposite
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float) -> isCollinearOpposite
    boolean isCollinear(com.badlogic.gdx.math.Vector) -> isCollinear
    boolean isCollinear(com.badlogic.gdx.math.Vector,float) -> isCollinear
    boolean isOnLine(com.badlogic.gdx.math.Vector) -> isOnLine
    boolean isOnLine(com.badlogic.gdx.math.Vector,float) -> isOnLine
    com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation) -> interpolate
    com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float) -> lerp
    float dst2(com.badlogic.gdx.math.Vector) -> dst2
    float dst(com.badlogic.gdx.math.Vector) -> dst
    com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector) -> scl
    com.badlogic.gdx.math.Vector scl(float) -> scl
    float dot(com.badlogic.gdx.math.Vector) -> dot
    com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector) -> add
    com.badlogic.gdx.math.Vector nor() -> nor
    com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector) -> sub
    com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector) -> set
    com.badlogic.gdx.math.Vector clamp(float,float) -> clamp
    com.badlogic.gdx.math.Vector setLength2(float) -> setLength2
    com.badlogic.gdx.math.Vector setLength(float) -> setLength
    com.badlogic.gdx.math.Vector limit2(float) -> limit2
    com.badlogic.gdx.math.Vector limit(float) -> limit
    com.badlogic.gdx.math.Vector cpy() -> cpy
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Vector3 -> com.badlogic.gdx.math.Vector3:
    long serialVersionUID -> serialVersionUID
    float x -> x
    float y -> y
    float z -> z
    com.badlogic.gdx.math.Vector3 X -> X
    com.badlogic.gdx.math.Vector3 Y -> Y
    com.badlogic.gdx.math.Vector3 Z -> Z
    com.badlogic.gdx.math.Vector3 Zero -> Zero
    com.badlogic.gdx.math.Matrix4 tmpMat -> tmpMat
    void <init>() -> <init>
    void <init>(float,float,float) -> <init>
    void <init>(com.badlogic.gdx.math.Vector3) -> <init>
    void <init>(float[]) -> <init>
    void <init>(com.badlogic.gdx.math.Vector2,float) -> <init>
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> set
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> set
    com.badlogic.gdx.math.Vector3 set(float[]) -> set
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector2,float) -> set
    com.badlogic.gdx.math.Vector3 cpy() -> cpy
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> add
    com.badlogic.gdx.math.Vector3 add(float,float,float) -> add
    com.badlogic.gdx.math.Vector3 add(float) -> add
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> sub
    com.badlogic.gdx.math.Vector3 sub(float,float,float) -> sub
    com.badlogic.gdx.math.Vector3 sub(float) -> sub
    com.badlogic.gdx.math.Vector3 scl(float) -> scl
    com.badlogic.gdx.math.Vector3 scl(com.badlogic.gdx.math.Vector3) -> scl
    com.badlogic.gdx.math.Vector3 scl(float,float,float) -> scl
    com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,float) -> mulAdd
    com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> mulAdd
    float len(float,float,float) -> len
    float len() -> len
    float len2(float,float,float) -> len2
    float len2() -> len2
    boolean idt(com.badlogic.gdx.math.Vector3) -> idt
    float dst(float,float,float,float,float,float) -> dst
    float dst(com.badlogic.gdx.math.Vector3) -> dst
    float dst(float,float,float) -> dst
    float dst2(float,float,float,float,float,float) -> dst2
    float dst2(com.badlogic.gdx.math.Vector3) -> dst2
    float dst2(float,float,float) -> dst2
    com.badlogic.gdx.math.Vector3 nor() -> nor
    float dot(float,float,float,float,float,float) -> dot
    float dot(com.badlogic.gdx.math.Vector3) -> dot
    float dot(float,float,float) -> dot
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> crs
    com.badlogic.gdx.math.Vector3 crs(float,float,float) -> crs
    com.badlogic.gdx.math.Vector3 mul4x3(float[]) -> mul4x3
    com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix4) -> mul
    com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix4) -> traMul
    com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix3) -> mul
    com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix3) -> traMul
    com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Quaternion) -> mul
    com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4) -> prj
    com.badlogic.gdx.math.Vector3 rot(com.badlogic.gdx.math.Matrix4) -> rot
    com.badlogic.gdx.math.Vector3 unrotate(com.badlogic.gdx.math.Matrix4) -> unrotate
    com.badlogic.gdx.math.Vector3 untransform(com.badlogic.gdx.math.Matrix4) -> untransform
    com.badlogic.gdx.math.Vector3 rotate(float,float,float,float) -> rotate
    com.badlogic.gdx.math.Vector3 rotateRad(float,float,float,float) -> rotateRad
    com.badlogic.gdx.math.Vector3 rotate(com.badlogic.gdx.math.Vector3,float) -> rotate
    com.badlogic.gdx.math.Vector3 rotateRad(com.badlogic.gdx.math.Vector3,float) -> rotateRad
    boolean isUnit() -> isUnit
    boolean isUnit(float) -> isUnit
    boolean isZero() -> isZero
    boolean isZero(float) -> isZero
    boolean isOnLine(com.badlogic.gdx.math.Vector3,float) -> isOnLine
    boolean isOnLine(com.badlogic.gdx.math.Vector3) -> isOnLine
    boolean isCollinear(com.badlogic.gdx.math.Vector3,float) -> isCollinear
    boolean isCollinear(com.badlogic.gdx.math.Vector3) -> isCollinear
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3,float) -> isCollinearOpposite
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3) -> isCollinearOpposite
    boolean isPerpendicular(com.badlogic.gdx.math.Vector3) -> isPerpendicular
    boolean isPerpendicular(com.badlogic.gdx.math.Vector3,float) -> isPerpendicular
    boolean hasSameDirection(com.badlogic.gdx.math.Vector3) -> hasSameDirection
    boolean hasOppositeDirection(com.badlogic.gdx.math.Vector3) -> hasOppositeDirection
    com.badlogic.gdx.math.Vector3 lerp(com.badlogic.gdx.math.Vector3,float) -> lerp
    com.badlogic.gdx.math.Vector3 interpolate(com.badlogic.gdx.math.Vector3,float,com.badlogic.gdx.math.Interpolation) -> interpolate
    com.badlogic.gdx.math.Vector3 slerp(com.badlogic.gdx.math.Vector3,float) -> slerp
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Vector3 limit(float) -> limit
    com.badlogic.gdx.math.Vector3 limit2(float) -> limit2
    com.badlogic.gdx.math.Vector3 setLength(float) -> setLength
    com.badlogic.gdx.math.Vector3 setLength2(float) -> setLength2
    com.badlogic.gdx.math.Vector3 clamp(float,float) -> clamp
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean epsilonEquals(com.badlogic.gdx.math.Vector3,float) -> epsilonEquals
    boolean epsilonEquals(float,float,float,float) -> epsilonEquals
    com.badlogic.gdx.math.Vector3 setZero() -> setZero
    com.badlogic.gdx.math.Vector setZero() -> setZero
    com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector) -> mulAdd
    com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float) -> mulAdd
    boolean epsilonEquals(com.badlogic.gdx.math.Vector,float) -> epsilonEquals
    boolean hasOppositeDirection(com.badlogic.gdx.math.Vector) -> hasOppositeDirection
    boolean hasSameDirection(com.badlogic.gdx.math.Vector) -> hasSameDirection
    boolean isPerpendicular(com.badlogic.gdx.math.Vector,float) -> isPerpendicular
    boolean isPerpendicular(com.badlogic.gdx.math.Vector) -> isPerpendicular
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector) -> isCollinearOpposite
    boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float) -> isCollinearOpposite
    boolean isCollinear(com.badlogic.gdx.math.Vector) -> isCollinear
    boolean isCollinear(com.badlogic.gdx.math.Vector,float) -> isCollinear
    boolean isOnLine(com.badlogic.gdx.math.Vector) -> isOnLine
    boolean isOnLine(com.badlogic.gdx.math.Vector,float) -> isOnLine
    com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation) -> interpolate
    com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float) -> lerp
    float dst2(com.badlogic.gdx.math.Vector) -> dst2
    float dst(com.badlogic.gdx.math.Vector) -> dst
    com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector) -> scl
    com.badlogic.gdx.math.Vector scl(float) -> scl
    float dot(com.badlogic.gdx.math.Vector) -> dot
    com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector) -> add
    com.badlogic.gdx.math.Vector nor() -> nor
    com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector) -> sub
    com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector) -> set
    com.badlogic.gdx.math.Vector clamp(float,float) -> clamp
    com.badlogic.gdx.math.Vector setLength2(float) -> setLength2
    com.badlogic.gdx.math.Vector setLength(float) -> setLength
    com.badlogic.gdx.math.Vector limit2(float) -> limit2
    com.badlogic.gdx.math.Vector limit(float) -> limit
    com.badlogic.gdx.math.Vector cpy() -> cpy
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.WindowedMean -> com.badlogic.gdx.math.WindowedMean:
    float[] values -> values
    int added_values -> added_values
    int last_value -> last_value
    float mean -> mean
    boolean dirty -> dirty
    void <init>(int) -> <init>
    boolean hasEnoughData() -> hasEnoughData
    void clear() -> clear
    void addValue(float) -> addValue
    float getMean() -> getMean
    float getOldest() -> getOldest
    float getLatest() -> getLatest
    float standardDeviation() -> standardDeviation
    int getWindowSize() -> getWindowSize
com.badlogic.gdx.math.collision.BoundingBox -> com.badlogic.gdx.math.collision.BoundingBox:
    long serialVersionUID -> serialVersionUID
    com.badlogic.gdx.math.Vector3 tmpVector -> tmpVector
    com.badlogic.gdx.math.Vector3 min -> min
    com.badlogic.gdx.math.Vector3 max -> max
    com.badlogic.gdx.math.Vector3 cnt -> cnt
    com.badlogic.gdx.math.Vector3 dim -> dim
    com.badlogic.gdx.math.Vector3 getCenter(com.badlogic.gdx.math.Vector3) -> getCenter
    float getCenterX() -> getCenterX
    float getCenterY() -> getCenterY
    float getCenterZ() -> getCenterZ
    com.badlogic.gdx.math.Vector3 getCorner000(com.badlogic.gdx.math.Vector3) -> getCorner000
    com.badlogic.gdx.math.Vector3 getCorner001(com.badlogic.gdx.math.Vector3) -> getCorner001
    com.badlogic.gdx.math.Vector3 getCorner010(com.badlogic.gdx.math.Vector3) -> getCorner010
    com.badlogic.gdx.math.Vector3 getCorner011(com.badlogic.gdx.math.Vector3) -> getCorner011
    com.badlogic.gdx.math.Vector3 getCorner100(com.badlogic.gdx.math.Vector3) -> getCorner100
    com.badlogic.gdx.math.Vector3 getCorner101(com.badlogic.gdx.math.Vector3) -> getCorner101
    com.badlogic.gdx.math.Vector3 getCorner110(com.badlogic.gdx.math.Vector3) -> getCorner110
    com.badlogic.gdx.math.Vector3 getCorner111(com.badlogic.gdx.math.Vector3) -> getCorner111
    com.badlogic.gdx.math.Vector3 getDimensions(com.badlogic.gdx.math.Vector3) -> getDimensions
    float getWidth() -> getWidth
    float getHeight() -> getHeight
    float getDepth() -> getDepth
    com.badlogic.gdx.math.Vector3 getMin(com.badlogic.gdx.math.Vector3) -> getMin
    com.badlogic.gdx.math.Vector3 getMax(com.badlogic.gdx.math.Vector3) -> getMax
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.collision.BoundingBox) -> <init>
    void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> <init>
    com.badlogic.gdx.math.collision.BoundingBox set(com.badlogic.gdx.math.collision.BoundingBox) -> set
    com.badlogic.gdx.math.collision.BoundingBox set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> set
    com.badlogic.gdx.math.collision.BoundingBox set(com.badlogic.gdx.math.Vector3[]) -> set
    com.badlogic.gdx.math.collision.BoundingBox set(java.util.List) -> set
    com.badlogic.gdx.math.collision.BoundingBox inf() -> inf
    com.badlogic.gdx.math.collision.BoundingBox ext(com.badlogic.gdx.math.Vector3) -> ext
    com.badlogic.gdx.math.collision.BoundingBox clr() -> clr
    boolean isValid() -> isValid
    com.badlogic.gdx.math.collision.BoundingBox ext(com.badlogic.gdx.math.collision.BoundingBox) -> ext
    com.badlogic.gdx.math.collision.BoundingBox ext(com.badlogic.gdx.math.collision.BoundingBox,com.badlogic.gdx.math.Matrix4) -> ext
    com.badlogic.gdx.math.collision.BoundingBox mul(com.badlogic.gdx.math.Matrix4) -> mul
    boolean contains(com.badlogic.gdx.math.collision.BoundingBox) -> contains
    boolean intersects(com.badlogic.gdx.math.collision.BoundingBox) -> intersects
    boolean contains(com.badlogic.gdx.math.Vector3) -> contains
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.collision.BoundingBox ext(float,float,float) -> ext
    float min(float,float) -> min
    float max(float,float) -> max
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.collision.Ray -> com.badlogic.gdx.math.collision.Ray:
    long serialVersionUID -> serialVersionUID
    com.badlogic.gdx.math.Vector3 origin -> origin
    com.badlogic.gdx.math.Vector3 direction -> direction
    com.badlogic.gdx.math.Vector3 tmp -> tmp
    void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> <init>
    com.badlogic.gdx.math.collision.Ray cpy() -> cpy
    com.badlogic.gdx.math.Vector3 getEndPoint(com.badlogic.gdx.math.Vector3,float) -> getEndPoint
    com.badlogic.gdx.math.collision.Ray mul(com.badlogic.gdx.math.Matrix4) -> mul
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> set
    com.badlogic.gdx.math.collision.Ray set(float,float,float,float,float,float) -> set
    com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.collision.Ray) -> set
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.collision.Segment -> com.badlogic.gdx.math.collision.Segment:
    long serialVersionUID -> serialVersionUID
    com.badlogic.gdx.math.Vector3 a -> a
    com.badlogic.gdx.math.Vector3 b -> b
    void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> <init>
    void <init>(float,float,float,float,float,float) -> <init>
    float len() -> len
    float len2() -> len2
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.math.collision.Sphere -> com.badlogic.gdx.math.collision.Sphere:
    long serialVersionUID -> serialVersionUID
    float radius -> radius
    com.badlogic.gdx.math.Vector3 center -> center
    float PI_4_3 -> PI_4_3
    void <init>(com.badlogic.gdx.math.Vector3,float) -> <init>
    boolean overlaps(com.badlogic.gdx.math.collision.Sphere) -> overlaps
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    float volume() -> volume
    float surfaceArea() -> surfaceArea
com.badlogic.gdx.net.HttpParametersUtils -> com.badlogic.gdx.net.HttpParametersUtils:
    java.lang.String defaultEncoding -> defaultEncoding
    java.lang.String nameValueSeparator -> nameValueSeparator
    java.lang.String parameterSeparator -> parameterSeparator
    void <init>() -> <init>
    java.lang.String convertHttpParameters(java.util.Map) -> convertHttpParameters
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    void <clinit>() -> <clinit>
com.badlogic.gdx.net.HttpRequestBuilder -> com.badlogic.gdx.net.HttpRequestBuilder:
    java.lang.String baseUrl -> baseUrl
    int defaultTimeout -> defaultTimeout
    com.badlogic.gdx.utils.Json json -> json
    com.badlogic.gdx.Net$HttpRequest httpRequest -> httpRequest
    void <init>() -> <init>
    com.badlogic.gdx.net.HttpRequestBuilder newRequest() -> newRequest
    com.badlogic.gdx.net.HttpRequestBuilder method(java.lang.String) -> method
    com.badlogic.gdx.net.HttpRequestBuilder url(java.lang.String) -> url
    com.badlogic.gdx.net.HttpRequestBuilder timeout(int) -> timeout
    com.badlogic.gdx.net.HttpRequestBuilder followRedirects(boolean) -> followRedirects
    com.badlogic.gdx.net.HttpRequestBuilder header(java.lang.String,java.lang.String) -> header
    com.badlogic.gdx.net.HttpRequestBuilder content(java.lang.String) -> content
    com.badlogic.gdx.net.HttpRequestBuilder content(java.io.InputStream,long) -> content
    com.badlogic.gdx.net.HttpRequestBuilder formEncodedContent(java.util.Map) -> formEncodedContent
    com.badlogic.gdx.net.HttpRequestBuilder jsonContent(java.lang.Object) -> jsonContent
    com.badlogic.gdx.net.HttpRequestBuilder basicAuthentication(java.lang.String,java.lang.String) -> basicAuthentication
    com.badlogic.gdx.Net$HttpRequest build() -> build
    void validate() -> validate
    void <clinit>() -> <clinit>
com.badlogic.gdx.net.HttpRequestHeader -> com.badlogic.gdx.net.HttpRequestHeader:
    java.lang.String Accept -> Accept
    java.lang.String AcceptCharset -> AcceptCharset
    java.lang.String AcceptEncoding -> AcceptEncoding
    java.lang.String AcceptLanguage -> AcceptLanguage
    java.lang.String AcceptDatetime -> AcceptDatetime
    java.lang.String Authorization -> Authorization
    java.lang.String CacheControl -> CacheControl
    java.lang.String Connection -> Connection
    java.lang.String Cookie -> Cookie
    java.lang.String ContentLength -> ContentLength
    java.lang.String ContentMD5 -> ContentMD5
    java.lang.String ContentType -> ContentType
    java.lang.String Date -> Date
    java.lang.String Expect -> Expect
    java.lang.String From -> From
    java.lang.String Host -> Host
    java.lang.String IfMatch -> IfMatch
    java.lang.String IfModifiedSince -> IfModifiedSince
    java.lang.String IfNoneMatch -> IfNoneMatch
    java.lang.String IfRange -> IfRange
    java.lang.String IfUnmodifiedSince -> IfUnmodifiedSince
    java.lang.String MaxForwards -> MaxForwards
    java.lang.String Origin -> Origin
    java.lang.String Pragma -> Pragma
    java.lang.String ProxyAuthorization -> ProxyAuthorization
    java.lang.String Range -> Range
    java.lang.String Referer -> Referer
    java.lang.String TE -> TE
    java.lang.String UserAgent -> UserAgent
    java.lang.String Upgrade -> Upgrade
    java.lang.String Via -> Via
    java.lang.String Warning -> Warning
com.badlogic.gdx.net.HttpResponseHeader -> com.badlogic.gdx.net.HttpResponseHeader:
    java.lang.String AccessControlAllowOrigin -> AccessControlAllowOrigin
    java.lang.String AcceptRanges -> AcceptRanges
    java.lang.String Age -> Age
    java.lang.String Allow -> Allow
    java.lang.String CacheControl -> CacheControl
    java.lang.String Connection -> Connection
    java.lang.String ContentEncoding -> ContentEncoding
    java.lang.String ContentLanguage -> ContentLanguage
    java.lang.String ContentLength -> ContentLength
    java.lang.String ContentLocation -> ContentLocation
    java.lang.String ContentMD5 -> ContentMD5
    java.lang.String ContentDisposition -> ContentDisposition
    java.lang.String ContentRange -> ContentRange
    java.lang.String ContentType -> ContentType
    java.lang.String Date -> Date
    java.lang.String ETag -> ETag
    java.lang.String Expires -> Expires
    java.lang.String LastModified -> LastModified
    java.lang.String Link -> Link
    java.lang.String Location -> Location
    java.lang.String P3P -> P3P
    java.lang.String Pragma -> Pragma
    java.lang.String ProxyAuthenticate -> ProxyAuthenticate
    java.lang.String Refresh -> Refresh
    java.lang.String RetryAfter -> RetryAfter
    java.lang.String Server -> Server
    java.lang.String SetCookie -> SetCookie
    java.lang.String Status -> Status
    java.lang.String StrictTransportSecurity -> StrictTransportSecurity
    java.lang.String Trailer -> Trailer
    java.lang.String TransferEncoding -> TransferEncoding
    java.lang.String Upgrade -> Upgrade
    java.lang.String Vary -> Vary
    java.lang.String Via -> Via
    java.lang.String Warning -> Warning
    java.lang.String WWWAuthenticate -> WWWAuthenticate
com.badlogic.gdx.net.HttpStatus -> com.badlogic.gdx.net.HttpStatus:
    int statusCode -> statusCode
    int SC_CONTINUE -> SC_CONTINUE
    int SC_SWITCHING_PROTOCOLS -> SC_SWITCHING_PROTOCOLS
    int SC_PROCESSING -> SC_PROCESSING
    int SC_OK -> SC_OK
    int SC_CREATED -> SC_CREATED
    int SC_ACCEPTED -> SC_ACCEPTED
    int SC_NON_AUTHORITATIVE_INFORMATION -> SC_NON_AUTHORITATIVE_INFORMATION
    int SC_NO_CONTENT -> SC_NO_CONTENT
    int SC_RESET_CONTENT -> SC_RESET_CONTENT
    int SC_PARTIAL_CONTENT -> SC_PARTIAL_CONTENT
    int SC_MULTI_STATUS -> SC_MULTI_STATUS
    int SC_MULTIPLE_CHOICES -> SC_MULTIPLE_CHOICES
    int SC_MOVED_PERMANENTLY -> SC_MOVED_PERMANENTLY
    int SC_MOVED_TEMPORARILY -> SC_MOVED_TEMPORARILY
    int SC_SEE_OTHER -> SC_SEE_OTHER
    int SC_NOT_MODIFIED -> SC_NOT_MODIFIED
    int SC_USE_PROXY -> SC_USE_PROXY
    int SC_TEMPORARY_REDIRECT -> SC_TEMPORARY_REDIRECT
    int SC_BAD_REQUEST -> SC_BAD_REQUEST
    int SC_UNAUTHORIZED -> SC_UNAUTHORIZED
    int SC_PAYMENT_REQUIRED -> SC_PAYMENT_REQUIRED
    int SC_FORBIDDEN -> SC_FORBIDDEN
    int SC_NOT_FOUND -> SC_NOT_FOUND
    int SC_METHOD_NOT_ALLOWED -> SC_METHOD_NOT_ALLOWED
    int SC_NOT_ACCEPTABLE -> SC_NOT_ACCEPTABLE
    int SC_PROXY_AUTHENTICATION_REQUIRED -> SC_PROXY_AUTHENTICATION_REQUIRED
    int SC_REQUEST_TIMEOUT -> SC_REQUEST_TIMEOUT
    int SC_CONFLICT -> SC_CONFLICT
    int SC_GONE -> SC_GONE
    int SC_LENGTH_REQUIRED -> SC_LENGTH_REQUIRED
    int SC_PRECONDITION_FAILED -> SC_PRECONDITION_FAILED
    int SC_REQUEST_TOO_LONG -> SC_REQUEST_TOO_LONG
    int SC_REQUEST_URI_TOO_LONG -> SC_REQUEST_URI_TOO_LONG
    int SC_UNSUPPORTED_MEDIA_TYPE -> SC_UNSUPPORTED_MEDIA_TYPE
    int SC_REQUESTED_RANGE_NOT_SATISFIABLE -> SC_REQUESTED_RANGE_NOT_SATISFIABLE
    int SC_EXPECTATION_FAILED -> SC_EXPECTATION_FAILED
    int SC_INSUFFICIENT_SPACE_ON_RESOURCE -> SC_INSUFFICIENT_SPACE_ON_RESOURCE
    int SC_METHOD_FAILURE -> SC_METHOD_FAILURE
    int SC_UNPROCESSABLE_ENTITY -> SC_UNPROCESSABLE_ENTITY
    int SC_LOCKED -> SC_LOCKED
    int SC_FAILED_DEPENDENCY -> SC_FAILED_DEPENDENCY
    int SC_INTERNAL_SERVER_ERROR -> SC_INTERNAL_SERVER_ERROR
    int SC_NOT_IMPLEMENTED -> SC_NOT_IMPLEMENTED
    int SC_BAD_GATEWAY -> SC_BAD_GATEWAY
    int SC_SERVICE_UNAVAILABLE -> SC_SERVICE_UNAVAILABLE
    int SC_GATEWAY_TIMEOUT -> SC_GATEWAY_TIMEOUT
    int SC_HTTP_VERSION_NOT_SUPPORTED -> SC_HTTP_VERSION_NOT_SUPPORTED
    int SC_INSUFFICIENT_STORAGE -> SC_INSUFFICIENT_STORAGE
    int getStatusCode() -> getStatusCode
    void <init>(int) -> <init>
com.badlogic.gdx.net.NetJavaImpl -> com.badlogic.gdx.net.NetJavaImpl:
    java.util.concurrent.ExecutorService executorService -> executorService
    com.badlogic.gdx.utils.ObjectMap connections -> connections
    com.badlogic.gdx.utils.ObjectMap listeners -> listeners
    void <init>() -> <init>
    void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener) -> sendHttpRequest
    void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest) -> cancelHttpRequest
    void removeFromConnectionsAndListeners(com.badlogic.gdx.Net$HttpRequest) -> removeFromConnectionsAndListeners
    void putIntoConnectionsAndListeners(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener,java.net.HttpURLConnection) -> putIntoConnectionsAndListeners
    com.badlogic.gdx.Net$HttpResponseListener getFromListeners(com.badlogic.gdx.Net$HttpRequest) -> getFromListeners
com.badlogic.gdx.net.NetJavaImpl$1 -> com.badlogic.gdx.net.NetJavaImpl$1:
    boolean val$doingOutPut -> val$doingOutPut
    com.badlogic.gdx.Net$HttpRequest val$httpRequest -> val$httpRequest
    java.net.HttpURLConnection val$connection -> val$connection
    com.badlogic.gdx.Net$HttpResponseListener val$httpResponseListener -> val$httpResponseListener
    com.badlogic.gdx.net.NetJavaImpl this$0 -> this$0
    void <init>(com.badlogic.gdx.net.NetJavaImpl,boolean,com.badlogic.gdx.Net$HttpRequest,java.net.HttpURLConnection,com.badlogic.gdx.Net$HttpResponseListener) -> <init>
    void run() -> run
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse -> com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse:
    java.net.HttpURLConnection connection -> connection
    com.badlogic.gdx.net.HttpStatus status -> status
    void <init>(java.net.HttpURLConnection) -> <init>
    byte[] getResult() -> getResult
    java.lang.String getResultAsString() -> getResultAsString
    java.io.InputStream getResultAsStream() -> getResultAsStream
    com.badlogic.gdx.net.HttpStatus getStatus() -> getStatus
    java.lang.String getHeader(java.lang.String) -> getHeader
    java.util.Map getHeaders() -> getHeaders
    java.io.InputStream getInputStream() -> getInputStream
com.badlogic.gdx.net.NetJavaServerSocketImpl -> com.badlogic.gdx.net.NetJavaServerSocketImpl:
    com.badlogic.gdx.Net$Protocol protocol -> protocol
    java.net.ServerSocket server -> server
    void <init>(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints) -> <init>
    void <init>(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints) -> <init>
    com.badlogic.gdx.Net$Protocol getProtocol() -> getProtocol
    com.badlogic.gdx.net.Socket accept(com.badlogic.gdx.net.SocketHints) -> accept
    void dispose() -> dispose
com.badlogic.gdx.net.NetJavaSocketImpl -> com.badlogic.gdx.net.NetJavaSocketImpl:
    java.net.Socket socket -> socket
    void <init>(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints) -> <init>
    void <init>(java.net.Socket,com.badlogic.gdx.net.SocketHints) -> <init>
    void applyHints(com.badlogic.gdx.net.SocketHints) -> applyHints
    boolean isConnected() -> isConnected
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.lang.String getRemoteAddress() -> getRemoteAddress
    void dispose() -> dispose
com.badlogic.gdx.net.ServerSocket -> com.badlogic.gdx.net.ServerSocket:
    com.badlogic.gdx.Net$Protocol getProtocol() -> getProtocol
    com.badlogic.gdx.net.Socket accept(com.badlogic.gdx.net.SocketHints) -> accept
com.badlogic.gdx.net.ServerSocketHints -> com.badlogic.gdx.net.ServerSocketHints:
    int backlog -> backlog
    int performancePrefConnectionTime -> performancePrefConnectionTime
    int performancePrefLatency -> performancePrefLatency
    int performancePrefBandwidth -> performancePrefBandwidth
    boolean reuseAddress -> reuseAddress
    int acceptTimeout -> acceptTimeout
    int receiveBufferSize -> receiveBufferSize
    void <init>() -> <init>
com.badlogic.gdx.net.Socket -> com.badlogic.gdx.net.Socket:
    boolean isConnected() -> isConnected
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.lang.String getRemoteAddress() -> getRemoteAddress
com.badlogic.gdx.net.SocketHints -> com.badlogic.gdx.net.SocketHints:
    int connectTimeout -> connectTimeout
    int performancePrefConnectionTime -> performancePrefConnectionTime
    int performancePrefLatency -> performancePrefLatency
    int performancePrefBandwidth -> performancePrefBandwidth
    int trafficClass -> trafficClass
    boolean keepAlive -> keepAlive
    boolean tcpNoDelay -> tcpNoDelay
    int sendBufferSize -> sendBufferSize
    int receiveBufferSize -> receiveBufferSize
    boolean linger -> linger
    int lingerDuration -> lingerDuration
    int socketTimeout -> socketTimeout
    void <init>() -> <init>
com.badlogic.gdx.scenes.scene2d.Action -> com.badlogic.gdx.scenes.scene2d.Action:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> actor
    com.badlogic.gdx.scenes.scene2d.Actor target -> target
    com.badlogic.gdx.utils.Pool pool -> pool
    void <init>() -> <init>
    boolean act(float) -> act
    void restart() -> restart
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setActor
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> getActor
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> setTarget
    com.badlogic.gdx.scenes.scene2d.Actor getTarget() -> getTarget
    void reset() -> reset
    com.badlogic.gdx.utils.Pool getPool() -> getPool
    void setPool(com.badlogic.gdx.utils.Pool) -> setPool
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Actor -> com.badlogic.gdx.scenes.scene2d.Actor:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> stage
    com.badlogic.gdx.scenes.scene2d.Group parent -> parent
    com.badlogic.gdx.utils.DelayedRemovalArray listeners -> listeners
    com.badlogic.gdx.utils.DelayedRemovalArray captureListeners -> captureListeners
    com.badlogic.gdx.utils.Array actions -> actions
    java.lang.String name -> name
    com.badlogic.gdx.scenes.scene2d.Touchable touchable -> touchable
    boolean visible -> visible
    boolean debug -> debug
    float x -> x
    float y -> y
    float width -> width
    float height -> height
    float originX -> originX
    float originY -> originY
    float scaleX -> scaleX
    float scaleY -> scaleY
    float rotation -> rotation
    com.badlogic.gdx.graphics.Color color -> color
    java.lang.Object userObject -> userObject
    void <init>() -> <init>
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void act(float) -> act
    boolean fire(com.badlogic.gdx.scenes.scene2d.Event) -> fire
    boolean notify(com.badlogic.gdx.scenes.scene2d.Event,boolean) -> notify
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> hit
    boolean remove() -> remove
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> addListener
    boolean removeListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> removeListener
    com.badlogic.gdx.utils.Array getListeners() -> getListeners
    boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> addCaptureListener
    boolean removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> removeCaptureListener
    com.badlogic.gdx.utils.Array getCaptureListeners() -> getCaptureListeners
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> addAction
    void removeAction(com.badlogic.gdx.scenes.scene2d.Action) -> removeAction
    com.badlogic.gdx.utils.Array getActions() -> getActions
    void clearActions() -> clearActions
    void clearListeners() -> clearListeners
    void clear() -> clear
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> getStage
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> setStage
    boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> isDescendantOf
    boolean isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> isAscendantOf
    boolean hasParent() -> hasParent
    com.badlogic.gdx.scenes.scene2d.Group getParent() -> getParent
    void setParent(com.badlogic.gdx.scenes.scene2d.Group) -> setParent
    boolean isTouchable() -> isTouchable
    com.badlogic.gdx.scenes.scene2d.Touchable getTouchable() -> getTouchable
    void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable) -> setTouchable
    boolean isVisible() -> isVisible
    void setVisible(boolean) -> setVisible
    java.lang.Object getUserObject() -> getUserObject
    void setUserObject(java.lang.Object) -> setUserObject
    float getX() -> getX
    float getX(int) -> getX
    void setX(float) -> setX
    float getY() -> getY
    void setY(float) -> setY
    float getY(int) -> getY
    void setPosition(float,float) -> setPosition
    void setPosition(float,float,int) -> setPosition
    void moveBy(float,float) -> moveBy
    float getWidth() -> getWidth
    void setWidth(float) -> setWidth
    float getHeight() -> getHeight
    void setHeight(float) -> setHeight
    float getTop() -> getTop
    float getRight() -> getRight
    void positionChanged() -> positionChanged
    void sizeChanged() -> sizeChanged
    void setSize(float,float) -> setSize
    void sizeBy(float) -> sizeBy
    void sizeBy(float,float) -> sizeBy
    void setBounds(float,float,float,float) -> setBounds
    float getOriginX() -> getOriginX
    void setOriginX(float) -> setOriginX
    float getOriginY() -> getOriginY
    void setOriginY(float) -> setOriginY
    void setOrigin(float,float) -> setOrigin
    void setOrigin(int) -> setOrigin
    float getScaleX() -> getScaleX
    void setScaleX(float) -> setScaleX
    float getScaleY() -> getScaleY
    void setScaleY(float) -> setScaleY
    void setScale(float) -> setScale
    void setScale(float,float) -> setScale
    void scaleBy(float) -> scaleBy
    void scaleBy(float,float) -> scaleBy
    float getRotation() -> getRotation
    void setRotation(float) -> setRotation
    void rotateBy(float) -> rotateBy
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    void setColor(float,float,float,float) -> setColor
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    void toFront() -> toFront
    void toBack() -> toBack
    void setZIndex(int) -> setZIndex
    int getZIndex() -> getZIndex
    boolean clipBegin() -> clipBegin
    boolean clipBegin(float,float,float,float) -> clipBegin
    void clipEnd() -> clipEnd
    com.badlogic.gdx.math.Vector2 screenToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> screenToLocalCoordinates
    com.badlogic.gdx.math.Vector2 stageToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> stageToLocalCoordinates
    com.badlogic.gdx.math.Vector2 localToStageCoordinates(com.badlogic.gdx.math.Vector2) -> localToStageCoordinates
    com.badlogic.gdx.math.Vector2 localToParentCoordinates(com.badlogic.gdx.math.Vector2) -> localToParentCoordinates
    com.badlogic.gdx.math.Vector2 localToAscendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2) -> localToAscendantCoordinates
    com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> parentToLocalCoordinates
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> drawDebug
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> drawDebugBounds
    void setDebug(boolean) -> setDebug
    boolean getDebug() -> getDebug
    com.badlogic.gdx.scenes.scene2d.Actor debug() -> debug
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Event -> com.badlogic.gdx.scenes.scene2d.Event:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> stage
    com.badlogic.gdx.scenes.scene2d.Actor targetActor -> targetActor
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> listenerActor
    boolean capture -> capture
    boolean bubbles -> bubbles
    boolean handled -> handled
    boolean stopped -> stopped
    boolean cancelled -> cancelled
    void <init>() -> <init>
    void handle() -> handle
    void cancel() -> cancel
    void stop() -> stop
    void reset() -> reset
    com.badlogic.gdx.scenes.scene2d.Actor getTarget() -> getTarget
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> setTarget
    com.badlogic.gdx.scenes.scene2d.Actor getListenerActor() -> getListenerActor
    void setListenerActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setListenerActor
    boolean getBubbles() -> getBubbles
    void setBubbles(boolean) -> setBubbles
    boolean isHandled() -> isHandled
    boolean isStopped() -> isStopped
    boolean isCancelled() -> isCancelled
    void setCapture(boolean) -> setCapture
    boolean isCapture() -> isCapture
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> setStage
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> getStage
com.badlogic.gdx.scenes.scene2d.EventListener -> com.badlogic.gdx.scenes.scene2d.EventListener:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> handle
com.badlogic.gdx.scenes.scene2d.Group -> com.badlogic.gdx.scenes.scene2d.Group:
    com.badlogic.gdx.math.Vector2 tmp -> tmp
    com.badlogic.gdx.utils.SnapshotArray children -> children
    com.badlogic.gdx.math.Affine2 worldTransform -> worldTransform
    com.badlogic.gdx.math.Matrix4 computedTransform -> computedTransform
    com.badlogic.gdx.math.Matrix4 oldTransform -> oldTransform
    boolean transform -> transform
    com.badlogic.gdx.math.Rectangle cullingArea -> cullingArea
    void <init>() -> <init>
    void act(float) -> act
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void drawChildren(com.badlogic.gdx.graphics.g2d.Batch,float) -> drawChildren
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> drawDebug
    void drawDebugChildren(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> drawDebugChildren
    com.badlogic.gdx.math.Matrix4 computeTransform() -> computeTransform
    void applyTransform(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.math.Matrix4) -> applyTransform
    void resetTransform(com.badlogic.gdx.graphics.g2d.Batch) -> resetTransform
    void applyTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer,com.badlogic.gdx.math.Matrix4) -> applyTransform
    void resetTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> resetTransform
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> setCullingArea
    com.badlogic.gdx.math.Rectangle getCullingArea() -> getCullingArea
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> hit
    void childrenChanged() -> childrenChanged
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> addActor
    void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorAt
    void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorBefore
    void addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorAfter
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> removeActor
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> removeActor
    void clearChildren() -> clearChildren
    void clear() -> clear
    com.badlogic.gdx.scenes.scene2d.Actor findActor(java.lang.String) -> findActor
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> setStage
    boolean swapActor(int,int) -> swapActor
    boolean swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> swapActor
    com.badlogic.gdx.utils.SnapshotArray getChildren() -> getChildren
    boolean hasChildren() -> hasChildren
    void setTransform(boolean) -> setTransform
    boolean isTransform() -> isTransform
    com.badlogic.gdx.math.Vector2 localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2) -> localToDescendantCoordinates
    void setDebug(boolean,boolean) -> setDebug
    com.badlogic.gdx.scenes.scene2d.Group debugAll() -> debugAll
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuilder,int) -> toString
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.InputEvent -> com.badlogic.gdx.scenes.scene2d.InputEvent:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type type -> type
    float stageX -> stageX
    float stageY -> stageY
    int pointer -> pointer
    int button -> button
    int keyCode -> keyCode
    int scrollAmount -> scrollAmount
    char character -> character
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> relatedActor
    void <init>() -> <init>
    void reset() -> reset
    float getStageX() -> getStageX
    void setStageX(float) -> setStageX
    float getStageY() -> getStageY
    void setStageY(float) -> setStageY
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type getType() -> getType
    void setType(com.badlogic.gdx.scenes.scene2d.InputEvent$Type) -> setType
    int getPointer() -> getPointer
    void setPointer(int) -> setPointer
    int getButton() -> getButton
    void setButton(int) -> setButton
    int getKeyCode() -> getKeyCode
    void setKeyCode(int) -> setKeyCode
    char getCharacter() -> getCharacter
    void setCharacter(char) -> setCharacter
    int getScrollAmount() -> getScrollAmount
    void setScrollAmount(int) -> setScrollAmount
    com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor() -> getRelatedActor
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setRelatedActor
    com.badlogic.gdx.math.Vector2 toCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2) -> toCoordinates
    boolean isTouchFocusCancel() -> isTouchFocusCancel
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.InputEvent$Type -> com.badlogic.gdx.scenes.scene2d.InputEvent$Type:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDown -> touchDown
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchUp -> touchUp
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDragged -> touchDragged
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type mouseMoved -> mouseMoved
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type enter -> enter
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type exit -> exit
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type scrolled -> scrolled
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyDown -> keyDown
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyUp -> keyUp
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyTyped -> keyTyped
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] $VALUES -> $VALUES
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] values() -> values
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.InputListener -> com.badlogic.gdx.scenes.scene2d.InputListener:
    com.badlogic.gdx.math.Vector2 tmpCoords -> tmpCoords
    void <init>() -> <init>
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> handle
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
    boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> mouseMoved
    void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> enter
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> exit
    boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> scrolled
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> keyDown
    boolean keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> keyUp
    boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char) -> keyTyped
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.InputListener$1 -> com.badlogic.gdx.scenes.scene2d.InputListener$1:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.Stage -> com.badlogic.gdx.scenes.scene2d.Stage:
    boolean debug -> debug
    com.badlogic.gdx.utils.viewport.Viewport viewport -> viewport
    com.badlogic.gdx.graphics.g2d.Batch batch -> batch
    boolean ownsBatch -> ownsBatch
    com.badlogic.gdx.scenes.scene2d.Group root -> root
    com.badlogic.gdx.math.Vector2 tempCoords -> tempCoords
    com.badlogic.gdx.scenes.scene2d.Actor[] pointerOverActors -> pointerOverActors
    boolean[] pointerTouched -> pointerTouched
    int[] pointerScreenX -> pointerScreenX
    int[] pointerScreenY -> pointerScreenY
    int mouseScreenX -> mouseScreenX
    int mouseScreenY -> mouseScreenY
    com.badlogic.gdx.scenes.scene2d.Actor mouseOverActor -> mouseOverActor
    com.badlogic.gdx.scenes.scene2d.Actor keyboardFocus -> keyboardFocus
    com.badlogic.gdx.scenes.scene2d.Actor scrollFocus -> scrollFocus
    com.badlogic.gdx.utils.SnapshotArray touchFocuses -> touchFocuses
    boolean actionsRequestRendering -> actionsRequestRendering
    com.badlogic.gdx.graphics.glutils.ShapeRenderer debugShapes -> debugShapes
    boolean debugInvisible -> debugInvisible
    boolean debugAll -> debugAll
    boolean debugUnderMouse -> debugUnderMouse
    boolean debugParentUnderMouse -> debugParentUnderMouse
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debugTableUnderMouse -> debugTableUnderMouse
    com.badlogic.gdx.graphics.Color debugColor -> debugColor
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.utils.viewport.Viewport) -> <init>
    void <init>(com.badlogic.gdx.utils.viewport.Viewport,com.badlogic.gdx.graphics.g2d.Batch) -> <init>
    void draw() -> draw
    void drawDebug() -> drawDebug
    void disableDebug(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> disableDebug
    void act() -> act
    void act(float) -> act
    com.badlogic.gdx.scenes.scene2d.Actor fireEnterAndExit(com.badlogic.gdx.scenes.scene2d.Actor,int,int,int) -> fireEnterAndExit
    boolean touchDown(int,int,int,int) -> touchDown
    boolean touchDragged(int,int,int) -> touchDragged
    boolean touchUp(int,int,int,int) -> touchUp
    boolean mouseMoved(int,int) -> mouseMoved
    boolean scrolled(int) -> scrolled
    boolean keyDown(int) -> keyDown
    boolean keyUp(int) -> keyUp
    boolean keyTyped(char) -> keyTyped
    void addTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int) -> addTouchFocus
    void removeTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int) -> removeTouchFocus
    void cancelTouchFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> cancelTouchFocus
    void cancelTouchFocus() -> cancelTouchFocus
    void cancelTouchFocusExcept(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor) -> cancelTouchFocusExcept
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> addActor
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> addAction
    com.badlogic.gdx.utils.Array getActors() -> getActors
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> addListener
    boolean removeListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> removeListener
    boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> addCaptureListener
    boolean removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> removeCaptureListener
    void clear() -> clear
    void unfocusAll() -> unfocusAll
    void unfocus(com.badlogic.gdx.scenes.scene2d.Actor) -> unfocus
    void setKeyboardFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> setKeyboardFocus
    com.badlogic.gdx.scenes.scene2d.Actor getKeyboardFocus() -> getKeyboardFocus
    void setScrollFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> setScrollFocus
    com.badlogic.gdx.scenes.scene2d.Actor getScrollFocus() -> getScrollFocus
    com.badlogic.gdx.graphics.g2d.Batch getBatch() -> getBatch
    com.badlogic.gdx.utils.viewport.Viewport getViewport() -> getViewport
    void setViewport(com.badlogic.gdx.utils.viewport.Viewport) -> setViewport
    float getWidth() -> getWidth
    float getHeight() -> getHeight
    com.badlogic.gdx.graphics.Camera getCamera() -> getCamera
    com.badlogic.gdx.scenes.scene2d.Group getRoot() -> getRoot
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> hit
    com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2) -> screenToStageCoordinates
    com.badlogic.gdx.math.Vector2 stageToScreenCoordinates(com.badlogic.gdx.math.Vector2) -> stageToScreenCoordinates
    com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4) -> toScreenCoordinates
    void calculateScissors(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> calculateScissors
    void setActionsRequestRendering(boolean) -> setActionsRequestRendering
    boolean getActionsRequestRendering() -> getActionsRequestRendering
    com.badlogic.gdx.graphics.Color getDebugColor() -> getDebugColor
    void setDebugInvisible(boolean) -> setDebugInvisible
    void setDebugAll(boolean) -> setDebugAll
    void setDebugUnderMouse(boolean) -> setDebugUnderMouse
    void setDebugParentUnderMouse(boolean) -> setDebugParentUnderMouse
    void setDebugTableUnderMouse(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug) -> setDebugTableUnderMouse
    void setDebugTableUnderMouse(boolean) -> setDebugTableUnderMouse
    void dispose() -> dispose
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus -> com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus:
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> listener
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> listenerActor
    com.badlogic.gdx.scenes.scene2d.Actor target -> target
    int pointer -> pointer
    int button -> button
    void <init>() -> <init>
    void reset() -> reset
com.badlogic.gdx.scenes.scene2d.Touchable -> com.badlogic.gdx.scenes.scene2d.Touchable:
    com.badlogic.gdx.scenes.scene2d.Touchable enabled -> enabled
    com.badlogic.gdx.scenes.scene2d.Touchable disabled -> disabled
    com.badlogic.gdx.scenes.scene2d.Touchable childrenOnly -> childrenOnly
    com.badlogic.gdx.scenes.scene2d.Touchable[] $VALUES -> $VALUES
    com.badlogic.gdx.scenes.scene2d.Touchable[] values() -> values
    com.badlogic.gdx.scenes.scene2d.Touchable valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.actions.Actions -> com.badlogic.gdx.scenes.scene2d.actions.Actions:
    void <init>() -> <init>
    com.badlogic.gdx.scenes.scene2d.Action action(java.lang.Class) -> action
    com.badlogic.gdx.scenes.scene2d.actions.AddAction addAction(com.badlogic.gdx.scenes.scene2d.Action) -> addAction
    com.badlogic.gdx.scenes.scene2d.actions.AddAction addAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Actor) -> addAction
    com.badlogic.gdx.scenes.scene2d.actions.RemoveAction removeAction(com.badlogic.gdx.scenes.scene2d.Action) -> removeAction
    com.badlogic.gdx.scenes.scene2d.actions.RemoveAction removeAction(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Actor) -> removeAction
    com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float) -> moveTo
    com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float) -> moveTo
    com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float,com.badlogic.gdx.math.Interpolation) -> moveTo
    com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int) -> moveToAligned
    com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int,float) -> moveToAligned
    com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveToAligned(float,float,int,float,com.badlogic.gdx.math.Interpolation) -> moveToAligned
    com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float) -> moveBy
    com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float,float) -> moveBy
    com.badlogic.gdx.scenes.scene2d.actions.MoveByAction moveBy(float,float,float,com.badlogic.gdx.math.Interpolation) -> moveBy
    com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float) -> sizeTo
    com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float) -> sizeTo
    com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float,com.badlogic.gdx.math.Interpolation) -> sizeTo
    com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float) -> sizeBy
    com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float,float) -> sizeBy
    com.badlogic.gdx.scenes.scene2d.actions.SizeByAction sizeBy(float,float,float,com.badlogic.gdx.math.Interpolation) -> sizeBy
    com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float) -> scaleTo
    com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float,float) -> scaleTo
    com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction scaleTo(float,float,float,com.badlogic.gdx.math.Interpolation) -> scaleTo
    com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float) -> scaleBy
    com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float,float) -> scaleBy
    com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction scaleBy(float,float,float,com.badlogic.gdx.math.Interpolation) -> scaleBy
    com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float) -> rotateTo
    com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float) -> rotateTo
    com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float,com.badlogic.gdx.math.Interpolation) -> rotateTo
    com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float) -> rotateBy
    com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float,float) -> rotateBy
    com.badlogic.gdx.scenes.scene2d.actions.RotateByAction rotateBy(float,float,com.badlogic.gdx.math.Interpolation) -> rotateBy
    com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color) -> color
    com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color,float) -> color
    com.badlogic.gdx.scenes.scene2d.actions.ColorAction color(com.badlogic.gdx.graphics.Color,float,com.badlogic.gdx.math.Interpolation) -> color
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float) -> alpha
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float,float) -> alpha
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float,float,com.badlogic.gdx.math.Interpolation) -> alpha
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeOut(float) -> fadeOut
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeOut(float,com.badlogic.gdx.math.Interpolation) -> fadeOut
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeIn(float) -> fadeIn
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeIn(float,com.badlogic.gdx.math.Interpolation) -> fadeIn
    com.badlogic.gdx.scenes.scene2d.actions.VisibleAction show() -> show
    com.badlogic.gdx.scenes.scene2d.actions.VisibleAction hide() -> hide
    com.badlogic.gdx.scenes.scene2d.actions.VisibleAction visible(boolean) -> visible
    com.badlogic.gdx.scenes.scene2d.actions.TouchableAction touchable(com.badlogic.gdx.scenes.scene2d.Touchable) -> touchable
    com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction removeActor() -> removeActor
    com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> removeActor
    com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float) -> delay
    com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float,com.badlogic.gdx.scenes.scene2d.Action) -> delay
    com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction timeScale(float,com.badlogic.gdx.scenes.scene2d.Action) -> timeScale
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action) -> sequence
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> sequence
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> sequence
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> sequence
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> sequence
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action[]) -> sequence
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence() -> sequence
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action) -> parallel
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> parallel
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> parallel
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> parallel
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> parallel
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action[]) -> parallel
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel() -> parallel
    com.badlogic.gdx.scenes.scene2d.actions.RepeatAction repeat(int,com.badlogic.gdx.scenes.scene2d.Action) -> repeat
    com.badlogic.gdx.scenes.scene2d.actions.RepeatAction forever(com.badlogic.gdx.scenes.scene2d.Action) -> forever
    com.badlogic.gdx.scenes.scene2d.actions.RunnableAction run(java.lang.Runnable) -> run
    com.badlogic.gdx.scenes.scene2d.actions.LayoutAction layout(boolean) -> layout
    com.badlogic.gdx.scenes.scene2d.actions.AfterAction after(com.badlogic.gdx.scenes.scene2d.Action) -> after
    com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction addListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean) -> addListener
    com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction addListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean,com.badlogic.gdx.scenes.scene2d.Actor) -> addListener
    com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction removeListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean) -> removeListener
    com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction removeListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean,com.badlogic.gdx.scenes.scene2d.Actor) -> removeListener
com.badlogic.gdx.scenes.scene2d.actions.AddAction -> com.badlogic.gdx.scenes.scene2d.actions.AddAction:
    com.badlogic.gdx.scenes.scene2d.Action action -> action
    void <init>() -> <init>
    boolean act(float) -> act
    com.badlogic.gdx.scenes.scene2d.Action getAction() -> getAction
    void setAction(com.badlogic.gdx.scenes.scene2d.Action) -> setAction
    void restart() -> restart
    void reset() -> reset
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction -> com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction:
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> listener
    boolean capture -> capture
    void <init>() -> <init>
    boolean act(float) -> act
    com.badlogic.gdx.scenes.scene2d.EventListener getListener() -> getListener
    void setListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> setListener
    boolean getCapture() -> getCapture
    void setCapture(boolean) -> setCapture
    void reset() -> reset
com.badlogic.gdx.scenes.scene2d.actions.AfterAction -> com.badlogic.gdx.scenes.scene2d.actions.AfterAction:
    com.badlogic.gdx.utils.Array waitForActions -> waitForActions
    void <init>() -> <init>
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> setTarget
    void restart() -> restart
    boolean delegate(float) -> delegate
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction -> com.badlogic.gdx.scenes.scene2d.actions.AlphaAction:
    float start -> start
    float end -> end
    com.badlogic.gdx.graphics.Color color -> color
    void <init>() -> <init>
    void begin() -> begin
    void update(float) -> update
    void reset() -> reset
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    float getAlpha() -> getAlpha
    void setAlpha(float) -> setAlpha
com.badlogic.gdx.scenes.scene2d.actions.ColorAction -> com.badlogic.gdx.scenes.scene2d.actions.ColorAction:
    float startR -> startR
    float startG -> startG
    float startB -> startB
    float startA -> startA
    com.badlogic.gdx.graphics.Color color -> color
    com.badlogic.gdx.graphics.Color end -> end
    void <init>() -> <init>
    void begin() -> begin
    void update(float) -> update
    void reset() -> reset
    com.badlogic.gdx.graphics.Color getColor() -> getColor
    void setColor(com.badlogic.gdx.graphics.Color) -> setColor
    com.badlogic.gdx.graphics.Color getEndColor() -> getEndColor
    void setEndColor(com.badlogic.gdx.graphics.Color) -> setEndColor
com.badlogic.gdx.scenes.scene2d.actions.CountdownEventAction -> com.badlogic.gdx.scenes.scene2d.actions.CountdownEventAction:
    int count -> count
    int current -> current
    void <init>(java.lang.Class,int) -> <init>
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> handle
com.badlogic.gdx.scenes.scene2d.actions.DelayAction -> com.badlogic.gdx.scenes.scene2d.actions.DelayAction:
    float duration -> duration
    float time -> time
    void <init>() -> <init>
    void <init>(float) -> <init>
    boolean delegate(float) -> delegate
    void finish() -> finish
    void restart() -> restart
    float getTime() -> getTime
    void setTime(float) -> setTime
    float getDuration() -> getDuration
    void setDuration(float) -> setDuration
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction -> com.badlogic.gdx.scenes.scene2d.actions.DelegateAction:
    com.badlogic.gdx.scenes.scene2d.Action action -> action
    void <init>() -> <init>
    void setAction(com.badlogic.gdx.scenes.scene2d.Action) -> setAction
    com.badlogic.gdx.scenes.scene2d.Action getAction() -> getAction
    boolean delegate(float) -> delegate
    boolean act(float) -> act
    void restart() -> restart
    void reset() -> reset
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setActor
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> setTarget
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.EventAction -> com.badlogic.gdx.scenes.scene2d.actions.EventAction:
    java.lang.Class eventClass -> eventClass
    boolean result -> result
    boolean active -> active
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> listener
    void <init>(java.lang.Class) -> <init>
    void restart() -> restart
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> setTarget
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> handle
    boolean act(float) -> act
    boolean isActive() -> isActive
    void setActive(boolean) -> setActive
com.badlogic.gdx.scenes.scene2d.actions.EventAction$1 -> com.badlogic.gdx.scenes.scene2d.actions.EventAction$1:
    com.badlogic.gdx.scenes.scene2d.actions.EventAction this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.actions.EventAction) -> <init>
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> handle
com.badlogic.gdx.scenes.scene2d.actions.FloatAction -> com.badlogic.gdx.scenes.scene2d.actions.FloatAction:
    float start -> start
    float end -> end
    float value -> value
    void <init>() -> <init>
    void <init>(float,float) -> <init>
    void begin() -> begin
    void update(float) -> update
    float getValue() -> getValue
    void setValue(float) -> setValue
    float getStart() -> getStart
    void setStart(float) -> setStart
    float getEnd() -> getEnd
    void setEnd(float) -> setEnd
com.badlogic.gdx.scenes.scene2d.actions.IntAction -> com.badlogic.gdx.scenes.scene2d.actions.IntAction:
    int start -> start
    int end -> end
    int value -> value
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void begin() -> begin
    void update(float) -> update
    int getValue() -> getValue
    void setValue(int) -> setValue
    int getStart() -> getStart
    void setStart(int) -> setStart
    int getEnd() -> getEnd
    void setEnd(int) -> setEnd
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction -> com.badlogic.gdx.scenes.scene2d.actions.LayoutAction:
    boolean enabled -> enabled
    void <init>() -> <init>
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> setTarget
    boolean act(float) -> act
    boolean isEnabled() -> isEnabled
    void setLayoutEnabled(boolean) -> setLayoutEnabled
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction -> com.badlogic.gdx.scenes.scene2d.actions.MoveByAction:
    float amountX -> amountX
    float amountY -> amountY
    void <init>() -> <init>
    void updateRelative(float) -> updateRelative
    void setAmount(float,float) -> setAmount
    float getAmountX() -> getAmountX
    void setAmountX(float) -> setAmountX
    float getAmountY() -> getAmountY
    void setAmountY(float) -> setAmountY
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction -> com.badlogic.gdx.scenes.scene2d.actions.MoveToAction:
    float startX -> startX
    float startY -> startY
    float endX -> endX
    float endY -> endY
    int alignment -> alignment
    void <init>() -> <init>
    void begin() -> begin
    void update(float) -> update
    void reset() -> reset
    void setPosition(float,float) -> setPosition
    void setPosition(float,float,int) -> setPosition
    float getX() -> getX
    void setX(float) -> setX
    float getY() -> getY
    void setY(float) -> setY
    int getAlignment() -> getAlignment
    void setAlignment(int) -> setAlignment
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction -> com.badlogic.gdx.scenes.scene2d.actions.ParallelAction:
    com.badlogic.gdx.utils.Array actions -> actions
    boolean complete -> complete
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    boolean act(float) -> act
    void restart() -> restart
    void reset() -> reset
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> addAction
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setActor
    com.badlogic.gdx.utils.Array getActions() -> getActions
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction -> com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction:
    float lastPercent -> lastPercent
    void <init>() -> <init>
    void begin() -> begin
    void update(float) -> update
    void updateRelative(float) -> updateRelative
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction -> com.badlogic.gdx.scenes.scene2d.actions.RemoveAction:
    com.badlogic.gdx.scenes.scene2d.Action action -> action
    void <init>() -> <init>
    boolean act(float) -> act
    com.badlogic.gdx.scenes.scene2d.Action getAction() -> getAction
    void setAction(com.badlogic.gdx.scenes.scene2d.Action) -> setAction
    void reset() -> reset
com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction -> com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction:
    boolean removed -> removed
    void <init>() -> <init>
    boolean act(float) -> act
    void restart() -> restart
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction -> com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction:
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> listener
    boolean capture -> capture
    void <init>() -> <init>
    boolean act(float) -> act
    com.badlogic.gdx.scenes.scene2d.EventListener getListener() -> getListener
    void setListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> setListener
    boolean getCapture() -> getCapture
    void setCapture(boolean) -> setCapture
    void reset() -> reset
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction -> com.badlogic.gdx.scenes.scene2d.actions.RepeatAction:
    int FOREVER -> FOREVER
    int repeatCount -> repeatCount
    int executedCount -> executedCount
    boolean finished -> finished
    void <init>() -> <init>
    boolean delegate(float) -> delegate
    void finish() -> finish
    void restart() -> restart
    void setCount(int) -> setCount
    int getCount() -> getCount
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction -> com.badlogic.gdx.scenes.scene2d.actions.RotateByAction:
    float amount -> amount
    void <init>() -> <init>
    void updateRelative(float) -> updateRelative
    float getAmount() -> getAmount
    void setAmount(float) -> setAmount
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction -> com.badlogic.gdx.scenes.scene2d.actions.RotateToAction:
    float start -> start
    float end -> end
    void <init>() -> <init>
    void begin() -> begin
    void update(float) -> update
    float getRotation() -> getRotation
    void setRotation(float) -> setRotation
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction -> com.badlogic.gdx.scenes.scene2d.actions.RunnableAction:
    java.lang.Runnable runnable -> runnable
    boolean ran -> ran
    void <init>() -> <init>
    boolean act(float) -> act
    void run() -> run
    void restart() -> restart
    void reset() -> reset
    java.lang.Runnable getRunnable() -> getRunnable
    void setRunnable(java.lang.Runnable) -> setRunnable
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction -> com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction:
    float amountX -> amountX
    float amountY -> amountY
    void <init>() -> <init>
    void updateRelative(float) -> updateRelative
    void setAmount(float,float) -> setAmount
    void setAmount(float) -> setAmount
    float getAmountX() -> getAmountX
    void setAmountX(float) -> setAmountX
    float getAmountY() -> getAmountY
    void setAmountY(float) -> setAmountY
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction -> com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction:
    float startX -> startX
    float startY -> startY
    float endX -> endX
    float endY -> endY
    void <init>() -> <init>
    void begin() -> begin
    void update(float) -> update
    void setScale(float,float) -> setScale
    void setScale(float) -> setScale
    float getX() -> getX
    void setX(float) -> setX
    float getY() -> getY
    void setY(float) -> setY
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction -> com.badlogic.gdx.scenes.scene2d.actions.SequenceAction:
    int index -> index
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> <init>
    boolean act(float) -> act
    void restart() -> restart
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction -> com.badlogic.gdx.scenes.scene2d.actions.SizeByAction:
    float amountWidth -> amountWidth
    float amountHeight -> amountHeight
    void <init>() -> <init>
    void updateRelative(float) -> updateRelative
    void setAmount(float,float) -> setAmount
    float getAmountWidth() -> getAmountWidth
    void setAmountWidth(float) -> setAmountWidth
    float getAmountHeight() -> getAmountHeight
    void setAmountHeight(float) -> setAmountHeight
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction -> com.badlogic.gdx.scenes.scene2d.actions.SizeToAction:
    float startWidth -> startWidth
    float startHeight -> startHeight
    float endWidth -> endWidth
    float endHeight -> endHeight
    void <init>() -> <init>
    void begin() -> begin
    void update(float) -> update
    void setSize(float,float) -> setSize
    float getWidth() -> getWidth
    void setWidth(float) -> setWidth
    float getHeight() -> getHeight
    void setHeight(float) -> setHeight
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction -> com.badlogic.gdx.scenes.scene2d.actions.TemporalAction:
    float duration -> duration
    float time -> time
    com.badlogic.gdx.math.Interpolation interpolation -> interpolation
    boolean reverse -> reverse
    boolean began -> began
    boolean complete -> complete
    void <init>() -> <init>
    void <init>(float) -> <init>
    void <init>(float,com.badlogic.gdx.math.Interpolation) -> <init>
    boolean act(float) -> act
    void begin() -> begin
    void end() -> end
    void update(float) -> update
    void finish() -> finish
    void restart() -> restart
    void reset() -> reset
    float getTime() -> getTime
    void setTime(float) -> setTime
    float getDuration() -> getDuration
    void setDuration(float) -> setDuration
    com.badlogic.gdx.math.Interpolation getInterpolation() -> getInterpolation
    void setInterpolation(com.badlogic.gdx.math.Interpolation) -> setInterpolation
    boolean isReverse() -> isReverse
    void setReverse(boolean) -> setReverse
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction -> com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction:
    float scale -> scale
    void <init>() -> <init>
    boolean delegate(float) -> delegate
    float getScale() -> getScale
    void setScale(float) -> setScale
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction -> com.badlogic.gdx.scenes.scene2d.actions.TouchableAction:
    com.badlogic.gdx.scenes.scene2d.Touchable touchable -> touchable
    void <init>() -> <init>
    boolean act(float) -> act
    com.badlogic.gdx.scenes.scene2d.Touchable getTouchable() -> getTouchable
    void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable) -> setTouchable
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction -> com.badlogic.gdx.scenes.scene2d.actions.VisibleAction:
    boolean visible -> visible
    void <init>() -> <init>
    boolean act(float) -> act
    boolean isVisible() -> isVisible
    void setVisible(boolean) -> setVisible
com.badlogic.gdx.scenes.scene2d.ui.Button -> com.badlogic.gdx.scenes.scene2d.ui.Button:
    com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle style -> style
    boolean isChecked -> isChecked
    boolean isDisabled -> isDisabled
    com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup buttonGroup -> buttonGroup
    com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener -> clickListener
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> <init>
    void <init>() -> <init>
    void initialize() -> initialize
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void setChecked(boolean) -> setChecked
    void toggle() -> toggle
    boolean isChecked() -> isChecked
    boolean isPressed() -> isPressed
    boolean isOver() -> isOver
    com.badlogic.gdx.scenes.scene2d.utils.ClickListener getClickListener() -> getClickListener
    boolean isDisabled() -> isDisabled
    void setDisabled(boolean) -> setDisabled
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle() -> getStyle
    com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup getButtonGroup() -> getButtonGroup
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getMinWidth() -> getMinWidth
    float getMinHeight() -> getMinHeight
com.badlogic.gdx.scenes.scene2d.ui.Button$1 -> com.badlogic.gdx.scenes.scene2d.ui.Button$1:
    com.badlogic.gdx.scenes.scene2d.ui.Button this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button) -> <init>
    void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable up -> up
    com.badlogic.gdx.scenes.scene2d.utils.Drawable down -> down
    com.badlogic.gdx.scenes.scene2d.utils.Drawable over -> over
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checked -> checked
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedOver -> checkedOver
    com.badlogic.gdx.scenes.scene2d.utils.Drawable disabled -> disabled
    float pressedOffsetX -> pressedOffsetX
    float pressedOffsetY -> pressedOffsetY
    float unpressedOffsetX -> unpressedOffsetX
    float unpressedOffsetY -> unpressedOffsetY
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup -> com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup:
    com.badlogic.gdx.utils.Array buttons -> buttons
    com.badlogic.gdx.utils.Array checkedButtons -> checkedButtons
    int minCheckCount -> minCheckCount
    int maxCheckCount -> maxCheckCount
    boolean uncheckLast -> uncheckLast
    com.badlogic.gdx.scenes.scene2d.ui.Button lastChecked -> lastChecked
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button[]) -> <init>
    void add(com.badlogic.gdx.scenes.scene2d.ui.Button) -> add
    void add(com.badlogic.gdx.scenes.scene2d.ui.Button[]) -> add
    void remove(com.badlogic.gdx.scenes.scene2d.ui.Button) -> remove
    void remove(com.badlogic.gdx.scenes.scene2d.ui.Button[]) -> remove
    void clear() -> clear
    void setChecked(java.lang.String) -> setChecked
    boolean canCheck(com.badlogic.gdx.scenes.scene2d.ui.Button,boolean) -> canCheck
    void uncheckAll() -> uncheckAll
    com.badlogic.gdx.scenes.scene2d.ui.Button getChecked() -> getChecked
    int getCheckedIndex() -> getCheckedIndex
    com.badlogic.gdx.utils.Array getAllChecked() -> getAllChecked
    com.badlogic.gdx.utils.Array getButtons() -> getButtons
    void setMinCheckCount(int) -> setMinCheckCount
    void setMaxCheckCount(int) -> setMaxCheckCount
    void setUncheckLast(boolean) -> setUncheckLast
com.badlogic.gdx.scenes.scene2d.ui.Cell -> com.badlogic.gdx.scenes.scene2d.ui.Cell:
    java.lang.Float zerof -> zerof
    java.lang.Float onef -> onef
    java.lang.Integer zeroi -> zeroi
    java.lang.Integer onei -> onei
    java.lang.Integer centeri -> centeri
    java.lang.Integer topi -> topi
    java.lang.Integer bottomi -> bottomi
    java.lang.Integer lefti -> lefti
    java.lang.Integer righti -> righti
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> minWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> minHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> prefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> prefHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> maxWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> maxHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceTop -> spaceTop
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceLeft -> spaceLeft
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceBottom -> spaceBottom
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceRight -> spaceRight
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> padRight
    java.lang.Float fillX -> fillX
    java.lang.Float fillY -> fillY
    java.lang.Integer align -> align
    java.lang.Integer expandX -> expandX
    java.lang.Integer expandY -> expandY
    java.lang.Integer colspan -> colspan
    java.lang.Boolean uniformX -> uniformX
    java.lang.Boolean uniformY -> uniformY
    com.badlogic.gdx.scenes.scene2d.Actor actor -> actor
    float actorX -> actorX
    float actorY -> actorY
    float actorWidth -> actorWidth
    float actorHeight -> actorHeight
    com.badlogic.gdx.scenes.scene2d.ui.Table table -> table
    boolean endRow -> endRow
    int column -> column
    int row -> row
    int cellAboveIndex -> cellAboveIndex
    float computedPadTop -> computedPadTop
    float computedPadLeft -> computedPadLeft
    float computedPadBottom -> computedPadBottom
    float computedPadRight -> computedPadRight
    void <init>() -> <init>
    void setLayout(com.badlogic.gdx.scenes.scene2d.ui.Table) -> setLayout
    com.badlogic.gdx.scenes.scene2d.ui.Cell setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setActor
    com.badlogic.gdx.scenes.scene2d.ui.Cell clearActor() -> clearActor
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> getActor
    boolean hasActor() -> hasActor
    com.badlogic.gdx.scenes.scene2d.ui.Cell size(com.badlogic.gdx.scenes.scene2d.ui.Value) -> size
    com.badlogic.gdx.scenes.scene2d.ui.Cell size(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> size
    com.badlogic.gdx.scenes.scene2d.ui.Cell size(float) -> size
    com.badlogic.gdx.scenes.scene2d.ui.Cell size(float,float) -> size
    com.badlogic.gdx.scenes.scene2d.ui.Cell width(com.badlogic.gdx.scenes.scene2d.ui.Value) -> width
    com.badlogic.gdx.scenes.scene2d.ui.Cell width(float) -> width
    com.badlogic.gdx.scenes.scene2d.ui.Cell height(com.badlogic.gdx.scenes.scene2d.ui.Value) -> height
    com.badlogic.gdx.scenes.scene2d.ui.Cell height(float) -> height
    com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(com.badlogic.gdx.scenes.scene2d.ui.Value) -> minSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> minSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value) -> minWidth
    com.badlogic.gdx.scenes.scene2d.ui.Cell minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> minHeight
    com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(float) -> minSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(float,float) -> minSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell minWidth(float) -> minWidth
    com.badlogic.gdx.scenes.scene2d.ui.Cell minHeight(float) -> minHeight
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value) -> prefSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> prefSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value) -> prefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> prefHeight
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float,float) -> prefSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float) -> prefSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefWidth(float) -> prefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Cell prefHeight(float) -> prefHeight
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value) -> maxSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> maxSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value) -> maxWidth
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> maxHeight
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(float) -> maxSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(float,float) -> maxSize
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxWidth(float) -> maxWidth
    com.badlogic.gdx.scenes.scene2d.ui.Cell maxHeight(float) -> maxHeight
    com.badlogic.gdx.scenes.scene2d.ui.Cell space(com.badlogic.gdx.scenes.scene2d.ui.Value) -> space
    com.badlogic.gdx.scenes.scene2d.ui.Cell space(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> space
    com.badlogic.gdx.scenes.scene2d.ui.Cell spaceTop(com.badlogic.gdx.scenes.scene2d.ui.Value) -> spaceTop
    com.badlogic.gdx.scenes.scene2d.ui.Cell spaceLeft(com.badlogic.gdx.scenes.scene2d.ui.Value) -> spaceLeft
    com.badlogic.gdx.scenes.scene2d.ui.Cell spaceBottom(com.badlogic.gdx.scenes.scene2d.ui.Value) -> spaceBottom
    com.badlogic.gdx.scenes.scene2d.ui.Cell spaceRight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> spaceRight
    com.badlogic.gdx.scenes.scene2d.ui.Cell space(float) -> space
    com.badlogic.gdx.scenes.scene2d.ui.Cell space(float,float,float,float) -> space
    com.badlogic.gdx.scenes.scene2d.ui.Cell spaceTop(float) -> spaceTop
    com.badlogic.gdx.scenes.scene2d.ui.Cell spaceLeft(float) -> spaceLeft
    com.badlogic.gdx.scenes.scene2d.ui.Cell spaceBottom(float) -> spaceBottom
    com.badlogic.gdx.scenes.scene2d.ui.Cell spaceRight(float) -> spaceRight
    com.badlogic.gdx.scenes.scene2d.ui.Cell pad(com.badlogic.gdx.scenes.scene2d.ui.Value) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Cell pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Cell padTop(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.Cell padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.Cell padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.Cell padRight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padRight
    com.badlogic.gdx.scenes.scene2d.ui.Cell pad(float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Cell pad(float,float,float,float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Cell padTop(float) -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.Cell padLeft(float) -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.Cell padBottom(float) -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.Cell padRight(float) -> padRight
    com.badlogic.gdx.scenes.scene2d.ui.Cell fill() -> fill
    com.badlogic.gdx.scenes.scene2d.ui.Cell fillX() -> fillX
    com.badlogic.gdx.scenes.scene2d.ui.Cell fillY() -> fillY
    com.badlogic.gdx.scenes.scene2d.ui.Cell fill(float,float) -> fill
    com.badlogic.gdx.scenes.scene2d.ui.Cell fill(boolean,boolean) -> fill
    com.badlogic.gdx.scenes.scene2d.ui.Cell fill(boolean) -> fill
    com.badlogic.gdx.scenes.scene2d.ui.Cell align(int) -> align
    com.badlogic.gdx.scenes.scene2d.ui.Cell center() -> center
    com.badlogic.gdx.scenes.scene2d.ui.Cell top() -> top
    com.badlogic.gdx.scenes.scene2d.ui.Cell left() -> left
    com.badlogic.gdx.scenes.scene2d.ui.Cell bottom() -> bottom
    com.badlogic.gdx.scenes.scene2d.ui.Cell right() -> right
    com.badlogic.gdx.scenes.scene2d.ui.Cell expand() -> expand
    com.badlogic.gdx.scenes.scene2d.ui.Cell expandX() -> expandX
    com.badlogic.gdx.scenes.scene2d.ui.Cell expandY() -> expandY
    com.badlogic.gdx.scenes.scene2d.ui.Cell expand(int,int) -> expand
    com.badlogic.gdx.scenes.scene2d.ui.Cell expand(boolean,boolean) -> expand
    com.badlogic.gdx.scenes.scene2d.ui.Cell colspan(int) -> colspan
    com.badlogic.gdx.scenes.scene2d.ui.Cell uniform() -> uniform
    com.badlogic.gdx.scenes.scene2d.ui.Cell uniformX() -> uniformX
    com.badlogic.gdx.scenes.scene2d.ui.Cell uniformY() -> uniformY
    com.badlogic.gdx.scenes.scene2d.ui.Cell uniform(boolean,boolean) -> uniform
    void setActorBounds(float,float,float,float) -> setActorBounds
    float getActorX() -> getActorX
    void setActorX(float) -> setActorX
    float getActorY() -> getActorY
    void setActorY(float) -> setActorY
    float getActorWidth() -> getActorWidth
    void setActorWidth(float) -> setActorWidth
    float getActorHeight() -> getActorHeight
    void setActorHeight(float) -> setActorHeight
    int getColumn() -> getColumn
    int getRow() -> getRow
    com.badlogic.gdx.scenes.scene2d.ui.Value getMinWidthValue() -> getMinWidthValue
    float getMinWidth() -> getMinWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value getMinHeightValue() -> getMinHeightValue
    float getMinHeight() -> getMinHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value getPrefWidthValue() -> getPrefWidthValue
    float getPrefWidth() -> getPrefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value getPrefHeightValue() -> getPrefHeightValue
    float getPrefHeight() -> getPrefHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value getMaxWidthValue() -> getMaxWidthValue
    float getMaxWidth() -> getMaxWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value getMaxHeightValue() -> getMaxHeightValue
    float getMaxHeight() -> getMaxHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceTopValue() -> getSpaceTopValue
    float getSpaceTop() -> getSpaceTop
    com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceLeftValue() -> getSpaceLeftValue
    float getSpaceLeft() -> getSpaceLeft
    com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceBottomValue() -> getSpaceBottomValue
    float getSpaceBottom() -> getSpaceBottom
    com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceRightValue() -> getSpaceRightValue
    float getSpaceRight() -> getSpaceRight
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadTopValue() -> getPadTopValue
    float getPadTop() -> getPadTop
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadLeftValue() -> getPadLeftValue
    float getPadLeft() -> getPadLeft
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadBottomValue() -> getPadBottomValue
    float getPadBottom() -> getPadBottom
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadRightValue() -> getPadRightValue
    float getPadRight() -> getPadRight
    float getPadX() -> getPadX
    float getPadY() -> getPadY
    float getFillX() -> getFillX
    float getFillY() -> getFillY
    int getAlign() -> getAlign
    int getExpandX() -> getExpandX
    int getExpandY() -> getExpandY
    int getColspan() -> getColspan
    boolean getUniformX() -> getUniformX
    boolean getUniformY() -> getUniformY
    boolean isEndRow() -> isEndRow
    float getComputedPadTop() -> getComputedPadTop
    float getComputedPadLeft() -> getComputedPadLeft
    float getComputedPadBottom() -> getComputedPadBottom
    float getComputedPadRight() -> getComputedPadRight
    void row() -> row
    com.badlogic.gdx.scenes.scene2d.ui.Table getTable() -> getTable
    void clear() -> clear
    void reset() -> reset
    void set(com.badlogic.gdx.scenes.scene2d.ui.Cell) -> set
    void merge(com.badlogic.gdx.scenes.scene2d.ui.Cell) -> merge
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.ui.CheckBox -> com.badlogic.gdx.scenes.scene2d.ui.CheckBox:
    com.badlogic.gdx.scenes.scene2d.ui.Image image -> image
    com.badlogic.gdx.scenes.scene2d.ui.Cell imageCell -> imageCell
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle style -> style
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle) -> <init>
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle getStyle() -> getStyle
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    com.badlogic.gdx.scenes.scene2d.ui.Image getImage() -> getImage
    com.badlogic.gdx.scenes.scene2d.ui.Cell getImageCell() -> getImageCell
    com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle getStyle() -> getStyle
    com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle() -> getStyle
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle -> com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOn -> checkboxOn
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOff -> checkboxOff
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOver -> checkboxOver
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOnDisabled -> checkboxOnDisabled
    com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOffDisabled -> checkboxOffDisabled
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Container -> com.badlogic.gdx.scenes.scene2d.ui.Container:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> actor
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> minWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> minHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> prefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> prefHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> maxWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> maxHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> padRight
    float fillX -> fillX
    float fillY -> fillY
    int align -> align
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    boolean clip -> clip
    boolean round -> round
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor) -> <init>
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float) -> drawBackground
    void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> setBackground
    void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable,boolean) -> setBackground
    com.badlogic.gdx.scenes.scene2d.ui.Container background(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> background
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getBackground() -> getBackground
    void layout() -> layout
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setActor
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> getActor
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> addActor
    void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorAt
    void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorBefore
    void addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorAfter
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> removeActor
    com.badlogic.gdx.scenes.scene2d.ui.Container size(com.badlogic.gdx.scenes.scene2d.ui.Value) -> size
    com.badlogic.gdx.scenes.scene2d.ui.Container size(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> size
    com.badlogic.gdx.scenes.scene2d.ui.Container size(float) -> size
    com.badlogic.gdx.scenes.scene2d.ui.Container size(float,float) -> size
    com.badlogic.gdx.scenes.scene2d.ui.Container width(com.badlogic.gdx.scenes.scene2d.ui.Value) -> width
    com.badlogic.gdx.scenes.scene2d.ui.Container width(float) -> width
    com.badlogic.gdx.scenes.scene2d.ui.Container height(com.badlogic.gdx.scenes.scene2d.ui.Value) -> height
    com.badlogic.gdx.scenes.scene2d.ui.Container height(float) -> height
    com.badlogic.gdx.scenes.scene2d.ui.Container minSize(com.badlogic.gdx.scenes.scene2d.ui.Value) -> minSize
    com.badlogic.gdx.scenes.scene2d.ui.Container minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> minSize
    com.badlogic.gdx.scenes.scene2d.ui.Container minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value) -> minWidth
    com.badlogic.gdx.scenes.scene2d.ui.Container minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> minHeight
    com.badlogic.gdx.scenes.scene2d.ui.Container minSize(float) -> minSize
    com.badlogic.gdx.scenes.scene2d.ui.Container minSize(float,float) -> minSize
    com.badlogic.gdx.scenes.scene2d.ui.Container minWidth(float) -> minWidth
    com.badlogic.gdx.scenes.scene2d.ui.Container minHeight(float) -> minHeight
    com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value) -> prefSize
    com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> prefSize
    com.badlogic.gdx.scenes.scene2d.ui.Container prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value) -> prefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Container prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> prefHeight
    com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(float,float) -> prefSize
    com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(float) -> prefSize
    com.badlogic.gdx.scenes.scene2d.ui.Container prefWidth(float) -> prefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Container prefHeight(float) -> prefHeight
    com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value) -> maxSize
    com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> maxSize
    com.badlogic.gdx.scenes.scene2d.ui.Container maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value) -> maxWidth
    com.badlogic.gdx.scenes.scene2d.ui.Container maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> maxHeight
    com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(float) -> maxSize
    com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(float,float) -> maxSize
    com.badlogic.gdx.scenes.scene2d.ui.Container maxWidth(float) -> maxWidth
    com.badlogic.gdx.scenes.scene2d.ui.Container maxHeight(float) -> maxHeight
    com.badlogic.gdx.scenes.scene2d.ui.Container pad(com.badlogic.gdx.scenes.scene2d.ui.Value) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Container pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Container padTop(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.Container padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.Container padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.Container padRight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padRight
    com.badlogic.gdx.scenes.scene2d.ui.Container pad(float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Container pad(float,float,float,float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Container padTop(float) -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.Container padLeft(float) -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.Container padBottom(float) -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.Container padRight(float) -> padRight
    com.badlogic.gdx.scenes.scene2d.ui.Container fill() -> fill
    com.badlogic.gdx.scenes.scene2d.ui.Container fillX() -> fillX
    com.badlogic.gdx.scenes.scene2d.ui.Container fillY() -> fillY
    com.badlogic.gdx.scenes.scene2d.ui.Container fill(float,float) -> fill
    com.badlogic.gdx.scenes.scene2d.ui.Container fill(boolean,boolean) -> fill
    com.badlogic.gdx.scenes.scene2d.ui.Container fill(boolean) -> fill
    com.badlogic.gdx.scenes.scene2d.ui.Container align(int) -> align
    com.badlogic.gdx.scenes.scene2d.ui.Container center() -> center
    com.badlogic.gdx.scenes.scene2d.ui.Container top() -> top
    com.badlogic.gdx.scenes.scene2d.ui.Container left() -> left
    com.badlogic.gdx.scenes.scene2d.ui.Container bottom() -> bottom
    com.badlogic.gdx.scenes.scene2d.ui.Container right() -> right
    float getMinWidth() -> getMinWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value getMinHeightValue() -> getMinHeightValue
    float getMinHeight() -> getMinHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value getPrefWidthValue() -> getPrefWidthValue
    float getPrefWidth() -> getPrefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value getPrefHeightValue() -> getPrefHeightValue
    float getPrefHeight() -> getPrefHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value getMaxWidthValue() -> getMaxWidthValue
    float getMaxWidth() -> getMaxWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value getMaxHeightValue() -> getMaxHeightValue
    float getMaxHeight() -> getMaxHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadTopValue() -> getPadTopValue
    float getPadTop() -> getPadTop
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadLeftValue() -> getPadLeftValue
    float getPadLeft() -> getPadLeft
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadBottomValue() -> getPadBottomValue
    float getPadBottom() -> getPadBottom
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadRightValue() -> getPadRightValue
    float getPadRight() -> getPadRight
    float getPadX() -> getPadX
    float getPadY() -> getPadY
    float getFillX() -> getFillX
    float getFillY() -> getFillY
    int getAlign() -> getAlign
    void setRound(boolean) -> setRound
    void setClip(boolean) -> setClip
    boolean getClip() -> getClip
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> hit
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> drawDebug
com.badlogic.gdx.scenes.scene2d.ui.Dialog -> com.badlogic.gdx.scenes.scene2d.ui.Dialog:
    com.badlogic.gdx.scenes.scene2d.ui.Table contentTable -> contentTable
    com.badlogic.gdx.scenes.scene2d.ui.Table buttonTable -> buttonTable
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> skin
    com.badlogic.gdx.utils.ObjectMap values -> values
    boolean cancelHide -> cancelHide
    com.badlogic.gdx.scenes.scene2d.Actor previousKeyboardFocus -> previousKeyboardFocus
    com.badlogic.gdx.scenes.scene2d.Actor previousScrollFocus -> previousScrollFocus
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener focusListener -> focusListener
    com.badlogic.gdx.scenes.scene2d.InputListener ignoreTouchDown -> ignoreTouchDown
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle) -> <init>
    void initialize() -> initialize
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> setStage
    com.badlogic.gdx.scenes.scene2d.ui.Table getContentTable() -> getContentTable
    com.badlogic.gdx.scenes.scene2d.ui.Table getButtonTable() -> getButtonTable
    com.badlogic.gdx.scenes.scene2d.ui.Dialog text(java.lang.String) -> text
    com.badlogic.gdx.scenes.scene2d.ui.Dialog text(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle) -> text
    com.badlogic.gdx.scenes.scene2d.ui.Dialog text(com.badlogic.gdx.scenes.scene2d.ui.Label) -> text
    com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String) -> button
    com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String,java.lang.Object) -> button
    com.badlogic.gdx.scenes.scene2d.ui.Dialog button(java.lang.String,java.lang.Object,com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle) -> button
    com.badlogic.gdx.scenes.scene2d.ui.Dialog button(com.badlogic.gdx.scenes.scene2d.ui.Button) -> button
    com.badlogic.gdx.scenes.scene2d.ui.Dialog button(com.badlogic.gdx.scenes.scene2d.ui.Button,java.lang.Object) -> button
    com.badlogic.gdx.scenes.scene2d.ui.Dialog show(com.badlogic.gdx.scenes.scene2d.Stage,com.badlogic.gdx.scenes.scene2d.Action) -> show
    com.badlogic.gdx.scenes.scene2d.ui.Dialog show(com.badlogic.gdx.scenes.scene2d.Stage) -> show
    void hide(com.badlogic.gdx.scenes.scene2d.Action) -> hide
    void hide() -> hide
    void setObject(com.badlogic.gdx.scenes.scene2d.Actor,java.lang.Object) -> setObject
    com.badlogic.gdx.scenes.scene2d.ui.Dialog key(int,java.lang.Object) -> key
    void result(java.lang.Object) -> result
    void cancel() -> cancel
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$1:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Dialog) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
com.badlogic.gdx.scenes.scene2d.ui.Dialog$2 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$2:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Dialog) -> <init>
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> changed
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$3:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Dialog) -> <init>
    void keyboardFocusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> keyboardFocusChanged
    void scrollFocusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> scrollFocusChanged
    void focusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent) -> focusChanged
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$4:
    int val$keycode -> val$keycode
    java.lang.Object val$object -> val$object
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Dialog,int,java.lang.Object) -> <init>
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> keyDown
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup -> com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup:
    float prefWidth -> prefWidth
    float prefHeight -> prefHeight
    boolean sizeInvalid -> sizeInvalid
    int align -> align
    boolean reverse -> reverse
    boolean round -> round
    float spacing -> spacing
    float padTop -> padTop
    float padLeft -> padLeft
    float padBottom -> padBottom
    float padRight -> padRight
    float fill -> fill
    void <init>() -> <init>
    void invalidate() -> invalidate
    void computeSize() -> computeSize
    void layout() -> layout
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    void setRound(boolean) -> setRound
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup reverse() -> reverse
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup reverse(boolean) -> reverse
    boolean getReverse() -> getReverse
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup space(float) -> space
    float getSpace() -> getSpace
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup pad(float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup pad(float,float,float,float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup padTop(float) -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup padLeft(float) -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup padBottom(float) -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup padRight(float) -> padRight
    float getPadTop() -> getPadTop
    float getPadLeft() -> getPadLeft
    float getPadBottom() -> getPadBottom
    float getPadRight() -> getPadRight
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup align(int) -> align
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup center() -> center
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup top() -> top
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup bottom() -> bottom
    int getAlign() -> getAlign
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup fill() -> fill
    com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup fill(float) -> fill
    float getFill() -> getFill
com.badlogic.gdx.scenes.scene2d.ui.Image -> com.badlogic.gdx.scenes.scene2d.ui.Image:
    com.badlogic.gdx.utils.Scaling scaling -> scaling
    int align -> align
    float imageX -> imageX
    float imageY -> imageY
    float imageWidth -> imageWidth
    float imageHeight -> imageHeight
    com.badlogic.gdx.scenes.scene2d.utils.Drawable drawable -> drawable
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.NinePatch) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.utils.Scaling) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.utils.Scaling,int) -> <init>
    void layout() -> layout
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void setDrawable(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> setDrawable
    void setDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> setDrawable
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable() -> getDrawable
    void setScaling(com.badlogic.gdx.utils.Scaling) -> setScaling
    void setAlign(int) -> setAlign
    float getMinWidth() -> getMinWidth
    float getMinHeight() -> getMinHeight
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getImageX() -> getImageX
    float getImageY() -> getImageY
    float getImageWidth() -> getImageWidth
    float getImageHeight() -> getImageHeight
com.badlogic.gdx.scenes.scene2d.ui.ImageButton -> com.badlogic.gdx.scenes.scene2d.ui.ImageButton:
    com.badlogic.gdx.scenes.scene2d.ui.Image image -> image
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle style -> style
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle getStyle() -> getStyle
    void updateImage() -> updateImage
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    com.badlogic.gdx.scenes.scene2d.ui.Image getImage() -> getImage
    com.badlogic.gdx.scenes.scene2d.ui.Cell getImageCell() -> getImageCell
    com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle() -> getStyle
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageUp -> imageUp
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDown -> imageDown
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageOver -> imageOver
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageChecked -> imageChecked
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedOver -> imageCheckedOver
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDisabled -> imageDisabled
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton -> com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton:
    com.badlogic.gdx.scenes.scene2d.ui.Image image -> image
    com.badlogic.gdx.scenes.scene2d.ui.Label label -> label
    com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle style -> style
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle) -> <init>
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle getStyle() -> getStyle
    void updateImage() -> updateImage
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    com.badlogic.gdx.scenes.scene2d.ui.Image getImage() -> getImage
    com.badlogic.gdx.scenes.scene2d.ui.Cell getImageCell() -> getImageCell
    com.badlogic.gdx.scenes.scene2d.ui.Label getLabel() -> getLabel
    com.badlogic.gdx.scenes.scene2d.ui.Cell getLabelCell() -> getLabelCell
    void setText(java.lang.CharSequence) -> setText
    java.lang.CharSequence getText() -> getText
    java.lang.String toString() -> toString
    com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle() -> getStyle
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageUp -> imageUp
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDown -> imageDown
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageOver -> imageOver
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageChecked -> imageChecked
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedOver -> imageCheckedOver
    com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDisabled -> imageDisabled
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Label -> com.badlogic.gdx.scenes.scene2d.ui.Label:
    com.badlogic.gdx.graphics.Color tempColor -> tempColor
    com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle style -> style
    com.badlogic.gdx.graphics.g2d.GlyphLayout layout -> layout
    com.badlogic.gdx.math.Vector2 prefSize -> prefSize
    com.badlogic.gdx.utils.StringBuilder text -> text
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> cache
    int labelAlign -> labelAlign
    int lineAlign -> lineAlign
    boolean wrap -> wrap
    float lastPrefHeight -> lastPrefHeight
    boolean prefSizeInvalid -> prefSizeInvalid
    float fontScaleX -> fontScaleX
    float fontScaleY -> fontScaleY
    boolean ellipsis -> ellipsis
    void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String,com.badlogic.gdx.graphics.Color) -> <init>
    void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.CharSequence,com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle) -> <init>
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle getStyle() -> getStyle
    void setText(java.lang.CharSequence) -> setText
    boolean textEquals(java.lang.CharSequence) -> textEquals
    com.badlogic.gdx.utils.StringBuilder getText() -> getText
    void invalidate() -> invalidate
    void scaleAndComputePrefSize() -> scaleAndComputePrefSize
    void computePrefSize() -> computePrefSize
    void layout() -> layout
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    com.badlogic.gdx.graphics.g2d.GlyphLayout getGlyphLayout() -> getGlyphLayout
    void setWrap(boolean) -> setWrap
    void setAlignment(int) -> setAlignment
    void setAlignment(int,int) -> setAlignment
    void setFontScale(float) -> setFontScale
    void setFontScale(float,float) -> setFontScale
    float getFontScaleX() -> getFontScaleX
    void setFontScaleX(float) -> setFontScaleX
    float getFontScaleY() -> getFontScaleY
    void setFontScaleY(float) -> setFontScaleY
    void setEllipsis(boolean) -> setEllipsis
    com.badlogic.gdx.graphics.g2d.BitmapFontCache getBitmapFontCache() -> getBitmapFontCache
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle -> com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> font
    com.badlogic.gdx.graphics.Color fontColor -> fontColor
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.List -> com.badlogic.gdx.scenes.scene2d.ui.List:
    com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle style -> style
    com.badlogic.gdx.utils.Array items -> items
    com.badlogic.gdx.scenes.scene2d.utils.ArraySelection selection -> selection
    com.badlogic.gdx.math.Rectangle cullingArea -> cullingArea
    float prefWidth -> prefWidth
    float prefHeight -> prefHeight
    float itemHeight -> itemHeight
    float textOffsetX -> textOffsetX
    float textOffsetY -> textOffsetY
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle) -> <init>
    void touchDown(float) -> touchDown
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle getStyle() -> getStyle
    void layout() -> layout
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    com.badlogic.gdx.scenes.scene2d.utils.ArraySelection getSelection() -> getSelection
    java.lang.Object getSelected() -> getSelected
    void setSelected(java.lang.Object) -> setSelected
    int getSelectedIndex() -> getSelectedIndex
    void setSelectedIndex(int) -> setSelectedIndex
    void setItems(java.lang.Object[]) -> setItems
    void setItems(com.badlogic.gdx.utils.Array) -> setItems
    void clearItems() -> clearItems
    com.badlogic.gdx.utils.Array getItems() -> getItems
    float getItemHeight() -> getItemHeight
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> setCullingArea
com.badlogic.gdx.scenes.scene2d.ui.List$1 -> com.badlogic.gdx.scenes.scene2d.ui.List$1:
    com.badlogic.gdx.scenes.scene2d.ui.List this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.List) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle -> com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> font
    com.badlogic.gdx.graphics.Color fontColorSelected -> fontColorSelected
    com.badlogic.gdx.graphics.Color fontColorUnselected -> fontColorUnselected
    com.badlogic.gdx.scenes.scene2d.utils.Drawable selection -> selection
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar -> com.badlogic.gdx.scenes.scene2d.ui.ProgressBar:
    com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle style -> style
    float min -> min
    float max -> max
    float stepSize -> stepSize
    float value -> value
    float animateFromValue -> animateFromValue
    float position -> position
    boolean vertical -> vertical
    float animateDuration -> animateDuration
    float animateTime -> animateTime
    com.badlogic.gdx.math.Interpolation animateInterpolation -> animateInterpolation
    float[] snapValues -> snapValues
    float threshold -> threshold
    boolean disabled -> disabled
    boolean shiftIgnoresSnap -> shiftIgnoresSnap
    com.badlogic.gdx.math.Interpolation visualInterpolation -> visualInterpolation
    void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle) -> <init>
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle getStyle() -> getStyle
    void act(float) -> act
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    float getValue() -> getValue
    float getVisualValue() -> getVisualValue
    float getPercent() -> getPercent
    float getVisualPercent() -> getVisualPercent
    float getKnobPosition() -> getKnobPosition
    boolean setValue(float) -> setValue
    float clamp(float) -> clamp
    void setRange(float,float) -> setRange
    void setStepSize(float) -> setStepSize
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getMinValue() -> getMinValue
    float getMaxValue() -> getMaxValue
    float getStepSize() -> getStepSize
    void setAnimateDuration(float) -> setAnimateDuration
    void setAnimateInterpolation(com.badlogic.gdx.math.Interpolation) -> setAnimateInterpolation
    void setVisualInterpolation(com.badlogic.gdx.math.Interpolation) -> setVisualInterpolation
    void setSnapToValues(float[],float) -> setSnapToValues
    float snap(float) -> snap
    void setDisabled(boolean) -> setDisabled
    boolean isDisabled() -> isDisabled
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle -> com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledBackground -> disabledBackground
    com.badlogic.gdx.scenes.scene2d.utils.Drawable knob -> knob
    com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledKnob -> disabledKnob
    com.badlogic.gdx.scenes.scene2d.utils.Drawable knobBefore -> knobBefore
    com.badlogic.gdx.scenes.scene2d.utils.Drawable knobAfter -> knobAfter
    com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledKnobBefore -> disabledKnobBefore
    com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledKnobAfter -> disabledKnobAfter
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle style -> style
    com.badlogic.gdx.scenes.scene2d.Actor widget -> widget
    com.badlogic.gdx.math.Rectangle hScrollBounds -> hScrollBounds
    com.badlogic.gdx.math.Rectangle vScrollBounds -> vScrollBounds
    com.badlogic.gdx.math.Rectangle hKnobBounds -> hKnobBounds
    com.badlogic.gdx.math.Rectangle vKnobBounds -> vKnobBounds
    com.badlogic.gdx.math.Rectangle widgetAreaBounds -> widgetAreaBounds
    com.badlogic.gdx.math.Rectangle widgetCullingArea -> widgetCullingArea
    com.badlogic.gdx.math.Rectangle scissorBounds -> scissorBounds
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener flickScrollListener -> flickScrollListener
    boolean scrollX -> scrollX
    boolean scrollY -> scrollY
    boolean vScrollOnRight -> vScrollOnRight
    boolean hScrollOnBottom -> hScrollOnBottom
    float amountX -> amountX
    float amountY -> amountY
    float visualAmountX -> visualAmountX
    float visualAmountY -> visualAmountY
    float maxX -> maxX
    float maxY -> maxY
    boolean touchScrollH -> touchScrollH
    boolean touchScrollV -> touchScrollV
    com.badlogic.gdx.math.Vector2 lastPoint -> lastPoint
    float areaWidth -> areaWidth
    float areaHeight -> areaHeight
    boolean fadeScrollBars -> fadeScrollBars
    boolean smoothScrolling -> smoothScrolling
    float fadeAlpha -> fadeAlpha
    float fadeAlphaSeconds -> fadeAlphaSeconds
    float fadeDelay -> fadeDelay
    float fadeDelaySeconds -> fadeDelaySeconds
    boolean cancelTouchFocus -> cancelTouchFocus
    boolean flickScroll -> flickScroll
    float velocityX -> velocityX
    float velocityY -> velocityY
    float flingTimer -> flingTimer
    boolean overscrollX -> overscrollX
    boolean overscrollY -> overscrollY
    float flingTime -> flingTime
    float overscrollDistance -> overscrollDistance
    float overscrollSpeedMin -> overscrollSpeedMin
    float overscrollSpeedMax -> overscrollSpeedMax
    boolean forceScrollX -> forceScrollX
    boolean forceScrollY -> forceScrollY
    boolean disableX -> disableX
    boolean disableY -> disableY
    boolean clamp -> clamp
    boolean scrollbarsOnTop -> scrollbarsOnTop
    boolean variableSizeKnobs -> variableSizeKnobs
    int draggingPointer -> draggingPointer
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle) -> <init>
    void resetFade() -> resetFade
    void cancelTouchFocusedChild(com.badlogic.gdx.scenes.scene2d.InputEvent) -> cancelTouchFocusedChild
    void cancel() -> cancel
    void clamp() -> clamp
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle getStyle() -> getStyle
    void act(float) -> act
    void layout() -> layout
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void fling(float,float,float) -> fling
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getMinWidth() -> getMinWidth
    float getMinHeight() -> getMinHeight
    void setWidget(com.badlogic.gdx.scenes.scene2d.Actor) -> setWidget
    com.badlogic.gdx.scenes.scene2d.Actor getWidget() -> getWidget
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> addActor
    void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorAt
    void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorBefore
    void addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorAfter
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> removeActor
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> hit
    void scrollX(float) -> scrollX
    void scrollY(float) -> scrollY
    void visualScrollX(float) -> visualScrollX
    void visualScrollY(float) -> visualScrollY
    float getMouseWheelX() -> getMouseWheelX
    float getMouseWheelY() -> getMouseWheelY
    void setScrollX(float) -> setScrollX
    float getScrollX() -> getScrollX
    void setScrollY(float) -> setScrollY
    float getScrollY() -> getScrollY
    void updateVisualScroll() -> updateVisualScroll
    float getVisualScrollX() -> getVisualScrollX
    float getVisualScrollY() -> getVisualScrollY
    float getVisualScrollPercentX() -> getVisualScrollPercentX
    float getVisualScrollPercentY() -> getVisualScrollPercentY
    float getScrollPercentX() -> getScrollPercentX
    void setScrollPercentX(float) -> setScrollPercentX
    float getScrollPercentY() -> getScrollPercentY
    void setScrollPercentY(float) -> setScrollPercentY
    void setFlickScroll(boolean) -> setFlickScroll
    void setFlickScrollTapSquareSize(float) -> setFlickScrollTapSquareSize
    void scrollTo(float,float,float,float) -> scrollTo
    void scrollTo(float,float,float,float,boolean,boolean) -> scrollTo
    float getMaxX() -> getMaxX
    float getMaxY() -> getMaxY
    float getScrollBarHeight() -> getScrollBarHeight
    float getScrollBarWidth() -> getScrollBarWidth
    float getScrollWidth() -> getScrollWidth
    float getScrollHeight() -> getScrollHeight
    boolean isScrollX() -> isScrollX
    boolean isScrollY() -> isScrollY
    void setScrollingDisabled(boolean,boolean) -> setScrollingDisabled
    boolean isLeftEdge() -> isLeftEdge
    boolean isRightEdge() -> isRightEdge
    boolean isTopEdge() -> isTopEdge
    boolean isBottomEdge() -> isBottomEdge
    boolean isDragging() -> isDragging
    boolean isPanning() -> isPanning
    boolean isFlinging() -> isFlinging
    void setVelocityX(float) -> setVelocityX
    float getVelocityX() -> getVelocityX
    void setVelocityY(float) -> setVelocityY
    float getVelocityY() -> getVelocityY
    void setOverscroll(boolean,boolean) -> setOverscroll
    void setupOverscroll(float,float,float) -> setupOverscroll
    void setForceScroll(boolean,boolean) -> setForceScroll
    boolean isForceScrollX() -> isForceScrollX
    boolean isForceScrollY() -> isForceScrollY
    void setFlingTime(float) -> setFlingTime
    void setClamp(boolean) -> setClamp
    void setScrollBarPositions(boolean,boolean) -> setScrollBarPositions
    void setFadeScrollBars(boolean) -> setFadeScrollBars
    void setupFadeScrollBars(float,float) -> setupFadeScrollBars
    void setSmoothScrolling(boolean) -> setSmoothScrolling
    void setScrollbarsOnTop(boolean) -> setScrollbarsOnTop
    boolean getVariableSizeKnobs() -> getVariableSizeKnobs
    void setVariableSizeKnobs(boolean) -> setVariableSizeKnobs
    void setCancelTouchFocus(boolean) -> setCancelTouchFocus
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> drawDebug
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1 -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1:
    float handlePosition -> handlePosition
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
    boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> mouseMoved
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2 -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane) -> <init>
    void pan(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,float,float) -> pan
    void fling(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> fling
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> handle
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3 -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane) -> <init>
    boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> scrolled
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    com.badlogic.gdx.scenes.scene2d.utils.Drawable corner -> corner
    com.badlogic.gdx.scenes.scene2d.utils.Drawable hScroll -> hScroll
    com.badlogic.gdx.scenes.scene2d.utils.Drawable hScrollKnob -> hScrollKnob
    com.badlogic.gdx.scenes.scene2d.utils.Drawable vScroll -> vScroll
    com.badlogic.gdx.scenes.scene2d.utils.Drawable vScrollKnob -> vScrollKnob
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.SelectBox -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox:
    com.badlogic.gdx.math.Vector2 temp -> temp
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle style -> style
    com.badlogic.gdx.utils.Array items -> items
    com.badlogic.gdx.scenes.scene2d.utils.ArraySelection selection -> selection
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList selectBoxList -> selectBoxList
    float prefWidth -> prefWidth
    float prefHeight -> prefHeight
    com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener -> clickListener
    boolean disabled -> disabled
    com.badlogic.gdx.graphics.g2d.GlyphLayout layout -> layout
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle) -> <init>
    void setMaxListCount(int) -> setMaxListCount
    int getMaxListCount() -> getMaxListCount
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> setStage
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle getStyle() -> getStyle
    void setItems(java.lang.Object[]) -> setItems
    void setItems(com.badlogic.gdx.utils.Array) -> setItems
    void clearItems() -> clearItems
    com.badlogic.gdx.utils.Array getItems() -> getItems
    void layout() -> layout
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    com.badlogic.gdx.scenes.scene2d.utils.ArraySelection getSelection() -> getSelection
    java.lang.Object getSelected() -> getSelected
    void setSelected(java.lang.Object) -> setSelected
    int getSelectedIndex() -> getSelectedIndex
    void setSelectedIndex(int) -> setSelectedIndex
    void setDisabled(boolean) -> setDisabled
    boolean isDisabled() -> isDisabled
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    void showList() -> showList
    void hideList() -> hideList
    com.badlogic.gdx.scenes.scene2d.ui.List getList() -> getList
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane getScrollPane() -> getScrollPane
    void onShow(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> onShow
    void onHide(com.badlogic.gdx.scenes.scene2d.Actor) -> onHide
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox selectBox -> selectBox
    int maxListCount -> maxListCount
    com.badlogic.gdx.math.Vector2 screenPosition -> screenPosition
    com.badlogic.gdx.scenes.scene2d.ui.List list -> list
    com.badlogic.gdx.scenes.scene2d.InputListener hideListener -> hideListener
    com.badlogic.gdx.scenes.scene2d.Actor previousScrollFocus -> previousScrollFocus
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox) -> <init>
    void show(com.badlogic.gdx.scenes.scene2d.Stage) -> show
    void hide() -> hide
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void act(float) -> act
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$1 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$1:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox -> val$selectBox
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList,com.badlogic.gdx.scenes.scene2d.ui.SelectBox) -> <init>
    void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
    boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> mouseMoved
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$2 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$2:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox -> val$selectBox
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList,com.badlogic.gdx.scenes.scene2d.ui.SelectBox) -> <init>
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> exit
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$3 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList$3:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox val$selectBox -> val$selectBox
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxList,com.badlogic.gdx.scenes.scene2d.ui.SelectBox) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> keyDown
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> font
    com.badlogic.gdx.graphics.Color fontColor -> fontColor
    com.badlogic.gdx.graphics.Color disabledFontColor -> disabledFontColor
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle scrollStyle -> scrollStyle
    com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle listStyle -> listStyle
    com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundOver -> backgroundOver
    com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundOpen -> backgroundOpen
    com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundDisabled -> backgroundDisabled
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle,com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Skin -> com.badlogic.gdx.scenes.scene2d.ui.Skin:
    com.badlogic.gdx.utils.ObjectMap resources -> resources
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> atlas
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> <init>
    void load(com.badlogic.gdx.files.FileHandle) -> load
    void addRegions(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> addRegions
    void add(java.lang.String,java.lang.Object) -> add
    void add(java.lang.String,java.lang.Object,java.lang.Class) -> add
    void remove(java.lang.String,java.lang.Class) -> remove
    java.lang.Object get(java.lang.Class) -> get
    java.lang.Object get(java.lang.String,java.lang.Class) -> get
    java.lang.Object optional(java.lang.String,java.lang.Class) -> optional
    boolean has(java.lang.String,java.lang.Class) -> has
    com.badlogic.gdx.utils.ObjectMap getAll(java.lang.Class) -> getAll
    com.badlogic.gdx.graphics.Color getColor(java.lang.String) -> getColor
    com.badlogic.gdx.graphics.g2d.BitmapFont getFont(java.lang.String) -> getFont
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(java.lang.String) -> getRegion
    com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable getTiledDrawable(java.lang.String) -> getTiledDrawable
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch(java.lang.String) -> getPatch
    com.badlogic.gdx.graphics.g2d.Sprite getSprite(java.lang.String) -> getSprite
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable(java.lang.String) -> getDrawable
    java.lang.String find(java.lang.Object) -> find
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String) -> newDrawable
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,float,float,float,float) -> newDrawable
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,com.badlogic.gdx.graphics.Color) -> newDrawable
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> newDrawable
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,float,float,float,float) -> newDrawable
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.Color) -> newDrawable
    void setEnabled(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> setEnabled
    com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas() -> getAtlas
    void dispose() -> dispose
    com.badlogic.gdx.utils.Json getJsonLoader(com.badlogic.gdx.files.FileHandle) -> getJsonLoader
    com.badlogic.gdx.utils.reflect.Method findMethod(java.lang.Class,java.lang.String) -> findMethod
com.badlogic.gdx.scenes.scene2d.ui.Skin$1 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$1:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> readValue
com.badlogic.gdx.scenes.scene2d.ui.Skin$2 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$2:
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> val$skin
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    com.badlogic.gdx.scenes.scene2d.ui.Skin read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> read
    void readNamedObjects(com.badlogic.gdx.utils.Json,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> readNamedObjects
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> read
com.badlogic.gdx.scenes.scene2d.ui.Skin$3 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$3:
    com.badlogic.gdx.files.FileHandle val$skinFile -> val$skinFile
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> val$skin
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    com.badlogic.gdx.graphics.g2d.BitmapFont read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> read
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> read
com.badlogic.gdx.scenes.scene2d.ui.Skin$4 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$4:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    com.badlogic.gdx.graphics.Color read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> read
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> read
com.badlogic.gdx.scenes.scene2d.ui.Skin$5 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$5:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> read
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable -> com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable:
    java.lang.String name -> name
    com.badlogic.gdx.graphics.Color color -> color
    void <init>() -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Slider -> com.badlogic.gdx.scenes.scene2d.ui.Slider:
    int draggingPointer -> draggingPointer
    com.badlogic.gdx.math.Interpolation visualInterpolationInverse -> visualInterpolationInverse
    void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(float,float,float,boolean,com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle) -> <init>
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle getStyle() -> getStyle
    boolean calculatePositionAndValue(float,float) -> calculatePositionAndValue
    boolean isDragging() -> isDragging
    void setVisualInterpolationInverse(com.badlogic.gdx.math.Interpolation) -> setVisualInterpolationInverse
    com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle getStyle() -> getStyle
com.badlogic.gdx.scenes.scene2d.ui.Slider$1 -> com.badlogic.gdx.scenes.scene2d.ui.Slider$1:
    com.badlogic.gdx.scenes.scene2d.ui.Slider this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Slider) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle -> com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle:
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.SplitPane -> com.badlogic.gdx.scenes.scene2d.ui.SplitPane:
    com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle style -> style
    com.badlogic.gdx.scenes.scene2d.Actor firstWidget -> firstWidget
    com.badlogic.gdx.scenes.scene2d.Actor secondWidget -> secondWidget
    boolean vertical -> vertical
    float splitAmount -> splitAmount
    float minAmount -> minAmount
    float maxAmount -> maxAmount
    float oldSplitAmount -> oldSplitAmount
    com.badlogic.gdx.math.Rectangle firstWidgetBounds -> firstWidgetBounds
    com.badlogic.gdx.math.Rectangle secondWidgetBounds -> secondWidgetBounds
    com.badlogic.gdx.math.Rectangle handleBounds -> handleBounds
    com.badlogic.gdx.math.Rectangle firstScissors -> firstScissors
    com.badlogic.gdx.math.Rectangle secondScissors -> secondScissors
    com.badlogic.gdx.math.Vector2 lastPoint -> lastPoint
    com.badlogic.gdx.math.Vector2 handlePosition -> handlePosition
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,boolean,com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle) -> <init>
    void initialize() -> initialize
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle getStyle() -> getStyle
    void layout() -> layout
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getMinWidth() -> getMinWidth
    float getMinHeight() -> getMinHeight
    void setVertical(boolean) -> setVertical
    void calculateHorizBoundsAndPositions() -> calculateHorizBoundsAndPositions
    void calculateVertBoundsAndPositions() -> calculateVertBoundsAndPositions
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void setSplitAmount(float) -> setSplitAmount
    float getSplit() -> getSplit
    void setMinSplitAmount(float) -> setMinSplitAmount
    void setMaxSplitAmount(float) -> setMaxSplitAmount
    void setFirstWidget(com.badlogic.gdx.scenes.scene2d.Actor) -> setFirstWidget
    void setSecondWidget(com.badlogic.gdx.scenes.scene2d.Actor) -> setSecondWidget
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> addActor
    void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorAt
    void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> addActorBefore
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> removeActor
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1 -> com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1:
    int draggingPointer -> draggingPointer
    com.badlogic.gdx.scenes.scene2d.ui.SplitPane this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.SplitPane) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle -> com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable handle -> handle
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Stack -> com.badlogic.gdx.scenes.scene2d.ui.Stack:
    float prefWidth -> prefWidth
    float prefHeight -> prefHeight
    float minWidth -> minWidth
    float minHeight -> minHeight
    float maxWidth -> maxWidth
    float maxHeight -> maxHeight
    boolean sizeInvalid -> sizeInvalid
    void <init>() -> <init>
    void invalidate() -> invalidate
    void computeSize() -> computeSize
    void add(com.badlogic.gdx.scenes.scene2d.Actor) -> add
    void layout() -> layout
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getMinWidth() -> getMinWidth
    float getMinHeight() -> getMinHeight
    float getMaxWidth() -> getMaxWidth
    float getMaxHeight() -> getMaxHeight
com.badlogic.gdx.scenes.scene2d.ui.Table -> com.badlogic.gdx.scenes.scene2d.ui.Table:
    com.badlogic.gdx.graphics.Color debugTableColor -> debugTableColor
    com.badlogic.gdx.graphics.Color debugCellColor -> debugCellColor
    com.badlogic.gdx.graphics.Color debugActorColor -> debugActorColor
    com.badlogic.gdx.utils.Pool cellPool -> cellPool
    float[] columnWeightedWidth -> columnWeightedWidth
    float[] rowWeightedHeight -> rowWeightedHeight
    int columns -> columns
    int rows -> rows
    com.badlogic.gdx.utils.Array cells -> cells
    com.badlogic.gdx.scenes.scene2d.ui.Cell cellDefaults -> cellDefaults
    com.badlogic.gdx.utils.Array columnDefaults -> columnDefaults
    com.badlogic.gdx.scenes.scene2d.ui.Cell rowDefaults -> rowDefaults
    boolean sizeInvalid -> sizeInvalid
    float[] columnMinWidth -> columnMinWidth
    float[] rowMinHeight -> rowMinHeight
    float[] columnPrefWidth -> columnPrefWidth
    float[] rowPrefHeight -> rowPrefHeight
    float tableMinWidth -> tableMinWidth
    float tableMinHeight -> tableMinHeight
    float tablePrefWidth -> tablePrefWidth
    float tablePrefHeight -> tablePrefHeight
    float[] columnWidth -> columnWidth
    float[] rowHeight -> rowHeight
    float[] expandWidth -> expandWidth
    float[] expandHeight -> expandHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> padRight
    int align -> align
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debug -> debug
    com.badlogic.gdx.utils.Array debugRects -> debugRects
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    boolean clip -> clip
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> skin
    boolean round -> round
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundTop -> backgroundTop
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundLeft -> backgroundLeft
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundBottom -> backgroundBottom
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundRight -> backgroundRight
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    com.badlogic.gdx.scenes.scene2d.ui.Cell obtainCell() -> obtainCell
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float) -> drawBackground
    void setBackground(java.lang.String) -> setBackground
    void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> setBackground
    com.badlogic.gdx.scenes.scene2d.ui.Table background(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> background
    com.badlogic.gdx.scenes.scene2d.ui.Table background(java.lang.String) -> background
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getBackground() -> getBackground
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> hit
    void setClip(boolean) -> setClip
    boolean getClip() -> getClip
    void invalidate() -> invalidate
    com.badlogic.gdx.scenes.scene2d.ui.Cell add(com.badlogic.gdx.scenes.scene2d.Actor) -> add
    void add(com.badlogic.gdx.scenes.scene2d.Actor[]) -> add
    com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.String) -> add
    com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.String,java.lang.String) -> add
    com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.String,java.lang.String,com.badlogic.gdx.graphics.Color) -> add
    com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.String,java.lang.String,java.lang.String) -> add
    com.badlogic.gdx.scenes.scene2d.ui.Cell add() -> add
    com.badlogic.gdx.scenes.scene2d.ui.Cell stack(com.badlogic.gdx.scenes.scene2d.Actor[]) -> stack
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> removeActor
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> removeActor
    void clearChildren() -> clearChildren
    void reset() -> reset
    com.badlogic.gdx.scenes.scene2d.ui.Cell row() -> row
    void endRow() -> endRow
    com.badlogic.gdx.scenes.scene2d.ui.Cell columnDefaults(int) -> columnDefaults
    com.badlogic.gdx.scenes.scene2d.ui.Cell getCell(com.badlogic.gdx.scenes.scene2d.Actor) -> getCell
    com.badlogic.gdx.utils.Array getCells() -> getCells
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getMinWidth() -> getMinWidth
    float getMinHeight() -> getMinHeight
    com.badlogic.gdx.scenes.scene2d.ui.Cell defaults() -> defaults
    com.badlogic.gdx.scenes.scene2d.ui.Table pad(com.badlogic.gdx.scenes.scene2d.ui.Value) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Table pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Table padTop(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.Table padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.Table padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.Table padRight(com.badlogic.gdx.scenes.scene2d.ui.Value) -> padRight
    com.badlogic.gdx.scenes.scene2d.ui.Table pad(float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Table pad(float,float,float,float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.Table padTop(float) -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.Table padLeft(float) -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.Table padBottom(float) -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.Table padRight(float) -> padRight
    com.badlogic.gdx.scenes.scene2d.ui.Table align(int) -> align
    com.badlogic.gdx.scenes.scene2d.ui.Table center() -> center
    com.badlogic.gdx.scenes.scene2d.ui.Table top() -> top
    com.badlogic.gdx.scenes.scene2d.ui.Table left() -> left
    com.badlogic.gdx.scenes.scene2d.ui.Table bottom() -> bottom
    com.badlogic.gdx.scenes.scene2d.ui.Table right() -> right
    void setDebug(boolean) -> setDebug
    com.badlogic.gdx.scenes.scene2d.ui.Table debug() -> debug
    com.badlogic.gdx.scenes.scene2d.ui.Table debugAll() -> debugAll
    com.badlogic.gdx.scenes.scene2d.ui.Table debugTable() -> debugTable
    com.badlogic.gdx.scenes.scene2d.ui.Table debugCell() -> debugCell
    com.badlogic.gdx.scenes.scene2d.ui.Table debugActor() -> debugActor
    com.badlogic.gdx.scenes.scene2d.ui.Table debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug) -> debug
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug getTableDebug() -> getTableDebug
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadTopValue() -> getPadTopValue
    float getPadTop() -> getPadTop
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadLeftValue() -> getPadLeftValue
    float getPadLeft() -> getPadLeft
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadBottomValue() -> getPadBottomValue
    float getPadBottom() -> getPadBottom
    com.badlogic.gdx.scenes.scene2d.ui.Value getPadRightValue() -> getPadRightValue
    float getPadRight() -> getPadRight
    float getPadX() -> getPadX
    float getPadY() -> getPadY
    int getAlign() -> getAlign
    int getRow(float) -> getRow
    void setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> setSkin
    void setRound(boolean) -> setRound
    int getRows() -> getRows
    int getColumns() -> getColumns
    float[] ensureSize(float[],int) -> ensureSize
    void layout() -> layout
    void computeSize() -> computeSize
    void layout(float,float,float,float) -> layout
    void clearDebugRects() -> clearDebugRects
    void addDebugRect(float,float,float,float,com.badlogic.gdx.graphics.Color) -> addDebugRect
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> drawDebug
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> drawDebugBounds
    void drawDebugRects(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> drawDebugRects
    com.badlogic.gdx.scenes.scene2d.ui.Skin getSkin() -> getSkin
    com.badlogic.gdx.scenes.scene2d.Group debugAll() -> debugAll
    com.badlogic.gdx.scenes.scene2d.Actor debug() -> debug
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.ui.Table$1 -> com.badlogic.gdx.scenes.scene2d.ui.Table$1:
    void <init>() -> <init>
    com.badlogic.gdx.scenes.scene2d.ui.Cell newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.scenes.scene2d.ui.Table$2 -> com.badlogic.gdx.scenes.scene2d.ui.Table$2:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Table$3 -> com.badlogic.gdx.scenes.scene2d.ui.Table$3:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Table$4 -> com.badlogic.gdx.scenes.scene2d.ui.Table$4:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Table$5 -> com.badlogic.gdx.scenes.scene2d.ui.Table$5:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug -> com.badlogic.gdx.scenes.scene2d.ui.Table$Debug:
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug none -> none
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug all -> all
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug table -> table
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug cell -> cell
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug actor -> actor
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug[] $VALUES -> $VALUES
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug[] values() -> values
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect -> com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect:
    com.badlogic.gdx.utils.Pool pool -> pool
    com.badlogic.gdx.graphics.Color color -> color
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.ui.TextArea -> com.badlogic.gdx.scenes.scene2d.ui.TextArea:
    com.badlogic.gdx.utils.IntArray linesBreak -> linesBreak
    java.lang.String lastText -> lastText
    int cursorLine -> cursorLine
    int firstLineShowing -> firstLineShowing
    int linesShowing -> linesShowing
    float moveOffset -> moveOffset
    float prefRows -> prefRows
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle) -> <init>
    void initialize() -> initialize
    int letterUnderCursor(float) -> letterUnderCursor
    void setPrefRows(float) -> setPrefRows
    float getPrefHeight() -> getPrefHeight
    int getLines() -> getLines
    boolean newLineAtEnd() -> newLineAtEnd
    void moveCursorLine(int) -> moveCursorLine
    void updateCurrentLine() -> updateCurrentLine
    void showCursor() -> showCursor
    int calculateCurrentLineIndex(int) -> calculateCurrentLineIndex
    void sizeChanged() -> sizeChanged
    float getTextY(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> getTextY
    void drawSelection(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float) -> drawSelection
    void drawText(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float) -> drawText
    void drawCursor(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float) -> drawCursor
    void calculateOffsets() -> calculateOffsets
    com.badlogic.gdx.scenes.scene2d.InputListener createInputListener() -> createInputListener
    void setSelection(int,int) -> setSelection
    void moveCursor(boolean,boolean) -> moveCursor
    boolean continueCursor(int,int) -> continueCursor
    int getCursorLine() -> getCursorLine
    int getFirstLineShowing() -> getFirstLineShowing
    int getLinesShowing() -> getLinesShowing
com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener -> com.badlogic.gdx.scenes.scene2d.ui.TextArea$TextAreaListener:
    com.badlogic.gdx.scenes.scene2d.ui.TextArea this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextArea) -> <init>
    void setCursorPosition(float,float) -> setCursorPosition
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> keyDown
    boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char) -> keyTyped
    void goHome(boolean) -> goHome
    void goEnd(boolean) -> goEnd
com.badlogic.gdx.scenes.scene2d.ui.TextButton -> com.badlogic.gdx.scenes.scene2d.ui.TextButton:
    com.badlogic.gdx.scenes.scene2d.ui.Label label -> label
    com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle style -> style
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle) -> <init>
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle getStyle() -> getStyle
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    com.badlogic.gdx.scenes.scene2d.ui.Label getLabel() -> getLabel
    com.badlogic.gdx.scenes.scene2d.ui.Cell getLabelCell() -> getLabelCell
    void setText(java.lang.String) -> setText
    java.lang.CharSequence getText() -> getText
    java.lang.String toString() -> toString
    com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle getStyle() -> getStyle
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> font
    com.badlogic.gdx.graphics.Color fontColor -> fontColor
    com.badlogic.gdx.graphics.Color downFontColor -> downFontColor
    com.badlogic.gdx.graphics.Color overFontColor -> overFontColor
    com.badlogic.gdx.graphics.Color checkedFontColor -> checkedFontColor
    com.badlogic.gdx.graphics.Color checkedOverFontColor -> checkedOverFontColor
    com.badlogic.gdx.graphics.Color disabledFontColor -> disabledFontColor
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.TextField -> com.badlogic.gdx.scenes.scene2d.ui.TextField:
    char BACKSPACE -> BACKSPACE
    char ENTER_DESKTOP -> ENTER_DESKTOP
    char ENTER_ANDROID -> ENTER_ANDROID
    char TAB -> TAB
    char DELETE -> DELETE
    char BULLET -> BULLET
    com.badlogic.gdx.math.Vector2 tmp1 -> tmp1
    com.badlogic.gdx.math.Vector2 tmp2 -> tmp2
    com.badlogic.gdx.math.Vector2 tmp3 -> tmp3
    float keyRepeatInitialTime -> keyRepeatInitialTime
    float keyRepeatTime -> keyRepeatTime
    java.lang.String text -> text
    int cursor -> cursor
    int selectionStart -> selectionStart
    boolean hasSelection -> hasSelection
    boolean writeEnters -> writeEnters
    com.badlogic.gdx.graphics.g2d.GlyphLayout layout -> layout
    com.badlogic.gdx.utils.FloatArray glyphPositions -> glyphPositions
    com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle style -> style
    java.lang.String messageText -> messageText
    java.lang.CharSequence displayText -> displayText
    com.badlogic.gdx.utils.Clipboard clipboard -> clipboard
    com.badlogic.gdx.scenes.scene2d.InputListener inputListener -> inputListener
    com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener listener -> listener
    com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter filter -> filter
    com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard keyboard -> keyboard
    boolean focusTraversal -> focusTraversal
    boolean onlyFontChars -> onlyFontChars
    boolean disabled -> disabled
    int textHAlign -> textHAlign
    float selectionX -> selectionX
    float selectionWidth -> selectionWidth
    boolean passwordMode -> passwordMode
    java.lang.StringBuilder passwordBuffer -> passwordBuffer
    char passwordCharacter -> passwordCharacter
    float fontOffset -> fontOffset
    float textHeight -> textHeight
    float textOffset -> textOffset
    float renderOffset -> renderOffset
    int visibleTextStart -> visibleTextStart
    int visibleTextEnd -> visibleTextEnd
    int maxLength -> maxLength
    float blinkTime -> blinkTime
    boolean cursorOn -> cursorOn
    long lastBlink -> lastBlink
    com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask keyRepeatTask -> keyRepeatTask
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle) -> <init>
    void initialize() -> initialize
    com.badlogic.gdx.scenes.scene2d.InputListener createInputListener() -> createInputListener
    int letterUnderCursor(float) -> letterUnderCursor
    boolean isWordCharacter(char) -> isWordCharacter
    int[] wordUnderCursor(int) -> wordUnderCursor
    int[] wordUnderCursor(float) -> wordUnderCursor
    boolean withinMaxLength(int) -> withinMaxLength
    void setMaxLength(int) -> setMaxLength
    int getMaxLength() -> getMaxLength
    void setOnlyFontChars(boolean) -> setOnlyFontChars
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle getStyle() -> getStyle
    void calculateOffsets() -> calculateOffsets
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    float getTextY(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> getTextY
    void drawSelection(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float) -> drawSelection
    void drawText(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float) -> drawText
    void drawCursor(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.BitmapFont,float,float) -> drawCursor
    void updateDisplayText() -> updateDisplayText
    void blink() -> blink
    void copy() -> copy
    void cut() -> cut
    void paste() -> paste
    void paste(java.lang.String) -> paste
    java.lang.String insert(int,java.lang.CharSequence,java.lang.String) -> insert
    int delete() -> delete
    int delete(boolean) -> delete
    int delete(int,int,boolean) -> delete
    void next(boolean) -> next
    com.badlogic.gdx.scenes.scene2d.ui.TextField findNextTextField(com.badlogic.gdx.utils.Array,com.badlogic.gdx.scenes.scene2d.ui.TextField,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,boolean) -> findNextTextField
    com.badlogic.gdx.scenes.scene2d.InputListener getDefaultInputListener() -> getDefaultInputListener
    void setTextFieldListener(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener) -> setTextFieldListener
    void setTextFieldFilter(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter) -> setTextFieldFilter
    com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter getTextFieldFilter() -> getTextFieldFilter
    void setFocusTraversal(boolean) -> setFocusTraversal
    java.lang.String getMessageText() -> getMessageText
    void setMessageText(java.lang.String) -> setMessageText
    void appendText(java.lang.String) -> appendText
    void setText(java.lang.String) -> setText
    java.lang.String getText() -> getText
    int getSelectionStart() -> getSelectionStart
    java.lang.String getSelection() -> getSelection
    void setSelection(int,int) -> setSelection
    void selectAll() -> selectAll
    void clearSelection() -> clearSelection
    void setCursorPosition(int) -> setCursorPosition
    int getCursorPosition() -> getCursorPosition
    com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard getOnscreenKeyboard() -> getOnscreenKeyboard
    void setOnscreenKeyboard(com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard) -> setOnscreenKeyboard
    void setClipboard(com.badlogic.gdx.utils.Clipboard) -> setClipboard
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    void setAlignment(int) -> setAlignment
    void setPasswordMode(boolean) -> setPasswordMode
    boolean isPasswordMode() -> isPasswordMode
    void setPasswordCharacter(char) -> setPasswordCharacter
    void setBlinkTime(float) -> setBlinkTime
    void setDisabled(boolean) -> setDisabled
    boolean isDisabled() -> isDisabled
    void moveCursor(boolean,boolean) -> moveCursor
    boolean continueCursor(int,int) -> continueCursor
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard -> com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard:
    void <init>() -> <init>
    void show(boolean) -> show
com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask -> com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask:
    int keycode -> keycode
    com.badlogic.gdx.scenes.scene2d.ui.TextField this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextField) -> <init>
    void run() -> run
com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard -> com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard:
    void show(boolean) -> show
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener:
    com.badlogic.gdx.scenes.scene2d.ui.TextField this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextField) -> <init>
    void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
    void setCursorPosition(float,float) -> setCursorPosition
    void goHome(boolean) -> goHome
    void goEnd(boolean) -> goEnd
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> keyDown
    void scheduleKeyRepeatTask(int) -> scheduleKeyRepeatTask
    boolean keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> keyUp
    boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char) -> keyTyped
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter:
    boolean acceptChar(com.badlogic.gdx.scenes.scene2d.ui.TextField,char) -> acceptChar
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter:
    void <init>() -> <init>
    boolean acceptChar(com.badlogic.gdx.scenes.scene2d.ui.TextField,char) -> acceptChar
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener:
    void keyTyped(com.badlogic.gdx.scenes.scene2d.ui.TextField,char) -> keyTyped
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> font
    com.badlogic.gdx.graphics.Color fontColor -> fontColor
    com.badlogic.gdx.graphics.Color focusedFontColor -> focusedFontColor
    com.badlogic.gdx.graphics.Color disabledFontColor -> disabledFontColor
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    com.badlogic.gdx.scenes.scene2d.utils.Drawable focusedBackground -> focusedBackground
    com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledBackground -> disabledBackground
    com.badlogic.gdx.scenes.scene2d.utils.Drawable cursor -> cursor
    com.badlogic.gdx.scenes.scene2d.utils.Drawable selection -> selection
    com.badlogic.gdx.graphics.g2d.BitmapFont messageFont -> messageFont
    com.badlogic.gdx.graphics.Color messageFontColor -> messageFontColor
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Touchpad -> com.badlogic.gdx.scenes.scene2d.ui.Touchpad:
    com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle style -> style
    boolean touched -> touched
    boolean resetOnTouchUp -> resetOnTouchUp
    float deadzoneRadius -> deadzoneRadius
    com.badlogic.gdx.math.Circle knobBounds -> knobBounds
    com.badlogic.gdx.math.Circle touchBounds -> touchBounds
    com.badlogic.gdx.math.Circle deadzoneBounds -> deadzoneBounds
    com.badlogic.gdx.math.Vector2 knobPosition -> knobPosition
    com.badlogic.gdx.math.Vector2 knobPercent -> knobPercent
    void <init>(float,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(float,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(float,com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle) -> <init>
    void calculatePositionAndValue(float,float,boolean) -> calculatePositionAndValue
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle getStyle() -> getStyle
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> hit
    void layout() -> layout
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    boolean isTouched() -> isTouched
    boolean getResetOnTouchUp() -> getResetOnTouchUp
    void setResetOnTouchUp(boolean) -> setResetOnTouchUp
    void setDeadzone(float) -> setDeadzone
    float getKnobX() -> getKnobX
    float getKnobY() -> getKnobY
    float getKnobPercentX() -> getKnobPercentX
    float getKnobPercentY() -> getKnobPercentY
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1 -> com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1:
    com.badlogic.gdx.scenes.scene2d.ui.Touchpad this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Touchpad) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle -> com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    com.badlogic.gdx.scenes.scene2d.utils.Drawable knob -> knob
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Tree -> com.badlogic.gdx.scenes.scene2d.ui.Tree:
    com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle style -> style
    com.badlogic.gdx.utils.Array rootNodes -> rootNodes
    com.badlogic.gdx.scenes.scene2d.utils.Selection selection -> selection
    float ySpacing -> ySpacing
    float iconSpacingLeft -> iconSpacingLeft
    float iconSpacingRight -> iconSpacingRight
    float padding -> padding
    float indentSpacing -> indentSpacing
    float leftColumnWidth -> leftColumnWidth
    float prefWidth -> prefWidth
    float prefHeight -> prefHeight
    boolean sizeInvalid -> sizeInvalid
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node foundNode -> foundNode
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node overNode -> overNode
    com.badlogic.gdx.scenes.scene2d.utils.ClickListener clickListener -> clickListener
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle) -> <init>
    void initialize() -> initialize
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle) -> setStyle
    void add(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node) -> add
    void insert(int,com.badlogic.gdx.scenes.scene2d.ui.Tree$Node) -> insert
    void remove(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node) -> remove
    void clearChildren() -> clearChildren
    com.badlogic.gdx.utils.Array getNodes() -> getNodes
    void invalidate() -> invalidate
    void computeSize() -> computeSize
    void computeSize(com.badlogic.gdx.utils.Array,float) -> computeSize
    void layout() -> layout
    float layout(com.badlogic.gdx.utils.Array,float,float) -> layout
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.utils.Array,float) -> draw
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node getNodeAt(float) -> getNodeAt
    float getNodeAt(com.badlogic.gdx.utils.Array,float,float) -> getNodeAt
    void selectNodes(com.badlogic.gdx.utils.Array,float,float) -> selectNodes
    com.badlogic.gdx.scenes.scene2d.utils.Selection getSelection() -> getSelection
    com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle getStyle() -> getStyle
    com.badlogic.gdx.utils.Array getRootNodes() -> getRootNodes
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node getOverNode() -> getOverNode
    void setOverNode(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node) -> setOverNode
    void setPadding(float) -> setPadding
    float getIndentSpacing() -> getIndentSpacing
    void setYSpacing(float) -> setYSpacing
    void setIconSpacing(float,float) -> setIconSpacing
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    void findExpandedObjects(com.badlogic.gdx.utils.Array) -> findExpandedObjects
    void restoreExpandedObjects(com.badlogic.gdx.utils.Array) -> restoreExpandedObjects
    boolean findExpandedObjects(com.badlogic.gdx.utils.Array,com.badlogic.gdx.utils.Array) -> findExpandedObjects
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node findNode(java.lang.Object) -> findNode
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node findNode(com.badlogic.gdx.utils.Array,java.lang.Object) -> findNode
    void collapseAll() -> collapseAll
    void collapseAll(com.badlogic.gdx.utils.Array) -> collapseAll
    void expandAll() -> expandAll
    void expandAll(com.badlogic.gdx.utils.Array) -> expandAll
    com.badlogic.gdx.scenes.scene2d.utils.ClickListener getClickListener() -> getClickListener
com.badlogic.gdx.scenes.scene2d.ui.Tree$1 -> com.badlogic.gdx.scenes.scene2d.ui.Tree$1:
    com.badlogic.gdx.scenes.scene2d.ui.Tree this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Tree) -> <init>
    void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
    boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> mouseMoved
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> exit
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node -> com.badlogic.gdx.scenes.scene2d.ui.Tree$Node:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> actor
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node parent -> parent
    com.badlogic.gdx.utils.Array children -> children
    boolean selectable -> selectable
    boolean expanded -> expanded
    com.badlogic.gdx.scenes.scene2d.utils.Drawable icon -> icon
    float height -> height
    java.lang.Object object -> object
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor) -> <init>
    void setExpanded(boolean) -> setExpanded
    void addToTree(com.badlogic.gdx.scenes.scene2d.ui.Tree) -> addToTree
    void removeFromTree(com.badlogic.gdx.scenes.scene2d.ui.Tree) -> removeFromTree
    void add(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node) -> add
    void addAll(com.badlogic.gdx.utils.Array) -> addAll
    void insert(int,com.badlogic.gdx.scenes.scene2d.ui.Tree$Node) -> insert
    void remove() -> remove
    void remove(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node) -> remove
    void removeAll() -> removeAll
    com.badlogic.gdx.scenes.scene2d.ui.Tree getTree() -> getTree
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> getActor
    boolean isExpanded() -> isExpanded
    com.badlogic.gdx.utils.Array getChildren() -> getChildren
    void updateChildren() -> updateChildren
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node getParent() -> getParent
    void setIcon(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> setIcon
    java.lang.Object getObject() -> getObject
    void setObject(java.lang.Object) -> setObject
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getIcon() -> getIcon
    int getLevel() -> getLevel
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node findNode(java.lang.Object) -> findNode
    void collapseAll() -> collapseAll
    void expandAll() -> expandAll
    void expandTo() -> expandTo
    boolean isSelectable() -> isSelectable
    void setSelectable(boolean) -> setSelectable
    void findExpandedObjects(com.badlogic.gdx.utils.Array) -> findExpandedObjects
    void restoreExpandedObjects(com.badlogic.gdx.utils.Array) -> restoreExpandedObjects
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle -> com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable plus -> plus
    com.badlogic.gdx.scenes.scene2d.utils.Drawable minus -> minus
    com.badlogic.gdx.scenes.scene2d.utils.Drawable over -> over
    com.badlogic.gdx.scenes.scene2d.utils.Drawable selection -> selection
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.ui.Value -> com.badlogic.gdx.scenes.scene2d.ui.Value:
    com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed zero -> zero
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> minWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> minHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> prefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> prefHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> maxWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> maxHeight
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
    com.badlogic.gdx.scenes.scene2d.ui.Value percentWidth(float) -> percentWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value percentHeight(float) -> percentHeight
    com.badlogic.gdx.scenes.scene2d.ui.Value percentWidth(float,com.badlogic.gdx.scenes.scene2d.Actor) -> percentWidth
    com.badlogic.gdx.scenes.scene2d.ui.Value percentHeight(float,com.badlogic.gdx.scenes.scene2d.Actor) -> percentHeight
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.ui.Value$1 -> com.badlogic.gdx.scenes.scene2d.ui.Value$1:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$10 -> com.badlogic.gdx.scenes.scene2d.ui.Value$10:
    com.badlogic.gdx.scenes.scene2d.Actor val$actor -> val$actor
    float val$percent -> val$percent
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,float) -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$2 -> com.badlogic.gdx.scenes.scene2d.ui.Value$2:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$3 -> com.badlogic.gdx.scenes.scene2d.ui.Value$3:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$4 -> com.badlogic.gdx.scenes.scene2d.ui.Value$4:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$5 -> com.badlogic.gdx.scenes.scene2d.ui.Value$5:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$6 -> com.badlogic.gdx.scenes.scene2d.ui.Value$6:
    void <init>() -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$7 -> com.badlogic.gdx.scenes.scene2d.ui.Value$7:
    float val$percent -> val$percent
    void <init>(float) -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$8 -> com.badlogic.gdx.scenes.scene2d.ui.Value$8:
    float val$percent -> val$percent
    void <init>(float) -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$9 -> com.badlogic.gdx.scenes.scene2d.ui.Value$9:
    com.badlogic.gdx.scenes.scene2d.Actor val$actor -> val$actor
    float val$percent -> val$percent
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor,float) -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed -> com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed:
    float value -> value
    void <init>(float) -> <init>
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> get
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup -> com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup:
    float prefWidth -> prefWidth
    float prefHeight -> prefHeight
    boolean sizeInvalid -> sizeInvalid
    int align -> align
    boolean reverse -> reverse
    boolean round -> round
    float spacing -> spacing
    float padTop -> padTop
    float padLeft -> padLeft
    float padBottom -> padBottom
    float padRight -> padRight
    float fill -> fill
    void <init>() -> <init>
    void invalidate() -> invalidate
    void computeSize() -> computeSize
    void layout() -> layout
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    void setRound(boolean) -> setRound
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup reverse() -> reverse
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup reverse(boolean) -> reverse
    boolean getReverse() -> getReverse
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup space(float) -> space
    float getSpace() -> getSpace
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup pad(float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup pad(float,float,float,float) -> pad
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup padTop(float) -> padTop
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup padLeft(float) -> padLeft
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup padBottom(float) -> padBottom
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup padRight(float) -> padRight
    float getPadTop() -> getPadTop
    float getPadLeft() -> getPadLeft
    float getPadBottom() -> getPadBottom
    float getPadRight() -> getPadRight
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup align(int) -> align
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup center() -> center
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup left() -> left
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup right() -> right
    int getAlign() -> getAlign
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup fill() -> fill
    com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup fill(float) -> fill
    float getFill() -> getFill
com.badlogic.gdx.scenes.scene2d.ui.Widget -> com.badlogic.gdx.scenes.scene2d.ui.Widget:
    boolean needsLayout -> needsLayout
    boolean fillParent -> fillParent
    boolean layoutEnabled -> layoutEnabled
    void <init>() -> <init>
    float getMinWidth() -> getMinWidth
    float getMinHeight() -> getMinHeight
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getMaxWidth() -> getMaxWidth
    float getMaxHeight() -> getMaxHeight
    void setLayoutEnabled(boolean) -> setLayoutEnabled
    void validate() -> validate
    boolean needsLayout() -> needsLayout
    void invalidate() -> invalidate
    void invalidateHierarchy() -> invalidateHierarchy
    void sizeChanged() -> sizeChanged
    void pack() -> pack
    void setFillParent(boolean) -> setFillParent
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void layout() -> layout
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup -> com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup:
    boolean needsLayout -> needsLayout
    boolean fillParent -> fillParent
    boolean layoutEnabled -> layoutEnabled
    void <init>() -> <init>
    float getMinWidth() -> getMinWidth
    float getMinHeight() -> getMinHeight
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getMaxWidth() -> getMaxWidth
    float getMaxHeight() -> getMaxHeight
    void setLayoutEnabled(boolean) -> setLayoutEnabled
    void setLayoutEnabled(com.badlogic.gdx.scenes.scene2d.Group,boolean) -> setLayoutEnabled
    void validate() -> validate
    boolean needsLayout() -> needsLayout
    void invalidate() -> invalidate
    void invalidateHierarchy() -> invalidateHierarchy
    void childrenChanged() -> childrenChanged
    void sizeChanged() -> sizeChanged
    void pack() -> pack
    void setFillParent(boolean) -> setFillParent
    void layout() -> layout
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
com.badlogic.gdx.scenes.scene2d.ui.Window -> com.badlogic.gdx.scenes.scene2d.ui.Window:
    com.badlogic.gdx.math.Vector2 tmpPosition -> tmpPosition
    com.badlogic.gdx.math.Vector2 tmpSize -> tmpSize
    int MOVE -> MOVE
    com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle style -> style
    boolean isMovable -> isMovable
    boolean isModal -> isModal
    boolean isResizable -> isResizable
    int resizeBorder -> resizeBorder
    boolean dragging -> dragging
    boolean keepWithinStage -> keepWithinStage
    com.badlogic.gdx.scenes.scene2d.ui.Label titleLabel -> titleLabel
    com.badlogic.gdx.scenes.scene2d.ui.Table titleTable -> titleTable
    boolean drawTitleTable -> drawTitleTable
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String) -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle) -> <init>
    void setStyle(com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle) -> setStyle
    com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle getStyle() -> getStyle
    void keepWithinStage() -> keepWithinStage
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
    void drawStageBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float) -> drawStageBackground
    void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float) -> drawBackground
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> hit
    boolean isMovable() -> isMovable
    void setMovable(boolean) -> setMovable
    boolean isModal() -> isModal
    void setModal(boolean) -> setModal
    void setKeepWithinStage(boolean) -> setKeepWithinStage
    boolean isResizable() -> isResizable
    void setResizable(boolean) -> setResizable
    void setResizeBorder(int) -> setResizeBorder
    boolean isDragging() -> isDragging
    float getPrefWidth() -> getPrefWidth
    com.badlogic.gdx.scenes.scene2d.ui.Table getTitleTable() -> getTitleTable
    com.badlogic.gdx.scenes.scene2d.ui.Label getTitleLabel() -> getTitleLabel
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.ui.Window$1 -> com.badlogic.gdx.scenes.scene2d.ui.Window$1:
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Window) -> <init>
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> draw
com.badlogic.gdx.scenes.scene2d.ui.Window$2 -> com.badlogic.gdx.scenes.scene2d.ui.Window$2:
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Window) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
com.badlogic.gdx.scenes.scene2d.ui.Window$3 -> com.badlogic.gdx.scenes.scene2d.ui.Window$3:
    int edge -> edge
    float startX -> startX
    float startY -> startY
    float lastX -> lastX
    float lastY -> lastY
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Window) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
    boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> mouseMoved
    boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> scrolled
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> keyDown
    boolean keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> keyUp
    boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char) -> keyTyped
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle -> com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> background
    com.badlogic.gdx.graphics.g2d.BitmapFont titleFont -> titleFont
    com.badlogic.gdx.graphics.Color titleFontColor -> titleFontColor
    com.badlogic.gdx.scenes.scene2d.utils.Drawable stageBackground -> stageBackground
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle) -> <init>
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener -> com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener:
    com.badlogic.gdx.math.Vector2 tmpCoords -> tmpCoords
    com.badlogic.gdx.input.GestureDetector detector -> detector
    com.badlogic.gdx.scenes.scene2d.InputEvent event -> event
    com.badlogic.gdx.scenes.scene2d.Actor actor -> actor
    com.badlogic.gdx.scenes.scene2d.Actor touchDownTarget -> touchDownTarget
    void <init>() -> <init>
    void <init>(float,float,float,float) -> <init>
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> handle
    void touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
    void tap(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> tap
    boolean longPress(com.badlogic.gdx.scenes.scene2d.Actor,float,float) -> longPress
    void fling(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> fling
    void pan(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,float,float) -> pan
    void zoom(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> zoom
    void pinch(com.badlogic.gdx.scenes.scene2d.InputEvent,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> pinch
    com.badlogic.gdx.input.GestureDetector getGestureDetector() -> getGestureDetector
    com.badlogic.gdx.scenes.scene2d.Actor getTouchDownTarget() -> getTouchDownTarget
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1 -> com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1:
    com.badlogic.gdx.math.Vector2 initialPointer1 -> initialPointer1
    com.badlogic.gdx.math.Vector2 initialPointer2 -> initialPointer2
    com.badlogic.gdx.math.Vector2 pointer1 -> pointer1
    com.badlogic.gdx.math.Vector2 pointer2 -> pointer2
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener) -> <init>
    boolean tap(float,float,int,int) -> tap
    boolean longPress(float,float) -> longPress
    boolean fling(float,float,int) -> fling
    boolean pan(float,float,float,float) -> pan
    boolean zoom(float,float) -> zoom
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> pinch
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2 -> com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection -> com.badlogic.gdx.scenes.scene2d.utils.ArraySelection:
    com.badlogic.gdx.utils.Array array -> array
    boolean rangeSelect -> rangeSelect
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
    void choose(java.lang.Object) -> choose
    boolean getRangeSelect() -> getRangeSelect
    void setRangeSelect(boolean) -> setRangeSelect
    void validate() -> validate
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable -> com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable:
    java.lang.String name -> name
    float leftWidth -> leftWidth
    float rightWidth -> rightWidth
    float topHeight -> topHeight
    float bottomHeight -> bottomHeight
    float minWidth -> minWidth
    float minHeight -> minHeight
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable) -> <init>
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> draw
    float getLeftWidth() -> getLeftWidth
    void setLeftWidth(float) -> setLeftWidth
    float getRightWidth() -> getRightWidth
    void setRightWidth(float) -> setRightWidth
    float getTopHeight() -> getTopHeight
    void setTopHeight(float) -> setTopHeight
    float getBottomHeight() -> getBottomHeight
    void setBottomHeight(float) -> setBottomHeight
    float getMinWidth() -> getMinWidth
    void setMinWidth(float) -> setMinWidth
    float getMinHeight() -> getMinHeight
    void setMinHeight(float) -> setMinHeight
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener -> com.badlogic.gdx.scenes.scene2d.utils.ChangeListener:
    void <init>() -> <init>
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> handle
    void changed(com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent,com.badlogic.gdx.scenes.scene2d.Actor) -> changed
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent -> com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent:
    void <init>() -> <init>
com.badlogic.gdx.scenes.scene2d.utils.ClickListener -> com.badlogic.gdx.scenes.scene2d.utils.ClickListener:
    float visualPressedDuration -> visualPressedDuration
    float tapSquareSize -> tapSquareSize
    float touchDownX -> touchDownX
    float touchDownY -> touchDownY
    int pressedPointer -> pressedPointer
    int pressedButton -> pressedButton
    int button -> button
    boolean pressed -> pressed
    boolean over -> over
    boolean cancelled -> cancelled
    long visualPressedTime -> visualPressedTime
    long tapCountInterval -> tapCountInterval
    int tapCount -> tapCount
    long lastTapTime -> lastTapTime
    void <init>() -> <init>
    void <init>(int) -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
    void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> enter
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> exit
    void cancel() -> cancel
    void clicked(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> clicked
    boolean isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float) -> isOver
    boolean inTapSquare(float,float) -> inTapSquare
    boolean inTapSquare() -> inTapSquare
    void invalidateTapSquare() -> invalidateTapSquare
    boolean isPressed() -> isPressed
    boolean isVisualPressed() -> isVisualPressed
    boolean isOver() -> isOver
    void setTapSquareSize(float) -> setTapSquareSize
    float getTapSquareSize() -> getTapSquareSize
    void setTapCountInterval(float) -> setTapCountInterval
    int getTapCount() -> getTapCount
    float getTouchDownX() -> getTouchDownX
    float getTouchDownY() -> getTouchDownY
    int getPressedButton() -> getPressedButton
    int getPressedPointer() -> getPressedPointer
    int getButton() -> getButton
    void setButton(int) -> setButton
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.utils.Cullable -> com.badlogic.gdx.scenes.scene2d.utils.Cullable:
    void setCullingArea(com.badlogic.gdx.math.Rectangle) -> setCullingArea
com.badlogic.gdx.scenes.scene2d.utils.Disableable -> com.badlogic.gdx.scenes.scene2d.utils.Disableable:
    void setDisabled(boolean) -> setDisabled
    boolean isDisabled() -> isDisabled
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop:
    com.badlogic.gdx.math.Vector2 tmpVector -> tmpVector
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload payload -> payload
    com.badlogic.gdx.scenes.scene2d.Actor dragActor -> dragActor
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target target -> target
    boolean isValidTarget -> isValidTarget
    com.badlogic.gdx.utils.Array targets -> targets
    com.badlogic.gdx.utils.ObjectMap sourceListeners -> sourceListeners
    float tapSquareSize -> tapSquareSize
    int button -> button
    float dragActorX -> dragActorX
    float dragActorY -> dragActorY
    float touchOffsetX -> touchOffsetX
    float touchOffsetY -> touchOffsetY
    long dragStartTime -> dragStartTime
    int dragTime -> dragTime
    int activePointer -> activePointer
    boolean cancelTouchFocus -> cancelTouchFocus
    boolean keepWithinStage -> keepWithinStage
    void <init>() -> <init>
    void addSource(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source) -> addSource
    void removeSource(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source) -> removeSource
    void addTarget(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target) -> addTarget
    void removeTarget(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target) -> removeTarget
    void clear() -> clear
    void setTapSquareSize(float) -> setTapSquareSize
    void setButton(int) -> setButton
    void setDragActorPosition(float,float) -> setDragActorPosition
    void setTouchOffset(float,float) -> setTouchOffset
    boolean isDragging() -> isDragging
    com.badlogic.gdx.scenes.scene2d.Actor getDragActor() -> getDragActor
    void setDragTime(int) -> setDragTime
    void setCancelTouchFocus(boolean) -> setCancelTouchFocus
    void setKeepWithinStage(boolean) -> setKeepWithinStage
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1 -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1:
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source val$source -> val$source
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source) -> <init>
    void dragStart(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> dragStart
    void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> drag
    void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> dragStop
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload:
    com.badlogic.gdx.scenes.scene2d.Actor dragActor -> dragActor
    com.badlogic.gdx.scenes.scene2d.Actor validDragActor -> validDragActor
    com.badlogic.gdx.scenes.scene2d.Actor invalidDragActor -> invalidDragActor
    java.lang.Object object -> object
    void <init>() -> <init>
    void setDragActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setDragActor
    com.badlogic.gdx.scenes.scene2d.Actor getDragActor() -> getDragActor
    void setValidDragActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setValidDragActor
    com.badlogic.gdx.scenes.scene2d.Actor getValidDragActor() -> getValidDragActor
    void setInvalidDragActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setInvalidDragActor
    com.badlogic.gdx.scenes.scene2d.Actor getInvalidDragActor() -> getInvalidDragActor
    java.lang.Object getObject() -> getObject
    void setObject(java.lang.Object) -> setObject
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> actor
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor) -> <init>
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload dragStart(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> dragStart
    void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target) -> dragStop
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> getActor
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> actor
    void <init>(com.badlogic.gdx.scenes.scene2d.Actor) -> <init>
    boolean drag(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload,float,float,int) -> drag
    void reset(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload) -> reset
    void drop(com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source,com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload,float,float,int) -> drop
    com.badlogic.gdx.scenes.scene2d.Actor getActor() -> getActor
com.badlogic.gdx.scenes.scene2d.utils.DragListener -> com.badlogic.gdx.scenes.scene2d.utils.DragListener:
    float tapSquareSize -> tapSquareSize
    float touchDownX -> touchDownX
    float touchDownY -> touchDownY
    float stageTouchDownX -> stageTouchDownX
    float stageTouchDownY -> stageTouchDownY
    int pressedPointer -> pressedPointer
    int button -> button
    boolean dragging -> dragging
    float deltaX -> deltaX
    float deltaY -> deltaY
    void <init>() -> <init>
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchDown
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> touchDragged
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> touchUp
    void dragStart(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> dragStart
    void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> drag
    void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> dragStop
    void cancel() -> cancel
    boolean isDragging() -> isDragging
    void setTapSquareSize(float) -> setTapSquareSize
    float getTapSquareSize() -> getTapSquareSize
    float getTouchDownX() -> getTouchDownX
    float getTouchDownY() -> getTouchDownY
    float getStageTouchDownX() -> getStageTouchDownX
    float getStageTouchDownY() -> getStageTouchDownY
    float getDeltaX() -> getDeltaX
    float getDeltaY() -> getDeltaY
    int getButton() -> getButton
    void setButton(int) -> setButton
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener -> com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane scroll -> scroll
    com.badlogic.gdx.utils.Timer$Task scrollUp -> scrollUp
    com.badlogic.gdx.utils.Timer$Task scrollDown -> scrollDown
    com.badlogic.gdx.math.Interpolation interpolation -> interpolation
    float minSpeed -> minSpeed
    float maxSpeed -> maxSpeed
    float tickSecs -> tickSecs
    long startTime -> startTime
    long rampTime -> rampTime
    void <init>(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane) -> <init>
    void setup(float,float,float,float) -> setup
    float getScrollPixels() -> getScrollPixels
    void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> drag
    void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> dragStop
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1 -> com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane val$scroll -> val$scroll
    com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane) -> <init>
    void run() -> run
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2 -> com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane val$scroll -> val$scroll
    com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener this$0 -> this$0
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane) -> <init>
    void run() -> run
com.badlogic.gdx.scenes.scene2d.utils.Drawable -> com.badlogic.gdx.scenes.scene2d.utils.Drawable:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> draw
    float getLeftWidth() -> getLeftWidth
    void setLeftWidth(float) -> setLeftWidth
    float getRightWidth() -> getRightWidth
    void setRightWidth(float) -> setRightWidth
    float getTopHeight() -> getTopHeight
    void setTopHeight(float) -> setTopHeight
    float getBottomHeight() -> getBottomHeight
    void setBottomHeight(float) -> setBottomHeight
    float getMinWidth() -> getMinWidth
    void setMinWidth(float) -> setMinWidth
    float getMinHeight() -> getMinHeight
    void setMinHeight(float) -> setMinHeight
com.badlogic.gdx.scenes.scene2d.utils.FocusListener -> com.badlogic.gdx.scenes.scene2d.utils.FocusListener:
    void <init>() -> <init>
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> handle
    void keyboardFocusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> keyboardFocusChanged
    void scrollFocusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> scrollFocusChanged
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1 -> com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$utils$FocusListener$FocusEvent$Type -> $SwitchMap$com$badlogic$gdx$scenes$scene2d$utils$FocusListener$FocusEvent$Type
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent -> com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent:
    boolean focused -> focused
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type type -> type
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> relatedActor
    void <init>() -> <init>
    void reset() -> reset
    boolean isFocused() -> isFocused
    void setFocused(boolean) -> setFocused
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type getType() -> getType
    void setType(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type) -> setType
    com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor() -> getRelatedActor
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setRelatedActor
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type -> com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type:
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type keyboard -> keyboard
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type scroll -> scroll
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] $VALUES -> $VALUES
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] values() -> values
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.utils.Layout -> com.badlogic.gdx.scenes.scene2d.utils.Layout:
    void layout() -> layout
    void invalidate() -> invalidate
    void invalidateHierarchy() -> invalidateHierarchy
    void validate() -> validate
    void pack() -> pack
    void setFillParent(boolean) -> setFillParent
    void setLayoutEnabled(boolean) -> setLayoutEnabled
    float getMinWidth() -> getMinWidth
    float getMinHeight() -> getMinHeight
    float getPrefWidth() -> getPrefWidth
    float getPrefHeight() -> getPrefHeight
    float getMaxWidth() -> getMaxWidth
    float getMaxHeight() -> getMaxHeight
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable -> com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable:
    com.badlogic.gdx.graphics.g2d.NinePatch patch -> patch
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.NinePatch) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable) -> <init>
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> draw
    void setPatch(com.badlogic.gdx.graphics.g2d.NinePatch) -> setPatch
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch() -> getPatch
    com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable tint(com.badlogic.gdx.graphics.Color) -> tint
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack -> com.badlogic.gdx.scenes.scene2d.utils.ScissorStack:
    com.badlogic.gdx.utils.Array scissors -> scissors
    com.badlogic.gdx.math.Vector3 tmp -> tmp
    com.badlogic.gdx.math.Rectangle viewport -> viewport
    void <init>() -> <init>
    boolean pushScissors(com.badlogic.gdx.math.Rectangle) -> pushScissors
    com.badlogic.gdx.math.Rectangle popScissors() -> popScissors
    com.badlogic.gdx.math.Rectangle peekScissors() -> peekScissors
    void fix(com.badlogic.gdx.math.Rectangle) -> fix
    void calculateScissors(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> calculateScissors
    void calculateScissors(com.badlogic.gdx.graphics.Camera,float,float,float,float,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> calculateScissors
    com.badlogic.gdx.math.Rectangle getViewport() -> getViewport
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.utils.Selection -> com.badlogic.gdx.scenes.scene2d.utils.Selection:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> actor
    com.badlogic.gdx.utils.OrderedSet selected -> selected
    com.badlogic.gdx.utils.OrderedSet old -> old
    boolean isDisabled -> isDisabled
    boolean toggle -> toggle
    boolean multiple -> multiple
    boolean required -> required
    boolean programmaticChangeEvents -> programmaticChangeEvents
    java.lang.Object lastSelected -> lastSelected
    void <init>() -> <init>
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> setActor
    void choose(java.lang.Object) -> choose
    boolean hasItems() -> hasItems
    boolean isEmpty() -> isEmpty
    int size() -> size
    com.badlogic.gdx.utils.OrderedSet items() -> items
    java.lang.Object first() -> first
    void snapshot() -> snapshot
    void revert() -> revert
    void cleanup() -> cleanup
    void set(java.lang.Object) -> set
    void setAll(com.badlogic.gdx.utils.Array) -> setAll
    void add(java.lang.Object) -> add
    void addAll(com.badlogic.gdx.utils.Array) -> addAll
    void remove(java.lang.Object) -> remove
    void removeAll(com.badlogic.gdx.utils.Array) -> removeAll
    void clear() -> clear
    boolean fireChangeEvent() -> fireChangeEvent
    boolean contains(java.lang.Object) -> contains
    java.lang.Object getLastSelected() -> getLastSelected
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> toArray
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> toArray
    void setDisabled(boolean) -> setDisabled
    boolean isDisabled() -> isDisabled
    boolean getToggle() -> getToggle
    void setToggle(boolean) -> setToggle
    boolean getMultiple() -> getMultiple
    void setMultiple(boolean) -> setMultiple
    boolean getRequired() -> getRequired
    void setRequired(boolean) -> setRequired
    void setProgrammaticChangeEvents(boolean) -> setProgrammaticChangeEvents
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable -> com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable:
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> sprite
    com.badlogic.gdx.graphics.Color tmpColor -> tmpColor
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.Sprite) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable) -> <init>
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> draw
    void setSprite(com.badlogic.gdx.graphics.g2d.Sprite) -> setSprite
    com.badlogic.gdx.graphics.g2d.Sprite getSprite() -> getSprite
    com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable tint(com.badlogic.gdx.graphics.Color) -> tint
    void <clinit>() -> <clinit>
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable -> com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> region
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable) -> <init>
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> draw
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> draw
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> setRegion
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> getRegion
    com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable tint(com.badlogic.gdx.graphics.Color) -> tint
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable -> com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable:
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion) -> <init>
    void <init>(com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable) -> <init>
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> draw
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable -> com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> draw
com.badlogic.gdx.scenes.scene2d.utils.UIUtils -> com.badlogic.gdx.scenes.scene2d.utils.UIUtils:
    boolean isMac -> isMac
    boolean isWindows -> isWindows
    boolean isLinux -> isLinux
    void <init>() -> <init>
    boolean left() -> left
    boolean left(int) -> left
    boolean right() -> right
    boolean right(int) -> right
    boolean middle() -> middle
    boolean middle(int) -> middle
    boolean shift() -> shift
    boolean shift(int) -> shift
    boolean ctrl() -> ctrl
    boolean ctrl(int) -> ctrl
    boolean alt() -> alt
    boolean alt(int) -> alt
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.Align -> com.badlogic.gdx.utils.Align:
    int center -> center
    int top -> top
    int bottom -> bottom
    int left -> left
    int right -> right
    int topLeft -> topLeft
    int topRight -> topRight
    int bottomLeft -> bottomLeft
    int bottomRight -> bottomRight
    void <init>() -> <init>
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.Array:
    java.lang.Object[] items -> items
    int size -> size
    boolean ordered -> ordered
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> iterable
    com.badlogic.gdx.utils.Predicate$PredicateIterable predicateIterable -> predicateIterable
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(boolean,int,java.lang.Class) -> <init>
    void <init>(java.lang.Class) -> <init>
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void <init>(boolean,java.lang.Object[],int,int) -> <init>
    void add(java.lang.Object) -> add
    void addAll(com.badlogic.gdx.utils.Array) -> addAll
    void addAll(com.badlogic.gdx.utils.Array,int,int) -> addAll
    void addAll(java.lang.Object[]) -> addAll
    void addAll(java.lang.Object[],int,int) -> addAll
    java.lang.Object get(int) -> get
    void set(int,java.lang.Object) -> set
    void insert(int,java.lang.Object) -> insert
    void swap(int,int) -> swap
    boolean contains(java.lang.Object,boolean) -> contains
    int indexOf(java.lang.Object,boolean) -> indexOf
    int lastIndexOf(java.lang.Object,boolean) -> lastIndexOf
    boolean removeValue(java.lang.Object,boolean) -> removeValue
    java.lang.Object removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    boolean removeAll(com.badlogic.gdx.utils.Array,boolean) -> removeAll
    java.lang.Object pop() -> pop
    java.lang.Object peek() -> peek
    java.lang.Object first() -> first
    void clear() -> clear
    java.lang.Object[] shrink() -> shrink
    java.lang.Object[] ensureCapacity(int) -> ensureCapacity
    java.lang.Object[] resize(int) -> resize
    void sort() -> sort
    void sort(java.util.Comparator) -> sort
    java.lang.Object selectRanked(java.util.Comparator,int) -> selectRanked
    int selectRankedIndex(java.util.Comparator,int) -> selectRankedIndex
    void reverse() -> reverse
    void shuffle() -> shuffle
    java.util.Iterator iterator() -> iterator
    java.lang.Iterable select(com.badlogic.gdx.utils.Predicate) -> select
    void truncate(int) -> truncate
    java.lang.Object random() -> random
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Class) -> toArray
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.Array of(java.lang.Class) -> of
    com.badlogic.gdx.utils.Array of(boolean,int,java.lang.Class) -> of
    com.badlogic.gdx.utils.Array with(java.lang.Object[]) -> with
com.badlogic.gdx.utils.Array$ArrayIterable -> com.badlogic.gdx.utils.Array$ArrayIterable:
    com.badlogic.gdx.utils.Array array -> array
    boolean allowRemove -> allowRemove
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> iterator1
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> iterator2
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
    void <init>(com.badlogic.gdx.utils.Array,boolean) -> <init>
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.Array$ArrayIterator:
    com.badlogic.gdx.utils.Array array -> array
    boolean allowRemove -> allowRemove
    int index -> index
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
    void <init>(com.badlogic.gdx.utils.Array,boolean) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    void reset() -> reset
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ArrayMap -> com.badlogic.gdx.utils.ArrayMap:
    java.lang.Object[] keys -> keys
    java.lang.Object[] values -> values
    int size -> size
    boolean ordered -> ordered
    com.badlogic.gdx.utils.ArrayMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.ArrayMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.ArrayMap$Values valuesIter1 -> valuesIter1
    com.badlogic.gdx.utils.ArrayMap$Values valuesIter2 -> valuesIter2
    com.badlogic.gdx.utils.ArrayMap$Keys keysIter1 -> keysIter1
    com.badlogic.gdx.utils.ArrayMap$Keys keysIter2 -> keysIter2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(boolean,int,java.lang.Class,java.lang.Class) -> <init>
    void <init>(java.lang.Class,java.lang.Class) -> <init>
    void <init>(com.badlogic.gdx.utils.ArrayMap) -> <init>
    int put(java.lang.Object,java.lang.Object) -> put
    int put(java.lang.Object,java.lang.Object,int) -> put
    void putAll(com.badlogic.gdx.utils.ArrayMap) -> putAll
    void putAll(com.badlogic.gdx.utils.ArrayMap,int,int) -> putAll
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getKey(java.lang.Object,boolean) -> getKey
    java.lang.Object getKeyAt(int) -> getKeyAt
    java.lang.Object getValueAt(int) -> getValueAt
    java.lang.Object firstKey() -> firstKey
    java.lang.Object firstValue() -> firstValue
    void setKey(int,java.lang.Object) -> setKey
    void setValue(int,java.lang.Object) -> setValue
    void insert(int,java.lang.Object,java.lang.Object) -> insert
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object,boolean) -> containsValue
    int indexOfKey(java.lang.Object) -> indexOfKey
    int indexOfValue(java.lang.Object,boolean) -> indexOfValue
    java.lang.Object removeKey(java.lang.Object) -> removeKey
    boolean removeValue(java.lang.Object,boolean) -> removeValue
    void removeIndex(int) -> removeIndex
    java.lang.Object peekKey() -> peekKey
    java.lang.Object peekValue() -> peekValue
    void clear(int) -> clear
    void clear() -> clear
    void shrink() -> shrink
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.ArrayMap$Entries entries() -> entries
    com.badlogic.gdx.utils.ArrayMap$Values values() -> values
    com.badlogic.gdx.utils.ArrayMap$Keys keys() -> keys
com.badlogic.gdx.utils.ArrayMap$Entries -> com.badlogic.gdx.utils.ArrayMap$Entries:
    com.badlogic.gdx.utils.ArrayMap map -> map
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> entry
    int index -> index
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.ArrayMap) -> <init>
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> next
    void remove() -> remove
    void reset() -> reset
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ArrayMap$Keys -> com.badlogic.gdx.utils.ArrayMap$Keys:
    com.badlogic.gdx.utils.ArrayMap map -> map
    int index -> index
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.ArrayMap) -> <init>
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
    void remove() -> remove
    void reset() -> reset
    com.badlogic.gdx.utils.Array toArray() -> toArray
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> toArray
com.badlogic.gdx.utils.ArrayMap$Values -> com.badlogic.gdx.utils.ArrayMap$Values:
    com.badlogic.gdx.utils.ArrayMap map -> map
    int index -> index
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.ArrayMap) -> <init>
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
    void remove() -> remove
    void reset() -> reset
    com.badlogic.gdx.utils.Array toArray() -> toArray
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> toArray
com.badlogic.gdx.utils.AtomicQueue -> com.badlogic.gdx.utils.AtomicQueue:
    java.util.concurrent.atomic.AtomicInteger writeIndex -> writeIndex
    java.util.concurrent.atomic.AtomicInteger readIndex -> readIndex
    java.util.concurrent.atomic.AtomicReferenceArray queue -> queue
    void <init>(int) -> <init>
    int next(int) -> next
    boolean put(java.lang.Object) -> put
    java.lang.Object poll() -> poll
com.badlogic.gdx.utils.Base64Coder -> com.badlogic.gdx.utils.Base64Coder:
    java.lang.String systemLineSeparator -> systemLineSeparator
    char[] map1 -> map1
    byte[] map2 -> map2
    java.lang.String encodeString(java.lang.String) -> encodeString
    java.lang.String encodeLines(byte[]) -> encodeLines
    java.lang.String encodeLines(byte[],int,int,int,java.lang.String) -> encodeLines
    char[] encode(byte[]) -> encode
    char[] encode(byte[],int) -> encode
    char[] encode(byte[],int,int) -> encode
    java.lang.String decodeString(java.lang.String) -> decodeString
    byte[] decodeLines(java.lang.String) -> decodeLines
    byte[] decode(java.lang.String) -> decode
    byte[] decode(char[]) -> decode
    byte[] decode(char[],int,int) -> decode
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.BaseJsonReader -> com.badlogic.gdx.utils.BaseJsonReader:
    com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream) -> parse
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> parse
com.badlogic.gdx.utils.BinaryHeap -> com.badlogic.gdx.utils.BinaryHeap:
    int size -> size
    com.badlogic.gdx.utils.BinaryHeap$Node[] nodes -> nodes
    boolean isMaxHeap -> isMaxHeap
    void <init>() -> <init>
    void <init>(int,boolean) -> <init>
    com.badlogic.gdx.utils.BinaryHeap$Node add(com.badlogic.gdx.utils.BinaryHeap$Node) -> add
    com.badlogic.gdx.utils.BinaryHeap$Node add(com.badlogic.gdx.utils.BinaryHeap$Node,float) -> add
    com.badlogic.gdx.utils.BinaryHeap$Node peek() -> peek
    com.badlogic.gdx.utils.BinaryHeap$Node pop() -> pop
    com.badlogic.gdx.utils.BinaryHeap$Node remove(com.badlogic.gdx.utils.BinaryHeap$Node) -> remove
    com.badlogic.gdx.utils.BinaryHeap$Node remove(int) -> remove
    void clear() -> clear
    void setValue(com.badlogic.gdx.utils.BinaryHeap$Node,float) -> setValue
    void up(int) -> up
    void down(int) -> down
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.BinaryHeap$Node -> com.badlogic.gdx.utils.BinaryHeap$Node:
    float value -> value
    int index -> index
    void <init>(float) -> <init>
    float getValue() -> getValue
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Bits -> com.badlogic.gdx.utils.Bits:
    long[] bits -> bits
    void <init>() -> <init>
    void <init>(int) -> <init>
    boolean get(int) -> get
    boolean getAndClear(int) -> getAndClear
    boolean getAndSet(int) -> getAndSet
    void set(int) -> set
    void flip(int) -> flip
    void checkCapacity(int) -> checkCapacity
    void clear(int) -> clear
    void clear() -> clear
    int numBits() -> numBits
    int length() -> length
    boolean isEmpty() -> isEmpty
    int nextSetBit(int) -> nextSetBit
    int nextClearBit(int) -> nextClearBit
    void and(com.badlogic.gdx.utils.Bits) -> and
    void andNot(com.badlogic.gdx.utils.Bits) -> andNot
    void or(com.badlogic.gdx.utils.Bits) -> or
    void xor(com.badlogic.gdx.utils.Bits) -> xor
    boolean intersects(com.badlogic.gdx.utils.Bits) -> intersects
    boolean containsAll(com.badlogic.gdx.utils.Bits) -> containsAll
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.utils.BooleanArray -> com.badlogic.gdx.utils.BooleanArray:
    boolean[] items -> items
    int size -> size
    boolean ordered -> ordered
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(com.badlogic.gdx.utils.BooleanArray) -> <init>
    void <init>(boolean[]) -> <init>
    void <init>(boolean,boolean[],int,int) -> <init>
    void add(boolean) -> add
    void addAll(com.badlogic.gdx.utils.BooleanArray) -> addAll
    void addAll(com.badlogic.gdx.utils.BooleanArray,int,int) -> addAll
    void addAll(boolean[]) -> addAll
    void addAll(boolean[],int,int) -> addAll
    boolean get(int) -> get
    void set(int,boolean) -> set
    void insert(int,boolean) -> insert
    void swap(int,int) -> swap
    boolean removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    boolean removeAll(com.badlogic.gdx.utils.BooleanArray) -> removeAll
    boolean pop() -> pop
    boolean peek() -> peek
    boolean first() -> first
    void clear() -> clear
    boolean[] shrink() -> shrink
    boolean[] ensureCapacity(int) -> ensureCapacity
    boolean[] resize(int) -> resize
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    boolean random() -> random
    boolean[] toArray() -> toArray
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.BooleanArray with(boolean[]) -> with
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> unsafeBuffers
    int allocatedUnsafe -> allocatedUnsafe
    void <init>() -> <init>
    void copy(float[],java.nio.Buffer,int,int) -> copy
    void copy(byte[],int,java.nio.Buffer,int) -> copy
    void copy(short[],int,java.nio.Buffer,int) -> copy
    void copy(char[],int,int,java.nio.Buffer) -> copy
    void copy(int[],int,int,java.nio.Buffer) -> copy
    void copy(long[],int,int,java.nio.Buffer) -> copy
    void copy(float[],int,int,java.nio.Buffer) -> copy
    void copy(double[],int,int,java.nio.Buffer) -> copy
    void copy(char[],int,java.nio.Buffer,int) -> copy
    void copy(int[],int,java.nio.Buffer,int) -> copy
    void copy(long[],int,java.nio.Buffer,int) -> copy
    void copy(float[],int,java.nio.Buffer,int) -> copy
    void copy(double[],int,java.nio.Buffer,int) -> copy
    void copy(java.nio.Buffer,java.nio.Buffer,int) -> copy
    void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4) -> transform
    void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4) -> transform
    void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4,int) -> transform
    void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4,int) -> transform
    void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3) -> transform
    void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3) -> transform
    void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3,int) -> transform
    void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3,int) -> transform
    long findFloats(java.nio.Buffer,int,java.nio.Buffer,int) -> findFloats
    long findFloats(float[],int,java.nio.Buffer,int) -> findFloats
    long findFloats(java.nio.Buffer,int,float[],int) -> findFloats
    long findFloats(float[],int,float[],int) -> findFloats
    long findFloats(java.nio.Buffer,int,java.nio.Buffer,int,float) -> findFloats
    long findFloats(float[],int,java.nio.Buffer,int,float) -> findFloats
    long findFloats(java.nio.Buffer,int,float[],int,float) -> findFloats
    long findFloats(float[],int,float[],int,float) -> findFloats
    int positionInBytes(java.nio.Buffer) -> positionInBytes
    int bytesToElements(java.nio.Buffer,int) -> bytesToElements
    int elementsToBytes(java.nio.Buffer,int) -> elementsToBytes
    java.nio.FloatBuffer newFloatBuffer(int) -> newFloatBuffer
    java.nio.DoubleBuffer newDoubleBuffer(int) -> newDoubleBuffer
    java.nio.ByteBuffer newByteBuffer(int) -> newByteBuffer
    java.nio.ShortBuffer newShortBuffer(int) -> newShortBuffer
    java.nio.CharBuffer newCharBuffer(int) -> newCharBuffer
    java.nio.IntBuffer newIntBuffer(int) -> newIntBuffer
    java.nio.LongBuffer newLongBuffer(int) -> newLongBuffer
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> disposeUnsafeByteBuffer
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> newUnsafeByteBuffer
    long getUnsafeBufferAddress(java.nio.Buffer) -> getUnsafeBufferAddress
    java.nio.ByteBuffer newUnsafeByteBuffer(java.nio.ByteBuffer) -> newUnsafeByteBuffer
    int getAllocatedBytesUnsafe() -> getAllocatedBytesUnsafe
    void freeMemory(java.nio.ByteBuffer) -> freeMemory
    java.nio.ByteBuffer newDisposableByteBuffer(int) -> newDisposableByteBuffer
    long getBufferAddress(java.nio.Buffer) -> getBufferAddress
    void clear(java.nio.ByteBuffer,int) -> clear
    void copyJni(float[],java.nio.Buffer,int,int) -> copyJni
    void copyJni(byte[],int,java.nio.Buffer,int,int) -> copyJni
    void copyJni(char[],int,java.nio.Buffer,int,int) -> copyJni
    void copyJni(short[],int,java.nio.Buffer,int,int) -> copyJni
    void copyJni(int[],int,java.nio.Buffer,int,int) -> copyJni
    void copyJni(long[],int,java.nio.Buffer,int,int) -> copyJni
    void copyJni(float[],int,java.nio.Buffer,int,int) -> copyJni
    void copyJni(double[],int,java.nio.Buffer,int,int) -> copyJni
    void copyJni(java.nio.Buffer,int,java.nio.Buffer,int,int) -> copyJni
    void transformV4M4Jni(java.nio.Buffer,int,int,float[],int) -> transformV4M4Jni
    void transformV4M4Jni(float[],int,int,float[],int) -> transformV4M4Jni
    void transformV3M4Jni(java.nio.Buffer,int,int,float[],int) -> transformV3M4Jni
    void transformV3M4Jni(float[],int,int,float[],int) -> transformV3M4Jni
    void transformV2M4Jni(java.nio.Buffer,int,int,float[],int) -> transformV2M4Jni
    void transformV2M4Jni(float[],int,int,float[],int) -> transformV2M4Jni
    void transformV3M3Jni(java.nio.Buffer,int,int,float[],int) -> transformV3M3Jni
    void transformV3M3Jni(float[],int,int,float[],int) -> transformV3M3Jni
    void transformV2M3Jni(java.nio.Buffer,int,int,float[],int) -> transformV2M3Jni
    void transformV2M3Jni(float[],int,int,float[],int) -> transformV2M3Jni
    long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int) -> find
    long find(float[],int,int,java.nio.Buffer,int,int) -> find
    long find(java.nio.Buffer,int,int,float[],int,int) -> find
    long find(float[],int,int,float[],int,int) -> find
    long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int,float) -> find
    long find(float[],int,int,java.nio.Buffer,int,int,float) -> find
    long find(java.nio.Buffer,int,int,float[],int,int,float) -> find
    long find(float[],int,int,float[],int,int,float) -> find
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.ByteArray -> com.badlogic.gdx.utils.ByteArray:
    byte[] items -> items
    int size -> size
    boolean ordered -> ordered
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(com.badlogic.gdx.utils.ByteArray) -> <init>
    void <init>(byte[]) -> <init>
    void <init>(boolean,byte[],int,int) -> <init>
    void add(byte) -> add
    void addAll(com.badlogic.gdx.utils.ByteArray) -> addAll
    void addAll(com.badlogic.gdx.utils.ByteArray,int,int) -> addAll
    void addAll(byte[]) -> addAll
    void addAll(byte[],int,int) -> addAll
    byte get(int) -> get
    void set(int,byte) -> set
    void incr(int,byte) -> incr
    void mul(int,byte) -> mul
    void insert(int,byte) -> insert
    void swap(int,int) -> swap
    boolean contains(byte) -> contains
    int indexOf(byte) -> indexOf
    int lastIndexOf(byte) -> lastIndexOf
    boolean removeValue(byte) -> removeValue
    int removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    boolean removeAll(com.badlogic.gdx.utils.ByteArray) -> removeAll
    byte pop() -> pop
    byte peek() -> peek
    byte first() -> first
    void clear() -> clear
    byte[] shrink() -> shrink
    byte[] ensureCapacity(int) -> ensureCapacity
    byte[] resize(int) -> resize
    void sort() -> sort
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    byte random() -> random
    byte[] toArray() -> toArray
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.ByteArray with(byte[]) -> with
com.badlogic.gdx.utils.CharArray -> com.badlogic.gdx.utils.CharArray:
    char[] items -> items
    int size -> size
    boolean ordered -> ordered
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(com.badlogic.gdx.utils.CharArray) -> <init>
    void <init>(char[]) -> <init>
    void <init>(boolean,char[],int,int) -> <init>
    void add(char) -> add
    void addAll(com.badlogic.gdx.utils.CharArray) -> addAll
    void addAll(com.badlogic.gdx.utils.CharArray,int,int) -> addAll
    void addAll(char[]) -> addAll
    void addAll(char[],int,int) -> addAll
    char get(int) -> get
    void set(int,char) -> set
    void incr(int,char) -> incr
    void mul(int,char) -> mul
    void insert(int,char) -> insert
    void swap(int,int) -> swap
    boolean contains(char) -> contains
    int indexOf(char) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    boolean removeValue(char) -> removeValue
    char removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    boolean removeAll(com.badlogic.gdx.utils.CharArray) -> removeAll
    char pop() -> pop
    char peek() -> peek
    char first() -> first
    void clear() -> clear
    char[] shrink() -> shrink
    char[] ensureCapacity(int) -> ensureCapacity
    char[] resize(int) -> resize
    void sort() -> sort
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    char random() -> random
    char[] toArray() -> toArray
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.CharArray with(char[]) -> with
com.badlogic.gdx.utils.Clipboard -> com.badlogic.gdx.utils.Clipboard:
    java.lang.String getContents() -> getContents
    void setContents(java.lang.String) -> setContents
com.badlogic.gdx.utils.ComparableTimSort -> com.badlogic.gdx.utils.ComparableTimSort:
    int MIN_MERGE -> MIN_MERGE
    java.lang.Object[] a -> a
    int MIN_GALLOP -> MIN_GALLOP
    int minGallop -> minGallop
    int INITIAL_TMP_STORAGE_LENGTH -> INITIAL_TMP_STORAGE_LENGTH
    java.lang.Object[] tmp -> tmp
    int stackSize -> stackSize
    int[] runBase -> runBase
    int[] runLen -> runLen
    boolean DEBUG -> DEBUG
    void <init>() -> <init>
    void doSort(java.lang.Object[],int,int) -> doSort
    void <init>(java.lang.Object[]) -> <init>
    void sort(java.lang.Object[]) -> sort
    void sort(java.lang.Object[],int,int) -> sort
    void binarySort(java.lang.Object[],int,int,int) -> binarySort
    int countRunAndMakeAscending(java.lang.Object[],int,int) -> countRunAndMakeAscending
    void reverseRange(java.lang.Object[],int,int) -> reverseRange
    int minRunLength(int) -> minRunLength
    void pushRun(int,int) -> pushRun
    void mergeCollapse() -> mergeCollapse
    void mergeForceCollapse() -> mergeForceCollapse
    void mergeAt(int) -> mergeAt
    int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int) -> gallopLeft
    int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int) -> gallopRight
    void mergeLo(int,int,int,int) -> mergeLo
    void mergeHi(int,int,int,int) -> mergeHi
    java.lang.Object[] ensureCapacity(int) -> ensureCapacity
    void rangeCheck(int,int,int) -> rangeCheck
com.badlogic.gdx.utils.DataBuffer -> com.badlogic.gdx.utils.DataBuffer:
    com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream outStream -> outStream
    void <init>() -> <init>
    void <init>(int) -> <init>
    byte[] getBuffer() -> getBuffer
    byte[] toArray() -> toArray
com.badlogic.gdx.utils.DataInput -> com.badlogic.gdx.utils.DataInput:
    char[] chars -> chars
    void <init>(java.io.InputStream) -> <init>
    int readInt(boolean) -> readInt
    java.lang.String readString() -> readString
    void readUtf8_slow(int,int,int) -> readUtf8_slow
com.badlogic.gdx.utils.DataOutput -> com.badlogic.gdx.utils.DataOutput:
    void <init>(java.io.OutputStream) -> <init>
    int writeInt(int,boolean) -> writeInt
    void writeString(java.lang.String) -> writeString
    void writeString_slow(java.lang.String,int,int) -> writeString_slow
com.badlogic.gdx.utils.DelayedRemovalArray -> com.badlogic.gdx.utils.DelayedRemovalArray:
    int iterating -> iterating
    com.badlogic.gdx.utils.IntArray remove -> remove
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
    void <init>(boolean,int,java.lang.Class) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(boolean,java.lang.Object[],int,int) -> <init>
    void <init>(java.lang.Class) -> <init>
    void <init>(int) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void begin() -> begin
    void end() -> end
    void remove(int) -> remove
    boolean removeValue(java.lang.Object,boolean) -> removeValue
    java.lang.Object removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    void set(int,java.lang.Object) -> set
    void insert(int,java.lang.Object) -> insert
    void swap(int,int) -> swap
    java.lang.Object pop() -> pop
    void clear() -> clear
    void sort() -> sort
    void sort(java.util.Comparator) -> sort
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    com.badlogic.gdx.utils.DelayedRemovalArray with(java.lang.Object[]) -> with
com.badlogic.gdx.utils.Disposable -> com.badlogic.gdx.utils.Disposable:
    void dispose() -> dispose
com.badlogic.gdx.utils.FloatArray -> com.badlogic.gdx.utils.FloatArray:
    float[] items -> items
    int size -> size
    boolean ordered -> ordered
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(com.badlogic.gdx.utils.FloatArray) -> <init>
    void <init>(float[]) -> <init>
    void <init>(boolean,float[],int,int) -> <init>
    void add(float) -> add
    void addAll(com.badlogic.gdx.utils.FloatArray) -> addAll
    void addAll(com.badlogic.gdx.utils.FloatArray,int,int) -> addAll
    void addAll(float[]) -> addAll
    void addAll(float[],int,int) -> addAll
    float get(int) -> get
    void set(int,float) -> set
    void incr(int,float) -> incr
    void mul(int,float) -> mul
    void insert(int,float) -> insert
    void swap(int,int) -> swap
    boolean contains(float) -> contains
    int indexOf(float) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    boolean removeValue(float) -> removeValue
    float removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    boolean removeAll(com.badlogic.gdx.utils.FloatArray) -> removeAll
    float pop() -> pop
    float peek() -> peek
    float first() -> first
    void clear() -> clear
    float[] shrink() -> shrink
    float[] ensureCapacity(int) -> ensureCapacity
    float[] resize(int) -> resize
    void sort() -> sort
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    float random() -> random
    float[] toArray() -> toArray
    boolean equals(java.lang.Object) -> equals
    boolean equals(java.lang.Object,float) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.FloatArray with(float[]) -> with
com.badlogic.gdx.utils.GdxBuild -> com.badlogic.gdx.utils.GdxBuild:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
com.badlogic.gdx.utils.GdxNativesLoader -> com.badlogic.gdx.utils.GdxNativesLoader:
    boolean disableNativesLoading -> disableNativesLoading
    boolean nativesLoaded -> nativesLoaded
    void <init>() -> <init>
    void load() -> load
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.GdxRuntimeException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.badlogic.gdx.utils.I18NBundle -> com.badlogic.gdx.utils.I18NBundle:
    java.lang.String DEFAULT_ENCODING -> DEFAULT_ENCODING
    java.util.Locale ROOT_LOCALE -> ROOT_LOCALE
    boolean simpleFormatter -> simpleFormatter
    boolean exceptionOnMissingKey -> exceptionOnMissingKey
    com.badlogic.gdx.utils.I18NBundle parent -> parent
    java.util.Locale locale -> locale
    com.badlogic.gdx.utils.ObjectMap properties -> properties
    com.badlogic.gdx.utils.TextFormatter formatter -> formatter
    void <init>() -> <init>
    boolean getSimpleFormatter() -> getSimpleFormatter
    void setSimpleFormatter(boolean) -> setSimpleFormatter
    boolean getExceptionOnMissingKey() -> getExceptionOnMissingKey
    void setExceptionOnMissingKey(boolean) -> setExceptionOnMissingKey
    com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle) -> createBundle
    com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.util.Locale) -> createBundle
    com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> createBundle
    com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.util.Locale,java.lang.String) -> createBundle
    com.badlogic.gdx.utils.I18NBundle createBundleImpl(com.badlogic.gdx.files.FileHandle,java.util.Locale,java.lang.String) -> createBundleImpl
    java.util.List getCandidateLocales(java.util.Locale) -> getCandidateLocales
    java.util.Locale getFallbackLocale(java.util.Locale) -> getFallbackLocale
    com.badlogic.gdx.utils.I18NBundle loadBundleChain(com.badlogic.gdx.files.FileHandle,java.lang.String,java.util.List,int,com.badlogic.gdx.utils.I18NBundle) -> loadBundleChain
    com.badlogic.gdx.utils.I18NBundle loadBundle(com.badlogic.gdx.files.FileHandle,java.lang.String,java.util.Locale) -> loadBundle
    boolean checkFileExistence(com.badlogic.gdx.files.FileHandle) -> checkFileExistence
    void load(java.io.Reader) -> load
    com.badlogic.gdx.files.FileHandle toFileHandle(com.badlogic.gdx.files.FileHandle,java.util.Locale) -> toFileHandle
    java.util.Locale getLocale() -> getLocale
    void setLocale(java.util.Locale) -> setLocale
    java.lang.String get(java.lang.String) -> get
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.IdentityMap -> com.badlogic.gdx.utils.IdentityMap:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int size -> size
    java.lang.Object[] keyTable -> keyTable
    java.lang.Object[] valueTable -> valueTable
    int capacity -> capacity
    int stashSize -> stashSize
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.IdentityMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.IdentityMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.IdentityMap$Values values1 -> values1
    com.badlogic.gdx.utils.IdentityMap$Values values2 -> values2
    com.badlogic.gdx.utils.IdentityMap$Keys keys1 -> keys1
    com.badlogic.gdx.utils.IdentityMap$Keys keys2 -> keys2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.IdentityMap) -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putResize(java.lang.Object,java.lang.Object) -> putResize
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> push
    void putStash(java.lang.Object,java.lang.Object) -> putStash
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    java.lang.Object getStash(java.lang.Object,java.lang.Object) -> getStash
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeStash(java.lang.Object) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean containsValue(java.lang.Object,boolean) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsKeyStash(java.lang.Object) -> containsKeyStash
    java.lang.Object findKey(java.lang.Object,boolean) -> findKey
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(int) -> hash2
    int hash3(int) -> hash3
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.IdentityMap$Entries entries() -> entries
    com.badlogic.gdx.utils.IdentityMap$Values values() -> values
    com.badlogic.gdx.utils.IdentityMap$Keys keys() -> keys
com.badlogic.gdx.utils.IdentityMap$Entries -> com.badlogic.gdx.utils.IdentityMap$Entries:
    com.badlogic.gdx.utils.IdentityMap$Entry entry -> entry
    void <init>(com.badlogic.gdx.utils.IdentityMap) -> <init>
    com.badlogic.gdx.utils.IdentityMap$Entry next() -> next
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> reset
    java.lang.Object next() -> next
com.badlogic.gdx.utils.IdentityMap$Entry -> com.badlogic.gdx.utils.IdentityMap$Entry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IdentityMap$Keys -> com.badlogic.gdx.utils.IdentityMap$Keys:
    void <init>(com.badlogic.gdx.utils.IdentityMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.IdentityMap$MapIterator -> com.badlogic.gdx.utils.IdentityMap$MapIterator:
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.IdentityMap map -> map
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.IdentityMap) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
com.badlogic.gdx.utils.IdentityMap$Values -> com.badlogic.gdx.utils.IdentityMap$Values:
    void <init>(com.badlogic.gdx.utils.IdentityMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> toArray
    void toArray(com.badlogic.gdx.utils.Array) -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.IntArray -> com.badlogic.gdx.utils.IntArray:
    int[] items -> items
    int size -> size
    boolean ordered -> ordered
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(com.badlogic.gdx.utils.IntArray) -> <init>
    void <init>(int[]) -> <init>
    void <init>(boolean,int[],int,int) -> <init>
    void add(int) -> add
    void addAll(com.badlogic.gdx.utils.IntArray) -> addAll
    void addAll(com.badlogic.gdx.utils.IntArray,int,int) -> addAll
    void addAll(int[]) -> addAll
    void addAll(int[],int,int) -> addAll
    int get(int) -> get
    void set(int,int) -> set
    void incr(int,int) -> incr
    void mul(int,int) -> mul
    void insert(int,int) -> insert
    void swap(int,int) -> swap
    boolean contains(int) -> contains
    int indexOf(int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    boolean removeValue(int) -> removeValue
    int removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    boolean removeAll(com.badlogic.gdx.utils.IntArray) -> removeAll
    int pop() -> pop
    int peek() -> peek
    int first() -> first
    void clear() -> clear
    int[] shrink() -> shrink
    int[] ensureCapacity(int) -> ensureCapacity
    int[] resize(int) -> resize
    void sort() -> sort
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    int random() -> random
    int[] toArray() -> toArray
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.IntArray with(int[]) -> with
com.badlogic.gdx.utils.IntFloatMap -> com.badlogic.gdx.utils.IntFloatMap:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int EMPTY -> EMPTY
    int size -> size
    int[] keyTable -> keyTable
    float[] valueTable -> valueTable
    int capacity -> capacity
    int stashSize -> stashSize
    float zeroValue -> zeroValue
    boolean hasZeroValue -> hasZeroValue
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.IntFloatMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.IntFloatMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.IntFloatMap$Values values1 -> values1
    com.badlogic.gdx.utils.IntFloatMap$Values values2 -> values2
    com.badlogic.gdx.utils.IntFloatMap$Keys keys1 -> keys1
    com.badlogic.gdx.utils.IntFloatMap$Keys keys2 -> keys2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.IntFloatMap) -> <init>
    void put(int,float) -> put
    void putAll(com.badlogic.gdx.utils.IntFloatMap) -> putAll
    void putResize(int,float) -> putResize
    void push(int,float,int,int,int,int,int,int) -> push
    void putStash(int,float) -> putStash
    float get(int,float) -> get
    float getStash(int,float) -> getStash
    float getAndIncrement(int,float,float) -> getAndIncrement
    float getAndIncrementStash(int,float,float) -> getAndIncrementStash
    float remove(int,float) -> remove
    float removeStash(int,float) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean containsValue(float) -> containsValue
    boolean containsValue(float,float) -> containsValue
    boolean containsKey(int) -> containsKey
    boolean containsKeyStash(int) -> containsKeyStash
    int findKey(float,int) -> findKey
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(int) -> hash2
    int hash3(int) -> hash3
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.IntFloatMap$Entries entries() -> entries
    com.badlogic.gdx.utils.IntFloatMap$Values values() -> values
    com.badlogic.gdx.utils.IntFloatMap$Keys keys() -> keys
com.badlogic.gdx.utils.IntFloatMap$Entries -> com.badlogic.gdx.utils.IntFloatMap$Entries:
    com.badlogic.gdx.utils.IntFloatMap$Entry entry -> entry
    void <init>(com.badlogic.gdx.utils.IntFloatMap) -> <init>
    com.badlogic.gdx.utils.IntFloatMap$Entry next() -> next
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> reset
    java.lang.Object next() -> next
com.badlogic.gdx.utils.IntFloatMap$Entry -> com.badlogic.gdx.utils.IntFloatMap$Entry:
    int key -> key
    float value -> value
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntFloatMap$Keys -> com.badlogic.gdx.utils.IntFloatMap$Keys:
    void <init>(com.badlogic.gdx.utils.IntFloatMap) -> <init>
    boolean hasNext() -> hasNext
    int next() -> next
    com.badlogic.gdx.utils.IntArray toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.IntFloatMap$MapIterator -> com.badlogic.gdx.utils.IntFloatMap$MapIterator:
    int INDEX_ILLEGAL -> INDEX_ILLEGAL
    int INDEX_ZERO -> INDEX_ZERO
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.IntFloatMap map -> map
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.IntFloatMap) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
com.badlogic.gdx.utils.IntFloatMap$Values -> com.badlogic.gdx.utils.IntFloatMap$Values:
    void <init>(com.badlogic.gdx.utils.IntFloatMap) -> <init>
    boolean hasNext() -> hasNext
    float next() -> next
    com.badlogic.gdx.utils.FloatArray toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.IntIntMap -> com.badlogic.gdx.utils.IntIntMap:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int EMPTY -> EMPTY
    int size -> size
    int[] keyTable -> keyTable
    int[] valueTable -> valueTable
    int capacity -> capacity
    int stashSize -> stashSize
    int zeroValue -> zeroValue
    boolean hasZeroValue -> hasZeroValue
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.IntIntMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.IntIntMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.IntIntMap$Values values1 -> values1
    com.badlogic.gdx.utils.IntIntMap$Values values2 -> values2
    com.badlogic.gdx.utils.IntIntMap$Keys keys1 -> keys1
    com.badlogic.gdx.utils.IntIntMap$Keys keys2 -> keys2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.IntIntMap) -> <init>
    void put(int,int) -> put
    void putAll(com.badlogic.gdx.utils.IntIntMap) -> putAll
    void putResize(int,int) -> putResize
    void push(int,int,int,int,int,int,int,int) -> push
    void putStash(int,int) -> putStash
    int get(int,int) -> get
    int getStash(int,int) -> getStash
    int getAndIncrement(int,int,int) -> getAndIncrement
    int getAndIncrementStash(int,int,int) -> getAndIncrementStash
    int remove(int,int) -> remove
    int removeStash(int,int) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean containsValue(int) -> containsValue
    boolean containsKey(int) -> containsKey
    boolean containsKeyStash(int) -> containsKeyStash
    int findKey(int,int) -> findKey
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(int) -> hash2
    int hash3(int) -> hash3
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.IntIntMap$Entries entries() -> entries
    com.badlogic.gdx.utils.IntIntMap$Values values() -> values
    com.badlogic.gdx.utils.IntIntMap$Keys keys() -> keys
com.badlogic.gdx.utils.IntIntMap$Entries -> com.badlogic.gdx.utils.IntIntMap$Entries:
    com.badlogic.gdx.utils.IntIntMap$Entry entry -> entry
    void <init>(com.badlogic.gdx.utils.IntIntMap) -> <init>
    com.badlogic.gdx.utils.IntIntMap$Entry next() -> next
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> reset
    java.lang.Object next() -> next
com.badlogic.gdx.utils.IntIntMap$Entry -> com.badlogic.gdx.utils.IntIntMap$Entry:
    int key -> key
    int value -> value
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntIntMap$Keys -> com.badlogic.gdx.utils.IntIntMap$Keys:
    void <init>(com.badlogic.gdx.utils.IntIntMap) -> <init>
    boolean hasNext() -> hasNext
    int next() -> next
    com.badlogic.gdx.utils.IntArray toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.IntIntMap$MapIterator -> com.badlogic.gdx.utils.IntIntMap$MapIterator:
    int INDEX_ILLEGAL -> INDEX_ILLEGAL
    int INDEX_ZERO -> INDEX_ZERO
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.IntIntMap map -> map
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.IntIntMap) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
com.badlogic.gdx.utils.IntIntMap$Values -> com.badlogic.gdx.utils.IntIntMap$Values:
    void <init>(com.badlogic.gdx.utils.IntIntMap) -> <init>
    boolean hasNext() -> hasNext
    int next() -> next
    com.badlogic.gdx.utils.IntArray toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.IntMap -> com.badlogic.gdx.utils.IntMap:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int EMPTY -> EMPTY
    int size -> size
    int[] keyTable -> keyTable
    java.lang.Object[] valueTable -> valueTable
    int capacity -> capacity
    int stashSize -> stashSize
    java.lang.Object zeroValue -> zeroValue
    boolean hasZeroValue -> hasZeroValue
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.IntMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.IntMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.IntMap$Values values1 -> values1
    com.badlogic.gdx.utils.IntMap$Values values2 -> values2
    com.badlogic.gdx.utils.IntMap$Keys keys1 -> keys1
    com.badlogic.gdx.utils.IntMap$Keys keys2 -> keys2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.IntMap) -> <init>
    java.lang.Object put(int,java.lang.Object) -> put
    void putAll(com.badlogic.gdx.utils.IntMap) -> putAll
    void putResize(int,java.lang.Object) -> putResize
    void push(int,java.lang.Object,int,int,int,int,int,int) -> push
    void putStash(int,java.lang.Object) -> putStash
    java.lang.Object get(int) -> get
    java.lang.Object get(int,java.lang.Object) -> get
    java.lang.Object getStash(int,java.lang.Object) -> getStash
    java.lang.Object remove(int) -> remove
    java.lang.Object removeStash(int) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean containsValue(java.lang.Object,boolean) -> containsValue
    boolean containsKey(int) -> containsKey
    boolean containsKeyStash(int) -> containsKeyStash
    int findKey(java.lang.Object,boolean,int) -> findKey
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(int) -> hash2
    int hash3(int) -> hash3
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.IntMap$Entries entries() -> entries
    com.badlogic.gdx.utils.IntMap$Values values() -> values
    com.badlogic.gdx.utils.IntMap$Keys keys() -> keys
com.badlogic.gdx.utils.IntMap$Entries -> com.badlogic.gdx.utils.IntMap$Entries:
    com.badlogic.gdx.utils.IntMap$Entry entry -> entry
    void <init>(com.badlogic.gdx.utils.IntMap) -> <init>
    com.badlogic.gdx.utils.IntMap$Entry next() -> next
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> reset
    java.lang.Object next() -> next
com.badlogic.gdx.utils.IntMap$Entry -> com.badlogic.gdx.utils.IntMap$Entry:
    int key -> key
    java.lang.Object value -> value
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntMap$Keys -> com.badlogic.gdx.utils.IntMap$Keys:
    void <init>(com.badlogic.gdx.utils.IntMap) -> <init>
    int next() -> next
    com.badlogic.gdx.utils.IntArray toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.IntMap$MapIterator -> com.badlogic.gdx.utils.IntMap$MapIterator:
    int INDEX_ILLEGAL -> INDEX_ILLEGAL
    int INDEX_ZERO -> INDEX_ZERO
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.IntMap map -> map
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.IntMap) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
com.badlogic.gdx.utils.IntMap$Values -> com.badlogic.gdx.utils.IntMap$Values:
    void <init>(com.badlogic.gdx.utils.IntMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.IntSet -> com.badlogic.gdx.utils.IntSet:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int EMPTY -> EMPTY
    int size -> size
    int[] keyTable -> keyTable
    int capacity -> capacity
    int stashSize -> stashSize
    boolean hasZeroValue -> hasZeroValue
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.IntSet$IntSetIterator iterator1 -> iterator1
    com.badlogic.gdx.utils.IntSet$IntSetIterator iterator2 -> iterator2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.IntSet) -> <init>
    boolean add(int) -> add
    void addAll(com.badlogic.gdx.utils.IntArray) -> addAll
    void addAll(com.badlogic.gdx.utils.IntArray,int,int) -> addAll
    void addAll(int[]) -> addAll
    void addAll(int[],int,int) -> addAll
    void addAll(com.badlogic.gdx.utils.IntSet) -> addAll
    void addResize(int) -> addResize
    void push(int,int,int,int,int,int,int) -> push
    void addStash(int) -> addStash
    boolean remove(int) -> remove
    boolean removeStash(int) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean contains(int) -> contains
    boolean containsKeyStash(int) -> containsKeyStash
    int first() -> first
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(int) -> hash2
    int hash3(int) -> hash3
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.IntSet$IntSetIterator iterator() -> iterator
    com.badlogic.gdx.utils.IntSet with(int[]) -> with
com.badlogic.gdx.utils.IntSet$IntSetIterator -> com.badlogic.gdx.utils.IntSet$IntSetIterator:
    int INDEX_ILLEGAL -> INDEX_ILLEGAL
    int INDEX_ZERO -> INDEX_ZERO
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.IntSet set -> set
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.IntSet) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
    int next() -> next
    com.badlogic.gdx.utils.IntArray toArray() -> toArray
com.badlogic.gdx.utils.Json -> com.badlogic.gdx.utils.Json:
    boolean debug -> debug
    com.badlogic.gdx.utils.JsonWriter writer -> writer
    java.lang.String typeName -> typeName
    boolean usePrototypes -> usePrototypes
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> outputType
    boolean quoteLongValues -> quoteLongValues
    boolean ignoreUnknownFields -> ignoreUnknownFields
    boolean enumNames -> enumNames
    com.badlogic.gdx.utils.Json$Serializer defaultSerializer -> defaultSerializer
    com.badlogic.gdx.utils.ObjectMap typeToFields -> typeToFields
    com.badlogic.gdx.utils.ObjectMap tagToClass -> tagToClass
    com.badlogic.gdx.utils.ObjectMap classToTag -> classToTag
    com.badlogic.gdx.utils.ObjectMap classToSerializer -> classToSerializer
    com.badlogic.gdx.utils.ObjectMap classToDefaultValues -> classToDefaultValues
    java.lang.Object[] equals1 -> equals1
    java.lang.Object[] equals2 -> equals2
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.utils.JsonWriter$OutputType) -> <init>
    void setIgnoreUnknownFields(boolean) -> setIgnoreUnknownFields
    void setOutputType(com.badlogic.gdx.utils.JsonWriter$OutputType) -> setOutputType
    void setQuoteLongValues(boolean) -> setQuoteLongValues
    void setEnumNames(boolean) -> setEnumNames
    void addClassTag(java.lang.String,java.lang.Class) -> addClassTag
    java.lang.Class getClass(java.lang.String) -> getClass
    java.lang.String getTag(java.lang.Class) -> getTag
    void setTypeName(java.lang.String) -> setTypeName
    void setDefaultSerializer(com.badlogic.gdx.utils.Json$Serializer) -> setDefaultSerializer
    void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$Serializer) -> setSerializer
    com.badlogic.gdx.utils.Json$Serializer getSerializer(java.lang.Class) -> getSerializer
    void setUsePrototypes(boolean) -> setUsePrototypes
    void setElementType(java.lang.Class,java.lang.String,java.lang.Class) -> setElementType
    com.badlogic.gdx.utils.OrderedMap getFields(java.lang.Class) -> getFields
    java.lang.String toJson(java.lang.Object) -> toJson
    java.lang.String toJson(java.lang.Object,java.lang.Class) -> toJson
    java.lang.String toJson(java.lang.Object,java.lang.Class,java.lang.Class) -> toJson
    void toJson(java.lang.Object,com.badlogic.gdx.files.FileHandle) -> toJson
    void toJson(java.lang.Object,java.lang.Class,com.badlogic.gdx.files.FileHandle) -> toJson
    void toJson(java.lang.Object,java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle) -> toJson
    void toJson(java.lang.Object,java.io.Writer) -> toJson
    void toJson(java.lang.Object,java.lang.Class,java.io.Writer) -> toJson
    void toJson(java.lang.Object,java.lang.Class,java.lang.Class,java.io.Writer) -> toJson
    void setWriter(java.io.Writer) -> setWriter
    com.badlogic.gdx.utils.JsonWriter getWriter() -> getWriter
    void writeFields(java.lang.Object) -> writeFields
    java.lang.Object[] getDefaultValues(java.lang.Class) -> getDefaultValues
    void writeField(java.lang.Object,java.lang.String) -> writeField
    void writeField(java.lang.Object,java.lang.String,java.lang.Class) -> writeField
    void writeField(java.lang.Object,java.lang.String,java.lang.String) -> writeField
    void writeField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class) -> writeField
    void writeValue(java.lang.String,java.lang.Object) -> writeValue
    void writeValue(java.lang.String,java.lang.Object,java.lang.Class) -> writeValue
    void writeValue(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Class) -> writeValue
    void writeValue(java.lang.Object) -> writeValue
    void writeValue(java.lang.Object,java.lang.Class) -> writeValue
    void writeValue(java.lang.Object,java.lang.Class,java.lang.Class) -> writeValue
    void writeObjectStart(java.lang.String) -> writeObjectStart
    void writeObjectStart(java.lang.String,java.lang.Class,java.lang.Class) -> writeObjectStart
    void writeObjectStart() -> writeObjectStart
    void writeObjectStart(java.lang.Class,java.lang.Class) -> writeObjectStart
    void writeObjectEnd() -> writeObjectEnd
    void writeArrayStart(java.lang.String) -> writeArrayStart
    void writeArrayStart() -> writeArrayStart
    void writeArrayEnd() -> writeArrayEnd
    void writeType(java.lang.Class) -> writeType
    java.lang.Object fromJson(java.lang.Class,java.io.Reader) -> fromJson
    java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.Reader) -> fromJson
    java.lang.Object fromJson(java.lang.Class,java.io.InputStream) -> fromJson
    java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.InputStream) -> fromJson
    java.lang.Object fromJson(java.lang.Class,com.badlogic.gdx.files.FileHandle) -> fromJson
    java.lang.Object fromJson(java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle) -> fromJson
    java.lang.Object fromJson(java.lang.Class,char[],int,int) -> fromJson
    java.lang.Object fromJson(java.lang.Class,java.lang.Class,char[],int,int) -> fromJson
    java.lang.Object fromJson(java.lang.Class,java.lang.String) -> fromJson
    java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.lang.String) -> fromJson
    void readField(java.lang.Object,java.lang.String,com.badlogic.gdx.utils.JsonValue) -> readField
    void readField(java.lang.Object,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> readField
    void readField(java.lang.Object,java.lang.String,java.lang.String,com.badlogic.gdx.utils.JsonValue) -> readField
    void readField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> readField
    void readField(java.lang.Object,com.badlogic.gdx.utils.reflect.Field,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> readField
    void readFields(java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> readFields
    java.lang.Object readValue(java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> readValue
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> readValue
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> readValue
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> readValue
    java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> readValue
    java.lang.Object readValue(java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> readValue
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> readValue
    java.lang.String convertToString(java.lang.Enum) -> convertToString
    java.lang.String convertToString(java.lang.Object) -> convertToString
    java.lang.Object newInstance(java.lang.Class) -> newInstance
    java.lang.String prettyPrint(java.lang.Object) -> prettyPrint
    java.lang.String prettyPrint(java.lang.String) -> prettyPrint
    java.lang.String prettyPrint(java.lang.Object,int) -> prettyPrint
    java.lang.String prettyPrint(java.lang.String,int) -> prettyPrint
    java.lang.String prettyPrint(java.lang.Object,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings) -> prettyPrint
    java.lang.String prettyPrint(java.lang.String,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings) -> prettyPrint
com.badlogic.gdx.utils.Json$FieldMetadata -> com.badlogic.gdx.utils.Json$FieldMetadata:
    com.badlogic.gdx.utils.reflect.Field field -> field
    java.lang.Class elementType -> elementType
    void <init>(com.badlogic.gdx.utils.reflect.Field) -> <init>
com.badlogic.gdx.utils.Json$ReadOnlySerializer -> com.badlogic.gdx.utils.Json$ReadOnlySerializer:
    void <init>() -> <init>
    void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class) -> write
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> read
com.badlogic.gdx.utils.Json$Serializable -> com.badlogic.gdx.utils.Json$Serializable:
    void write(com.badlogic.gdx.utils.Json) -> write
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> read
com.badlogic.gdx.utils.Json$Serializer -> com.badlogic.gdx.utils.Json$Serializer:
    void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class) -> write
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> read
com.badlogic.gdx.utils.JsonReader -> com.badlogic.gdx.utils.JsonReader:
    byte[] _json_actions -> _json_actions
    short[] _json_key_offsets -> _json_key_offsets
    char[] _json_trans_keys -> _json_trans_keys
    byte[] _json_single_lengths -> _json_single_lengths
    byte[] _json_range_lengths -> _json_range_lengths
    short[] _json_index_offsets -> _json_index_offsets
    byte[] _json_indicies -> _json_indicies
    byte[] _json_trans_targs -> _json_trans_targs
    byte[] _json_trans_actions -> _json_trans_actions
    byte[] _json_eof_actions -> _json_eof_actions
    int json_start -> json_start
    int json_first_final -> json_first_final
    int json_error -> json_error
    int json_en_object -> json_en_object
    int json_en_array -> json_en_array
    int json_en_main -> json_en_main
    com.badlogic.gdx.utils.Array elements -> elements
    com.badlogic.gdx.utils.Array lastChild -> lastChild
    com.badlogic.gdx.utils.JsonValue root -> root
    com.badlogic.gdx.utils.JsonValue current -> current
    void <init>() -> <init>
    com.badlogic.gdx.utils.JsonValue parse(java.lang.String) -> parse
    com.badlogic.gdx.utils.JsonValue parse(java.io.Reader) -> parse
    com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream) -> parse
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> parse
    com.badlogic.gdx.utils.JsonValue parse(char[],int,int) -> parse
    byte[] init__json_actions_0() -> init__json_actions_0
    short[] init__json_key_offsets_0() -> init__json_key_offsets_0
    char[] init__json_trans_keys_0() -> init__json_trans_keys_0
    byte[] init__json_single_lengths_0() -> init__json_single_lengths_0
    byte[] init__json_range_lengths_0() -> init__json_range_lengths_0
    short[] init__json_index_offsets_0() -> init__json_index_offsets_0
    byte[] init__json_indicies_0() -> init__json_indicies_0
    byte[] init__json_trans_targs_0() -> init__json_trans_targs_0
    byte[] init__json_trans_actions_0() -> init__json_trans_actions_0
    byte[] init__json_eof_actions_0() -> init__json_eof_actions_0
    void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue) -> addChild
    void startObject(java.lang.String) -> startObject
    void startArray(java.lang.String) -> startArray
    void pop() -> pop
    void string(java.lang.String,java.lang.String) -> string
    void number(java.lang.String,double,java.lang.String) -> number
    void number(java.lang.String,long,java.lang.String) -> number
    void bool(java.lang.String,boolean) -> bool
    java.lang.String unescape(java.lang.String) -> unescape
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.JsonValue -> com.badlogic.gdx.utils.JsonValue:
    com.badlogic.gdx.utils.JsonValue$ValueType type -> type
    java.lang.String stringValue -> stringValue
    double doubleValue -> doubleValue
    long longValue -> longValue
    java.lang.String name -> name
    com.badlogic.gdx.utils.JsonValue child -> child
    com.badlogic.gdx.utils.JsonValue next -> next
    com.badlogic.gdx.utils.JsonValue prev -> prev
    int size -> size
    void <init>(com.badlogic.gdx.utils.JsonValue$ValueType) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(double) -> <init>
    void <init>(long) -> <init>
    void <init>(double,java.lang.String) -> <init>
    void <init>(long,java.lang.String) -> <init>
    void <init>(boolean) -> <init>
    com.badlogic.gdx.utils.JsonValue get(int) -> get
    com.badlogic.gdx.utils.JsonValue get(java.lang.String) -> get
    boolean has(java.lang.String) -> has
    com.badlogic.gdx.utils.JsonValue require(int) -> require
    com.badlogic.gdx.utils.JsonValue require(java.lang.String) -> require
    com.badlogic.gdx.utils.JsonValue remove(int) -> remove
    com.badlogic.gdx.utils.JsonValue remove(java.lang.String) -> remove
    int size() -> size
    java.lang.String asString() -> asString
    float asFloat() -> asFloat
    double asDouble() -> asDouble
    long asLong() -> asLong
    int asInt() -> asInt
    boolean asBoolean() -> asBoolean
    byte asByte() -> asByte
    short asShort() -> asShort
    char asChar() -> asChar
    java.lang.String[] asStringArray() -> asStringArray
    float[] asFloatArray() -> asFloatArray
    double[] asDoubleArray() -> asDoubleArray
    long[] asLongArray() -> asLongArray
    int[] asIntArray() -> asIntArray
    boolean[] asBooleanArray() -> asBooleanArray
    byte[] asByteArray() -> asByteArray
    short[] asShortArray() -> asShortArray
    char[] asCharArray() -> asCharArray
    boolean hasChild(java.lang.String) -> hasChild
    com.badlogic.gdx.utils.JsonValue getChild(java.lang.String) -> getChild
    java.lang.String getString(java.lang.String,java.lang.String) -> getString
    float getFloat(java.lang.String,float) -> getFloat
    double getDouble(java.lang.String,double) -> getDouble
    long getLong(java.lang.String,long) -> getLong
    int getInt(java.lang.String,int) -> getInt
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    byte getByte(java.lang.String,byte) -> getByte
    short getShort(java.lang.String,short) -> getShort
    char getChar(java.lang.String,char) -> getChar
    java.lang.String getString(java.lang.String) -> getString
    float getFloat(java.lang.String) -> getFloat
    double getDouble(java.lang.String) -> getDouble
    long getLong(java.lang.String) -> getLong
    int getInt(java.lang.String) -> getInt
    boolean getBoolean(java.lang.String) -> getBoolean
    byte getByte(java.lang.String) -> getByte
    short getShort(java.lang.String) -> getShort
    char getChar(java.lang.String) -> getChar
    java.lang.String getString(int) -> getString
    float getFloat(int) -> getFloat
    double getDouble(int) -> getDouble
    long getLong(int) -> getLong
    int getInt(int) -> getInt
    boolean getBoolean(int) -> getBoolean
    byte getByte(int) -> getByte
    short getShort(int) -> getShort
    char getChar(int) -> getChar
    com.badlogic.gdx.utils.JsonValue$ValueType type() -> type
    void setType(com.badlogic.gdx.utils.JsonValue$ValueType) -> setType
    boolean isArray() -> isArray
    boolean isObject() -> isObject
    boolean isString() -> isString
    boolean isNumber() -> isNumber
    boolean isDouble() -> isDouble
    boolean isLong() -> isLong
    boolean isBoolean() -> isBoolean
    boolean isNull() -> isNull
    boolean isValue() -> isValue
    java.lang.String name() -> name
    void setName(java.lang.String) -> setName
    com.badlogic.gdx.utils.JsonValue child() -> child
    com.badlogic.gdx.utils.JsonValue next() -> next
    void setNext(com.badlogic.gdx.utils.JsonValue) -> setNext
    com.badlogic.gdx.utils.JsonValue prev() -> prev
    void setPrev(com.badlogic.gdx.utils.JsonValue) -> setPrev
    void set(java.lang.String) -> set
    void set(double,java.lang.String) -> set
    void set(long,java.lang.String) -> set
    void set(boolean) -> set
    java.lang.String toString() -> toString
    java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType,int) -> prettyPrint
    java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings) -> prettyPrint
    void prettyPrint(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings) -> prettyPrint
    boolean isFlat(com.badlogic.gdx.utils.JsonValue) -> isFlat
    boolean isNumeric(com.badlogic.gdx.utils.JsonValue) -> isNumeric
    void indent(int,com.badlogic.gdx.utils.StringBuilder) -> indent
    com.badlogic.gdx.utils.JsonValue$JsonIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.JsonValue$1 -> com.badlogic.gdx.utils.JsonValue$1:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonValue$ValueType -> $SwitchMap$com$badlogic$gdx$utils$JsonValue$ValueType
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.JsonValue$JsonIterator -> com.badlogic.gdx.utils.JsonValue$JsonIterator:
    com.badlogic.gdx.utils.JsonValue entry -> entry
    com.badlogic.gdx.utils.JsonValue current -> current
    com.badlogic.gdx.utils.JsonValue this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.JsonValue) -> <init>
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.JsonValue next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings -> com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings:
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> outputType
    int singleLineColumns -> singleLineColumns
    boolean wrapNumericArrays -> wrapNumericArrays
    void <init>() -> <init>
com.badlogic.gdx.utils.JsonValue$ValueType -> com.badlogic.gdx.utils.JsonValue$ValueType:
    com.badlogic.gdx.utils.JsonValue$ValueType object -> object
    com.badlogic.gdx.utils.JsonValue$ValueType array -> array
    com.badlogic.gdx.utils.JsonValue$ValueType stringValue -> stringValue
    com.badlogic.gdx.utils.JsonValue$ValueType doubleValue -> doubleValue
    com.badlogic.gdx.utils.JsonValue$ValueType longValue -> longValue
    com.badlogic.gdx.utils.JsonValue$ValueType booleanValue -> booleanValue
    com.badlogic.gdx.utils.JsonValue$ValueType nullValue -> nullValue
    com.badlogic.gdx.utils.JsonValue$ValueType[] $VALUES -> $VALUES
    com.badlogic.gdx.utils.JsonValue$ValueType[] values() -> values
    com.badlogic.gdx.utils.JsonValue$ValueType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.JsonWriter -> com.badlogic.gdx.utils.JsonWriter:
    java.io.Writer writer -> writer
    com.badlogic.gdx.utils.Array stack -> stack
    com.badlogic.gdx.utils.JsonWriter$JsonObject current -> current
    boolean named -> named
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> outputType
    boolean quoteLongValues -> quoteLongValues
    void <init>(java.io.Writer) -> <init>
    java.io.Writer getWriter() -> getWriter
    void setOutputType(com.badlogic.gdx.utils.JsonWriter$OutputType) -> setOutputType
    void setQuoteLongValues(boolean) -> setQuoteLongValues
    com.badlogic.gdx.utils.JsonWriter name(java.lang.String) -> name
    com.badlogic.gdx.utils.JsonWriter object() -> object
    com.badlogic.gdx.utils.JsonWriter array() -> array
    com.badlogic.gdx.utils.JsonWriter value(java.lang.Object) -> value
    com.badlogic.gdx.utils.JsonWriter json(java.lang.String) -> json
    void requireCommaOrName() -> requireCommaOrName
    com.badlogic.gdx.utils.JsonWriter object(java.lang.String) -> object
    com.badlogic.gdx.utils.JsonWriter array(java.lang.String) -> array
    com.badlogic.gdx.utils.JsonWriter set(java.lang.String,java.lang.Object) -> set
    com.badlogic.gdx.utils.JsonWriter json(java.lang.String,java.lang.String) -> json
    com.badlogic.gdx.utils.JsonWriter pop() -> pop
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.badlogic.gdx.utils.JsonWriter$1 -> com.badlogic.gdx.utils.JsonWriter$1:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonWriter$OutputType -> $SwitchMap$com$badlogic$gdx$utils$JsonWriter$OutputType
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.JsonWriter$JsonObject -> com.badlogic.gdx.utils.JsonWriter$JsonObject:
    boolean array -> array
    boolean needsComma -> needsComma
    com.badlogic.gdx.utils.JsonWriter this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.JsonWriter,boolean) -> <init>
    void close() -> close
com.badlogic.gdx.utils.JsonWriter$OutputType -> com.badlogic.gdx.utils.JsonWriter$OutputType:
    com.badlogic.gdx.utils.JsonWriter$OutputType json -> json
    com.badlogic.gdx.utils.JsonWriter$OutputType javascript -> javascript
    com.badlogic.gdx.utils.JsonWriter$OutputType minimal -> minimal
    java.util.regex.Pattern javascriptPattern -> javascriptPattern
    java.util.regex.Pattern minimalNamePattern -> minimalNamePattern
    java.util.regex.Pattern minimalValuePattern -> minimalValuePattern
    com.badlogic.gdx.utils.JsonWriter$OutputType[] $VALUES -> $VALUES
    com.badlogic.gdx.utils.JsonWriter$OutputType[] values() -> values
    com.badlogic.gdx.utils.JsonWriter$OutputType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String quoteValue(java.lang.Object) -> quoteValue
    java.lang.String quoteName(java.lang.String) -> quoteName
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.LittleEndianInputStream -> com.badlogic.gdx.utils.LittleEndianInputStream:
    java.io.DataInputStream din -> din
    void <init>(java.io.InputStream) -> <init>
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
com.badlogic.gdx.utils.Logger -> com.badlogic.gdx.utils.Logger:
    int NONE -> NONE
    int ERROR -> ERROR
    int INFO -> INFO
    int DEBUG -> DEBUG
    java.lang.String tag -> tag
    int level -> level
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Exception) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Exception) -> info
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void setLevel(int) -> setLevel
    int getLevel() -> getLevel
com.badlogic.gdx.utils.LongArray -> com.badlogic.gdx.utils.LongArray:
    long[] items -> items
    int size -> size
    boolean ordered -> ordered
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(com.badlogic.gdx.utils.LongArray) -> <init>
    void <init>(long[]) -> <init>
    void <init>(boolean,long[],int,int) -> <init>
    void add(long) -> add
    void addAll(com.badlogic.gdx.utils.LongArray) -> addAll
    void addAll(com.badlogic.gdx.utils.LongArray,int,int) -> addAll
    void addAll(long[]) -> addAll
    void addAll(long[],int,int) -> addAll
    long get(int) -> get
    void set(int,long) -> set
    void incr(int,long) -> incr
    void mul(int,long) -> mul
    void insert(int,long) -> insert
    void swap(int,int) -> swap
    boolean contains(long) -> contains
    int indexOf(long) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    boolean removeValue(long) -> removeValue
    long removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    boolean removeAll(com.badlogic.gdx.utils.LongArray) -> removeAll
    long pop() -> pop
    long peek() -> peek
    long first() -> first
    void clear() -> clear
    long[] shrink() -> shrink
    long[] ensureCapacity(int) -> ensureCapacity
    long[] resize(int) -> resize
    void sort() -> sort
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    long random() -> random
    long[] toArray() -> toArray
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.LongArray with(long[]) -> with
com.badlogic.gdx.utils.LongMap -> com.badlogic.gdx.utils.LongMap:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int EMPTY -> EMPTY
    int size -> size
    long[] keyTable -> keyTable
    java.lang.Object[] valueTable -> valueTable
    int capacity -> capacity
    int stashSize -> stashSize
    java.lang.Object zeroValue -> zeroValue
    boolean hasZeroValue -> hasZeroValue
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.LongMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.LongMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.LongMap$Values values1 -> values1
    com.badlogic.gdx.utils.LongMap$Values values2 -> values2
    com.badlogic.gdx.utils.LongMap$Keys keys1 -> keys1
    com.badlogic.gdx.utils.LongMap$Keys keys2 -> keys2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.LongMap) -> <init>
    java.lang.Object put(long,java.lang.Object) -> put
    void putAll(com.badlogic.gdx.utils.LongMap) -> putAll
    void putResize(long,java.lang.Object) -> putResize
    void push(long,java.lang.Object,int,long,int,long,int,long) -> push
    void putStash(long,java.lang.Object) -> putStash
    java.lang.Object get(long) -> get
    java.lang.Object get(long,java.lang.Object) -> get
    java.lang.Object getStash(long,java.lang.Object) -> getStash
    java.lang.Object remove(long) -> remove
    java.lang.Object removeStash(long) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean containsValue(java.lang.Object,boolean) -> containsValue
    boolean containsKey(long) -> containsKey
    boolean containsKeyStash(long) -> containsKeyStash
    long findKey(java.lang.Object,boolean,long) -> findKey
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(long) -> hash2
    int hash3(long) -> hash3
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.LongMap$Entries entries() -> entries
    com.badlogic.gdx.utils.LongMap$Values values() -> values
    com.badlogic.gdx.utils.LongMap$Keys keys() -> keys
com.badlogic.gdx.utils.LongMap$Entries -> com.badlogic.gdx.utils.LongMap$Entries:
    com.badlogic.gdx.utils.LongMap$Entry entry -> entry
    void <init>(com.badlogic.gdx.utils.LongMap) -> <init>
    com.badlogic.gdx.utils.LongMap$Entry next() -> next
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> reset
    java.lang.Object next() -> next
com.badlogic.gdx.utils.LongMap$Entry -> com.badlogic.gdx.utils.LongMap$Entry:
    long key -> key
    java.lang.Object value -> value
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.LongMap$Keys -> com.badlogic.gdx.utils.LongMap$Keys:
    void <init>(com.badlogic.gdx.utils.LongMap) -> <init>
    long next() -> next
    com.badlogic.gdx.utils.LongArray toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.LongMap$MapIterator -> com.badlogic.gdx.utils.LongMap$MapIterator:
    int INDEX_ILLEGAL -> INDEX_ILLEGAL
    int INDEX_ZERO -> INDEX_ZERO
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.LongMap map -> map
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.LongMap) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
com.badlogic.gdx.utils.LongMap$Values -> com.badlogic.gdx.utils.LongMap$Values:
    void <init>(com.badlogic.gdx.utils.LongMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.NumberUtils -> com.badlogic.gdx.utils.NumberUtils:
    void <init>() -> <init>
    int floatToIntBits(float) -> floatToIntBits
    int floatToRawIntBits(float) -> floatToRawIntBits
    int floatToIntColor(float) -> floatToIntColor
    float intToFloatColor(int) -> intToFloatColor
    float intBitsToFloat(int) -> intBitsToFloat
    long doubleToLongBits(double) -> doubleToLongBits
    double longBitsToDouble(long) -> longBitsToDouble
com.badlogic.gdx.utils.ObjectFloatMap -> com.badlogic.gdx.utils.ObjectFloatMap:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int size -> size
    java.lang.Object[] keyTable -> keyTable
    float[] valueTable -> valueTable
    int capacity -> capacity
    int stashSize -> stashSize
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.ObjectFloatMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.ObjectFloatMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.ObjectFloatMap$Values values1 -> values1
    com.badlogic.gdx.utils.ObjectFloatMap$Values values2 -> values2
    com.badlogic.gdx.utils.ObjectFloatMap$Keys keys1 -> keys1
    com.badlogic.gdx.utils.ObjectFloatMap$Keys keys2 -> keys2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.ObjectFloatMap) -> <init>
    void put(java.lang.Object,float) -> put
    void putAll(com.badlogic.gdx.utils.ObjectFloatMap) -> putAll
    void putResize(java.lang.Object,float) -> putResize
    void push(java.lang.Object,float,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> push
    void putStash(java.lang.Object,float) -> putStash
    float get(java.lang.Object,float) -> get
    float getStash(java.lang.Object,float) -> getStash
    float getAndIncrement(java.lang.Object,float,float) -> getAndIncrement
    float getAndIncrementStash(java.lang.Object,float,float) -> getAndIncrementStash
    float remove(java.lang.Object,float) -> remove
    float removeStash(java.lang.Object,float) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean containsValue(float) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsKeyStash(java.lang.Object) -> containsKeyStash
    java.lang.Object findKey(float) -> findKey
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(int) -> hash2
    int hash3(int) -> hash3
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectFloatMap$Entries iterator() -> iterator
    com.badlogic.gdx.utils.ObjectFloatMap$Entries entries() -> entries
    com.badlogic.gdx.utils.ObjectFloatMap$Values values() -> values
    com.badlogic.gdx.utils.ObjectFloatMap$Keys keys() -> keys
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectFloatMap$Entries -> com.badlogic.gdx.utils.ObjectFloatMap$Entries:
    com.badlogic.gdx.utils.ObjectFloatMap$Entry entry -> entry
    void <init>(com.badlogic.gdx.utils.ObjectFloatMap) -> <init>
    com.badlogic.gdx.utils.ObjectFloatMap$Entry next() -> next
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.ObjectFloatMap$Entries iterator() -> iterator
    void remove() -> remove
    void reset() -> reset
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectFloatMap$Entry -> com.badlogic.gdx.utils.ObjectFloatMap$Entry:
    java.lang.Object key -> key
    float value -> value
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectFloatMap$Keys -> com.badlogic.gdx.utils.ObjectFloatMap$Keys:
    void <init>(com.badlogic.gdx.utils.ObjectFloatMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectFloatMap$Keys iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> toArray
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> toArray
    void remove() -> remove
    void reset() -> reset
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator -> com.badlogic.gdx.utils.ObjectFloatMap$MapIterator:
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.ObjectFloatMap map -> map
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.ObjectFloatMap) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
com.badlogic.gdx.utils.ObjectFloatMap$Values -> com.badlogic.gdx.utils.ObjectFloatMap$Values:
    void <init>(com.badlogic.gdx.utils.ObjectFloatMap) -> <init>
    boolean hasNext() -> hasNext
    float next() -> next
    com.badlogic.gdx.utils.FloatArray toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.ObjectIntMap -> com.badlogic.gdx.utils.ObjectIntMap:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int size -> size
    java.lang.Object[] keyTable -> keyTable
    int[] valueTable -> valueTable
    int capacity -> capacity
    int stashSize -> stashSize
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.ObjectIntMap$Values values1 -> values1
    com.badlogic.gdx.utils.ObjectIntMap$Values values2 -> values2
    com.badlogic.gdx.utils.ObjectIntMap$Keys keys1 -> keys1
    com.badlogic.gdx.utils.ObjectIntMap$Keys keys2 -> keys2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.ObjectIntMap) -> <init>
    void put(java.lang.Object,int) -> put
    void putAll(com.badlogic.gdx.utils.ObjectIntMap) -> putAll
    void putResize(java.lang.Object,int) -> putResize
    void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> push
    void putStash(java.lang.Object,int) -> putStash
    int get(java.lang.Object,int) -> get
    int getStash(java.lang.Object,int) -> getStash
    int getAndIncrement(java.lang.Object,int,int) -> getAndIncrement
    int getAndIncrementStash(java.lang.Object,int,int) -> getAndIncrementStash
    int remove(java.lang.Object,int) -> remove
    int removeStash(java.lang.Object,int) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean containsValue(int) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsKeyStash(java.lang.Object) -> containsKeyStash
    java.lang.Object findKey(int) -> findKey
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(int) -> hash2
    int hash3(int) -> hash3
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectIntMap$Entries iterator() -> iterator
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries() -> entries
    com.badlogic.gdx.utils.ObjectIntMap$Values values() -> values
    com.badlogic.gdx.utils.ObjectIntMap$Keys keys() -> keys
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectIntMap$Entries -> com.badlogic.gdx.utils.ObjectIntMap$Entries:
    com.badlogic.gdx.utils.ObjectIntMap$Entry entry -> entry
    void <init>(com.badlogic.gdx.utils.ObjectIntMap) -> <init>
    com.badlogic.gdx.utils.ObjectIntMap$Entry next() -> next
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.ObjectIntMap$Entries iterator() -> iterator
    void remove() -> remove
    void reset() -> reset
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectIntMap$Entry -> com.badlogic.gdx.utils.ObjectIntMap$Entry:
    java.lang.Object key -> key
    int value -> value
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectIntMap$Keys -> com.badlogic.gdx.utils.ObjectIntMap$Keys:
    void <init>(com.badlogic.gdx.utils.ObjectIntMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectIntMap$Keys iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> toArray
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> toArray
    void remove() -> remove
    void reset() -> reset
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectIntMap$MapIterator -> com.badlogic.gdx.utils.ObjectIntMap$MapIterator:
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.ObjectIntMap map -> map
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.ObjectIntMap) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
com.badlogic.gdx.utils.ObjectIntMap$Values -> com.badlogic.gdx.utils.ObjectIntMap$Values:
    void <init>(com.badlogic.gdx.utils.ObjectIntMap) -> <init>
    boolean hasNext() -> hasNext
    int next() -> next
    com.badlogic.gdx.utils.IntArray toArray() -> toArray
    void remove() -> remove
    void reset() -> reset
com.badlogic.gdx.utils.ObjectMap -> com.badlogic.gdx.utils.ObjectMap:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int size -> size
    java.lang.Object[] keyTable -> keyTable
    java.lang.Object[] valueTable -> valueTable
    int capacity -> capacity
    int stashSize -> stashSize
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> values1
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> values2
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> keys1
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> keys2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object put_internal(java.lang.Object,java.lang.Object) -> put_internal
    void putAll(com.badlogic.gdx.utils.ObjectMap) -> putAll
    void putResize(java.lang.Object,java.lang.Object) -> putResize
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> push
    void putStash(java.lang.Object,java.lang.Object) -> putStash
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getStash(java.lang.Object) -> getStash
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    java.lang.Object getStash(java.lang.Object,java.lang.Object) -> getStash
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeStash(java.lang.Object) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean containsValue(java.lang.Object,boolean) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsKeyStash(java.lang.Object) -> containsKeyStash
    java.lang.Object findKey(java.lang.Object,boolean) -> findKey
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(int) -> hash2
    int hash3(int) -> hash3
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String,boolean) -> toString
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> iterator
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> entries
    com.badlogic.gdx.utils.ObjectMap$Values values() -> values
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> keys
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectMap$Entries -> com.badlogic.gdx.utils.ObjectMap$Entries:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> entry
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> next
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> iterator
    void remove() -> remove
    void reset() -> reset
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectMap$Entry -> com.badlogic.gdx.utils.ObjectMap$Entry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> com.badlogic.gdx.utils.ObjectMap$Keys:
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectMap$Keys iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> toArray
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> toArray
    void remove() -> remove
    void reset() -> reset
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.badlogic.gdx.utils.ObjectMap$MapIterator:
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.ObjectMap map -> map
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap$Values -> com.badlogic.gdx.utils.ObjectMap$Values:
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectMap$Values iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> toArray
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> toArray
    void remove() -> remove
    void reset() -> reset
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectSet -> com.badlogic.gdx.utils.ObjectSet:
    int PRIME1 -> PRIME1
    int PRIME2 -> PRIME2
    int PRIME3 -> PRIME3
    int size -> size
    java.lang.Object[] keyTable -> keyTable
    int capacity -> capacity
    int stashSize -> stashSize
    float loadFactor -> loadFactor
    int hashShift -> hashShift
    int mask -> mask
    int threshold -> threshold
    int stashCapacity -> stashCapacity
    int pushIterations -> pushIterations
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator1 -> iterator1
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator2 -> iterator2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.ObjectSet) -> <init>
    boolean add(java.lang.Object) -> add
    void addAll(com.badlogic.gdx.utils.Array) -> addAll
    void addAll(com.badlogic.gdx.utils.Array,int,int) -> addAll
    void addAll(java.lang.Object[]) -> addAll
    void addAll(java.lang.Object[],int,int) -> addAll
    void addAll(com.badlogic.gdx.utils.ObjectSet) -> addAll
    void addResize(java.lang.Object) -> addResize
    void push(java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> push
    void addStash(java.lang.Object) -> addStash
    boolean remove(java.lang.Object) -> remove
    boolean removeStash(java.lang.Object) -> removeStash
    void removeStashIndex(int) -> removeStashIndex
    void shrink(int) -> shrink
    void clear(int) -> clear
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsKeyStash(java.lang.Object) -> containsKeyStash
    java.lang.Object first() -> first
    void ensureCapacity(int) -> ensureCapacity
    void resize(int) -> resize
    int hash2(int) -> hash2
    int hash3(int) -> hash3
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator() -> iterator
    com.badlogic.gdx.utils.ObjectSet with(java.lang.Object[]) -> with
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator -> com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator:
    boolean hasNext -> hasNext
    com.badlogic.gdx.utils.ObjectSet set -> set
    int nextIndex -> nextIndex
    int currentIndex -> currentIndex
    boolean valid -> valid
    void <init>(com.badlogic.gdx.utils.ObjectSet) -> <init>
    void reset() -> reset
    void findNextIndex() -> findNextIndex
    void remove() -> remove
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> toArray
    com.badlogic.gdx.utils.Array toArray() -> toArray
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedMap -> com.badlogic.gdx.utils.OrderedMap:
    com.badlogic.gdx.utils.Array keys -> keys
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> entries1
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> entries2
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> values1
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> values2
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> keys1
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> keys2
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear(int) -> clear
    void clear() -> clear
    com.badlogic.gdx.utils.Array orderedKeys() -> orderedKeys
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> iterator
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> entries
    com.badlogic.gdx.utils.ObjectMap$Values values() -> values
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> keys
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries -> com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries:
    com.badlogic.gdx.utils.Array keys -> keys
    void <init>(com.badlogic.gdx.utils.OrderedMap) -> <init>
    void reset() -> reset
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys -> com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys:
    com.badlogic.gdx.utils.Array keys -> keys
    void <init>(com.badlogic.gdx.utils.OrderedMap) -> <init>
    void reset() -> reset
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues -> com.badlogic.gdx.utils.OrderedMap$OrderedMapValues:
    com.badlogic.gdx.utils.Array keys -> keys
    void <init>(com.badlogic.gdx.utils.OrderedMap) -> <init>
    void reset() -> reset
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.OrderedSet -> com.badlogic.gdx.utils.OrderedSet:
    com.badlogic.gdx.utils.Array items -> items
    com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator iterator1 -> iterator1
    com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator iterator2 -> iterator2
    void <init>() -> <init>
    void <init>(int,float) -> <init>
    void <init>(int) -> <init>
    void <init>(com.badlogic.gdx.utils.OrderedSet) -> <init>
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    void clear(int) -> clear
    void clear() -> clear
    com.badlogic.gdx.utils.Array orderedItems() -> orderedItems
    com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator iterator() -> iterator
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator -> com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator:
    com.badlogic.gdx.utils.Array items -> items
    void <init>(com.badlogic.gdx.utils.OrderedSet) -> <init>
    void reset() -> reset
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.PauseableThread -> com.badlogic.gdx.utils.PauseableThread:
    java.lang.Runnable runnable -> runnable
    boolean paused -> paused
    boolean exit -> exit
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
    void onPause() -> onPause
    void onResume() -> onResume
    boolean isPaused() -> isPaused
    void stopThread() -> stopThread
com.badlogic.gdx.utils.PerformanceCounter -> com.badlogic.gdx.utils.PerformanceCounter:
    float nano2seconds -> nano2seconds
    long startTime -> startTime
    long lastTick -> lastTick
    com.badlogic.gdx.math.FloatCounter time -> time
    com.badlogic.gdx.math.FloatCounter load -> load
    java.lang.String name -> name
    float current -> current
    boolean valid -> valid
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void tick() -> tick
    void tick(float) -> tick
    void start() -> start
    void stop() -> stop
    void reset() -> reset
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.StringBuilder toString(com.badlogic.gdx.utils.StringBuilder) -> toString
com.badlogic.gdx.utils.PerformanceCounters -> com.badlogic.gdx.utils.PerformanceCounters:
    float nano2seconds -> nano2seconds
    long lastTick -> lastTick
    com.badlogic.gdx.utils.Array counters -> counters
    void <init>() -> <init>
    com.badlogic.gdx.utils.PerformanceCounter add(java.lang.String,int) -> add
    com.badlogic.gdx.utils.PerformanceCounter add(java.lang.String) -> add
    void tick() -> tick
    void tick(float) -> tick
    com.badlogic.gdx.utils.StringBuilder toString(com.badlogic.gdx.utils.StringBuilder) -> toString
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.Pool:
    int max -> max
    int peak -> peak
    com.badlogic.gdx.utils.Array freeObjects -> freeObjects
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    java.lang.Object newObject() -> newObject
    java.lang.Object obtain() -> obtain
    void free(java.lang.Object) -> free
    void freeAll(com.badlogic.gdx.utils.Array) -> freeAll
    void clear() -> clear
    int getFree() -> getFree
com.badlogic.gdx.utils.Pool$Poolable -> com.badlogic.gdx.utils.Pool$Poolable:
    void reset() -> reset
com.badlogic.gdx.utils.PooledLinkedList -> com.badlogic.gdx.utils.PooledLinkedList:
    com.badlogic.gdx.utils.PooledLinkedList$Item head -> head
    com.badlogic.gdx.utils.PooledLinkedList$Item tail -> tail
    com.badlogic.gdx.utils.PooledLinkedList$Item iter -> iter
    com.badlogic.gdx.utils.PooledLinkedList$Item curr -> curr
    int size -> size
    com.badlogic.gdx.utils.Pool pool -> pool
    void <init>(int) -> <init>
    void add(java.lang.Object) -> add
    void iter() -> iter
    void iterReverse() -> iterReverse
    java.lang.Object next() -> next
    java.lang.Object previous() -> previous
    void remove() -> remove
    void clear() -> clear
com.badlogic.gdx.utils.PooledLinkedList$1 -> com.badlogic.gdx.utils.PooledLinkedList$1:
    com.badlogic.gdx.utils.PooledLinkedList this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.PooledLinkedList,int,int) -> <init>
    com.badlogic.gdx.utils.PooledLinkedList$Item newObject() -> newObject
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.utils.PooledLinkedList$Item -> com.badlogic.gdx.utils.PooledLinkedList$Item:
    java.lang.Object payload -> payload
    com.badlogic.gdx.utils.PooledLinkedList$Item next -> next
    com.badlogic.gdx.utils.PooledLinkedList$Item prev -> prev
    void <init>() -> <init>
com.badlogic.gdx.utils.Pools -> com.badlogic.gdx.utils.Pools:
    com.badlogic.gdx.utils.ObjectMap typePools -> typePools
    com.badlogic.gdx.utils.Pool get(java.lang.Class,int) -> get
    com.badlogic.gdx.utils.Pool get(java.lang.Class) -> get
    void set(java.lang.Class,com.badlogic.gdx.utils.Pool) -> set
    java.lang.Object obtain(java.lang.Class) -> obtain
    void free(java.lang.Object) -> free
    void freeAll(com.badlogic.gdx.utils.Array) -> freeAll
    void freeAll(com.badlogic.gdx.utils.Array,boolean) -> freeAll
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.Predicate -> com.badlogic.gdx.utils.Predicate:
    boolean evaluate(java.lang.Object) -> evaluate
com.badlogic.gdx.utils.Predicate$PredicateIterable -> com.badlogic.gdx.utils.Predicate$PredicateIterable:
    java.lang.Iterable iterable -> iterable
    com.badlogic.gdx.utils.Predicate predicate -> predicate
    com.badlogic.gdx.utils.Predicate$PredicateIterator iterator -> iterator
    void <init>(java.lang.Iterable,com.badlogic.gdx.utils.Predicate) -> <init>
    void set(java.lang.Iterable,com.badlogic.gdx.utils.Predicate) -> set
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.Predicate$PredicateIterator -> com.badlogic.gdx.utils.Predicate$PredicateIterator:
    java.util.Iterator iterator -> iterator
    com.badlogic.gdx.utils.Predicate predicate -> predicate
    boolean end -> end
    boolean peeked -> peeked
    java.lang.Object next -> next
    void <init>(java.lang.Iterable,com.badlogic.gdx.utils.Predicate) -> <init>
    void <init>(java.util.Iterator,com.badlogic.gdx.utils.Predicate) -> <init>
    void set(java.lang.Iterable,com.badlogic.gdx.utils.Predicate) -> set
    void set(java.util.Iterator,com.badlogic.gdx.utils.Predicate) -> set
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.PropertiesUtils -> com.badlogic.gdx.utils.PropertiesUtils:
    int NONE -> NONE
    int SLASH -> SLASH
    int UNICODE -> UNICODE
    int CONTINUE -> CONTINUE
    int KEY_DONE -> KEY_DONE
    int IGNORE -> IGNORE
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    void <init>() -> <init>
    void load(com.badlogic.gdx.utils.ObjectMap,java.io.Reader) -> load
    void store(com.badlogic.gdx.utils.ObjectMap,java.io.Writer,java.lang.String) -> store
    void storeImpl(com.badlogic.gdx.utils.ObjectMap,java.io.Writer,java.lang.String,boolean) -> storeImpl
    void dumpString(com.badlogic.gdx.utils.StringBuilder,java.lang.String,boolean,boolean) -> dumpString
    void writeComment(java.io.Writer,java.lang.String) -> writeComment
com.badlogic.gdx.utils.QuickSelect -> com.badlogic.gdx.utils.QuickSelect:
    java.lang.Object[] array -> array
    java.util.Comparator comp -> comp
    void <init>() -> <init>
    int select(java.lang.Object[],java.util.Comparator,int,int) -> select
    int partition(int,int,int) -> partition
    int recursiveSelect(int,int,int) -> recursiveSelect
    int medianOfThreePivot(int,int) -> medianOfThreePivot
    void swap(int,int) -> swap
com.badlogic.gdx.utils.ReflectionPool -> com.badlogic.gdx.utils.ReflectionPool:
    com.badlogic.gdx.utils.reflect.Constructor constructor -> constructor
    void <init>(java.lang.Class) -> <init>
    void <init>(java.lang.Class,int) -> <init>
    void <init>(java.lang.Class,int,int) -> <init>
    com.badlogic.gdx.utils.reflect.Constructor findConstructor(java.lang.Class) -> findConstructor
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.utils.Scaling -> com.badlogic.gdx.utils.Scaling:
    com.badlogic.gdx.utils.Scaling fit -> fit
    com.badlogic.gdx.utils.Scaling fill -> fill
    com.badlogic.gdx.utils.Scaling fillX -> fillX
    com.badlogic.gdx.utils.Scaling fillY -> fillY
    com.badlogic.gdx.utils.Scaling stretch -> stretch
    com.badlogic.gdx.utils.Scaling stretchX -> stretchX
    com.badlogic.gdx.utils.Scaling stretchY -> stretchY
    com.badlogic.gdx.utils.Scaling none -> none
    com.badlogic.gdx.math.Vector2 temp -> temp
    com.badlogic.gdx.utils.Scaling[] $VALUES -> $VALUES
    com.badlogic.gdx.utils.Scaling[] values() -> values
    com.badlogic.gdx.utils.Scaling valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.badlogic.gdx.math.Vector2 apply(float,float,float,float) -> apply
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.Scaling$1 -> com.badlogic.gdx.utils.Scaling$1:
    int[] $SwitchMap$com$badlogic$gdx$utils$Scaling -> $SwitchMap$com$badlogic$gdx$utils$Scaling
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.ScreenUtils -> com.badlogic.gdx.utils.ScreenUtils:
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g2d.TextureRegion getFrameBufferTexture() -> getFrameBufferTexture
    com.badlogic.gdx.graphics.g2d.TextureRegion getFrameBufferTexture(int,int,int,int) -> getFrameBufferTexture
    com.badlogic.gdx.graphics.Pixmap getFrameBufferPixmap(int,int,int,int) -> getFrameBufferPixmap
    byte[] getFrameBufferPixels(boolean) -> getFrameBufferPixels
    byte[] getFrameBufferPixels(int,int,int,int,boolean) -> getFrameBufferPixels
com.badlogic.gdx.utils.Select -> com.badlogic.gdx.utils.Select:
    com.badlogic.gdx.utils.Select instance -> instance
    com.badlogic.gdx.utils.QuickSelect quickSelect -> quickSelect
    void <init>() -> <init>
    com.badlogic.gdx.utils.Select instance() -> instance
    java.lang.Object select(java.lang.Object[],java.util.Comparator,int,int) -> select
    int selectIndex(java.lang.Object[],java.util.Comparator,int,int) -> selectIndex
    int fastMin(java.lang.Object[],java.util.Comparator,int) -> fastMin
    int fastMax(java.lang.Object[],java.util.Comparator,int) -> fastMax
com.badlogic.gdx.utils.SerializationException -> com.badlogic.gdx.utils.SerializationException:
    java.lang.StringBuffer trace -> trace
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    boolean causedBy(java.lang.Class) -> causedBy
    boolean causedBy(java.lang.Throwable,java.lang.Class) -> causedBy
    java.lang.String getMessage() -> getMessage
    void addTrace(java.lang.String) -> addTrace
com.badlogic.gdx.utils.SharedLibraryLoader -> com.badlogic.gdx.utils.SharedLibraryLoader:
    boolean isWindows -> isWindows
    boolean isLinux -> isLinux
    boolean isMac -> isMac
    boolean isIos -> isIos
    boolean isAndroid -> isAndroid
    boolean isARM -> isARM
    boolean is64Bit -> is64Bit
    java.lang.String abi -> abi
    java.util.HashSet loadedLibraries -> loadedLibraries
    java.lang.String nativesJar -> nativesJar
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String crc(java.io.InputStream) -> crc
    java.lang.String mapLibraryName(java.lang.String) -> mapLibraryName
    void load(java.lang.String) -> load
    java.io.InputStream readFile(java.lang.String) -> readFile
    java.io.File extractFile(java.lang.String,java.lang.String) -> extractFile
    java.io.File getExtractedFile(java.lang.String,java.lang.String) -> getExtractedFile
    boolean canWrite(java.io.File) -> canWrite
    boolean canExecute(java.io.File) -> canExecute
    java.io.File extractFile(java.lang.String,java.lang.String,java.io.File) -> extractFile
    void loadFile(java.lang.String) -> loadFile
    java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File) -> loadFile
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.ShortArray -> com.badlogic.gdx.utils.ShortArray:
    short[] items -> items
    int size -> size
    boolean ordered -> ordered
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(com.badlogic.gdx.utils.ShortArray) -> <init>
    void <init>(short[]) -> <init>
    void <init>(boolean,short[],int,int) -> <init>
    void add(int) -> add
    void add(short) -> add
    void addAll(com.badlogic.gdx.utils.ShortArray) -> addAll
    void addAll(com.badlogic.gdx.utils.ShortArray,int,int) -> addAll
    void addAll(short[]) -> addAll
    void addAll(short[],int,int) -> addAll
    short get(int) -> get
    void set(int,short) -> set
    void incr(int,short) -> incr
    void mul(int,short) -> mul
    void insert(int,short) -> insert
    void swap(int,int) -> swap
    boolean contains(short) -> contains
    int indexOf(short) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    boolean removeValue(short) -> removeValue
    short removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    boolean removeAll(com.badlogic.gdx.utils.ShortArray) -> removeAll
    short pop() -> pop
    short peek() -> peek
    short first() -> first
    void clear() -> clear
    short[] shrink() -> shrink
    short[] ensureCapacity(int) -> ensureCapacity
    short[] resize(int) -> resize
    void sort() -> sort
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    short random() -> random
    short[] toArray() -> toArray
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.ShortArray with(short[]) -> with
com.badlogic.gdx.utils.SnapshotArray -> com.badlogic.gdx.utils.SnapshotArray:
    java.lang.Object[] snapshot -> snapshot
    java.lang.Object[] recycled -> recycled
    int snapshots -> snapshots
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
    void <init>(boolean,int,java.lang.Class) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(boolean,java.lang.Object[],int,int) -> <init>
    void <init>(java.lang.Class) -> <init>
    void <init>(int) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    java.lang.Object[] begin() -> begin
    void end() -> end
    void modified() -> modified
    void set(int,java.lang.Object) -> set
    void insert(int,java.lang.Object) -> insert
    void swap(int,int) -> swap
    boolean removeValue(java.lang.Object,boolean) -> removeValue
    java.lang.Object removeIndex(int) -> removeIndex
    void removeRange(int,int) -> removeRange
    boolean removeAll(com.badlogic.gdx.utils.Array,boolean) -> removeAll
    java.lang.Object pop() -> pop
    void clear() -> clear
    void sort() -> sort
    void sort(java.util.Comparator) -> sort
    void reverse() -> reverse
    void shuffle() -> shuffle
    void truncate(int) -> truncate
    com.badlogic.gdx.utils.SnapshotArray with(java.lang.Object[]) -> with
com.badlogic.gdx.utils.Sort -> com.badlogic.gdx.utils.Sort:
    com.badlogic.gdx.utils.Sort instance -> instance
    com.badlogic.gdx.utils.TimSort timSort -> timSort
    com.badlogic.gdx.utils.ComparableTimSort comparableTimSort -> comparableTimSort
    void <init>() -> <init>
    void sort(com.badlogic.gdx.utils.Array) -> sort
    void sort(java.lang.Object[]) -> sort
    void sort(java.lang.Object[],int,int) -> sort
    void sort(com.badlogic.gdx.utils.Array,java.util.Comparator) -> sort
    void sort(java.lang.Object[],java.util.Comparator) -> sort
    void sort(java.lang.Object[],java.util.Comparator,int,int) -> sort
    com.badlogic.gdx.utils.Sort instance() -> instance
com.badlogic.gdx.utils.SortedIntList -> com.badlogic.gdx.utils.SortedIntList:
    com.badlogic.gdx.utils.SortedIntList$NodePool nodePool -> nodePool
    com.badlogic.gdx.utils.SortedIntList$Iterator iterator -> iterator
    int size -> size
    com.badlogic.gdx.utils.SortedIntList$Node first -> first
    void <init>() -> <init>
    java.lang.Object insert(int,java.lang.Object) -> insert
    java.lang.Object get(int) -> get
    void clear() -> clear
    int size() -> size
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.SortedIntList$Iterator -> com.badlogic.gdx.utils.SortedIntList$Iterator:
    com.badlogic.gdx.utils.SortedIntList$Node position -> position
    com.badlogic.gdx.utils.SortedIntList$Node previousPosition -> previousPosition
    com.badlogic.gdx.utils.SortedIntList this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.SortedIntList) -> <init>
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.SortedIntList$Node next() -> next
    void remove() -> remove
    com.badlogic.gdx.utils.SortedIntList$Iterator reset() -> reset
    java.lang.Object next() -> next
com.badlogic.gdx.utils.SortedIntList$Node -> com.badlogic.gdx.utils.SortedIntList$Node:
    com.badlogic.gdx.utils.SortedIntList$Node p -> p
    com.badlogic.gdx.utils.SortedIntList$Node n -> n
    java.lang.Object value -> value
    int index -> index
    void <init>() -> <init>
com.badlogic.gdx.utils.SortedIntList$NodePool -> com.badlogic.gdx.utils.SortedIntList$NodePool:
    void <init>() -> <init>
    com.badlogic.gdx.utils.SortedIntList$Node newObject() -> newObject
    com.badlogic.gdx.utils.SortedIntList$Node obtain(com.badlogic.gdx.utils.SortedIntList$Node,com.badlogic.gdx.utils.SortedIntList$Node,java.lang.Object,int) -> obtain
    java.lang.Object newObject() -> newObject
com.badlogic.gdx.utils.StreamUtils -> com.badlogic.gdx.utils.StreamUtils:
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    byte[] EMPTY_BYTES -> EMPTY_BYTES
    void <init>() -> <init>
    void copyStream(java.io.InputStream,java.io.OutputStream) -> copyStream
    void copyStream(java.io.InputStream,java.io.OutputStream,int) -> copyStream
    void copyStream(java.io.InputStream,java.io.OutputStream,byte[]) -> copyStream
    void copyStream(java.io.InputStream,java.nio.ByteBuffer) -> copyStream
    void copyStream(java.io.InputStream,java.nio.ByteBuffer,int) -> copyStream
    int copyStream(java.io.InputStream,java.nio.ByteBuffer,byte[]) -> copyStream
    byte[] copyStreamToByteArray(java.io.InputStream) -> copyStreamToByteArray
    byte[] copyStreamToByteArray(java.io.InputStream,int) -> copyStreamToByteArray
    java.lang.String copyStreamToString(java.io.InputStream) -> copyStreamToString
    java.lang.String copyStreamToString(java.io.InputStream,int) -> copyStreamToString
    java.lang.String copyStreamToString(java.io.InputStream,int,java.lang.String) -> copyStreamToString
    void closeQuietly(java.io.Closeable) -> closeQuietly
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream -> com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream:
    void <init>(int) -> <init>
    byte[] toByteArray() -> toByteArray
    byte[] getBuffer() -> getBuffer
com.badlogic.gdx.utils.StringBuilder -> com.badlogic.gdx.utils.StringBuilder:
    int INITIAL_CAPACITY -> INITIAL_CAPACITY
    char[] chars -> chars
    int length -> length
    char[] digits -> digits
    int numChars(int,int) -> numChars
    int numChars(long,int) -> numChars
    char[] getValue() -> getValue
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(java.lang.CharSequence) -> <init>
    void <init>(com.badlogic.gdx.utils.StringBuilder) -> <init>
    void <init>(java.lang.String) -> <init>
    void enlargeBuffer(int) -> enlargeBuffer
    void appendNull() -> appendNull
    void append0(char[]) -> append0
    void append0(char[],int,int) -> append0
    void append0(char) -> append0
    void append0(java.lang.String) -> append0
    void append0(java.lang.CharSequence,int,int) -> append0
    int capacity() -> capacity
    char charAt(int) -> charAt
    void delete0(int,int) -> delete0
    void deleteCharAt0(int) -> deleteCharAt0
    void ensureCapacity(int) -> ensureCapacity
    void getChars(int,int,char[],int) -> getChars
    void insert0(int,char[]) -> insert0
    void insert0(int,char[],int,int) -> insert0
    void insert0(int,char) -> insert0
    void insert0(int,java.lang.String) -> insert0
    void insert0(int,java.lang.CharSequence,int,int) -> insert0
    int length() -> length
    void move(int,int) -> move
    void replace0(int,int,java.lang.String) -> replace0
    void reverse0() -> reverse0
    void setCharAt(int,char) -> setCharAt
    void setLength(int) -> setLength
    java.lang.String substring(int) -> substring
    java.lang.String substring(int,int) -> substring
    java.lang.String toString() -> toString
    java.lang.CharSequence subSequence(int,int) -> subSequence
    int indexOf(java.lang.String) -> indexOf
    int indexOf(java.lang.String,int) -> indexOf
    int lastIndexOf(java.lang.String) -> lastIndexOf
    int lastIndexOf(java.lang.String,int) -> lastIndexOf
    void trimToSize() -> trimToSize
    int codePointAt(int) -> codePointAt
    int codePointBefore(int) -> codePointBefore
    int codePointCount(int,int) -> codePointCount
    int offsetByCodePoints(int,int) -> offsetByCodePoints
    com.badlogic.gdx.utils.StringBuilder append(boolean) -> append
    com.badlogic.gdx.utils.StringBuilder append(char) -> append
    com.badlogic.gdx.utils.StringBuilder append(int) -> append
    com.badlogic.gdx.utils.StringBuilder append(int,int) -> append
    com.badlogic.gdx.utils.StringBuilder append(int,int,char) -> append
    com.badlogic.gdx.utils.StringBuilder append(long) -> append
    com.badlogic.gdx.utils.StringBuilder append(long,int) -> append
    com.badlogic.gdx.utils.StringBuilder append(long,int,char) -> append
    com.badlogic.gdx.utils.StringBuilder append(float) -> append
    com.badlogic.gdx.utils.StringBuilder append(double) -> append
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> append
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> append
    com.badlogic.gdx.utils.StringBuilder append(char[]) -> append
    com.badlogic.gdx.utils.StringBuilder append(char[],int,int) -> append
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence) -> append
    com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder) -> append
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence,int,int) -> append
    com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder,int,int) -> append
    com.badlogic.gdx.utils.StringBuilder appendCodePoint(int) -> appendCodePoint
    com.badlogic.gdx.utils.StringBuilder delete(int,int) -> delete
    com.badlogic.gdx.utils.StringBuilder deleteCharAt(int) -> deleteCharAt
    com.badlogic.gdx.utils.StringBuilder insert(int,boolean) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,char) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,int) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,long) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,float) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,double) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.Object) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.String) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,char[]) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,char[],int,int) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence) -> insert
    com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence,int,int) -> insert
    com.badlogic.gdx.utils.StringBuilder replace(int,int,java.lang.String) -> replace
    com.badlogic.gdx.utils.StringBuilder reverse() -> reverse
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.TextFormatter -> com.badlogic.gdx.utils.TextFormatter:
    java.text.MessageFormat messageFormat -> messageFormat
    com.badlogic.gdx.utils.StringBuilder buffer -> buffer
    void <init>(java.util.Locale,boolean) -> <init>
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    java.lang.String replaceEscapeChars(java.lang.String) -> replaceEscapeChars
    java.lang.String simpleFormat(java.lang.String,java.lang.Object[]) -> simpleFormat
com.badlogic.gdx.utils.TimSort -> com.badlogic.gdx.utils.TimSort:
    int MIN_MERGE -> MIN_MERGE
    java.lang.Object[] a -> a
    java.util.Comparator c -> c
    int MIN_GALLOP -> MIN_GALLOP
    int minGallop -> minGallop
    int INITIAL_TMP_STORAGE_LENGTH -> INITIAL_TMP_STORAGE_LENGTH
    java.lang.Object[] tmp -> tmp
    int tmpCount -> tmpCount
    int stackSize -> stackSize
    int[] runBase -> runBase
    int[] runLen -> runLen
    boolean DEBUG -> DEBUG
    void <init>() -> <init>
    void doSort(java.lang.Object[],java.util.Comparator,int,int) -> doSort
    void <init>(java.lang.Object[],java.util.Comparator) -> <init>
    void sort(java.lang.Object[],java.util.Comparator) -> sort
    void sort(java.lang.Object[],int,int,java.util.Comparator) -> sort
    void binarySort(java.lang.Object[],int,int,int,java.util.Comparator) -> binarySort
    int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator) -> countRunAndMakeAscending
    void reverseRange(java.lang.Object[],int,int) -> reverseRange
    int minRunLength(int) -> minRunLength
    void pushRun(int,int) -> pushRun
    void mergeCollapse() -> mergeCollapse
    void mergeForceCollapse() -> mergeForceCollapse
    void mergeAt(int) -> mergeAt
    int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> gallopLeft
    int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> gallopRight
    void mergeLo(int,int,int,int) -> mergeLo
    void mergeHi(int,int,int,int) -> mergeHi
    java.lang.Object[] ensureCapacity(int) -> ensureCapacity
    void rangeCheck(int,int,int) -> rangeCheck
com.badlogic.gdx.utils.TimeUtils -> com.badlogic.gdx.utils.TimeUtils:
    long nanosPerMilli -> nanosPerMilli
    void <init>() -> <init>
    long nanoTime() -> nanoTime
    long millis() -> millis
    long nanosToMillis(long) -> nanosToMillis
    long millisToNanos(long) -> millisToNanos
    long timeSinceNanos(long) -> timeSinceNanos
    long timeSinceMillis(long) -> timeSinceMillis
com.badlogic.gdx.utils.Timer -> com.badlogic.gdx.utils.Timer:
    com.badlogic.gdx.utils.Array instances -> instances
    com.badlogic.gdx.utils.Timer$TimerThread thread -> thread
    int CANCELLED -> CANCELLED
    int FOREVER -> FOREVER
    com.badlogic.gdx.utils.Timer instance -> instance
    com.badlogic.gdx.utils.Array tasks -> tasks
    com.badlogic.gdx.utils.Timer instance() -> instance
    void <init>() -> <init>
    com.badlogic.gdx.utils.Timer$Task postTask(com.badlogic.gdx.utils.Timer$Task) -> postTask
    com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float) -> scheduleTask
    com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float) -> scheduleTask
    com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float,int) -> scheduleTask
    void stop() -> stop
    void start() -> start
    void clear() -> clear
    long update(long,long) -> update
    void delay(long) -> delay
    void wake() -> wake
    com.badlogic.gdx.utils.Timer$Task post(com.badlogic.gdx.utils.Timer$Task) -> post
    com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float) -> schedule
    com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float) -> schedule
    com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float,int) -> schedule
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.Timer$Task -> com.badlogic.gdx.utils.Timer$Task:
    long executeTimeMillis -> executeTimeMillis
    long intervalMillis -> intervalMillis
    int repeatCount -> repeatCount
    void <init>() -> <init>
    void run() -> run
    void cancel() -> cancel
    boolean isScheduled() -> isScheduled
    long getExecuteTimeMillis() -> getExecuteTimeMillis
com.badlogic.gdx.utils.Timer$TimerThread -> com.badlogic.gdx.utils.Timer$TimerThread:
    com.badlogic.gdx.Application app -> app
    long pauseMillis -> pauseMillis
    void <init>() -> <init>
    void run() -> run
    void resume() -> resume
    void pause() -> pause
    void dispose() -> dispose
com.badlogic.gdx.utils.UBJsonReader -> com.badlogic.gdx.utils.UBJsonReader:
    boolean oldFormat -> oldFormat
    void <init>() -> <init>
    com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream) -> parse
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> parse
    com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream) -> parse
    com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream,byte) -> parse
    com.badlogic.gdx.utils.JsonValue parseArray(java.io.DataInputStream) -> parseArray
    com.badlogic.gdx.utils.JsonValue parseObject(java.io.DataInputStream) -> parseObject
    com.badlogic.gdx.utils.JsonValue parseData(java.io.DataInputStream,byte) -> parseData
    java.lang.String parseString(java.io.DataInputStream,byte) -> parseString
    java.lang.String parseString(java.io.DataInputStream,boolean,byte) -> parseString
    long parseSize(java.io.DataInputStream,boolean,long) -> parseSize
    long parseSize(java.io.DataInputStream,byte,boolean,long) -> parseSize
    short readUChar(java.io.DataInputStream) -> readUChar
    int readUShort(java.io.DataInputStream) -> readUShort
    long readUInt(java.io.DataInputStream) -> readUInt
    java.lang.String readString(java.io.DataInputStream,long) -> readString
com.badlogic.gdx.utils.UBJsonWriter -> com.badlogic.gdx.utils.UBJsonWriter:
    java.io.DataOutputStream out -> out
    com.badlogic.gdx.utils.UBJsonWriter$JsonObject current -> current
    boolean named -> named
    com.badlogic.gdx.utils.Array stack -> stack
    void <init>(java.io.OutputStream) -> <init>
    com.badlogic.gdx.utils.UBJsonWriter object() -> object
    com.badlogic.gdx.utils.UBJsonWriter object(java.lang.String) -> object
    com.badlogic.gdx.utils.UBJsonWriter array() -> array
    com.badlogic.gdx.utils.UBJsonWriter array(java.lang.String) -> array
    com.badlogic.gdx.utils.UBJsonWriter name(java.lang.String) -> name
    com.badlogic.gdx.utils.UBJsonWriter value(byte) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(short) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(int) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(long) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(float) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(double) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(boolean) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(char) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(java.lang.String) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(byte[]) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(short[]) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(int[]) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(long[]) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(float[]) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(double[]) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(boolean[]) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(char[]) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(java.lang.String[]) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(com.badlogic.gdx.utils.JsonValue) -> value
    com.badlogic.gdx.utils.UBJsonWriter value(java.lang.Object) -> value
    com.badlogic.gdx.utils.UBJsonWriter value() -> value
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,byte) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,short) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,int) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,long) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,float) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,double) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,boolean) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,char) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,java.lang.String) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,byte[]) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,short[]) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,int[]) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,long[]) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,float[]) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,double[]) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,boolean[]) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,char[]) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String,java.lang.String[]) -> set
    com.badlogic.gdx.utils.UBJsonWriter set(java.lang.String) -> set
    void checkName() -> checkName
    com.badlogic.gdx.utils.UBJsonWriter pop() -> pop
    com.badlogic.gdx.utils.UBJsonWriter pop(boolean) -> pop
    void flush() -> flush
    void close() -> close
com.badlogic.gdx.utils.UBJsonWriter$JsonObject -> com.badlogic.gdx.utils.UBJsonWriter$JsonObject:
    boolean array -> array
    com.badlogic.gdx.utils.UBJsonWriter this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.UBJsonWriter,boolean) -> <init>
    void close() -> close
com.badlogic.gdx.utils.XmlReader -> com.badlogic.gdx.utils.XmlReader:
    com.badlogic.gdx.utils.Array elements -> elements
    com.badlogic.gdx.utils.XmlReader$Element root -> root
    com.badlogic.gdx.utils.XmlReader$Element current -> current
    com.badlogic.gdx.utils.StringBuilder textBuffer -> textBuffer
    byte[] _xml_actions -> _xml_actions
    byte[] _xml_key_offsets -> _xml_key_offsets
    char[] _xml_trans_keys -> _xml_trans_keys
    byte[] _xml_single_lengths -> _xml_single_lengths
    byte[] _xml_range_lengths -> _xml_range_lengths
    short[] _xml_index_offsets -> _xml_index_offsets
    byte[] _xml_indicies -> _xml_indicies
    byte[] _xml_trans_targs -> _xml_trans_targs
    byte[] _xml_trans_actions -> _xml_trans_actions
    int xml_start -> xml_start
    int xml_first_final -> xml_first_final
    int xml_error -> xml_error
    int xml_en_elementBody -> xml_en_elementBody
    int xml_en_main -> xml_en_main
    void <init>() -> <init>
    com.badlogic.gdx.utils.XmlReader$Element parse(java.lang.String) -> parse
    com.badlogic.gdx.utils.XmlReader$Element parse(java.io.Reader) -> parse
    com.badlogic.gdx.utils.XmlReader$Element parse(java.io.InputStream) -> parse
    com.badlogic.gdx.utils.XmlReader$Element parse(com.badlogic.gdx.files.FileHandle) -> parse
    com.badlogic.gdx.utils.XmlReader$Element parse(char[],int,int) -> parse
    byte[] init__xml_actions_0() -> init__xml_actions_0
    byte[] init__xml_key_offsets_0() -> init__xml_key_offsets_0
    char[] init__xml_trans_keys_0() -> init__xml_trans_keys_0
    byte[] init__xml_single_lengths_0() -> init__xml_single_lengths_0
    byte[] init__xml_range_lengths_0() -> init__xml_range_lengths_0
    short[] init__xml_index_offsets_0() -> init__xml_index_offsets_0
    byte[] init__xml_indicies_0() -> init__xml_indicies_0
    byte[] init__xml_trans_targs_0() -> init__xml_trans_targs_0
    byte[] init__xml_trans_actions_0() -> init__xml_trans_actions_0
    void open(java.lang.String) -> open
    void attribute(java.lang.String,java.lang.String) -> attribute
    java.lang.String entity(java.lang.String) -> entity
    void text(java.lang.String) -> text
    void close() -> close
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.XmlReader$Element -> com.badlogic.gdx.utils.XmlReader$Element:
    java.lang.String name -> name
    com.badlogic.gdx.utils.ObjectMap attributes -> attributes
    com.badlogic.gdx.utils.Array children -> children
    java.lang.String text -> text
    com.badlogic.gdx.utils.XmlReader$Element parent -> parent
    void <init>(java.lang.String,com.badlogic.gdx.utils.XmlReader$Element) -> <init>
    java.lang.String getName() -> getName
    com.badlogic.gdx.utils.ObjectMap getAttributes() -> getAttributes
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    java.lang.String getAttribute(java.lang.String,java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.String) -> setAttribute
    int getChildCount() -> getChildCount
    com.badlogic.gdx.utils.XmlReader$Element getChild(int) -> getChild
    void addChild(com.badlogic.gdx.utils.XmlReader$Element) -> addChild
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    void removeChild(int) -> removeChild
    void removeChild(com.badlogic.gdx.utils.XmlReader$Element) -> removeChild
    void remove() -> remove
    com.badlogic.gdx.utils.XmlReader$Element getParent() -> getParent
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> toString
    com.badlogic.gdx.utils.XmlReader$Element getChildByName(java.lang.String) -> getChildByName
    com.badlogic.gdx.utils.XmlReader$Element getChildByNameRecursive(java.lang.String) -> getChildByNameRecursive
    com.badlogic.gdx.utils.Array getChildrenByName(java.lang.String) -> getChildrenByName
    com.badlogic.gdx.utils.Array getChildrenByNameRecursively(java.lang.String) -> getChildrenByNameRecursively
    void getChildrenByNameRecursively(java.lang.String,com.badlogic.gdx.utils.Array) -> getChildrenByNameRecursively
    float getFloatAttribute(java.lang.String) -> getFloatAttribute
    float getFloatAttribute(java.lang.String,float) -> getFloatAttribute
    int getIntAttribute(java.lang.String) -> getIntAttribute
    int getIntAttribute(java.lang.String,int) -> getIntAttribute
    boolean getBooleanAttribute(java.lang.String) -> getBooleanAttribute
    boolean getBooleanAttribute(java.lang.String,boolean) -> getBooleanAttribute
    java.lang.String get(java.lang.String) -> get
    java.lang.String get(java.lang.String,java.lang.String) -> get
    int getInt(java.lang.String) -> getInt
    int getInt(java.lang.String,int) -> getInt
    float getFloat(java.lang.String) -> getFloat
    float getFloat(java.lang.String,float) -> getFloat
    boolean getBoolean(java.lang.String) -> getBoolean
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
com.badlogic.gdx.utils.XmlWriter -> com.badlogic.gdx.utils.XmlWriter:
    java.io.Writer writer -> writer
    com.badlogic.gdx.utils.Array stack -> stack
    java.lang.String currentElement -> currentElement
    boolean indentNextClose -> indentNextClose
    int indent -> indent
    void <init>(java.io.Writer) -> <init>
    void indent() -> indent
    com.badlogic.gdx.utils.XmlWriter element(java.lang.String) -> element
    com.badlogic.gdx.utils.XmlWriter element(java.lang.String,java.lang.Object) -> element
    boolean startElementContent() -> startElementContent
    com.badlogic.gdx.utils.XmlWriter attribute(java.lang.String,java.lang.Object) -> attribute
    com.badlogic.gdx.utils.XmlWriter text(java.lang.Object) -> text
    com.badlogic.gdx.utils.XmlWriter pop() -> pop
    void close() -> close
    void write(char[],int,int) -> write
    void flush() -> flush
com.badlogic.gdx.utils.async.AsyncExecutor -> com.badlogic.gdx.utils.async.AsyncExecutor:
    java.util.concurrent.ExecutorService executor -> executor
    void <init>(int) -> <init>
    com.badlogic.gdx.utils.async.AsyncResult submit(com.badlogic.gdx.utils.async.AsyncTask) -> submit
    void dispose() -> dispose
com.badlogic.gdx.utils.async.AsyncExecutor$1 -> com.badlogic.gdx.utils.async.AsyncExecutor$1:
    com.badlogic.gdx.utils.async.AsyncExecutor this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.async.AsyncExecutor) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.badlogic.gdx.utils.async.AsyncExecutor$2 -> com.badlogic.gdx.utils.async.AsyncExecutor$2:
    com.badlogic.gdx.utils.async.AsyncTask val$task -> val$task
    com.badlogic.gdx.utils.async.AsyncExecutor this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.async.AsyncExecutor,com.badlogic.gdx.utils.async.AsyncTask) -> <init>
    java.lang.Object call() -> call
com.badlogic.gdx.utils.async.AsyncResult -> com.badlogic.gdx.utils.async.AsyncResult:
    java.util.concurrent.Future future -> future
    void <init>(java.util.concurrent.Future) -> <init>
    boolean isDone() -> isDone
    java.lang.Object get() -> get
com.badlogic.gdx.utils.async.AsyncTask -> com.badlogic.gdx.utils.async.AsyncTask:
    java.lang.Object call() -> call
com.badlogic.gdx.utils.async.ThreadUtils -> com.badlogic.gdx.utils.async.ThreadUtils:
    void <init>() -> <init>
    void yield() -> yield
com.badlogic.gdx.utils.compression.CRC -> com.badlogic.gdx.utils.compression.CRC:
    int[] Table -> Table
    int _value -> _value
    void <init>() -> <init>
    void Init() -> Init
    void Update(byte[],int,int) -> Update
    void Update(byte[]) -> Update
    void UpdateByte(int) -> UpdateByte
    int GetDigest() -> GetDigest
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.compression.ICodeProgress -> com.badlogic.gdx.utils.compression.ICodeProgress:
    void SetProgress(long,long) -> SetProgress
com.badlogic.gdx.utils.compression.Lzma -> com.badlogic.gdx.utils.compression.Lzma:
    void <init>() -> <init>
    void compress(java.io.InputStream,java.io.OutputStream) -> compress
    void decompress(java.io.InputStream,java.io.OutputStream) -> decompress
com.badlogic.gdx.utils.compression.Lzma$CommandLine -> com.badlogic.gdx.utils.compression.Lzma$CommandLine:
    int kEncode -> kEncode
    int kDecode -> kDecode
    int kBenchmak -> kBenchmak
    int Command -> Command
    int NumBenchmarkPasses -> NumBenchmarkPasses
    int DictionarySize -> DictionarySize
    boolean DictionarySizeIsDefined -> DictionarySizeIsDefined
    int Lc -> Lc
    int Lp -> Lp
    int Pb -> Pb
    int Fb -> Fb
    boolean FbIsDefined -> FbIsDefined
    boolean Eos -> Eos
    int Algorithm -> Algorithm
    int MatchFinder -> MatchFinder
    java.lang.String InFile -> InFile
    java.lang.String OutFile -> OutFile
    void <init>() -> <init>
com.badlogic.gdx.utils.compression.lz.BinTree -> com.badlogic.gdx.utils.compression.lz.BinTree:
    int _cyclicBufferPos -> _cyclicBufferPos
    int _cyclicBufferSize -> _cyclicBufferSize
    int _matchMaxLen -> _matchMaxLen
    int[] _son -> _son
    int[] _hash -> _hash
    int _cutValue -> _cutValue
    int _hashMask -> _hashMask
    int _hashSizeSum -> _hashSizeSum
    boolean HASH_ARRAY -> HASH_ARRAY
    int kHash2Size -> kHash2Size
    int kHash3Size -> kHash3Size
    int kBT2HashSize -> kBT2HashSize
    int kStartMaxLen -> kStartMaxLen
    int kHash3Offset -> kHash3Offset
    int kEmptyHashValue -> kEmptyHashValue
    int kMaxValForNormalize -> kMaxValForNormalize
    int kNumHashDirectBytes -> kNumHashDirectBytes
    int kMinMatchCheck -> kMinMatchCheck
    int kFixHashSize -> kFixHashSize
    int[] CrcTable -> CrcTable
    void <init>() -> <init>
    void SetType(int) -> SetType
    void Init() -> Init
    void MovePos() -> MovePos
    boolean Create(int,int,int,int) -> Create
    int GetMatches(int[]) -> GetMatches
    void Skip(int) -> Skip
    void NormalizeLinks(int[],int,int) -> NormalizeLinks
    void Normalize() -> Normalize
    void SetCutValue(int) -> SetCutValue
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.compression.lz.InWindow -> com.badlogic.gdx.utils.compression.lz.InWindow:
    byte[] _bufferBase -> _bufferBase
    java.io.InputStream _stream -> _stream
    int _posLimit -> _posLimit
    boolean _streamEndWasReached -> _streamEndWasReached
    int _pointerToLastSafePosition -> _pointerToLastSafePosition
    int _bufferOffset -> _bufferOffset
    int _blockSize -> _blockSize
    int _pos -> _pos
    int _keepSizeBefore -> _keepSizeBefore
    int _keepSizeAfter -> _keepSizeAfter
    int _streamPos -> _streamPos
    void <init>() -> <init>
    void MoveBlock() -> MoveBlock
    void ReadBlock() -> ReadBlock
    void Free() -> Free
    void Create(int,int,int) -> Create
    void SetStream(java.io.InputStream) -> SetStream
    void ReleaseStream() -> ReleaseStream
    void Init() -> Init
    void MovePos() -> MovePos
    byte GetIndexByte(int) -> GetIndexByte
    int GetMatchLen(int,int,int) -> GetMatchLen
    int GetNumAvailableBytes() -> GetNumAvailableBytes
    void ReduceOffsets(int) -> ReduceOffsets
com.badlogic.gdx.utils.compression.lz.OutWindow -> com.badlogic.gdx.utils.compression.lz.OutWindow:
    byte[] _buffer -> _buffer
    int _pos -> _pos
    int _windowSize -> _windowSize
    int _streamPos -> _streamPos
    java.io.OutputStream _stream -> _stream
    void <init>() -> <init>
    void Create(int) -> Create
    void SetStream(java.io.OutputStream) -> SetStream
    void ReleaseStream() -> ReleaseStream
    void Init(boolean) -> Init
    void Flush() -> Flush
    void CopyBlock(int,int) -> CopyBlock
    void PutByte(byte) -> PutByte
    byte GetByte(int) -> GetByte
com.badlogic.gdx.utils.compression.lzma.Base -> com.badlogic.gdx.utils.compression.lzma.Base:
    int kNumRepDistances -> kNumRepDistances
    int kNumStates -> kNumStates
    int kNumPosSlotBits -> kNumPosSlotBits
    int kDicLogSizeMin -> kDicLogSizeMin
    int kNumLenToPosStatesBits -> kNumLenToPosStatesBits
    int kNumLenToPosStates -> kNumLenToPosStates
    int kMatchMinLen -> kMatchMinLen
    int kNumAlignBits -> kNumAlignBits
    int kAlignTableSize -> kAlignTableSize
    int kAlignMask -> kAlignMask
    int kStartPosModelIndex -> kStartPosModelIndex
    int kEndPosModelIndex -> kEndPosModelIndex
    int kNumPosModels -> kNumPosModels
    int kNumFullDistances -> kNumFullDistances
    int kNumLitPosStatesBitsEncodingMax -> kNumLitPosStatesBitsEncodingMax
    int kNumLitContextBitsMax -> kNumLitContextBitsMax
    int kNumPosStatesBitsMax -> kNumPosStatesBitsMax
    int kNumPosStatesMax -> kNumPosStatesMax
    int kNumPosStatesBitsEncodingMax -> kNumPosStatesBitsEncodingMax
    int kNumPosStatesEncodingMax -> kNumPosStatesEncodingMax
    int kNumLowLenBits -> kNumLowLenBits
    int kNumMidLenBits -> kNumMidLenBits
    int kNumHighLenBits -> kNumHighLenBits
    int kNumLowLenSymbols -> kNumLowLenSymbols
    int kNumMidLenSymbols -> kNumMidLenSymbols
    int kNumLenSymbols -> kNumLenSymbols
    int kMatchMaxLen -> kMatchMaxLen
    void <init>() -> <init>
    int StateInit() -> StateInit
    int StateUpdateChar(int) -> StateUpdateChar
    int StateUpdateMatch(int) -> StateUpdateMatch
    int StateUpdateRep(int) -> StateUpdateRep
    int StateUpdateShortRep(int) -> StateUpdateShortRep
    boolean StateIsCharState(int) -> StateIsCharState
    int GetLenToPosState(int) -> GetLenToPosState
com.badlogic.gdx.utils.compression.lzma.Decoder -> com.badlogic.gdx.utils.compression.lzma.Decoder:
    com.badlogic.gdx.utils.compression.lz.OutWindow m_OutWindow -> m_OutWindow
    com.badlogic.gdx.utils.compression.rangecoder.Decoder m_RangeDecoder -> m_RangeDecoder
    short[] m_IsMatchDecoders -> m_IsMatchDecoders
    short[] m_IsRepDecoders -> m_IsRepDecoders
    short[] m_IsRepG0Decoders -> m_IsRepG0Decoders
    short[] m_IsRepG1Decoders -> m_IsRepG1Decoders
    short[] m_IsRepG2Decoders -> m_IsRepG2Decoders
    short[] m_IsRep0LongDecoders -> m_IsRep0LongDecoders
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder[] m_PosSlotDecoder -> m_PosSlotDecoder
    short[] m_PosDecoders -> m_PosDecoders
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder m_PosAlignDecoder -> m_PosAlignDecoder
    com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder m_LenDecoder -> m_LenDecoder
    com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder m_RepLenDecoder -> m_RepLenDecoder
    com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder m_LiteralDecoder -> m_LiteralDecoder
    int m_DictionarySize -> m_DictionarySize
    int m_DictionarySizeCheck -> m_DictionarySizeCheck
    int m_PosStateMask -> m_PosStateMask
    void <init>() -> <init>
    boolean SetDictionarySize(int) -> SetDictionarySize
    boolean SetLcLpPb(int,int,int) -> SetLcLpPb
    void Init() -> Init
    boolean Code(java.io.InputStream,java.io.OutputStream,long) -> Code
    boolean SetDecoderProperties(byte[]) -> SetDecoderProperties
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder -> com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder:
    short[] m_Choice -> m_Choice
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder[] m_LowCoder -> m_LowCoder
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder[] m_MidCoder -> m_MidCoder
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder m_HighCoder -> m_HighCoder
    int m_NumPosStates -> m_NumPosStates
    com.badlogic.gdx.utils.compression.lzma.Decoder this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.compression.lzma.Decoder) -> <init>
    void Create(int) -> Create
    void Init() -> Init
    int Decode(com.badlogic.gdx.utils.compression.rangecoder.Decoder,int) -> Decode
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder -> com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder:
    com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2[] m_Coders -> m_Coders
    int m_NumPrevBits -> m_NumPrevBits
    int m_NumPosBits -> m_NumPosBits
    int m_PosMask -> m_PosMask
    com.badlogic.gdx.utils.compression.lzma.Decoder this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.compression.lzma.Decoder) -> <init>
    void Create(int,int) -> Create
    void Init() -> Init
    com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2 GetDecoder(int,byte) -> GetDecoder
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2 -> com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2:
    short[] m_Decoders -> m_Decoders
    com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder this$1 -> this$1
    void <init>(com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder) -> <init>
    void Init() -> Init
    byte DecodeNormal(com.badlogic.gdx.utils.compression.rangecoder.Decoder) -> DecodeNormal
    byte DecodeWithMatchByte(com.badlogic.gdx.utils.compression.rangecoder.Decoder,byte) -> DecodeWithMatchByte
com.badlogic.gdx.utils.compression.lzma.Encoder -> com.badlogic.gdx.utils.compression.lzma.Encoder:
    int EMatchFinderTypeBT2 -> EMatchFinderTypeBT2
    int EMatchFinderTypeBT4 -> EMatchFinderTypeBT4
    int kIfinityPrice -> kIfinityPrice
    byte[] g_FastPos -> g_FastPos
    int _state -> _state
    byte _previousByte -> _previousByte
    int[] _repDistances -> _repDistances
    int kDefaultDictionaryLogSize -> kDefaultDictionaryLogSize
    int kNumFastBytesDefault -> kNumFastBytesDefault
    int kNumLenSpecSymbols -> kNumLenSpecSymbols
    int kNumOpts -> kNumOpts
    com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal[] _optimum -> _optimum
    com.badlogic.gdx.utils.compression.lz.BinTree _matchFinder -> _matchFinder
    com.badlogic.gdx.utils.compression.rangecoder.Encoder _rangeEncoder -> _rangeEncoder
    short[] _isMatch -> _isMatch
    short[] _isRep -> _isRep
    short[] _isRepG0 -> _isRepG0
    short[] _isRepG1 -> _isRepG1
    short[] _isRepG2 -> _isRepG2
    short[] _isRep0Long -> _isRep0Long
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder[] _posSlotEncoder -> _posSlotEncoder
    short[] _posEncoders -> _posEncoders
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder _posAlignEncoder -> _posAlignEncoder
    com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder _lenEncoder -> _lenEncoder
    com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder _repMatchLenEncoder -> _repMatchLenEncoder
    com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder _literalEncoder -> _literalEncoder
    int[] _matchDistances -> _matchDistances
    int _numFastBytes -> _numFastBytes
    int _longestMatchLength -> _longestMatchLength
    int _numDistancePairs -> _numDistancePairs
    int _additionalOffset -> _additionalOffset
    int _optimumEndIndex -> _optimumEndIndex
    int _optimumCurrentIndex -> _optimumCurrentIndex
    boolean _longestMatchWasFound -> _longestMatchWasFound
    int[] _posSlotPrices -> _posSlotPrices
    int[] _distancesPrices -> _distancesPrices
    int[] _alignPrices -> _alignPrices
    int _alignPriceCount -> _alignPriceCount
    int _distTableSize -> _distTableSize
    int _posStateBits -> _posStateBits
    int _posStateMask -> _posStateMask
    int _numLiteralPosStateBits -> _numLiteralPosStateBits
    int _numLiteralContextBits -> _numLiteralContextBits
    int _dictionarySize -> _dictionarySize
    int _dictionarySizePrev -> _dictionarySizePrev
    int _numFastBytesPrev -> _numFastBytesPrev
    long nowPos64 -> nowPos64
    boolean _finished -> _finished
    java.io.InputStream _inStream -> _inStream
    int _matchFinderType -> _matchFinderType
    boolean _writeEndMark -> _writeEndMark
    boolean _needReleaseMFStream -> _needReleaseMFStream
    int[] reps -> reps
    int[] repLens -> repLens
    int backRes -> backRes
    long[] processedInSize -> processedInSize
    long[] processedOutSize -> processedOutSize
    boolean[] finished -> finished
    int kPropSize -> kPropSize
    byte[] properties -> properties
    int[] tempPrices -> tempPrices
    int _matchPriceCount -> _matchPriceCount
    int GetPosSlot(int) -> GetPosSlot
    int GetPosSlot2(int) -> GetPosSlot2
    void BaseInit() -> BaseInit
    void Create() -> Create
    void <init>() -> <init>
    void SetWriteEndMarkerMode(boolean) -> SetWriteEndMarkerMode
    void Init() -> Init
    int ReadMatchDistances() -> ReadMatchDistances
    void MovePos(int) -> MovePos
    int GetRepLen1Price(int,int) -> GetRepLen1Price
    int GetPureRepPrice(int,int,int) -> GetPureRepPrice
    int GetRepPrice(int,int,int,int) -> GetRepPrice
    int GetPosLenPrice(int,int,int) -> GetPosLenPrice
    int Backward(int) -> Backward
    int GetOptimum(int) -> GetOptimum
    boolean ChangePair(int,int) -> ChangePair
    void WriteEndMarker(int) -> WriteEndMarker
    void Flush(int) -> Flush
    void CodeOneBlock(long[],long[],boolean[]) -> CodeOneBlock
    void ReleaseMFStream() -> ReleaseMFStream
    void SetOutStream(java.io.OutputStream) -> SetOutStream
    void ReleaseOutStream() -> ReleaseOutStream
    void ReleaseStreams() -> ReleaseStreams
    void SetStreams(java.io.InputStream,java.io.OutputStream,long,long) -> SetStreams
    void Code(java.io.InputStream,java.io.OutputStream,long,long,com.badlogic.gdx.utils.compression.ICodeProgress) -> Code
    void WriteCoderProperties(java.io.OutputStream) -> WriteCoderProperties
    void FillDistancesPrices() -> FillDistancesPrices
    void FillAlignPrices() -> FillAlignPrices
    boolean SetAlgorithm(int) -> SetAlgorithm
    boolean SetDictionarySize(int) -> SetDictionarySize
    boolean SetNumFastBytes(int) -> SetNumFastBytes
    boolean SetMatchFinder(int) -> SetMatchFinder
    boolean SetLcLpPb(int,int,int) -> SetLcLpPb
    void SetEndMarkerMode(boolean) -> SetEndMarkerMode
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder -> com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder:
    short[] _choice -> _choice
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder[] _lowCoder -> _lowCoder
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder[] _midCoder -> _midCoder
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder _highCoder -> _highCoder
    com.badlogic.gdx.utils.compression.lzma.Encoder this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.compression.lzma.Encoder) -> <init>
    void Init(int) -> Init
    void Encode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,int,int) -> Encode
    void SetPrices(int,int,int[],int) -> SetPrices
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder -> com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder:
    int[] _prices -> _prices
    int _tableSize -> _tableSize
    int[] _counters -> _counters
    com.badlogic.gdx.utils.compression.lzma.Encoder this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.compression.lzma.Encoder) -> <init>
    void SetTableSize(int) -> SetTableSize
    int GetPrice(int,int) -> GetPrice
    void UpdateTable(int) -> UpdateTable
    void UpdateTables(int) -> UpdateTables
    void Encode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,int,int) -> Encode
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder -> com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder:
    com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2[] m_Coders -> m_Coders
    int m_NumPrevBits -> m_NumPrevBits
    int m_NumPosBits -> m_NumPosBits
    int m_PosMask -> m_PosMask
    com.badlogic.gdx.utils.compression.lzma.Encoder this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.compression.lzma.Encoder) -> <init>
    void Create(int,int) -> Create
    void Init() -> Init
    com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2 GetSubCoder(int,byte) -> GetSubCoder
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2 -> com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2:
    short[] m_Encoders -> m_Encoders
    com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder this$1 -> this$1
    void <init>(com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder) -> <init>
    void Init() -> Init
    void Encode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,byte) -> Encode
    void EncodeMatched(com.badlogic.gdx.utils.compression.rangecoder.Encoder,byte,byte) -> EncodeMatched
    int GetPrice(boolean,byte,byte) -> GetPrice
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal -> com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal:
    int State -> State
    boolean Prev1IsChar -> Prev1IsChar
    boolean Prev2 -> Prev2
    int PosPrev2 -> PosPrev2
    int BackPrev2 -> BackPrev2
    int Price -> Price
    int PosPrev -> PosPrev
    int BackPrev -> BackPrev
    int Backs0 -> Backs0
    int Backs1 -> Backs1
    int Backs2 -> Backs2
    int Backs3 -> Backs3
    com.badlogic.gdx.utils.compression.lzma.Encoder this$0 -> this$0
    void <init>(com.badlogic.gdx.utils.compression.lzma.Encoder) -> <init>
    void MakeAsChar() -> MakeAsChar
    void MakeAsShortRep() -> MakeAsShortRep
    boolean IsShortRep() -> IsShortRep
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder -> com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder:
    short[] Models -> Models
    int NumBitLevels -> NumBitLevels
    void <init>(int) -> <init>
    void Init() -> Init
    int Decode(com.badlogic.gdx.utils.compression.rangecoder.Decoder) -> Decode
    int ReverseDecode(com.badlogic.gdx.utils.compression.rangecoder.Decoder) -> ReverseDecode
    int ReverseDecode(short[],int,com.badlogic.gdx.utils.compression.rangecoder.Decoder,int) -> ReverseDecode
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder -> com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder:
    short[] Models -> Models
    int NumBitLevels -> NumBitLevels
    void <init>(int) -> <init>
    void Init() -> Init
    void Encode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,int) -> Encode
    void ReverseEncode(com.badlogic.gdx.utils.compression.rangecoder.Encoder,int) -> ReverseEncode
    int GetPrice(int) -> GetPrice
    int ReverseGetPrice(int) -> ReverseGetPrice
    int ReverseGetPrice(short[],int,int,int) -> ReverseGetPrice
    void ReverseEncode(short[],int,com.badlogic.gdx.utils.compression.rangecoder.Encoder,int,int) -> ReverseEncode
com.badlogic.gdx.utils.compression.rangecoder.Decoder -> com.badlogic.gdx.utils.compression.rangecoder.Decoder:
    int kTopMask -> kTopMask
    int kNumBitModelTotalBits -> kNumBitModelTotalBits
    int kBitModelTotal -> kBitModelTotal
    int kNumMoveBits -> kNumMoveBits
    int Range -> Range
    int Code -> Code
    java.io.InputStream Stream -> Stream
    void <init>() -> <init>
    void SetStream(java.io.InputStream) -> SetStream
    void ReleaseStream() -> ReleaseStream
    void Init() -> Init
    int DecodeDirectBits(int) -> DecodeDirectBits
    int DecodeBit(short[],int) -> DecodeBit
    void InitBitModels(short[]) -> InitBitModels
com.badlogic.gdx.utils.compression.rangecoder.Encoder -> com.badlogic.gdx.utils.compression.rangecoder.Encoder:
    int kTopMask -> kTopMask
    int kNumBitModelTotalBits -> kNumBitModelTotalBits
    int kBitModelTotal -> kBitModelTotal
    int kNumMoveBits -> kNumMoveBits
    java.io.OutputStream Stream -> Stream
    long Low -> Low
    int Range -> Range
    int _cacheSize -> _cacheSize
    int _cache -> _cache
    long _position -> _position
    int kNumMoveReducingBits -> kNumMoveReducingBits
    int kNumBitPriceShiftBits -> kNumBitPriceShiftBits
    int[] ProbPrices -> ProbPrices
    void <init>() -> <init>
    void SetStream(java.io.OutputStream) -> SetStream
    void ReleaseStream() -> ReleaseStream
    void Init() -> Init
    void FlushData() -> FlushData
    void FlushStream() -> FlushStream
    void ShiftLow() -> ShiftLow
    void EncodeDirectBits(int,int) -> EncodeDirectBits
    long GetProcessedSizeAdd() -> GetProcessedSizeAdd
    void InitBitModels(short[]) -> InitBitModels
    void Encode(short[],int,int) -> Encode
    int GetPrice(int,int) -> GetPrice
    int GetPrice0(int) -> GetPrice0
    int GetPrice1(int) -> GetPrice1
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.reflect.Annotation -> com.badlogic.gdx.utils.reflect.Annotation:
    java.lang.annotation.Annotation annotation -> annotation
    void <init>(java.lang.annotation.Annotation) -> <init>
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Class getAnnotationType() -> getAnnotationType
com.badlogic.gdx.utils.reflect.ArrayReflection -> com.badlogic.gdx.utils.reflect.ArrayReflection:
    void <init>() -> <init>
    java.lang.Object newInstance(java.lang.Class,int) -> newInstance
    int getLength(java.lang.Object) -> getLength
    java.lang.Object get(java.lang.Object,int) -> get
    void set(java.lang.Object,int,java.lang.Object) -> set
com.badlogic.gdx.utils.reflect.ClassReflection -> com.badlogic.gdx.utils.reflect.ClassReflection:
    void <init>() -> <init>
    java.lang.Class forName(java.lang.String) -> forName
    java.lang.String getSimpleName(java.lang.Class) -> getSimpleName
    boolean isInstance(java.lang.Class,java.lang.Object) -> isInstance
    boolean isAssignableFrom(java.lang.Class,java.lang.Class) -> isAssignableFrom
    boolean isMemberClass(java.lang.Class) -> isMemberClass
    boolean isStaticClass(java.lang.Class) -> isStaticClass
    boolean isArray(java.lang.Class) -> isArray
    java.lang.Object newInstance(java.lang.Class) -> newInstance
    com.badlogic.gdx.utils.reflect.Constructor[] getConstructors(java.lang.Class) -> getConstructors
    com.badlogic.gdx.utils.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    com.badlogic.gdx.utils.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]) -> getDeclaredConstructor
    com.badlogic.gdx.utils.reflect.Method[] getMethods(java.lang.Class) -> getMethods
    com.badlogic.gdx.utils.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    com.badlogic.gdx.utils.reflect.Method[] getDeclaredMethods(java.lang.Class) -> getDeclaredMethods
    com.badlogic.gdx.utils.reflect.Method getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getDeclaredMethod
    com.badlogic.gdx.utils.reflect.Field[] getFields(java.lang.Class) -> getFields
    com.badlogic.gdx.utils.reflect.Field getField(java.lang.Class,java.lang.String) -> getField
    com.badlogic.gdx.utils.reflect.Field[] getDeclaredFields(java.lang.Class) -> getDeclaredFields
    com.badlogic.gdx.utils.reflect.Field getDeclaredField(java.lang.Class,java.lang.String) -> getDeclaredField
    boolean isAnnotationPresent(java.lang.Class,java.lang.Class) -> isAnnotationPresent
    com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations(java.lang.Class) -> getDeclaredAnnotations
    com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class,java.lang.Class) -> getDeclaredAnnotation
com.badlogic.gdx.utils.reflect.Constructor -> com.badlogic.gdx.utils.reflect.Constructor:
    java.lang.reflect.Constructor constructor -> constructor
    void <init>(java.lang.reflect.Constructor) -> <init>
    java.lang.Class[] getParameterTypes() -> getParameterTypes
    java.lang.Class getDeclaringClass() -> getDeclaringClass
    boolean isAccessible() -> isAccessible
    void setAccessible(boolean) -> setAccessible
    java.lang.Object newInstance(java.lang.Object[]) -> newInstance
com.badlogic.gdx.utils.reflect.Field -> com.badlogic.gdx.utils.reflect.Field:
    java.lang.reflect.Field field -> field
    void <init>(java.lang.reflect.Field) -> <init>
    java.lang.String getName() -> getName
    java.lang.Class getType() -> getType
    java.lang.Class getDeclaringClass() -> getDeclaringClass
    boolean isAccessible() -> isAccessible
    void setAccessible(boolean) -> setAccessible
    boolean isDefaultAccess() -> isDefaultAccess
    boolean isFinal() -> isFinal
    boolean isPrivate() -> isPrivate
    boolean isProtected() -> isProtected
    boolean isPublic() -> isPublic
    boolean isStatic() -> isStatic
    boolean isTransient() -> isTransient
    boolean isVolatile() -> isVolatile
    boolean isSynthetic() -> isSynthetic
    java.lang.Class getElementType(int) -> getElementType
    boolean isAnnotationPresent(java.lang.Class) -> isAnnotationPresent
    com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations() -> getDeclaredAnnotations
    com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class) -> getDeclaredAnnotation
    java.lang.Object get(java.lang.Object) -> get
    void set(java.lang.Object,java.lang.Object) -> set
com.badlogic.gdx.utils.reflect.Method -> com.badlogic.gdx.utils.reflect.Method:
    java.lang.reflect.Method method -> method
    void <init>(java.lang.reflect.Method) -> <init>
    java.lang.String getName() -> getName
    java.lang.Class getReturnType() -> getReturnType
    java.lang.Class[] getParameterTypes() -> getParameterTypes
    java.lang.Class getDeclaringClass() -> getDeclaringClass
    boolean isAccessible() -> isAccessible
    void setAccessible(boolean) -> setAccessible
    boolean isAbstract() -> isAbstract
    boolean isDefaultAccess() -> isDefaultAccess
    boolean isFinal() -> isFinal
    boolean isPrivate() -> isPrivate
    boolean isProtected() -> isProtected
    boolean isPublic() -> isPublic
    boolean isNative() -> isNative
    boolean isStatic() -> isStatic
    boolean isVarArgs() -> isVarArgs
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> invoke
    boolean isAnnotationPresent(java.lang.Class) -> isAnnotationPresent
    com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations() -> getDeclaredAnnotations
    com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class) -> getDeclaredAnnotation
com.badlogic.gdx.utils.reflect.ReflectionException -> com.badlogic.gdx.utils.reflect.ReflectionException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.badlogic.gdx.utils.viewport.ExtendViewport -> com.badlogic.gdx.utils.viewport.ExtendViewport:
    float minWorldWidth -> minWorldWidth
    float minWorldHeight -> minWorldHeight
    float maxWorldWidth -> maxWorldWidth
    float maxWorldHeight -> maxWorldHeight
    void <init>(float,float) -> <init>
    void <init>(float,float,com.badlogic.gdx.graphics.Camera) -> <init>
    void <init>(float,float,float,float) -> <init>
    void <init>(float,float,float,float,com.badlogic.gdx.graphics.Camera) -> <init>
    void update(int,int,boolean) -> update
    float getMinWorldWidth() -> getMinWorldWidth
    void setMinWorldWidth(float) -> setMinWorldWidth
    float getMinWorldHeight() -> getMinWorldHeight
    void setMinWorldHeight(float) -> setMinWorldHeight
    float getMaxWorldWidth() -> getMaxWorldWidth
    void setMaxWorldWidth(float) -> setMaxWorldWidth
    float getMaxWorldHeight() -> getMaxWorldHeight
    void setMaxWorldHeight(float) -> setMaxWorldHeight
com.badlogic.gdx.utils.viewport.FillViewport -> com.badlogic.gdx.utils.viewport.FillViewport:
    void <init>(float,float) -> <init>
    void <init>(float,float,com.badlogic.gdx.graphics.Camera) -> <init>
com.badlogic.gdx.utils.viewport.FitViewport -> com.badlogic.gdx.utils.viewport.FitViewport:
    void <init>(float,float) -> <init>
    void <init>(float,float,com.badlogic.gdx.graphics.Camera) -> <init>
com.badlogic.gdx.utils.viewport.ScalingViewport -> com.badlogic.gdx.utils.viewport.ScalingViewport:
    com.badlogic.gdx.utils.Scaling scaling -> scaling
    void <init>(com.badlogic.gdx.utils.Scaling,float,float) -> <init>
    void <init>(com.badlogic.gdx.utils.Scaling,float,float,com.badlogic.gdx.graphics.Camera) -> <init>
    void update(int,int,boolean) -> update
    com.badlogic.gdx.utils.Scaling getScaling() -> getScaling
    void setScaling(com.badlogic.gdx.utils.Scaling) -> setScaling
com.badlogic.gdx.utils.viewport.ScreenViewport -> com.badlogic.gdx.utils.viewport.ScreenViewport:
    float unitsPerPixel -> unitsPerPixel
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.Camera) -> <init>
    void update(int,int,boolean) -> update
    float getUnitsPerPixel() -> getUnitsPerPixel
    void setUnitsPerPixel(float) -> setUnitsPerPixel
com.badlogic.gdx.utils.viewport.StretchViewport -> com.badlogic.gdx.utils.viewport.StretchViewport:
    void <init>(float,float) -> <init>
    void <init>(float,float,com.badlogic.gdx.graphics.Camera) -> <init>
com.badlogic.gdx.utils.viewport.Viewport -> com.badlogic.gdx.utils.viewport.Viewport:
    com.badlogic.gdx.graphics.Camera camera -> camera
    float worldWidth -> worldWidth
    float worldHeight -> worldHeight
    int screenX -> screenX
    int screenY -> screenY
    int screenWidth -> screenWidth
    int screenHeight -> screenHeight
    com.badlogic.gdx.math.Vector3 tmp -> tmp
    void <init>() -> <init>
    void apply() -> apply
    void apply(boolean) -> apply
    void update(int,int) -> update
    void update(int,int,boolean) -> update
    com.badlogic.gdx.math.Vector2 unproject(com.badlogic.gdx.math.Vector2) -> unproject
    com.badlogic.gdx.math.Vector2 project(com.badlogic.gdx.math.Vector2) -> project
    com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3) -> unproject
    com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3) -> project
    com.badlogic.gdx.math.collision.Ray getPickRay(float,float) -> getPickRay
    void calculateScissors(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> calculateScissors
    com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4) -> toScreenCoordinates
    com.badlogic.gdx.graphics.Camera getCamera() -> getCamera
    void setCamera(com.badlogic.gdx.graphics.Camera) -> setCamera
    float getWorldWidth() -> getWorldWidth
    void setWorldWidth(float) -> setWorldWidth
    float getWorldHeight() -> getWorldHeight
    void setWorldHeight(float) -> setWorldHeight
    void setWorldSize(float,float) -> setWorldSize
    int getScreenX() -> getScreenX
    void setScreenX(int) -> setScreenX
    int getScreenY() -> getScreenY
    void setScreenY(int) -> setScreenY
    int getScreenWidth() -> getScreenWidth
    void setScreenWidth(int) -> setScreenWidth
    int getScreenHeight() -> getScreenHeight
    void setScreenHeight(int) -> setScreenHeight
    void setScreenPosition(int,int) -> setScreenPosition
    void setScreenSize(int,int) -> setScreenSize
    void setScreenBounds(int,int,int,int) -> setScreenBounds
    int getLeftGutterWidth() -> getLeftGutterWidth
    int getRightGutterX() -> getRightGutterX
    int getRightGutterWidth() -> getRightGutterWidth
    int getBottomGutterHeight() -> getBottomGutterHeight
    int getTopGutterY() -> getTopGutterY
    int getTopGutterHeight() -> getTopGutterHeight
com.google.gson.DefaultDateTypeAdapter -> com.a.a.a:
    java.text.DateFormat enUsFormat -> a
    java.text.DateFormat localFormat -> b
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(int,int) -> <init>
    void <init>(java.text.DateFormat,java.text.DateFormat) -> <init>
    com.google.gson.JsonElement serialize$107ba52a(java.util.Date) -> a
    java.util.Date deserializeToDate(com.google.gson.JsonElement) -> a
    java.lang.String toString() -> toString
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    java.lang.Object deserialize$140ae884(com.google.gson.JsonElement,java.lang.reflect.Type) -> a
com.google.gson.ExclusionStrategy -> com.a.a.b:
    boolean shouldSkipField$6e8224bb() -> a
    boolean shouldSkipClass$1b2d8b94() -> b
com.google.gson.FieldAttributes -> com.a.a.c:
    java.lang.reflect.Field field -> a
    void <init>(java.lang.reflect.Field) -> <init>
com.google.gson.FieldNamingPolicy -> com.a.a.d:
    com.google.gson.FieldNamingPolicy IDENTITY -> a
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE -> b
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE_WITH_SPACES -> c
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES -> d
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DASHES -> e
    com.google.gson.FieldNamingPolicy[] $VALUES -> f
    com.google.gson.FieldNamingPolicy[] values() -> values
    com.google.gson.FieldNamingPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String separateCamelCase(java.lang.String,java.lang.String) -> a
    java.lang.String upperCaseFirstLetter(java.lang.String) -> a
    void <init>(java.lang.String,int,byte) -> <init>
    void <clinit>() -> <clinit>
com.google.gson.FieldNamingPolicy$1 -> com.a.a.e:
    void <init>(java.lang.String) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$2 -> com.a.a.f:
    void <init>(java.lang.String) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$3 -> com.a.a.g:
    void <init>(java.lang.String) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$4 -> com.a.a.h:
    void <init>(java.lang.String) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$5 -> com.a.a.i:
    void <init>(java.lang.String) -> <init>
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingStrategy -> com.a.a.j:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.Gson -> com.a.a.k:
    java.lang.ThreadLocal calls -> c
    java.util.Map typeTokenCache -> d
    java.util.List factories -> e
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> f
    boolean serializeNulls -> g
    boolean htmlSafe -> h
    boolean generateNonExecutableJson -> i
    boolean prettyPrinting -> j
    boolean lenient -> k
    com.google.gson.JsonDeserializationContext deserializationContext -> a
    com.google.gson.JsonSerializationContext serializationContext -> b
    void <init>() -> <init>
    void <init>(com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy,java.util.Map,boolean,boolean,boolean,boolean,boolean,boolean,boolean,com.google.gson.LongSerializationPolicy,java.util.List) -> <init>
    void checkValidFloatingPoint(double) -> a
    com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getAdapter(java.lang.Class) -> a
    com.google.gson.JsonElement toJsonTree(java.lang.Object) -> a
    java.lang.String toJson(java.lang.Object) -> b
    void toJson(java.lang.Object,java.lang.reflect.Type,com.google.gson.stream.JsonWriter) -> a
    com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer) -> a
    java.lang.Object fromJson(java.lang.String,java.lang.Class) -> a
    java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type) -> a
    java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type) -> a
    java.lang.String toString() -> toString
com.google.gson.Gson$1 -> com.a.a.l:
    com.google.gson.Gson this$0 -> a
    void <init>(com.google.gson.Gson) -> <init>
com.google.gson.Gson$2 -> com.a.a.m:
    com.google.gson.Gson this$0 -> a
    void <init>(com.google.gson.Gson) -> <init>
com.google.gson.Gson$3 -> com.a.a.n:
    com.google.gson.Gson this$0 -> a
    void <init>(com.google.gson.Gson) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$4 -> com.a.a.o:
    com.google.gson.Gson this$0 -> a
    void <init>(com.google.gson.Gson) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$5 -> com.a.a.p:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$6 -> com.a.a.q:
    com.google.gson.TypeAdapter val$longAdapter -> a
    void <init>(com.google.gson.TypeAdapter) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$7 -> com.a.a.r:
    com.google.gson.TypeAdapter val$longAdapter -> a
    void <init>(com.google.gson.TypeAdapter) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$FutureTypeAdapter -> com.a.a.s:
    com.google.gson.TypeAdapter delegate -> a
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.GsonBuilder -> com.a.a.t:
    com.google.gson.internal.Excluder excluder -> a
    com.google.gson.LongSerializationPolicy longSerializationPolicy -> b
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> c
    java.util.Map instanceCreators -> d
    java.util.List factories -> e
    java.util.List hierarchyFactories -> f
    boolean serializeNulls -> g
    java.lang.String datePattern -> h
    int dateStyle -> i
    int timeStyle -> j
    boolean complexMapKeySerialization -> k
    boolean serializeSpecialFloatingPointValues -> l
    boolean escapeHtmlChars -> m
    boolean prettyPrinting -> n
    boolean generateNonExecutableJson -> o
    boolean lenient -> p
    void <init>() -> <init>
    com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type,java.lang.Object) -> a
    com.google.gson.Gson create() -> a
com.google.gson.InstanceCreator -> com.a.a.u:
    java.lang.Object createInstance$6d6ddcce() -> a
com.google.gson.JsonArray -> com.a.a.v:
    java.util.List elements -> a
    void <init>() -> <init>
    void add(com.google.gson.JsonElement) -> a
    int size() -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Number getAsNumber() -> b
    java.lang.String getAsString() -> c
    double getAsDouble() -> d
    long getAsLong() -> e
    int getAsInt() -> f
    boolean getAsBoolean() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonDeserializationContext -> com.a.a.w:
com.google.gson.JsonDeserializer -> com.a.a.x:
    java.lang.Object deserialize$140ae884(com.google.gson.JsonElement,java.lang.reflect.Type) -> a
com.google.gson.JsonElement -> com.a.a.y:
    void <init>() -> <init>
    com.google.gson.JsonObject getAsJsonObject() -> h
    com.google.gson.JsonArray getAsJsonArray() -> i
    com.google.gson.JsonPrimitive getAsJsonPrimitive() -> j
    boolean getAsBoolean() -> g
    java.lang.Number getAsNumber() -> b
    java.lang.String getAsString() -> c
    double getAsDouble() -> d
    long getAsLong() -> e
    int getAsInt() -> f
    java.lang.String toString() -> toString
com.google.gson.JsonIOException -> com.a.a.z:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.gson.JsonNull -> com.a.a.aa:
    com.google.gson.JsonNull INSTANCE -> a
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.google.gson.JsonObject -> com.a.a.ab:
    com.google.gson.internal.LinkedTreeMap members -> a
    void <init>() -> <init>
    void add(java.lang.String,com.google.gson.JsonElement) -> a
    boolean has(java.lang.String) -> a
    com.google.gson.JsonElement get(java.lang.String) -> b
    com.google.gson.JsonArray getAsJsonArray(java.lang.String) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonParseException -> com.a.a.ac:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.gson.JsonParser -> com.a.a.ad:
    void <init>() -> <init>
    com.google.gson.JsonElement parse(java.io.Reader) -> a
    com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader) -> a
com.google.gson.JsonPrimitive -> com.a.a.ae:
    java.lang.Class[] PRIMITIVE_TYPES -> b
    java.lang.Object value -> a
    void <init>(java.lang.Boolean) -> <init>
    void <init>(java.lang.Number) -> <init>
    void <init>(java.lang.String) -> <init>
    void setValue(java.lang.Object) -> a
    boolean getAsBoolean() -> g
    java.lang.Number getAsNumber() -> b
    java.lang.String getAsString() -> c
    double getAsDouble() -> d
    long getAsLong() -> e
    int getAsInt() -> f
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isIntegral(com.google.gson.JsonPrimitive) -> a
    void <clinit>() -> <clinit>
com.google.gson.JsonSerializationContext -> com.a.a.af:
com.google.gson.JsonSerializer -> com.a.a.ag:
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
com.google.gson.JsonSyntaxException -> com.a.a.ah:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.gson.LongSerializationPolicy -> com.a.a.ai:
    com.google.gson.LongSerializationPolicy DEFAULT -> a
    com.google.gson.LongSerializationPolicy STRING -> b
    com.google.gson.LongSerializationPolicy[] $VALUES -> c
    com.google.gson.LongSerializationPolicy[] values() -> values
    com.google.gson.LongSerializationPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,byte) -> <init>
    void <clinit>() -> <clinit>
com.google.gson.LongSerializationPolicy$1 -> com.a.a.aj:
    void <init>(java.lang.String) -> <init>
com.google.gson.LongSerializationPolicy$2 -> com.a.a.ak:
    void <init>(java.lang.String) -> <init>
com.google.gson.TreeTypeAdapter -> com.a.a.al:
    com.google.gson.JsonSerializer serializer -> a
    com.google.gson.JsonDeserializer deserializer -> b
    com.google.gson.Gson gson -> c
    com.google.gson.reflect.TypeToken typeToken -> d
    com.google.gson.TypeAdapterFactory skipPast -> e
    com.google.gson.TypeAdapter delegate -> f
    void <init>(com.google.gson.JsonSerializer,com.google.gson.JsonDeserializer,com.google.gson.Gson,com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapterFactory) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> b
    com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,java.lang.Object) -> a
    com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object) -> b
com.google.gson.TreeTypeAdapter$SingleTypeFactory -> com.a.a.am:
    com.google.gson.reflect.TypeToken exactType -> a
    boolean matchRawType -> b
    java.lang.Class hierarchyType -> c
    com.google.gson.JsonSerializer serializer -> d
    com.google.gson.JsonDeserializer deserializer -> e
    void <init>(java.lang.Object,com.google.gson.reflect.TypeToken,boolean) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.TypeAdapter -> com.a.a.an:
    void <init>() -> <init>
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter nullSafe() -> a
    com.google.gson.JsonElement toJsonTree(java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
com.google.gson.TypeAdapter$1 -> com.a.a.ao:
    com.google.gson.TypeAdapter this$0 -> a
    void <init>(com.google.gson.TypeAdapter) -> <init>
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
com.google.gson.TypeAdapterFactory -> com.a.a.ap:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.annotations.Expose -> com.a.a.a.a:
    boolean serialize() -> a
    boolean deserialize() -> b
com.google.gson.annotations.JsonAdapter -> com.a.a.a.b:
    java.lang.Class value() -> a
com.google.gson.annotations.SerializedName -> com.a.a.a.c:
    java.lang.String value() -> a
    java.lang.String[] alternate() -> b
com.google.gson.annotations.Since -> com.a.a.a.d:
    double value() -> a
com.google.gson.annotations.Until -> com.a.a.a.e:
    double value() -> a
com.google.gson.internal.$Gson$Preconditions -> com.a.a.b.a:
    java.lang.Object checkNotNull(java.lang.Object) -> a
    void checkArgument(boolean) -> a
com.google.gson.internal.$Gson$Types -> com.a.a.b.b:
    java.lang.reflect.Type[] EMPTY_TYPE_ARRAY -> a
    java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type) -> f
    java.lang.reflect.Type canonicalize(java.lang.reflect.Type) -> a
    java.lang.Class getRawType(java.lang.reflect.Type) -> b
    boolean equals(java.lang.reflect.Type,java.lang.reflect.Type) -> a
    int hashCodeOrZero(java.lang.Object) -> a
    java.lang.String typeToString(java.lang.reflect.Type) -> c
    java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> a
    java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> b
    java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type) -> d
    java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class) -> a
    java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class) -> b
    java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> a
    void checkNotPrimitive(java.lang.reflect.Type) -> e
    void <clinit>() -> <clinit>
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl -> com.a.a.b.c:
    java.lang.reflect.Type componentType -> a
    void <init>(java.lang.reflect.Type) -> <init>
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl -> com.a.a.b.d:
    java.lang.reflect.Type ownerType -> a
    java.lang.reflect.Type rawType -> b
    java.lang.reflect.Type[] typeArguments -> c
    void <init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> <init>
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$WildcardTypeImpl -> com.a.a.b.e:
    java.lang.reflect.Type upperBound -> a
    java.lang.reflect.Type lowerBound -> b
    void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[]) -> <init>
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor -> com.a.a.b.f:
    java.util.Map instanceCreators -> a
    void <init>(java.util.Map) -> <init>
    com.google.gson.internal.ObjectConstructor get(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.ObjectConstructor newDefaultConstructor(java.lang.Class) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor$1 -> com.a.a.b.g:
    com.google.gson.InstanceCreator val$typeCreator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    void <init>(com.google.gson.internal.ConstructorConstructor,com.google.gson.InstanceCreator,java.lang.reflect.Type) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$10 -> com.a.a.b.h:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$11 -> com.a.a.b.i:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$12 -> com.a.a.b.j:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$13 -> com.a.a.b.k:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$14 -> com.a.a.b.l:
    com.google.gson.internal.UnsafeAllocator unsafeAllocator -> d
    java.lang.Class val$rawType -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    void <init>(com.google.gson.internal.ConstructorConstructor,java.lang.Class,java.lang.reflect.Type) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$2 -> com.a.a.b.m:
    com.google.gson.InstanceCreator val$rawTypeCreator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    void <init>(com.google.gson.internal.ConstructorConstructor,com.google.gson.InstanceCreator,java.lang.reflect.Type) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$3 -> com.a.a.b.n:
    java.lang.reflect.Constructor val$constructor -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    void <init>(com.google.gson.internal.ConstructorConstructor,java.lang.reflect.Constructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$4 -> com.a.a.b.o:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$5 -> com.a.a.b.p:
    java.lang.reflect.Type val$type -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    void <init>(com.google.gson.internal.ConstructorConstructor,java.lang.reflect.Type) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$6 -> com.a.a.b.q:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$7 -> com.a.a.b.r:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$8 -> com.a.a.b.s:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$9 -> com.a.a.b.t:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    java.lang.Object construct() -> a
com.google.gson.internal.Excluder -> com.a.a.b.u:
    com.google.gson.internal.Excluder DEFAULT -> a
    double version -> b
    int modifiers -> c
    boolean serializeInnerClasses -> d
    boolean requireExpose -> e
    java.util.List serializationStrategies -> f
    java.util.List deserializationStrategies -> g
    void <init>() -> <init>
    com.google.gson.internal.Excluder clone() -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    boolean excludeClass(java.lang.Class,boolean) -> a
    boolean isAnonymousOrLocal(java.lang.Class) -> a
    boolean isInnerClass(java.lang.Class) -> b
    boolean isValidVersion(com.google.gson.annotations.Since,com.google.gson.annotations.Until) -> a
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
com.google.gson.internal.Excluder$1 -> com.a.a.b.v:
    com.google.gson.TypeAdapter delegate -> f
    boolean val$skipDeserialize -> a
    boolean val$skipSerialize -> b
    com.google.gson.Gson val$gson -> c
    com.google.gson.reflect.TypeToken val$type -> d
    com.google.gson.internal.Excluder this$0 -> e
    void <init>(com.google.gson.internal.Excluder,boolean,boolean,com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> b
com.google.gson.internal.JsonReaderInternalAccess -> com.a.a.b.w:
    com.google.gson.internal.JsonReaderInternalAccess INSTANCE -> a
    void <init>() -> <init>
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.internal.LazilyParsedNumber -> com.a.a.b.x:
    java.lang.String value -> a
    void <init>(java.lang.String) -> <init>
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.gson.internal.LinkedTreeMap -> com.a.a.b.y:
    java.util.Comparator NATURAL_ORDER -> g
    java.util.Comparator comparator -> a
    com.google.gson.internal.LinkedTreeMap$Node root -> b
    int size -> c
    int modCount -> d
    com.google.gson.internal.LinkedTreeMap$Node header -> e
    com.google.gson.internal.LinkedTreeMap$EntrySet entrySet -> h
    com.google.gson.internal.LinkedTreeMap$KeySet keySet -> i
    boolean $assertionsDisabled -> f
    void <init>() -> <init>
    void <init>(java.util.Comparator) -> <init>
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    com.google.gson.internal.LinkedTreeMap$Node find(java.lang.Object,boolean) -> a
    com.google.gson.internal.LinkedTreeMap$Node findByObject(java.lang.Object) -> b
    com.google.gson.internal.LinkedTreeMap$Node findByEntry(java.util.Map$Entry) -> a
    void removeInternal(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> a
    com.google.gson.internal.LinkedTreeMap$Node removeInternalByKey(java.lang.Object) -> a
    void replaceInParent(com.google.gson.internal.LinkedTreeMap$Node,com.google.gson.internal.LinkedTreeMap$Node) -> a
    void rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> b
    void rotateLeft(com.google.gson.internal.LinkedTreeMap$Node) -> a
    void rotateRight(com.google.gson.internal.LinkedTreeMap$Node) -> b
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    void <clinit>() -> <clinit>
com.google.gson.internal.LinkedTreeMap$1 -> com.a.a.b.z:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.gson.internal.LinkedTreeMap$EntrySet -> com.a.a.b.aa:
    com.google.gson.internal.LinkedTreeMap this$0 -> a
    void <init>(com.google.gson.internal.LinkedTreeMap) -> <init>
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$EntrySet$1 -> com.a.a.b.ab:
    com.google.gson.internal.LinkedTreeMap$EntrySet this$1 -> a
    void <init>(com.google.gson.internal.LinkedTreeMap$EntrySet) -> <init>
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$KeySet -> com.a.a.b.ac:
    com.google.gson.internal.LinkedTreeMap this$0 -> a
    void <init>(com.google.gson.internal.LinkedTreeMap) -> <init>
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$KeySet$1 -> com.a.a.b.ad:
    com.google.gson.internal.LinkedTreeMap$KeySet this$1 -> a
    void <init>(com.google.gson.internal.LinkedTreeMap$KeySet) -> <init>
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator -> com.a.a.b.ae:
    com.google.gson.internal.LinkedTreeMap$Node next -> b
    com.google.gson.internal.LinkedTreeMap$Node lastReturned -> c
    int expectedModCount -> d
    com.google.gson.internal.LinkedTreeMap this$0 -> e
    void <init>(com.google.gson.internal.LinkedTreeMap) -> <init>
    boolean hasNext() -> hasNext
    com.google.gson.internal.LinkedTreeMap$Node nextNode() -> a
    void remove() -> remove
com.google.gson.internal.LinkedTreeMap$Node -> com.a.a.b.af:
    com.google.gson.internal.LinkedTreeMap$Node parent -> a
    com.google.gson.internal.LinkedTreeMap$Node left -> b
    com.google.gson.internal.LinkedTreeMap$Node right -> c
    com.google.gson.internal.LinkedTreeMap$Node next -> d
    com.google.gson.internal.LinkedTreeMap$Node prev -> e
    java.lang.Object key -> f
    java.lang.Object value -> g
    int height -> h
    void <init>() -> <init>
    void <init>(com.google.gson.internal.LinkedTreeMap$Node,java.lang.Object,com.google.gson.internal.LinkedTreeMap$Node,com.google.gson.internal.LinkedTreeMap$Node) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.ObjectConstructor -> com.a.a.b.ag:
    java.lang.Object construct() -> a
com.google.gson.internal.Primitives -> com.a.a.b.ah:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> a
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> b
    void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> a
    boolean isPrimitive(java.lang.reflect.Type) -> a
    java.lang.Class wrap(java.lang.Class) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.Streams -> com.a.a.b.ai:
    com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> a
com.google.gson.internal.UnsafeAllocator -> com.a.a.b.aj:
    void <init>() -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
    com.google.gson.internal.UnsafeAllocator create() -> a
com.google.gson.internal.UnsafeAllocator$1 -> com.a.a.b.ak:
    java.lang.reflect.Method val$allocateInstance -> a
    java.lang.Object val$unsafe -> b
    void <init>(java.lang.reflect.Method,java.lang.Object) -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$2 -> com.a.a.b.al:
    java.lang.reflect.Method val$newInstance -> a
    int val$constructorId -> b
    void <init>(java.lang.reflect.Method,int) -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$3 -> com.a.a.b.am:
    java.lang.reflect.Method val$newInstance -> a
    void <init>(java.lang.reflect.Method) -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$4 -> com.a.a.b.an:
    void <init>() -> <init>
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.bind.ArrayTypeAdapter -> com.a.a.b.a.a:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.lang.Class componentType -> b
    com.google.gson.TypeAdapter componentTypeAdapter -> c
    void <init>(com.google.gson.Gson,com.google.gson.TypeAdapter,java.lang.Class) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.ArrayTypeAdapter$1 -> com.a.a.b.a.b:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory -> com.a.a.b.a.c:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter -> com.a.a.b.a.d:
    com.google.gson.TypeAdapter elementTypeAdapter -> a
    com.google.gson.internal.ObjectConstructor constructor -> b
    void <init>(com.google.gson.Gson,java.lang.reflect.Type,com.google.gson.TypeAdapter,com.google.gson.internal.ObjectConstructor) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter -> com.a.a.b.a.e:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat enUsFormat -> b
    java.text.DateFormat localFormat -> c
    void <init>() -> <init>
    java.util.Date deserializeToDate(java.lang.String) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.DateTypeAdapter$1 -> com.a.a.b.a.f:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory -> com.a.a.b.a.g:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    void <init>(com.google.gson.internal.ConstructorConstructor) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getTypeAdapter(com.google.gson.internal.ConstructorConstructor,com.google.gson.Gson,com.google.gson.reflect.TypeToken,com.google.gson.annotations.JsonAdapter) -> a
com.google.gson.internal.bind.JsonTreeReader -> com.a.a.b.a.h:
    java.io.Reader UNREADABLE_READER -> e
    java.lang.Object SENTINEL_CLOSED -> f
    java.util.List stack -> a
    void <init>(com.google.gson.JsonElement) -> <init>
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    java.lang.Object peekStack() -> g
    java.lang.Object popStack() -> s
    void expect(com.google.gson.stream.JsonToken) -> a
    java.lang.String nextName() -> h
    java.lang.String nextString() -> i
    boolean nextBoolean() -> j
    void nextNull() -> k
    double nextDouble() -> l
    long nextLong() -> m
    int nextInt() -> n
    void close() -> close
    void skipValue() -> o
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.JsonTreeReader$1 -> com.a.a.b.a.i:
    void <init>() -> <init>
    int read(char[],int,int) -> read
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter -> com.a.a.b.a.j:
    java.io.Writer UNWRITABLE_WRITER -> f
    com.google.gson.JsonPrimitive SENTINEL_CLOSED -> g
    java.util.List stack -> h
    java.lang.String pendingName -> i
    com.google.gson.JsonElement product -> j
    void <init>() -> <init>
    com.google.gson.JsonElement get() -> a
    com.google.gson.JsonElement peek() -> g
    void put(com.google.gson.JsonElement) -> a
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.JsonTreeWriter$1 -> com.a.a.b.a.k:
    void <init>() -> <init>
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.MapTypeAdapterFactory -> com.a.a.b.a.l:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> b
    boolean complexMapKeySerialization -> a
    void <init>(com.google.gson.internal.ConstructorConstructor,boolean) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter -> com.a.a.b.a.m:
    com.google.gson.TypeAdapter keyTypeAdapter -> b
    com.google.gson.TypeAdapter valueTypeAdapter -> c
    com.google.gson.internal.ObjectConstructor constructor -> d
    com.google.gson.internal.bind.MapTypeAdapterFactory this$0 -> a
    void <init>(com.google.gson.internal.bind.MapTypeAdapterFactory,com.google.gson.Gson,java.lang.reflect.Type,com.google.gson.TypeAdapter,java.lang.reflect.Type,com.google.gson.TypeAdapter,com.google.gson.internal.ObjectConstructor) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter -> com.a.a.b.a.n:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    com.google.gson.Gson gson -> b
    void <init>(com.google.gson.Gson) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.ObjectTypeAdapter$1 -> com.a.a.b.a.o:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$2 -> com.a.a.b.a.p:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory -> com.a.a.b.a.q:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> b
    com.google.gson.internal.Excluder excluder -> c
    void <init>(com.google.gson.internal.ConstructorConstructor,com.google.gson.FieldNamingStrategy,com.google.gson.internal.Excluder) -> <init>
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    java.util.List getFieldNames(java.lang.reflect.Field) -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.util.Map getBoundFields(com.google.gson.Gson,com.google.gson.reflect.TypeToken,java.lang.Class) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1 -> com.a.a.b.a.r:
    com.google.gson.TypeAdapter typeAdapter -> a
    com.google.gson.Gson val$context -> b
    java.lang.reflect.Field val$field -> c
    com.google.gson.reflect.TypeToken val$fieldType -> d
    boolean val$isPrimitive -> e
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0 -> f
    void <init>(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,java.lang.String,boolean,boolean,com.google.gson.Gson,java.lang.reflect.Field,com.google.gson.reflect.TypeToken,boolean) -> <init>
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
    boolean writeField(java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter -> com.a.a.b.a.s:
    com.google.gson.internal.ObjectConstructor constructor -> a
    java.util.Map boundFields -> b
    void <init>(com.google.gson.internal.ObjectConstructor,java.util.Map) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField -> com.a.a.b.a.t:
    java.lang.String name -> g
    boolean serialized -> h
    boolean deserialized -> i
    void <init>(java.lang.String,boolean,boolean) -> <init>
    boolean writeField(java.lang.Object) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter -> com.a.a.b.a.u:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    void <init>() -> <init>
    java.sql.Date read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.sql.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.SqlDateTypeAdapter$1 -> com.a.a.b.a.v:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TimeTypeAdapter -> com.a.a.b.a.w:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    void <init>() -> <init>
    java.sql.Time read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.sql.Time) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.TimeTypeAdapter$1 -> com.a.a.b.a.x:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper -> com.a.a.b.a.y:
    com.google.gson.Gson context -> a
    com.google.gson.TypeAdapter delegate -> b
    java.lang.reflect.Type type -> c
    void <init>(com.google.gson.Gson,com.google.gson.TypeAdapter,java.lang.reflect.Type) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters -> com.a.a.b.a.z:
    com.google.gson.TypeAdapter CLASS -> a
    com.google.gson.TypeAdapterFactory CLASS_FACTORY -> b
    com.google.gson.TypeAdapter BIT_SET -> c
    com.google.gson.TypeAdapterFactory BIT_SET_FACTORY -> d
    com.google.gson.TypeAdapter BOOLEAN -> e
    com.google.gson.TypeAdapter BOOLEAN_AS_STRING -> f
    com.google.gson.TypeAdapterFactory BOOLEAN_FACTORY -> g
    com.google.gson.TypeAdapter BYTE -> h
    com.google.gson.TypeAdapterFactory BYTE_FACTORY -> i
    com.google.gson.TypeAdapter SHORT -> j
    com.google.gson.TypeAdapterFactory SHORT_FACTORY -> k
    com.google.gson.TypeAdapter INTEGER -> l
    com.google.gson.TypeAdapterFactory INTEGER_FACTORY -> m
    com.google.gson.TypeAdapter ATOMIC_INTEGER -> n
    com.google.gson.TypeAdapterFactory ATOMIC_INTEGER_FACTORY -> o
    com.google.gson.TypeAdapter ATOMIC_BOOLEAN -> p
    com.google.gson.TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY -> q
    com.google.gson.TypeAdapter ATOMIC_INTEGER_ARRAY -> r
    com.google.gson.TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY -> s
    com.google.gson.TypeAdapter LONG -> t
    com.google.gson.TypeAdapter FLOAT -> u
    com.google.gson.TypeAdapter DOUBLE -> v
    com.google.gson.TypeAdapter NUMBER -> w
    com.google.gson.TypeAdapterFactory NUMBER_FACTORY -> x
    com.google.gson.TypeAdapter CHARACTER -> y
    com.google.gson.TypeAdapterFactory CHARACTER_FACTORY -> z
    com.google.gson.TypeAdapter STRING -> A
    com.google.gson.TypeAdapter BIG_DECIMAL -> B
    com.google.gson.TypeAdapter BIG_INTEGER -> C
    com.google.gson.TypeAdapterFactory STRING_FACTORY -> D
    com.google.gson.TypeAdapter STRING_BUILDER -> E
    com.google.gson.TypeAdapterFactory STRING_BUILDER_FACTORY -> F
    com.google.gson.TypeAdapter STRING_BUFFER -> G
    com.google.gson.TypeAdapterFactory STRING_BUFFER_FACTORY -> H
    com.google.gson.TypeAdapter URL -> I
    com.google.gson.TypeAdapterFactory URL_FACTORY -> J
    com.google.gson.TypeAdapter URI -> K
    com.google.gson.TypeAdapterFactory URI_FACTORY -> L
    com.google.gson.TypeAdapter INET_ADDRESS -> M
    com.google.gson.TypeAdapterFactory INET_ADDRESS_FACTORY -> N
    com.google.gson.TypeAdapter UUID -> O
    com.google.gson.TypeAdapterFactory UUID_FACTORY -> P
    com.google.gson.TypeAdapter CURRENCY -> Q
    com.google.gson.TypeAdapterFactory CURRENCY_FACTORY -> R
    com.google.gson.TypeAdapterFactory TIMESTAMP_FACTORY -> S
    com.google.gson.TypeAdapter CALENDAR -> T
    com.google.gson.TypeAdapterFactory CALENDAR_FACTORY -> U
    com.google.gson.TypeAdapter LOCALE -> V
    com.google.gson.TypeAdapterFactory LOCALE_FACTORY -> W
    com.google.gson.TypeAdapter JSON_ELEMENT -> X
    com.google.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY -> Y
    com.google.gson.TypeAdapterFactory ENUM_FACTORY -> Z
    com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter) -> b
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.TypeAdapters$1 -> com.a.a.b.a.aa:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$10 -> com.a.a.b.a.ab:
    void <init>() -> <init>
    java.util.concurrent.atomic.AtomicIntegerArray read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$11 -> com.a.a.b.a.ac:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$12 -> com.a.a.b.a.ad:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$13 -> com.a.a.b.a.ae:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$14 -> com.a.a.b.a.af:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$15 -> com.a.a.b.a.ag:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$16 -> com.a.a.b.a.ah:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$17 -> com.a.a.b.a.ai:
    void <init>() -> <init>
    java.math.BigDecimal read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$18 -> com.a.a.b.a.aj:
    void <init>() -> <init>
    java.math.BigInteger read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$19 -> com.a.a.b.a.ak:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$2 -> com.a.a.b.a.al:
    void <init>() -> <init>
    java.util.BitSet read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$20 -> com.a.a.b.a.am:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$21 -> com.a.a.b.a.an:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$22 -> com.a.a.b.a.ao:
    void <init>() -> <init>
    java.net.URI read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$23 -> com.a.a.b.a.ap:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$24 -> com.a.a.b.a.aq:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$25 -> com.a.a.b.a.ar:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$26 -> com.a.a.b.a.as:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$26$1 -> com.a.a.b.a.at:
    com.google.gson.TypeAdapter val$dateTypeAdapter -> a
    com.google.gson.internal.bind.TypeAdapters$26 this$0 -> b
    void <init>(com.google.gson.internal.bind.TypeAdapters$26,com.google.gson.TypeAdapter) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$27 -> com.a.a.b.a.au:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$28 -> com.a.a.b.a.av:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$29 -> com.a.a.b.a.aw:
    void <init>() -> <init>
    com.google.gson.JsonElement read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$3 -> com.a.a.b.a.ax:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$30 -> com.a.a.b.a.ay:
    void <init>() -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$31 -> com.a.a.b.a.az:
    com.google.gson.reflect.TypeToken val$type -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    void <init>(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$32 -> com.a.a.b.a.ba:
    java.lang.Class val$type -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    void <init>(java.lang.Class,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$33 -> com.a.a.b.a.bb:
    java.lang.Class val$unboxed -> a
    java.lang.Class val$boxed -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    void <init>(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$34 -> com.a.a.b.a.bc:
    java.lang.Class val$base -> a
    java.lang.Class val$sub -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    void <init>(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$35 -> com.a.a.b.a.bd:
    java.lang.Class val$clazz -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    void <init>(java.lang.Class,com.google.gson.TypeAdapter) -> <init>
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$35$1 -> com.a.a.b.a.be:
    java.lang.Class val$requestedType -> a
    com.google.gson.internal.bind.TypeAdapters$35 this$0 -> b
    void <init>(com.google.gson.internal.bind.TypeAdapters$35,java.lang.Class) -> <init>
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
com.google.gson.internal.bind.TypeAdapters$36 -> com.a.a.b.a.bf:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
    void <clinit>() -> <clinit>
com.google.gson.internal.bind.TypeAdapters$4 -> com.a.a.b.a.bg:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$5 -> com.a.a.b.a.bh:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$6 -> com.a.a.b.a.bi:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$7 -> com.a.a.b.a.bj:
    void <init>() -> <init>
    java.lang.Number read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$8 -> com.a.a.b.a.bk:
    void <init>() -> <init>
    java.util.concurrent.atomic.AtomicInteger read(com.google.gson.stream.JsonReader) -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$9 -> com.a.a.b.a.bl:
    void <init>() -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter -> com.a.a.b.a.bm:
    java.util.Map nameToConstant -> a
    java.util.Map constantToName -> b
    void <init>(java.lang.Class) -> <init>
    java.lang.Object read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.util.ISO8601Utils -> com.a.a.b.a.a.a:
    java.util.TimeZone TIMEZONE_UTC -> a
    java.util.Date parse(java.lang.String,java.text.ParsePosition) -> a
    boolean checkOffset(java.lang.String,int,char) -> a
    int parseInt(java.lang.String,int,int) -> a
    int indexOfNonDigit(java.lang.String,int) -> a
    void <clinit>() -> <clinit>
com.google.gson.reflect.TypeToken -> com.a.a.c.a:
    java.lang.Class rawType -> rawType
    java.lang.reflect.Type type -> type
    int hashCode -> hashCode
    void <init>() -> <init>
    void <init>(java.lang.reflect.Type) -> <init>
    java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class) -> getSuperclassTypeParameter
    java.lang.Class getRawType() -> getRawType
    java.lang.reflect.Type getType() -> getType
    boolean isAssignableFrom(java.lang.Class) -> isAssignableFrom
    boolean isAssignableFrom(java.lang.reflect.Type) -> isAssignableFrom
    boolean isAssignableFrom(com.google.gson.reflect.TypeToken) -> isAssignableFrom
    boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.GenericArrayType) -> isAssignableFrom
    boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map) -> isAssignableFrom
    boolean typeEquals(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType,java.util.Map) -> typeEquals
    java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type,java.lang.Class[]) -> buildUnexpectedTypeError
    boolean matches(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map) -> matches
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.gson.reflect.TypeToken get(java.lang.reflect.Type) -> get
    com.google.gson.reflect.TypeToken get(java.lang.Class) -> get
com.google.gson.stream.JsonReader -> com.a.a.d.a:
    char[] NON_EXECUTE_PREFIX -> a
    java.io.Reader in -> e
    boolean lenient -> b
    char[] buffer -> f
    int pos -> g
    int limit -> h
    int lineNumber -> c
    int lineStart -> i
    int peeked -> d
    long peekedLong -> j
    int peekedNumberLength -> k
    java.lang.String peekedString -> l
    int[] stack -> m
    int stackSize -> n
    java.lang.String[] pathNames -> o
    int[] pathIndices -> p
    void <init>(java.io.Reader) -> <init>
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    int doPeek() -> p
    int peekKeyword() -> g
    int peekNumber() -> s
    boolean isLiteral(char) -> a
    java.lang.String nextName() -> h
    java.lang.String nextString() -> i
    boolean nextBoolean() -> j
    void nextNull() -> k
    double nextDouble() -> l
    long nextLong() -> m
    java.lang.String nextQuotedValue(char) -> b
    java.lang.String nextUnquotedValue() -> t
    void skipQuotedValue(char) -> c
    int nextInt() -> n
    void close() -> close
    void skipValue() -> o
    void push(int) -> a
    boolean fillBuffer(int) -> b
    int getColumnNumber() -> q
    int nextNonWhitespace(boolean) -> a
    void checkLenient() -> u
    void skipToEndOfLine() -> v
    java.lang.String toString() -> toString
    java.lang.String getPath() -> r
    char readEscapeCharacter() -> w
    java.io.IOException syntaxError(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.google.gson.stream.JsonReader$1 -> com.a.a.d.b:
    void <init>() -> <init>
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.stream.JsonToken -> com.a.a.d.c:
    com.google.gson.stream.JsonToken BEGIN_ARRAY -> a
    com.google.gson.stream.JsonToken END_ARRAY -> b
    com.google.gson.stream.JsonToken BEGIN_OBJECT -> c
    com.google.gson.stream.JsonToken END_OBJECT -> d
    com.google.gson.stream.JsonToken NAME -> e
    com.google.gson.stream.JsonToken STRING -> f
    com.google.gson.stream.JsonToken NUMBER -> g
    com.google.gson.stream.JsonToken BOOLEAN -> h
    com.google.gson.stream.JsonToken NULL -> i
    com.google.gson.stream.JsonToken END_DOCUMENT -> j
    com.google.gson.stream.JsonToken[] $VALUES -> k
    com.google.gson.stream.JsonToken[] values() -> values
    com.google.gson.stream.JsonToken valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.gson.stream.JsonWriter -> com.a.a.d.d:
    java.lang.String[] REPLACEMENT_CHARS -> f
    java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS -> g
    java.io.Writer out -> h
    int[] stack -> i
    int stackSize -> j
    java.lang.String indent -> a
    java.lang.String separator -> b
    boolean lenient -> c
    boolean htmlSafe -> d
    java.lang.String deferredName -> k
    boolean serializeNulls -> e
    void <init>(java.io.Writer) -> <init>
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter open(int,java.lang.String) -> a
    com.google.gson.stream.JsonWriter close(int,int,java.lang.String) -> a
    void push(int) -> a
    int peek() -> a
    void replaceTop(int) -> b
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    void writeDeferredName() -> g
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
    void string(java.lang.String) -> c
    void newline() -> h
    void beforeValue() -> i
    void <clinit>() -> <clinit>
com.google.gson.stream.MalformedJsonException -> com.a.a.d.e:
    void <init>(java.lang.String) -> <init>
okhttp3.Address -> okhttp3.Address:
    okhttp3.HttpUrl url -> url
    okhttp3.Dns dns -> dns
    javax.net.SocketFactory socketFactory -> socketFactory
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.net.ProxySelector proxySelector -> proxySelector
    java.net.Proxy proxy -> proxy
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector) -> <init>
    okhttp3.HttpUrl url() -> url
    okhttp3.Dns dns() -> dns
    javax.net.SocketFactory socketFactory() -> socketFactory
    okhttp3.Authenticator proxyAuthenticator() -> proxyAuthenticator
    java.util.List protocols() -> protocols
    java.util.List connectionSpecs() -> connectionSpecs
    java.net.ProxySelector proxySelector() -> proxySelector
    java.net.Proxy proxy() -> proxy
    javax.net.ssl.SSLSocketFactory sslSocketFactory() -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier() -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner() -> certificatePinner
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.Authenticator -> okhttp3.Authenticator:
    okhttp3.Authenticator NONE -> NONE
    okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> authenticate
    void <clinit>() -> <clinit>
okhttp3.Authenticator$1 -> okhttp3.Authenticator$1:
    void <init>() -> <init>
    okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> authenticate
okhttp3.Cache -> okhttp3.Cache:
    int VERSION -> VERSION
    int ENTRY_METADATA -> ENTRY_METADATA
    int ENTRY_BODY -> ENTRY_BODY
    int ENTRY_COUNT -> ENTRY_COUNT
    okhttp3.internal.InternalCache internalCache -> internalCache
    okhttp3.internal.DiskLruCache cache -> cache
    int writeSuccessCount -> writeSuccessCount
    int writeAbortCount -> writeAbortCount
    int networkCount -> networkCount
    int hitCount -> hitCount
    int requestCount -> requestCount
    void <init>(java.io.File,long) -> <init>
    void <init>(java.io.File,long,okhttp3.internal.io.FileSystem) -> <init>
    java.lang.String urlToKey(okhttp3.Request) -> urlToKey
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.http.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void abortQuietly(okhttp3.internal.DiskLruCache$Editor) -> abortQuietly
    void initialize() -> initialize
    void delete() -> delete
    void evictAll() -> evictAll
    java.util.Iterator urls() -> urls
    int writeAbortCount() -> writeAbortCount
    int writeSuccessCount() -> writeSuccessCount
    long size() -> size
    long maxSize() -> maxSize
    void flush() -> flush
    void close() -> close
    java.io.File directory() -> directory
    boolean isClosed() -> isClosed
    void trackResponse(okhttp3.internal.http.CacheStrategy) -> trackResponse
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    int networkCount() -> networkCount
    int hitCount() -> hitCount
    int requestCount() -> requestCount
    int readInt(okio.BufferedSource) -> readInt
    okhttp3.internal.http.CacheRequest access$000(okhttp3.Cache,okhttp3.Response) -> access$000
    void access$100(okhttp3.Cache,okhttp3.Request) -> access$100
    void access$200(okhttp3.Cache,okhttp3.Response,okhttp3.Response) -> access$200
    void access$300(okhttp3.Cache) -> access$300
    void access$400(okhttp3.Cache,okhttp3.internal.http.CacheStrategy) -> access$400
    okhttp3.internal.DiskLruCache access$600(okhttp3.Cache) -> access$600
    int access$808(okhttp3.Cache) -> access$808
    int access$908(okhttp3.Cache) -> access$908
    int access$1000(okio.BufferedSource) -> access$1000
okhttp3.Cache$1 -> okhttp3.Cache$1:
    okhttp3.Cache this$0 -> this$0
    void <init>(okhttp3.Cache) -> <init>
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.http.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    void trackResponse(okhttp3.internal.http.CacheStrategy) -> trackResponse
okhttp3.Cache$2 -> okhttp3.Cache$2:
    java.util.Iterator delegate -> delegate
    java.lang.String nextUrl -> nextUrl
    boolean canRemove -> canRemove
    okhttp3.Cache this$0 -> this$0
    void <init>(okhttp3.Cache) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
okhttp3.Cache$CacheRequestImpl -> okhttp3.Cache$CacheRequestImpl:
    okhttp3.internal.DiskLruCache$Editor editor -> editor
    okio.Sink cacheOut -> cacheOut
    boolean done -> done
    okio.Sink body -> body
    okhttp3.Cache this$0 -> this$0
    void <init>(okhttp3.Cache,okhttp3.internal.DiskLruCache$Editor) -> <init>
    void abort() -> abort
    okio.Sink body() -> body
    boolean access$700(okhttp3.Cache$CacheRequestImpl) -> access$700
    boolean access$702(okhttp3.Cache$CacheRequestImpl,boolean) -> access$702
okhttp3.Cache$CacheRequestImpl$1 -> okhttp3.Cache$CacheRequestImpl$1:
    okhttp3.Cache val$this$0 -> val$this$0
    okhttp3.internal.DiskLruCache$Editor val$editor -> val$editor
    okhttp3.Cache$CacheRequestImpl this$1 -> this$1
    void <init>(okhttp3.Cache$CacheRequestImpl,okio.Sink,okhttp3.Cache,okhttp3.internal.DiskLruCache$Editor) -> <init>
    void close() -> close
okhttp3.Cache$CacheResponseBody -> okhttp3.Cache$CacheResponseBody:
    okhttp3.internal.DiskLruCache$Snapshot snapshot -> snapshot
    okio.BufferedSource bodySource -> bodySource
    java.lang.String contentType -> contentType
    java.lang.String contentLength -> contentLength
    void <init>(okhttp3.internal.DiskLruCache$Snapshot,java.lang.String,java.lang.String) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
    okhttp3.internal.DiskLruCache$Snapshot access$500(okhttp3.Cache$CacheResponseBody) -> access$500
okhttp3.Cache$CacheResponseBody$1 -> okhttp3.Cache$CacheResponseBody$1:
    okhttp3.internal.DiskLruCache$Snapshot val$snapshot -> val$snapshot
    okhttp3.Cache$CacheResponseBody this$0 -> this$0
    void <init>(okhttp3.Cache$CacheResponseBody,okio.Source,okhttp3.internal.DiskLruCache$Snapshot) -> <init>
    void close() -> close
okhttp3.Cache$Entry -> okhttp3.Cache$Entry:
    java.lang.String url -> url
    okhttp3.Headers varyHeaders -> varyHeaders
    java.lang.String requestMethod -> requestMethod
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Headers responseHeaders -> responseHeaders
    okhttp3.Handshake handshake -> handshake
    long sentRequestMillis -> sentRequestMillis
    long receivedResponseMillis -> receivedResponseMillis
    void <init>(okio.Source) -> <init>
    void <init>(okhttp3.Response) -> <init>
    void writeTo(okhttp3.internal.DiskLruCache$Editor) -> writeTo
    boolean isHttps() -> isHttps
    java.util.List readCertificateList(okio.BufferedSource) -> readCertificateList
    void writeCertList(okio.BufferedSink,java.util.List) -> writeCertList
    boolean matches(okhttp3.Request,okhttp3.Response) -> matches
    okhttp3.Response response(okhttp3.internal.DiskLruCache$Snapshot) -> response
okhttp3.CacheControl -> okhttp3.CacheControl:
    okhttp3.CacheControl FORCE_NETWORK -> FORCE_NETWORK
    okhttp3.CacheControl FORCE_CACHE -> FORCE_CACHE
    boolean noCache -> noCache
    boolean noStore -> noStore
    int maxAgeSeconds -> maxAgeSeconds
    int sMaxAgeSeconds -> sMaxAgeSeconds
    boolean isPrivate -> isPrivate
    boolean isPublic -> isPublic
    boolean mustRevalidate -> mustRevalidate
    int maxStaleSeconds -> maxStaleSeconds
    int minFreshSeconds -> minFreshSeconds
    boolean onlyIfCached -> onlyIfCached
    boolean noTransform -> noTransform
    java.lang.String headerValue -> headerValue
    void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String) -> <init>
    void <init>(okhttp3.CacheControl$Builder) -> <init>
    boolean noCache() -> noCache
    boolean noStore() -> noStore
    int maxAgeSeconds() -> maxAgeSeconds
    int sMaxAgeSeconds() -> sMaxAgeSeconds
    boolean isPrivate() -> isPrivate
    boolean isPublic() -> isPublic
    boolean mustRevalidate() -> mustRevalidate
    int maxStaleSeconds() -> maxStaleSeconds
    int minFreshSeconds() -> minFreshSeconds
    boolean onlyIfCached() -> onlyIfCached
    boolean noTransform() -> noTransform
    okhttp3.CacheControl parse(okhttp3.Headers) -> parse
    java.lang.String toString() -> toString
    java.lang.String headerValue() -> headerValue
    void <init>(okhttp3.CacheControl$Builder,okhttp3.CacheControl$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.CacheControl$1 -> okhttp3.CacheControl$1:
okhttp3.CacheControl$Builder -> okhttp3.CacheControl$Builder:
    boolean noCache -> noCache
    boolean noStore -> noStore
    int maxAgeSeconds -> maxAgeSeconds
    int maxStaleSeconds -> maxStaleSeconds
    int minFreshSeconds -> minFreshSeconds
    boolean onlyIfCached -> onlyIfCached
    boolean noTransform -> noTransform
    void <init>() -> <init>
    okhttp3.CacheControl$Builder noCache() -> noCache
    okhttp3.CacheControl$Builder noStore() -> noStore
    okhttp3.CacheControl$Builder maxAge(int,java.util.concurrent.TimeUnit) -> maxAge
    okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit) -> maxStale
    okhttp3.CacheControl$Builder minFresh(int,java.util.concurrent.TimeUnit) -> minFresh
    okhttp3.CacheControl$Builder onlyIfCached() -> onlyIfCached
    okhttp3.CacheControl$Builder noTransform() -> noTransform
    okhttp3.CacheControl build() -> build
okhttp3.Call -> okhttp3.Call:
    okhttp3.Request request() -> request
    okhttp3.Response execute() -> execute
    void enqueue(okhttp3.Callback) -> enqueue
    void cancel() -> cancel
    boolean isExecuted() -> isExecuted
    boolean isCanceled() -> isCanceled
okhttp3.Call$Factory -> okhttp3.Call$Factory:
    okhttp3.Call newCall(okhttp3.Request) -> newCall
okhttp3.Callback -> okhttp3.Callback:
    void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
    void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
okhttp3.CertificatePinner -> okhttp3.CertificatePinner:
    okhttp3.CertificatePinner DEFAULT -> DEFAULT
    java.util.List pins -> pins
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner) -> <init>
    void check(java.lang.String,java.util.List) -> check
    void check(java.lang.String,java.security.cert.Certificate[]) -> check
    java.util.List findMatchingPins(java.lang.String) -> findMatchingPins
    okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner) -> withCertificateChainCleaner
    java.lang.String pin(java.security.cert.Certificate) -> pin
    okio.ByteString sha1(java.security.cert.X509Certificate) -> sha1
    okio.ByteString sha256(java.security.cert.X509Certificate) -> sha256
    void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner,okhttp3.CertificatePinner$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.CertificatePinner$1 -> okhttp3.CertificatePinner$1:
okhttp3.CertificatePinner$Builder -> okhttp3.CertificatePinner$Builder:
    java.util.List pins -> pins
    void <init>() -> <init>
    okhttp3.CertificatePinner$Builder add(java.lang.String,java.lang.String[]) -> add
    okhttp3.CertificatePinner build() -> build
okhttp3.CertificatePinner$Pin -> okhttp3.CertificatePinner$Pin:
    java.lang.String pattern -> pattern
    java.lang.String hashAlgorithm -> hashAlgorithm
    okio.ByteString hash -> hash
    void <init>(java.lang.String,java.lang.String) -> <init>
    boolean matches(java.lang.String) -> matches
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
okhttp3.Challenge -> okhttp3.Challenge:
    java.lang.String scheme -> scheme
    java.lang.String realm -> realm
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String scheme() -> scheme
    java.lang.String realm() -> realm
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
okhttp3.CipherSuite -> okhttp3.CipherSuite:
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_MD5 -> TLS_RSA_WITH_NULL_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA -> TLS_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 -> TLS_RSA_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_MD5 -> TLS_RSA_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_SHA -> TLS_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_RSA_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_DES_CBC_SHA -> TLS_RSA_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA -> TLS_DHE_DSS_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA -> TLS_DHE_RSA_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 -> TLS_DH_anon_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 -> TLS_DH_anon_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA -> TLS_DH_anon_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_SHA -> TLS_KRB5_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA -> TLS_KRB5_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_SHA -> TLS_KRB5_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 -> TLS_KRB5_WITH_DES_CBC_MD5
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 -> TLS_KRB5_WITH_3DES_EDE_CBC_MD5
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_MD5 -> TLS_KRB5_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA -> TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA -> TLS_KRB5_EXPORT_WITH_RC4_40_SHA
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 -> TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 -> TLS_KRB5_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA -> TLS_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA -> TLS_DH_anon_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA -> TLS_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA -> TLS_DH_anon_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA256 -> TLS_RSA_WITH_NULL_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 -> TLS_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 -> TLS_RSA_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256 -> TLS_DH_anon_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256 -> TLS_DH_anon_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 -> TLS_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 -> TLS_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 -> TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 -> TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_GCM_SHA256 -> TLS_DH_anon_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_GCM_SHA384 -> TLS_DH_anon_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV -> TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA -> TLS_ECDH_ECDSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA -> TLS_ECDH_ECDSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA -> TLS_ECDHE_ECDSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA -> TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_NULL_SHA -> TLS_ECDH_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA -> TLS_ECDH_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA -> TLS_ECDHE_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA -> TLS_ECDHE_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_NULL_SHA -> TLS_ECDH_anon_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_RC4_128_SHA -> TLS_ECDH_anon_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_128_CBC_SHA -> TLS_ECDH_anon_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_256_CBC_SHA -> TLS_ECDH_anon_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    java.lang.String javaName -> javaName
    okhttp3.CipherSuite[] $VALUES -> $VALUES
    okhttp3.CipherSuite[] values() -> values
    okhttp3.CipherSuite valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,int,int,int,int) -> <init>
    java.lang.String javaName() -> javaName
    okhttp3.CipherSuite forJavaName(java.lang.String) -> forJavaName
    void <clinit>() -> <clinit>
okhttp3.Connection -> okhttp3.Connection:
    okhttp3.Route route() -> route
    java.net.Socket socket() -> socket
    okhttp3.Handshake handshake() -> handshake
    okhttp3.Protocol protocol() -> protocol
okhttp3.ConnectionPool -> okhttp3.ConnectionPool:
    java.util.concurrent.Executor executor -> executor
    int maxIdleConnections -> maxIdleConnections
    long keepAliveDurationNs -> keepAliveDurationNs
    java.lang.Runnable cleanupRunnable -> cleanupRunnable
    java.util.Deque connections -> connections
    okhttp3.internal.RouteDatabase routeDatabase -> routeDatabase
    boolean cleanupRunning -> cleanupRunning
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void <init>(int,long,java.util.concurrent.TimeUnit) -> <init>
    int idleConnectionCount() -> idleConnectionCount
    int connectionCount() -> connectionCount
    okhttp3.internal.io.RealConnection get(okhttp3.Address,okhttp3.internal.http.StreamAllocation) -> get
    void put(okhttp3.internal.io.RealConnection) -> put
    boolean connectionBecameIdle(okhttp3.internal.io.RealConnection) -> connectionBecameIdle
    void evictAll() -> evictAll
    long cleanup(long) -> cleanup
    int pruneAndGetAllocationCount(okhttp3.internal.io.RealConnection,long) -> pruneAndGetAllocationCount
    void <clinit>() -> <clinit>
okhttp3.ConnectionPool$1 -> okhttp3.ConnectionPool$1:
    okhttp3.ConnectionPool this$0 -> this$0
    void <init>(okhttp3.ConnectionPool) -> <init>
    void run() -> run
okhttp3.ConnectionSpec -> okhttp3.ConnectionSpec:
    okhttp3.CipherSuite[] APPROVED_CIPHER_SUITES -> APPROVED_CIPHER_SUITES
    okhttp3.ConnectionSpec MODERN_TLS -> MODERN_TLS
    okhttp3.ConnectionSpec COMPATIBLE_TLS -> COMPATIBLE_TLS
    okhttp3.ConnectionSpec CLEARTEXT -> CLEARTEXT
    boolean tls -> tls
    boolean supportsTlsExtensions -> supportsTlsExtensions
    java.lang.String[] cipherSuites -> cipherSuites
    java.lang.String[] tlsVersions -> tlsVersions
    void <init>(okhttp3.ConnectionSpec$Builder) -> <init>
    boolean isTls() -> isTls
    java.util.List cipherSuites() -> cipherSuites
    java.util.List tlsVersions() -> tlsVersions
    boolean supportsTlsExtensions() -> supportsTlsExtensions
    void apply(javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean) -> supportedSpec
    boolean isCompatible(javax.net.ssl.SSLSocket) -> isCompatible
    boolean nonEmptyIntersection(java.lang.String[],java.lang.String[]) -> nonEmptyIntersection
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean access$400(okhttp3.ConnectionSpec) -> access$400
    java.lang.String[] access$500(okhttp3.ConnectionSpec) -> access$500
    java.lang.String[] access$600(okhttp3.ConnectionSpec) -> access$600
    boolean access$700(okhttp3.ConnectionSpec) -> access$700
    void <init>(okhttp3.ConnectionSpec$Builder,okhttp3.ConnectionSpec$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.ConnectionSpec$1 -> okhttp3.ConnectionSpec$1:
okhttp3.ConnectionSpec$Builder -> okhttp3.ConnectionSpec$Builder:
    boolean tls -> tls
    java.lang.String[] cipherSuites -> cipherSuites
    java.lang.String[] tlsVersions -> tlsVersions
    boolean supportsTlsExtensions -> supportsTlsExtensions
    void <init>(boolean) -> <init>
    void <init>(okhttp3.ConnectionSpec) -> <init>
    okhttp3.ConnectionSpec$Builder allEnabledCipherSuites() -> allEnabledCipherSuites
    okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[]) -> cipherSuites
    okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[]) -> cipherSuites
    okhttp3.ConnectionSpec$Builder allEnabledTlsVersions() -> allEnabledTlsVersions
    okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[]) -> tlsVersions
    okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[]) -> tlsVersions
    okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean) -> supportsTlsExtensions
    okhttp3.ConnectionSpec build() -> build
    boolean access$000(okhttp3.ConnectionSpec$Builder) -> access$000
    java.lang.String[] access$100(okhttp3.ConnectionSpec$Builder) -> access$100
    java.lang.String[] access$200(okhttp3.ConnectionSpec$Builder) -> access$200
    boolean access$300(okhttp3.ConnectionSpec$Builder) -> access$300
okhttp3.Cookie -> okhttp3.Cookie:
    java.util.regex.Pattern YEAR_PATTERN -> YEAR_PATTERN
    java.util.regex.Pattern MONTH_PATTERN -> MONTH_PATTERN
    java.util.regex.Pattern DAY_OF_MONTH_PATTERN -> DAY_OF_MONTH_PATTERN
    java.util.regex.Pattern TIME_PATTERN -> TIME_PATTERN
    java.lang.String name -> name
    java.lang.String value -> value
    long expiresAt -> expiresAt
    java.lang.String domain -> domain
    java.lang.String path -> path
    boolean secure -> secure
    boolean httpOnly -> httpOnly
    boolean persistent -> persistent
    boolean hostOnly -> hostOnly
    void <init>(java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> <init>
    void <init>(okhttp3.Cookie$Builder) -> <init>
    java.lang.String name() -> name
    java.lang.String value() -> value
    boolean persistent() -> persistent
    long expiresAt() -> expiresAt
    boolean hostOnly() -> hostOnly
    java.lang.String domain() -> domain
    java.lang.String path() -> path
    boolean httpOnly() -> httpOnly
    boolean secure() -> secure
    boolean matches(okhttp3.HttpUrl) -> matches
    boolean domainMatch(okhttp3.HttpUrl,java.lang.String) -> domainMatch
    boolean pathMatch(okhttp3.HttpUrl,java.lang.String) -> pathMatch
    okhttp3.Cookie parse(okhttp3.HttpUrl,java.lang.String) -> parse
    okhttp3.Cookie parse(long,okhttp3.HttpUrl,java.lang.String) -> parse
    long parseExpires(java.lang.String,int,int) -> parseExpires
    int dateCharacterOffset(java.lang.String,int,int,boolean) -> dateCharacterOffset
    long parseMaxAge(java.lang.String) -> parseMaxAge
    java.lang.String parseDomain(java.lang.String) -> parseDomain
    java.util.List parseAll(okhttp3.HttpUrl,okhttp3.Headers) -> parseAll
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(okhttp3.Cookie$Builder,okhttp3.Cookie$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.Cookie$1 -> okhttp3.Cookie$1:
okhttp3.Cookie$Builder -> okhttp3.Cookie$Builder:
    java.lang.String name -> name
    java.lang.String value -> value
    long expiresAt -> expiresAt
    java.lang.String domain -> domain
    java.lang.String path -> path
    boolean secure -> secure
    boolean httpOnly -> httpOnly
    boolean persistent -> persistent
    boolean hostOnly -> hostOnly
    void <init>() -> <init>
    okhttp3.Cookie$Builder name(java.lang.String) -> name
    okhttp3.Cookie$Builder value(java.lang.String) -> value
    okhttp3.Cookie$Builder expiresAt(long) -> expiresAt
    okhttp3.Cookie$Builder domain(java.lang.String) -> domain
    okhttp3.Cookie$Builder hostOnlyDomain(java.lang.String) -> hostOnlyDomain
    okhttp3.Cookie$Builder domain(java.lang.String,boolean) -> domain
    okhttp3.Cookie$Builder path(java.lang.String) -> path
    okhttp3.Cookie$Builder secure() -> secure
    okhttp3.Cookie$Builder httpOnly() -> httpOnly
    okhttp3.Cookie build() -> build
okhttp3.CookieJar -> okhttp3.CookieJar:
    okhttp3.CookieJar NO_COOKIES -> NO_COOKIES
    void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> saveFromResponse
    java.util.List loadForRequest(okhttp3.HttpUrl) -> loadForRequest
    void <clinit>() -> <clinit>
okhttp3.CookieJar$1 -> okhttp3.CookieJar$1:
    void <init>() -> <init>
    void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> saveFromResponse
    java.util.List loadForRequest(okhttp3.HttpUrl) -> loadForRequest
okhttp3.Credentials -> okhttp3.Credentials:
    void <init>() -> <init>
    java.lang.String basic(java.lang.String,java.lang.String) -> basic
okhttp3.Dispatcher -> okhttp3.Dispatcher:
    int maxRequests -> maxRequests
    int maxRequestsPerHost -> maxRequestsPerHost
    java.util.concurrent.ExecutorService executorService -> executorService
    java.util.Deque readyAsyncCalls -> readyAsyncCalls
    java.util.Deque runningAsyncCalls -> runningAsyncCalls
    java.util.Deque runningSyncCalls -> runningSyncCalls
    void <init>(java.util.concurrent.ExecutorService) -> <init>
    void <init>() -> <init>
    java.util.concurrent.ExecutorService executorService() -> executorService
    void setMaxRequests(int) -> setMaxRequests
    int getMaxRequests() -> getMaxRequests
    void setMaxRequestsPerHost(int) -> setMaxRequestsPerHost
    int getMaxRequestsPerHost() -> getMaxRequestsPerHost
    void enqueue(okhttp3.RealCall$AsyncCall) -> enqueue
    void cancelAll() -> cancelAll
    void finished(okhttp3.RealCall$AsyncCall) -> finished
    void promoteCalls() -> promoteCalls
    int runningCallsForHost(okhttp3.RealCall$AsyncCall) -> runningCallsForHost
    void executed(okhttp3.RealCall) -> executed
    void finished(okhttp3.Call) -> finished
    java.util.List queuedCalls() -> queuedCalls
    java.util.List runningCalls() -> runningCalls
    int queuedCallsCount() -> queuedCallsCount
    int runningCallsCount() -> runningCallsCount
okhttp3.Dns -> okhttp3.Dns:
    okhttp3.Dns SYSTEM -> SYSTEM
    java.util.List lookup(java.lang.String) -> lookup
    void <clinit>() -> <clinit>
okhttp3.Dns$1 -> okhttp3.Dns$1:
    void <init>() -> <init>
    java.util.List lookup(java.lang.String) -> lookup
okhttp3.FormBody -> okhttp3.FormBody:
    okhttp3.MediaType CONTENT_TYPE -> CONTENT_TYPE
    java.util.List encodedNames -> encodedNames
    java.util.List encodedValues -> encodedValues
    void <init>(java.util.List,java.util.List) -> <init>
    int size() -> size
    java.lang.String encodedName(int) -> encodedName
    java.lang.String name(int) -> name
    java.lang.String encodedValue(int) -> encodedValue
    java.lang.String value(int) -> value
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    long writeOrCountBytes(okio.BufferedSink,boolean) -> writeOrCountBytes
    void <init>(java.util.List,java.util.List,okhttp3.FormBody$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.FormBody$1 -> okhttp3.FormBody$1:
okhttp3.FormBody$Builder -> okhttp3.FormBody$Builder:
    java.util.List names -> names
    java.util.List values -> values
    void <init>() -> <init>
    okhttp3.FormBody$Builder add(java.lang.String,java.lang.String) -> add
    okhttp3.FormBody$Builder addEncoded(java.lang.String,java.lang.String) -> addEncoded
    okhttp3.FormBody build() -> build
okhttp3.Handshake -> okhttp3.Handshake:
    okhttp3.TlsVersion tlsVersion -> tlsVersion
    okhttp3.CipherSuite cipherSuite -> cipherSuite
    java.util.List peerCertificates -> peerCertificates
    java.util.List localCertificates -> localCertificates
    void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List) -> <init>
    okhttp3.Handshake get(javax.net.ssl.SSLSession) -> get
    okhttp3.Handshake get(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List) -> get
    okhttp3.TlsVersion tlsVersion() -> tlsVersion
    okhttp3.CipherSuite cipherSuite() -> cipherSuite
    java.util.List peerCertificates() -> peerCertificates
    java.security.Principal peerPrincipal() -> peerPrincipal
    java.util.List localCertificates() -> localCertificates
    java.security.Principal localPrincipal() -> localPrincipal
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.Headers -> okhttp3.Headers:
    java.lang.String[] namesAndValues -> namesAndValues
    void <init>(okhttp3.Headers$Builder) -> <init>
    void <init>(java.lang.String[]) -> <init>
    java.lang.String get(java.lang.String) -> get
    java.util.Date getDate(java.lang.String) -> getDate
    int size() -> size
    java.lang.String name(int) -> name
    java.lang.String value(int) -> value
    java.util.Set names() -> names
    java.util.List values(java.lang.String) -> values
    okhttp3.Headers$Builder newBuilder() -> newBuilder
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Map toMultimap() -> toMultimap
    java.lang.String get(java.lang.String[],java.lang.String) -> get
    okhttp3.Headers of(java.lang.String[]) -> of
    okhttp3.Headers of(java.util.Map) -> of
    void <init>(okhttp3.Headers$Builder,okhttp3.Headers$1) -> <init>
okhttp3.Headers$1 -> okhttp3.Headers$1:
okhttp3.Headers$Builder -> okhttp3.Headers$Builder:
    java.util.List namesAndValues -> namesAndValues
    void <init>() -> <init>
    okhttp3.Headers$Builder addLenient(java.lang.String) -> addLenient
    okhttp3.Headers$Builder add(java.lang.String) -> add
    okhttp3.Headers$Builder add(java.lang.String,java.lang.String) -> add
    okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String) -> addLenient
    okhttp3.Headers$Builder removeAll(java.lang.String) -> removeAll
    okhttp3.Headers$Builder set(java.lang.String,java.lang.String) -> set
    void checkNameAndValue(java.lang.String,java.lang.String) -> checkNameAndValue
    java.lang.String get(java.lang.String) -> get
    okhttp3.Headers build() -> build
    java.util.List access$000(okhttp3.Headers$Builder) -> access$000
okhttp3.HttpUrl -> okhttp3.HttpUrl:
    char[] HEX_DIGITS -> HEX_DIGITS
    java.lang.String USERNAME_ENCODE_SET -> USERNAME_ENCODE_SET
    java.lang.String PASSWORD_ENCODE_SET -> PASSWORD_ENCODE_SET
    java.lang.String PATH_SEGMENT_ENCODE_SET -> PATH_SEGMENT_ENCODE_SET
    java.lang.String PATH_SEGMENT_ENCODE_SET_URI -> PATH_SEGMENT_ENCODE_SET_URI
    java.lang.String QUERY_ENCODE_SET -> QUERY_ENCODE_SET
    java.lang.String QUERY_COMPONENT_ENCODE_SET -> QUERY_COMPONENT_ENCODE_SET
    java.lang.String QUERY_COMPONENT_ENCODE_SET_URI -> QUERY_COMPONENT_ENCODE_SET_URI
    java.lang.String FORM_ENCODE_SET -> FORM_ENCODE_SET
    java.lang.String FRAGMENT_ENCODE_SET -> FRAGMENT_ENCODE_SET
    java.lang.String FRAGMENT_ENCODE_SET_URI -> FRAGMENT_ENCODE_SET_URI
    java.lang.String scheme -> scheme
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String host -> host
    int port -> port
    java.util.List pathSegments -> pathSegments
    java.util.List queryNamesAndValues -> queryNamesAndValues
    java.lang.String fragment -> fragment
    java.lang.String url -> url
    void <init>(okhttp3.HttpUrl$Builder) -> <init>
    java.net.URL url() -> url
    java.net.URI uri() -> uri
    java.lang.String scheme() -> scheme
    boolean isHttps() -> isHttps
    java.lang.String encodedUsername() -> encodedUsername
    java.lang.String username() -> username
    java.lang.String encodedPassword() -> encodedPassword
    java.lang.String password() -> password
    java.lang.String host() -> host
    int port() -> port
    int defaultPort(java.lang.String) -> defaultPort
    int pathSize() -> pathSize
    java.lang.String encodedPath() -> encodedPath
    void pathSegmentsToString(java.lang.StringBuilder,java.util.List) -> pathSegmentsToString
    java.util.List encodedPathSegments() -> encodedPathSegments
    java.util.List pathSegments() -> pathSegments
    java.lang.String encodedQuery() -> encodedQuery
    void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List) -> namesAndValuesToQueryString
    java.util.List queryStringToNamesAndValues(java.lang.String) -> queryStringToNamesAndValues
    java.lang.String query() -> query
    int querySize() -> querySize
    java.lang.String queryParameter(java.lang.String) -> queryParameter
    java.util.Set queryParameterNames() -> queryParameterNames
    java.util.List queryParameterValues(java.lang.String) -> queryParameterValues
    java.lang.String queryParameterName(int) -> queryParameterName
    java.lang.String queryParameterValue(int) -> queryParameterValue
    java.lang.String encodedFragment() -> encodedFragment
    java.lang.String fragment() -> fragment
    okhttp3.HttpUrl resolve(java.lang.String) -> resolve
    okhttp3.HttpUrl$Builder newBuilder() -> newBuilder
    okhttp3.HttpUrl$Builder newBuilder(java.lang.String) -> newBuilder
    okhttp3.HttpUrl parse(java.lang.String) -> parse
    okhttp3.HttpUrl get(java.net.URL) -> get
    okhttp3.HttpUrl getChecked(java.lang.String) -> getChecked
    okhttp3.HttpUrl get(java.net.URI) -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String percentDecode(java.lang.String,boolean) -> percentDecode
    java.util.List percentDecode(java.util.List,boolean) -> percentDecode
    java.lang.String percentDecode(java.lang.String,int,int,boolean) -> percentDecode
    void percentDecode(okio.Buffer,java.lang.String,int,int,boolean) -> percentDecode
    boolean percentEncoded(java.lang.String,int,int) -> percentEncoded
    int decodeHexDigit(char) -> decodeHexDigit
    java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    void <init>(okhttp3.HttpUrl$Builder,okhttp3.HttpUrl$1) -> <init>
    java.lang.String access$100(okhttp3.HttpUrl) -> access$100
    java.lang.String access$200(okhttp3.HttpUrl) -> access$200
    int access$300(okhttp3.HttpUrl) -> access$300
    void <clinit>() -> <clinit>
okhttp3.HttpUrl$1 -> okhttp3.HttpUrl$1:
    int[] $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult -> $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult
    void <clinit>() -> <clinit>
okhttp3.HttpUrl$Builder -> okhttp3.HttpUrl$Builder:
    java.lang.String scheme -> scheme
    java.lang.String encodedUsername -> encodedUsername
    java.lang.String encodedPassword -> encodedPassword
    java.lang.String host -> host
    int port -> port
    java.util.List encodedPathSegments -> encodedPathSegments
    java.util.List encodedQueryNamesAndValues -> encodedQueryNamesAndValues
    java.lang.String encodedFragment -> encodedFragment
    void <init>() -> <init>
    okhttp3.HttpUrl$Builder scheme(java.lang.String) -> scheme
    okhttp3.HttpUrl$Builder username(java.lang.String) -> username
    okhttp3.HttpUrl$Builder encodedUsername(java.lang.String) -> encodedUsername
    okhttp3.HttpUrl$Builder password(java.lang.String) -> password
    okhttp3.HttpUrl$Builder encodedPassword(java.lang.String) -> encodedPassword
    okhttp3.HttpUrl$Builder host(java.lang.String) -> host
    okhttp3.HttpUrl$Builder port(int) -> port
    int effectivePort() -> effectivePort
    okhttp3.HttpUrl$Builder addPathSegment(java.lang.String) -> addPathSegment
    okhttp3.HttpUrl$Builder addPathSegments(java.lang.String) -> addPathSegments
    okhttp3.HttpUrl$Builder addEncodedPathSegment(java.lang.String) -> addEncodedPathSegment
    okhttp3.HttpUrl$Builder addEncodedPathSegments(java.lang.String) -> addEncodedPathSegments
    okhttp3.HttpUrl$Builder addPathSegments(java.lang.String,boolean) -> addPathSegments
    okhttp3.HttpUrl$Builder setPathSegment(int,java.lang.String) -> setPathSegment
    okhttp3.HttpUrl$Builder setEncodedPathSegment(int,java.lang.String) -> setEncodedPathSegment
    okhttp3.HttpUrl$Builder removePathSegment(int) -> removePathSegment
    okhttp3.HttpUrl$Builder encodedPath(java.lang.String) -> encodedPath
    okhttp3.HttpUrl$Builder query(java.lang.String) -> query
    okhttp3.HttpUrl$Builder encodedQuery(java.lang.String) -> encodedQuery
    okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String) -> addQueryParameter
    okhttp3.HttpUrl$Builder addEncodedQueryParameter(java.lang.String,java.lang.String) -> addEncodedQueryParameter
    okhttp3.HttpUrl$Builder setQueryParameter(java.lang.String,java.lang.String) -> setQueryParameter
    okhttp3.HttpUrl$Builder setEncodedQueryParameter(java.lang.String,java.lang.String) -> setEncodedQueryParameter
    okhttp3.HttpUrl$Builder removeAllQueryParameters(java.lang.String) -> removeAllQueryParameters
    okhttp3.HttpUrl$Builder removeAllEncodedQueryParameters(java.lang.String) -> removeAllEncodedQueryParameters
    void removeAllCanonicalQueryParameters(java.lang.String) -> removeAllCanonicalQueryParameters
    okhttp3.HttpUrl$Builder fragment(java.lang.String) -> fragment
    okhttp3.HttpUrl$Builder encodedFragment(java.lang.String) -> encodedFragment
    okhttp3.HttpUrl$Builder reencodeForUri() -> reencodeForUri
    okhttp3.HttpUrl build() -> build
    java.lang.String toString() -> toString
    okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String) -> parse
    void resolvePath(java.lang.String,int,int) -> resolvePath
    void push(java.lang.String,int,int,boolean,boolean) -> push
    boolean isDot(java.lang.String) -> isDot
    boolean isDotDot(java.lang.String) -> isDotDot
    void pop() -> pop
    int schemeDelimiterOffset(java.lang.String,int,int) -> schemeDelimiterOffset
    int slashCount(java.lang.String,int,int) -> slashCount
    int portColonOffset(java.lang.String,int,int) -> portColonOffset
    java.lang.String canonicalizeHost(java.lang.String,int,int) -> canonicalizeHost
    java.net.InetAddress decodeIpv6(java.lang.String,int,int) -> decodeIpv6
    boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int) -> decodeIpv4Suffix
    java.lang.String inet6AddressToAscii(byte[]) -> inet6AddressToAscii
    int parsePort(java.lang.String,int,int) -> parsePort
okhttp3.HttpUrl$Builder$ParseResult -> okhttp3.HttpUrl$Builder$ParseResult:
    okhttp3.HttpUrl$Builder$ParseResult SUCCESS -> SUCCESS
    okhttp3.HttpUrl$Builder$ParseResult MISSING_SCHEME -> MISSING_SCHEME
    okhttp3.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME -> UNSUPPORTED_SCHEME
    okhttp3.HttpUrl$Builder$ParseResult INVALID_PORT -> INVALID_PORT
    okhttp3.HttpUrl$Builder$ParseResult INVALID_HOST -> INVALID_HOST
    okhttp3.HttpUrl$Builder$ParseResult[] $VALUES -> $VALUES
    okhttp3.HttpUrl$Builder$ParseResult[] values() -> values
    okhttp3.HttpUrl$Builder$ParseResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
okhttp3.Interceptor -> okhttp3.Interceptor:
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.Interceptor$Chain -> okhttp3.Interceptor$Chain:
    okhttp3.Request request() -> request
    okhttp3.Response proceed(okhttp3.Request) -> proceed
    okhttp3.Connection connection() -> connection
okhttp3.MediaType -> okhttp3.MediaType:
    java.lang.String TOKEN -> TOKEN
    java.lang.String QUOTED -> QUOTED
    java.util.regex.Pattern TYPE_SUBTYPE -> TYPE_SUBTYPE
    java.util.regex.Pattern PARAMETER -> PARAMETER
    java.lang.String mediaType -> mediaType
    java.lang.String type -> type
    java.lang.String subtype -> subtype
    java.lang.String charset -> charset
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    okhttp3.MediaType parse(java.lang.String) -> parse
    java.lang.String type() -> type
    java.lang.String subtype() -> subtype
    java.nio.charset.Charset charset() -> charset
    java.nio.charset.Charset charset(java.nio.charset.Charset) -> charset
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
okhttp3.MultipartBody -> okhttp3.MultipartBody:
    okhttp3.MediaType MIXED -> MIXED
    okhttp3.MediaType ALTERNATIVE -> ALTERNATIVE
    okhttp3.MediaType DIGEST -> DIGEST
    okhttp3.MediaType PARALLEL -> PARALLEL
    okhttp3.MediaType FORM -> FORM
    byte[] COLONSPACE -> COLONSPACE
    byte[] CRLF -> CRLF
    byte[] DASHDASH -> DASHDASH
    okio.ByteString boundary -> boundary
    okhttp3.MediaType originalType -> originalType
    okhttp3.MediaType contentType -> contentType
    java.util.List parts -> parts
    long contentLength -> contentLength
    void <init>(okio.ByteString,okhttp3.MediaType,java.util.List) -> <init>
    okhttp3.MediaType type() -> type
    java.lang.String boundary() -> boundary
    int size() -> size
    java.util.List parts() -> parts
    okhttp3.MultipartBody$Part part(int) -> part
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    long writeOrCountBytes(okio.BufferedSink,boolean) -> writeOrCountBytes
    java.lang.StringBuilder appendQuotedString(java.lang.StringBuilder,java.lang.String) -> appendQuotedString
    void <clinit>() -> <clinit>
okhttp3.MultipartBody$Builder -> okhttp3.MultipartBody$Builder:
    okio.ByteString boundary -> boundary
    okhttp3.MediaType type -> type
    java.util.List parts -> parts
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    okhttp3.MultipartBody$Builder setType(okhttp3.MediaType) -> setType
    okhttp3.MultipartBody$Builder addPart(okhttp3.RequestBody) -> addPart
    okhttp3.MultipartBody$Builder addPart(okhttp3.Headers,okhttp3.RequestBody) -> addPart
    okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String) -> addFormDataPart
    okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String,okhttp3.RequestBody) -> addFormDataPart
    okhttp3.MultipartBody$Builder addPart(okhttp3.MultipartBody$Part) -> addPart
    okhttp3.MultipartBody build() -> build
okhttp3.MultipartBody$Part -> okhttp3.MultipartBody$Part:
    okhttp3.Headers headers -> headers
    okhttp3.RequestBody body -> body
    okhttp3.MultipartBody$Part create(okhttp3.RequestBody) -> create
    okhttp3.MultipartBody$Part create(okhttp3.Headers,okhttp3.RequestBody) -> create
    okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String) -> createFormData
    okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String,okhttp3.RequestBody) -> createFormData
    void <init>(okhttp3.Headers,okhttp3.RequestBody) -> <init>
    okhttp3.Headers access$000(okhttp3.MultipartBody$Part) -> access$000
    okhttp3.RequestBody access$100(okhttp3.MultipartBody$Part) -> access$100
okhttp3.OkHttpClient -> okhttp3.OkHttpClient:
    java.util.List DEFAULT_PROTOCOLS -> DEFAULT_PROTOCOLS
    java.util.List DEFAULT_CONNECTION_SPECS -> DEFAULT_CONNECTION_SPECS
    okhttp3.Dispatcher dispatcher -> dispatcher
    java.net.Proxy proxy -> proxy
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.util.List interceptors -> interceptors
    java.util.List networkInterceptors -> networkInterceptors
    java.net.ProxySelector proxySelector -> proxySelector
    okhttp3.CookieJar cookieJar -> cookieJar
    okhttp3.Cache cache -> cache
    okhttp3.internal.InternalCache internalCache -> internalCache
    javax.net.SocketFactory socketFactory -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    okhttp3.Authenticator authenticator -> authenticator
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Dns dns -> dns
    boolean followSslRedirects -> followSslRedirects
    boolean followRedirects -> followRedirects
    boolean retryOnConnectionFailure -> retryOnConnectionFailure
    int connectTimeout -> connectTimeout
    int readTimeout -> readTimeout
    int writeTimeout -> writeTimeout
    void <init>() -> <init>
    void <init>(okhttp3.OkHttpClient$Builder) -> <init>
    javax.net.ssl.X509TrustManager systemDefaultTrustManager() -> systemDefaultTrustManager
    javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager) -> systemDefaultSslSocketFactory
    int connectTimeoutMillis() -> connectTimeoutMillis
    int readTimeoutMillis() -> readTimeoutMillis
    int writeTimeoutMillis() -> writeTimeoutMillis
    java.net.Proxy proxy() -> proxy
    java.net.ProxySelector proxySelector() -> proxySelector
    okhttp3.CookieJar cookieJar() -> cookieJar
    okhttp3.Cache cache() -> cache
    okhttp3.internal.InternalCache internalCache() -> internalCache
    okhttp3.Dns dns() -> dns
    javax.net.SocketFactory socketFactory() -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory() -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier() -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner() -> certificatePinner
    okhttp3.Authenticator authenticator() -> authenticator
    okhttp3.Authenticator proxyAuthenticator() -> proxyAuthenticator
    okhttp3.ConnectionPool connectionPool() -> connectionPool
    boolean followSslRedirects() -> followSslRedirects
    boolean followRedirects() -> followRedirects
    boolean retryOnConnectionFailure() -> retryOnConnectionFailure
    okhttp3.Dispatcher dispatcher() -> dispatcher
    java.util.List protocols() -> protocols
    java.util.List connectionSpecs() -> connectionSpecs
    java.util.List interceptors() -> interceptors
    java.util.List networkInterceptors() -> networkInterceptors
    okhttp3.Call newCall(okhttp3.Request) -> newCall
    okhttp3.OkHttpClient$Builder newBuilder() -> newBuilder
    java.util.List access$000() -> access$000
    java.util.List access$100() -> access$100
    void <init>(okhttp3.OkHttpClient$Builder,okhttp3.OkHttpClient$1) -> <init>
    void <clinit>() -> <clinit>
okhttp3.OkHttpClient$1 -> okhttp3.OkHttpClient$1:
    void <init>() -> <init>
    void addLenient(okhttp3.Headers$Builder,java.lang.String) -> addLenient
    void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String) -> addLenient
    void setCache(okhttp3.OkHttpClient$Builder,okhttp3.internal.InternalCache) -> setCache
    okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient) -> internalCache
    boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection) -> connectionBecameIdle
    okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation) -> get
    void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection) -> put
    okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> routeDatabase
    void callEnqueue(okhttp3.Call,okhttp3.Callback,boolean) -> callEnqueue
    okhttp3.internal.http.StreamAllocation callEngineGetStreamAllocation(okhttp3.Call) -> callEngineGetStreamAllocation
    void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) -> getHttpUrlChecked
okhttp3.OkHttpClient$Builder -> okhttp3.OkHttpClient$Builder:
    okhttp3.Dispatcher dispatcher -> dispatcher
    java.net.Proxy proxy -> proxy
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.util.List interceptors -> interceptors
    java.util.List networkInterceptors -> networkInterceptors
    java.net.ProxySelector proxySelector -> proxySelector
    okhttp3.CookieJar cookieJar -> cookieJar
    okhttp3.Cache cache -> cache
    okhttp3.internal.InternalCache internalCache -> internalCache
    javax.net.SocketFactory socketFactory -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    okhttp3.Authenticator authenticator -> authenticator
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Dns dns -> dns
    boolean followSslRedirects -> followSslRedirects
    boolean followRedirects -> followRedirects
    boolean retryOnConnectionFailure -> retryOnConnectionFailure
    int connectTimeout -> connectTimeout
    int readTimeout -> readTimeout
    int writeTimeout -> writeTimeout
    void <init>() -> <init>
    void <init>(okhttp3.OkHttpClient) -> <init>
    okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit) -> connectTimeout
    okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit) -> readTimeout
    okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit) -> writeTimeout
    okhttp3.OkHttpClient$Builder proxy(java.net.Proxy) -> proxy
    okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector) -> proxySelector
    okhttp3.OkHttpClient$Builder cookieJar(okhttp3.CookieJar) -> cookieJar
    void setInternalCache(okhttp3.internal.InternalCache) -> setInternalCache
    okhttp3.OkHttpClient$Builder cache(okhttp3.Cache) -> cache
    okhttp3.OkHttpClient$Builder dns(okhttp3.Dns) -> dns
    okhttp3.OkHttpClient$Builder socketFactory(javax.net.SocketFactory) -> socketFactory
    okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory) -> sslSocketFactory
    okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory,javax.net.ssl.X509TrustManager) -> sslSocketFactory
    okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier) -> hostnameVerifier
    okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner) -> certificatePinner
    okhttp3.OkHttpClient$Builder authenticator(okhttp3.Authenticator) -> authenticator
    okhttp3.OkHttpClient$Builder proxyAuthenticator(okhttp3.Authenticator) -> proxyAuthenticator
    okhttp3.OkHttpClient$Builder connectionPool(okhttp3.ConnectionPool) -> connectionPool
    okhttp3.OkHttpClient$Builder followSslRedirects(boolean) -> followSslRedirects
    okhttp3.OkHttpClient$Builder followRedirects(boolean) -> followRedirects
    okhttp3.OkHttpClient$Builder retryOnConnectionFailure(boolean) -> retryOnConnectionFailure
    okhttp3.OkHttpClient$Builder dispatcher(okhttp3.Dispatcher) -> dispatcher
    okhttp3.OkHttpClient$Builder protocols(java.util.List) -> protocols
    okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List) -> connectionSpecs
    java.util.List interceptors() -> interceptors
    okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor) -> addInterceptor
    java.util.List networkInterceptors() -> networkInterceptors
    okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor) -> addNetworkInterceptor
    okhttp3.OkHttpClient build() -> build
okhttp3.Protocol -> okhttp3.Protocol:
    okhttp3.Protocol HTTP_1_0 -> HTTP_1_0
    okhttp3.Protocol HTTP_1_1 -> HTTP_1_1
    okhttp3.Protocol SPDY_3 -> SPDY_3
    okhttp3.Protocol HTTP_2 -> HTTP_2
    java.lang.String protocol -> protocol
    okhttp3.Protocol[] $VALUES -> $VALUES
    okhttp3.Protocol[] values() -> values
    okhttp3.Protocol valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    okhttp3.Protocol get(java.lang.String) -> get
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.RealCall -> okhttp3.RealCall:
    okhttp3.OkHttpClient client -> client
    boolean executed -> executed
    boolean canceled -> canceled
    okhttp3.Request originalRequest -> originalRequest
    okhttp3.internal.http.HttpEngine engine -> engine
    void <init>(okhttp3.OkHttpClient,okhttp3.Request) -> <init>
    okhttp3.Request request() -> request
    okhttp3.Response execute() -> execute
    java.lang.Object tag() -> tag
    void enqueue(okhttp3.Callback) -> enqueue
    void enqueue(okhttp3.Callback,boolean) -> enqueue
    void cancel() -> cancel
    boolean isExecuted() -> isExecuted
    boolean isCanceled() -> isCanceled
    java.lang.String toLoggableString() -> toLoggableString
    okhttp3.HttpUrl redactedUrl() -> redactedUrl
    okhttp3.Response getResponseWithInterceptorChain(boolean) -> getResponseWithInterceptorChain
    okhttp3.Response getResponse(okhttp3.Request,boolean) -> getResponse
    okhttp3.Response access$100(okhttp3.RealCall,boolean) -> access$100
    java.lang.String access$200(okhttp3.RealCall) -> access$200
    okhttp3.OkHttpClient access$300(okhttp3.RealCall) -> access$300
okhttp3.RealCall$1 -> okhttp3.RealCall$1:
okhttp3.RealCall$ApplicationInterceptorChain -> okhttp3.RealCall$ApplicationInterceptorChain:
    int index -> index
    okhttp3.Request request -> request
    boolean forWebSocket -> forWebSocket
    okhttp3.RealCall this$0 -> this$0
    void <init>(okhttp3.RealCall,int,okhttp3.Request,boolean) -> <init>
    okhttp3.Connection connection() -> connection
    okhttp3.Request request() -> request
    okhttp3.Response proceed(okhttp3.Request) -> proceed
okhttp3.RealCall$AsyncCall -> okhttp3.RealCall$AsyncCall:
    okhttp3.Callback responseCallback -> responseCallback
    boolean forWebSocket -> forWebSocket
    okhttp3.RealCall this$0 -> this$0
    void <init>(okhttp3.RealCall,okhttp3.Callback,boolean) -> <init>
    java.lang.String host() -> host
    okhttp3.Request request() -> request
    java.lang.Object tag() -> tag
    void cancel() -> cancel
    okhttp3.RealCall get() -> get
    void execute() -> execute
    void <init>(okhttp3.RealCall,okhttp3.Callback,boolean,okhttp3.RealCall$1) -> <init>
okhttp3.Request -> okhttp3.Request:
    okhttp3.HttpUrl url -> url
    java.lang.String method -> method
    okhttp3.Headers headers -> headers
    okhttp3.RequestBody body -> body
    java.lang.Object tag -> tag
    okhttp3.CacheControl cacheControl -> cacheControl
    void <init>(okhttp3.Request$Builder) -> <init>
    okhttp3.HttpUrl url() -> url
    java.lang.String method() -> method
    okhttp3.Headers headers() -> headers
    java.lang.String header(java.lang.String) -> header
    java.util.List headers(java.lang.String) -> headers
    okhttp3.RequestBody body() -> body
    java.lang.Object tag() -> tag
    okhttp3.Request$Builder newBuilder() -> newBuilder
    okhttp3.CacheControl cacheControl() -> cacheControl
    boolean isHttps() -> isHttps
    java.lang.String toString() -> toString
    okhttp3.HttpUrl access$600(okhttp3.Request) -> access$600
    java.lang.String access$700(okhttp3.Request) -> access$700
    okhttp3.RequestBody access$800(okhttp3.Request) -> access$800
    java.lang.Object access$900(okhttp3.Request) -> access$900
    okhttp3.Headers access$1000(okhttp3.Request) -> access$1000
    void <init>(okhttp3.Request$Builder,okhttp3.Request$1) -> <init>
okhttp3.Request$1 -> okhttp3.Request$1:
okhttp3.Request$Builder -> okhttp3.Request$Builder:
    okhttp3.HttpUrl url -> url
    java.lang.String method -> method
    okhttp3.Headers$Builder headers -> headers
    okhttp3.RequestBody body -> body
    java.lang.Object tag -> tag
    void <init>() -> <init>
    void <init>(okhttp3.Request) -> <init>
    okhttp3.Request$Builder url(okhttp3.HttpUrl) -> url
    okhttp3.Request$Builder url(java.lang.String) -> url
    okhttp3.Request$Builder url(java.net.URL) -> url
    okhttp3.Request$Builder header(java.lang.String,java.lang.String) -> header
    okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String) -> addHeader
    okhttp3.Request$Builder removeHeader(java.lang.String) -> removeHeader
    okhttp3.Request$Builder headers(okhttp3.Headers) -> headers
    okhttp3.Request$Builder cacheControl(okhttp3.CacheControl) -> cacheControl
    okhttp3.Request$Builder get() -> get
    okhttp3.Request$Builder head() -> head
    okhttp3.Request$Builder post(okhttp3.RequestBody) -> post
    okhttp3.Request$Builder delete(okhttp3.RequestBody) -> delete
    okhttp3.Request$Builder delete() -> delete
    okhttp3.Request$Builder put(okhttp3.RequestBody) -> put
    okhttp3.Request$Builder patch(okhttp3.RequestBody) -> patch
    okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody) -> method
    okhttp3.Request$Builder tag(java.lang.Object) -> tag
    okhttp3.Request build() -> build
    okhttp3.HttpUrl access$000(okhttp3.Request$Builder) -> access$000
    java.lang.String access$100(okhttp3.Request$Builder) -> access$100
    okhttp3.Headers$Builder access$200(okhttp3.Request$Builder) -> access$200
    okhttp3.RequestBody access$300(okhttp3.Request$Builder) -> access$300
    java.lang.Object access$400(okhttp3.Request$Builder) -> access$400
    void <init>(okhttp3.Request,okhttp3.Request$1) -> <init>
okhttp3.RequestBody -> okhttp3.RequestBody:
    void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,okio.ByteString) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,byte[]) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int) -> create
    okhttp3.RequestBody create(okhttp3.MediaType,java.io.File) -> create
okhttp3.RequestBody$1 -> okhttp3.RequestBody$1:
    okhttp3.MediaType val$contentType -> val$contentType
    okio.ByteString val$content -> val$content
    void <init>(okhttp3.MediaType,okio.ByteString) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
okhttp3.RequestBody$2 -> okhttp3.RequestBody$2:
    okhttp3.MediaType val$contentType -> val$contentType
    int val$byteCount -> val$byteCount
    byte[] val$content -> val$content
    int val$offset -> val$offset
    void <init>(okhttp3.MediaType,int,byte[],int) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
okhttp3.RequestBody$3 -> okhttp3.RequestBody$3:
    okhttp3.MediaType val$contentType -> val$contentType
    java.io.File val$file -> val$file
    void <init>(okhttp3.MediaType,java.io.File) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
okhttp3.Response -> okhttp3.Response:
    okhttp3.Request request -> request
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Handshake handshake -> handshake
    okhttp3.Headers headers -> headers
    okhttp3.ResponseBody body -> body
    okhttp3.Response networkResponse -> networkResponse
    okhttp3.Response cacheResponse -> cacheResponse
    okhttp3.Response priorResponse -> priorResponse
    long sentRequestAtMillis -> sentRequestAtMillis
    long receivedResponseAtMillis -> receivedResponseAtMillis
    okhttp3.CacheControl cacheControl -> cacheControl
    void <init>(okhttp3.Response$Builder) -> <init>
    okhttp3.Request request() -> request
    okhttp3.Protocol protocol() -> protocol
    int code() -> code
    boolean isSuccessful() -> isSuccessful
    java.lang.String message() -> message
    okhttp3.Handshake handshake() -> handshake
    java.util.List headers(java.lang.String) -> headers
    java.lang.String header(java.lang.String) -> header
    java.lang.String header(java.lang.String,java.lang.String) -> header
    okhttp3.Headers headers() -> headers
    okhttp3.ResponseBody peekBody(long) -> peekBody
    okhttp3.ResponseBody body() -> body
    okhttp3.Response$Builder newBuilder() -> newBuilder
    boolean isRedirect() -> isRedirect
    okhttp3.Response networkResponse() -> networkResponse
    okhttp3.Response cacheResponse() -> cacheResponse
    okhttp3.Response priorResponse() -> priorResponse
    java.util.List challenges() -> challenges
    okhttp3.CacheControl cacheControl() -> cacheControl
    long sentRequestAtMillis() -> sentRequestAtMillis
    long receivedResponseAtMillis() -> receivedResponseAtMillis
    void close() -> close
    java.lang.String toString() -> toString
    okhttp3.Request access$1300(okhttp3.Response) -> access$1300
    okhttp3.Protocol access$1400(okhttp3.Response) -> access$1400
    int access$1500(okhttp3.Response) -> access$1500
    java.lang.String access$1600(okhttp3.Response) -> access$1600
    okhttp3.Handshake access$1700(okhttp3.Response) -> access$1700
    okhttp3.Headers access$1800(okhttp3.Response) -> access$1800
    okhttp3.ResponseBody access$1900(okhttp3.Response) -> access$1900
    okhttp3.Response access$2000(okhttp3.Response) -> access$2000
    okhttp3.Response access$2100(okhttp3.Response) -> access$2100
    okhttp3.Response access$2200(okhttp3.Response) -> access$2200
    long access$2300(okhttp3.Response) -> access$2300
    long access$2400(okhttp3.Response) -> access$2400
    void <init>(okhttp3.Response$Builder,okhttp3.Response$1) -> <init>
okhttp3.Response$1 -> okhttp3.Response$1:
okhttp3.Response$Builder -> okhttp3.Response$Builder:
    okhttp3.Request request -> request
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Handshake handshake -> handshake
    okhttp3.Headers$Builder headers -> headers
    okhttp3.ResponseBody body -> body
    okhttp3.Response networkResponse -> networkResponse
    okhttp3.Response cacheResponse -> cacheResponse
    okhttp3.Response priorResponse -> priorResponse
    long sentRequestAtMillis -> sentRequestAtMillis
    long receivedResponseAtMillis -> receivedResponseAtMillis
    void <init>() -> <init>
    void <init>(okhttp3.Response) -> <init>
    okhttp3.Response$Builder request(okhttp3.Request) -> request
    okhttp3.Response$Builder protocol(okhttp3.Protocol) -> protocol
    okhttp3.Response$Builder code(int) -> code
    okhttp3.Response$Builder message(java.lang.String) -> message
    okhttp3.Response$Builder handshake(okhttp3.Handshake) -> handshake
    okhttp3.Response$Builder header(java.lang.String,java.lang.String) -> header
    okhttp3.Response$Builder addHeader(java.lang.String,java.lang.String) -> addHeader
    okhttp3.Response$Builder removeHeader(java.lang.String) -> removeHeader
    okhttp3.Response$Builder headers(okhttp3.Headers) -> headers
    okhttp3.Response$Builder body(okhttp3.ResponseBody) -> body
    okhttp3.Response$Builder networkResponse(okhttp3.Response) -> networkResponse
    okhttp3.Response$Builder cacheResponse(okhttp3.Response) -> cacheResponse
    void checkSupportResponse(java.lang.String,okhttp3.Response) -> checkSupportResponse
    okhttp3.Response$Builder priorResponse(okhttp3.Response) -> priorResponse
    void checkPriorResponse(okhttp3.Response) -> checkPriorResponse
    okhttp3.Response$Builder sentRequestAtMillis(long) -> sentRequestAtMillis
    okhttp3.Response$Builder receivedResponseAtMillis(long) -> receivedResponseAtMillis
    okhttp3.Response build() -> build
    okhttp3.Request access$000(okhttp3.Response$Builder) -> access$000
    okhttp3.Protocol access$100(okhttp3.Response$Builder) -> access$100
    int access$200(okhttp3.Response$Builder) -> access$200
    java.lang.String access$300(okhttp3.Response$Builder) -> access$300
    okhttp3.Handshake access$400(okhttp3.Response$Builder) -> access$400
    okhttp3.Headers$Builder access$500(okhttp3.Response$Builder) -> access$500
    okhttp3.ResponseBody access$600(okhttp3.Response$Builder) -> access$600
    okhttp3.Response access$700(okhttp3.Response$Builder) -> access$700
    okhttp3.Response access$800(okhttp3.Response$Builder) -> access$800
    okhttp3.Response access$900(okhttp3.Response$Builder) -> access$900
    long access$1000(okhttp3.Response$Builder) -> access$1000
    long access$1100(okhttp3.Response$Builder) -> access$1100
    void <init>(okhttp3.Response,okhttp3.Response$1) -> <init>
okhttp3.ResponseBody -> okhttp3.ResponseBody:
    java.io.Reader reader -> reader
    void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    java.io.InputStream byteStream() -> byteStream
    okio.BufferedSource source() -> source
    byte[] bytes() -> bytes
    java.io.Reader charStream() -> charStream
    java.lang.String string() -> string
    java.nio.charset.Charset charset() -> charset
    void close() -> close
    okhttp3.ResponseBody create(okhttp3.MediaType,java.lang.String) -> create
    okhttp3.ResponseBody create(okhttp3.MediaType,byte[]) -> create
    okhttp3.ResponseBody create(okhttp3.MediaType,long,okio.BufferedSource) -> create
okhttp3.ResponseBody$1 -> okhttp3.ResponseBody$1:
    okhttp3.MediaType val$contentType -> val$contentType
    long val$contentLength -> val$contentLength
    okio.BufferedSource val$content -> val$content
    void <init>(okhttp3.MediaType,long,okio.BufferedSource) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
okhttp3.Route -> okhttp3.Route:
    okhttp3.Address address -> address
    java.net.Proxy proxy -> proxy
    java.net.InetSocketAddress inetSocketAddress -> inetSocketAddress
    void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress) -> <init>
    okhttp3.Address address() -> address
    java.net.Proxy proxy() -> proxy
    java.net.InetSocketAddress socketAddress() -> socketAddress
    boolean requiresTunnel() -> requiresTunnel
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
okhttp3.TlsVersion -> okhttp3.TlsVersion:
    okhttp3.TlsVersion TLS_1_2 -> TLS_1_2
    okhttp3.TlsVersion TLS_1_1 -> TLS_1_1
    okhttp3.TlsVersion TLS_1_0 -> TLS_1_0
    okhttp3.TlsVersion SSL_3_0 -> SSL_3_0
    java.lang.String javaName -> javaName
    okhttp3.TlsVersion[] $VALUES -> $VALUES
    okhttp3.TlsVersion[] values() -> values
    okhttp3.TlsVersion valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    okhttp3.TlsVersion forJavaName(java.lang.String) -> forJavaName
    java.lang.String javaName() -> javaName
    void <clinit>() -> <clinit>
okhttp3.internal.AndroidPlatform -> okhttp3.internal.AndroidPlatform:
    int MAX_LOG_LENGTH -> MAX_LOG_LENGTH
    java.lang.Class sslParametersClass -> sslParametersClass
    okhttp3.internal.OptionalMethod setUseSessionTickets -> setUseSessionTickets
    okhttp3.internal.OptionalMethod setHostname -> setHostname
    okhttp3.internal.OptionalMethod getAlpnSelectedProtocol -> getAlpnSelectedProtocol
    okhttp3.internal.OptionalMethod setAlpnProtocols -> setAlpnProtocols
    void <init>(java.lang.Class,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod,okhttp3.internal.OptionalMethod) -> <init>
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> connectSocket
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    void log(int,java.lang.String,java.lang.Throwable) -> log
    boolean isCleartextTrafficPermitted() -> isCleartextTrafficPermitted
    okhttp3.internal.Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.ConnectionSpecSelector -> okhttp3.internal.ConnectionSpecSelector:
    java.util.List connectionSpecs -> connectionSpecs
    int nextModeIndex -> nextModeIndex
    boolean isFallbackPossible -> isFallbackPossible
    boolean isFallback -> isFallback
    void <init>(java.util.List) -> <init>
    okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket) -> configureSecureSocket
    boolean connectionFailed(java.io.IOException) -> connectionFailed
    boolean isFallbackPossible(javax.net.ssl.SSLSocket) -> isFallbackPossible
okhttp3.internal.DiskLruCache -> okhttp3.internal.DiskLruCache:
    java.lang.String JOURNAL_FILE -> JOURNAL_FILE
    java.lang.String JOURNAL_FILE_TEMP -> JOURNAL_FILE_TEMP
    java.lang.String JOURNAL_FILE_BACKUP -> JOURNAL_FILE_BACKUP
    java.lang.String MAGIC -> MAGIC
    java.lang.String VERSION_1 -> VERSION_1
    long ANY_SEQUENCE_NUMBER -> ANY_SEQUENCE_NUMBER
    java.util.regex.Pattern LEGAL_KEY_PATTERN -> LEGAL_KEY_PATTERN
    java.lang.String CLEAN -> CLEAN
    java.lang.String DIRTY -> DIRTY
    java.lang.String REMOVE -> REMOVE
    java.lang.String READ -> READ
    okhttp3.internal.io.FileSystem fileSystem -> fileSystem
    java.io.File directory -> directory
    java.io.File journalFile -> journalFile
    java.io.File journalFileTmp -> journalFileTmp
    java.io.File journalFileBackup -> journalFileBackup
    int appVersion -> appVersion
    long maxSize -> maxSize
    int valueCount -> valueCount
    long size -> size
    okio.BufferedSink journalWriter -> journalWriter
    java.util.LinkedHashMap lruEntries -> lruEntries
    int redundantOpCount -> redundantOpCount
    boolean hasJournalErrors -> hasJournalErrors
    boolean initialized -> initialized
    boolean closed -> closed
    boolean mostRecentTrimFailed -> mostRecentTrimFailed
    boolean mostRecentRebuildFailed -> mostRecentRebuildFailed
    long nextSequenceNumber -> nextSequenceNumber
    java.util.concurrent.Executor executor -> executor
    java.lang.Runnable cleanupRunnable -> cleanupRunnable
    okio.Sink NULL_SINK -> NULL_SINK
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(okhttp3.internal.io.FileSystem,java.io.File,int,int,long,java.util.concurrent.Executor) -> <init>
    void initialize() -> initialize
    okhttp3.internal.DiskLruCache create(okhttp3.internal.io.FileSystem,java.io.File,int,int,long) -> create
    void readJournal() -> readJournal
    okio.BufferedSink newJournalWriter() -> newJournalWriter
    void readJournalLine(java.lang.String) -> readJournalLine
    void processJournal() -> processJournal
    void rebuildJournal() -> rebuildJournal
    okhttp3.internal.DiskLruCache$Snapshot get(java.lang.String) -> get
    okhttp3.internal.DiskLruCache$Editor edit(java.lang.String) -> edit
    okhttp3.internal.DiskLruCache$Editor edit(java.lang.String,long) -> edit
    java.io.File getDirectory() -> getDirectory
    long getMaxSize() -> getMaxSize
    void setMaxSize(long) -> setMaxSize
    long size() -> size
    void completeEdit(okhttp3.internal.DiskLruCache$Editor,boolean) -> completeEdit
    boolean journalRebuildRequired() -> journalRebuildRequired
    boolean remove(java.lang.String) -> remove
    boolean removeEntry(okhttp3.internal.DiskLruCache$Entry) -> removeEntry
    boolean isClosed() -> isClosed
    void checkNotClosed() -> checkNotClosed
    void flush() -> flush
    void close() -> close
    void trimToSize() -> trimToSize
    void delete() -> delete
    void evictAll() -> evictAll
    void validateKey(java.lang.String) -> validateKey
    java.util.Iterator snapshots() -> snapshots
    boolean access$000(okhttp3.internal.DiskLruCache) -> access$000
    boolean access$100(okhttp3.internal.DiskLruCache) -> access$100
    void access$200(okhttp3.internal.DiskLruCache) -> access$200
    boolean access$302(okhttp3.internal.DiskLruCache,boolean) -> access$302
    boolean access$400(okhttp3.internal.DiskLruCache) -> access$400
    void access$500(okhttp3.internal.DiskLruCache) -> access$500
    int access$602(okhttp3.internal.DiskLruCache,int) -> access$602
    boolean access$702(okhttp3.internal.DiskLruCache,boolean) -> access$702
    okio.BufferedSink access$802(okhttp3.internal.DiskLruCache,okio.BufferedSink) -> access$802
    okio.Sink access$900() -> access$900
    boolean access$1002(okhttp3.internal.DiskLruCache,boolean) -> access$1002
    java.util.LinkedHashMap access$2300(okhttp3.internal.DiskLruCache) -> access$2300
    okhttp3.internal.DiskLruCache$Editor access$2500(okhttp3.internal.DiskLruCache,java.lang.String,long) -> access$2500
    int access$2600(okhttp3.internal.DiskLruCache) -> access$2600
    okhttp3.internal.io.FileSystem access$2700(okhttp3.internal.DiskLruCache) -> access$2700
    void access$2800(okhttp3.internal.DiskLruCache,okhttp3.internal.DiskLruCache$Editor,boolean) -> access$2800
    java.io.File access$2900(okhttp3.internal.DiskLruCache) -> access$2900
    boolean access$3100(okhttp3.internal.DiskLruCache,okhttp3.internal.DiskLruCache$Entry) -> access$3100
    void <clinit>() -> <clinit>
okhttp3.internal.DiskLruCache$1 -> okhttp3.internal.DiskLruCache$1:
    okhttp3.internal.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.DiskLruCache) -> <init>
    void run() -> run
okhttp3.internal.DiskLruCache$2 -> okhttp3.internal.DiskLruCache$2:
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.DiskLruCache,okio.Sink) -> <init>
    void onException(java.io.IOException) -> onException
    void <clinit>() -> <clinit>
okhttp3.internal.DiskLruCache$3 -> okhttp3.internal.DiskLruCache$3:
    java.util.Iterator delegate -> delegate
    okhttp3.internal.DiskLruCache$Snapshot nextSnapshot -> nextSnapshot
    okhttp3.internal.DiskLruCache$Snapshot removeSnapshot -> removeSnapshot
    okhttp3.internal.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.DiskLruCache) -> <init>
    boolean hasNext() -> hasNext
    okhttp3.internal.DiskLruCache$Snapshot next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
okhttp3.internal.DiskLruCache$4 -> okhttp3.internal.DiskLruCache$4:
    void <init>() -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
okhttp3.internal.DiskLruCache$Editor -> okhttp3.internal.DiskLruCache$Editor:
    okhttp3.internal.DiskLruCache$Entry entry -> entry
    boolean[] written -> written
    boolean done -> done
    okhttp3.internal.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.DiskLruCache,okhttp3.internal.DiskLruCache$Entry) -> <init>
    void detach() -> detach
    okio.Source newSource(int) -> newSource
    okio.Sink newSink(int) -> newSink
    void commit() -> commit
    void abort() -> abort
    void abortUnlessCommitted() -> abortUnlessCommitted
    void <init>(okhttp3.internal.DiskLruCache,okhttp3.internal.DiskLruCache$Entry,okhttp3.internal.DiskLruCache$1) -> <init>
    okhttp3.internal.DiskLruCache$Entry access$2100(okhttp3.internal.DiskLruCache$Editor) -> access$2100
    boolean[] access$2200(okhttp3.internal.DiskLruCache$Editor) -> access$2200
okhttp3.internal.DiskLruCache$Editor$1 -> okhttp3.internal.DiskLruCache$Editor$1:
    okhttp3.internal.DiskLruCache$Editor this$1 -> this$1
    void <init>(okhttp3.internal.DiskLruCache$Editor,okio.Sink) -> <init>
    void onException(java.io.IOException) -> onException
okhttp3.internal.DiskLruCache$Entry -> okhttp3.internal.DiskLruCache$Entry:
    java.lang.String key -> key
    long[] lengths -> lengths
    java.io.File[] cleanFiles -> cleanFiles
    java.io.File[] dirtyFiles -> dirtyFiles
    boolean readable -> readable
    okhttp3.internal.DiskLruCache$Editor currentEditor -> currentEditor
    long sequenceNumber -> sequenceNumber
    okhttp3.internal.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.DiskLruCache,java.lang.String) -> <init>
    void setLengths(java.lang.String[]) -> setLengths
    void writeLengths(okio.BufferedSink) -> writeLengths
    java.io.IOException invalidLengths(java.lang.String[]) -> invalidLengths
    okhttp3.internal.DiskLruCache$Snapshot snapshot() -> snapshot
    void <init>(okhttp3.internal.DiskLruCache,java.lang.String,okhttp3.internal.DiskLruCache$1) -> <init>
    boolean access$1202(okhttp3.internal.DiskLruCache$Entry,boolean) -> access$1202
    okhttp3.internal.DiskLruCache$Editor access$1302(okhttp3.internal.DiskLruCache$Entry,okhttp3.internal.DiskLruCache$Editor) -> access$1302
    void access$1400(okhttp3.internal.DiskLruCache$Entry,java.lang.String[]) -> access$1400
    okhttp3.internal.DiskLruCache$Editor access$1300(okhttp3.internal.DiskLruCache$Entry) -> access$1300
    long[] access$1600(okhttp3.internal.DiskLruCache$Entry) -> access$1600
    java.io.File[] access$1700(okhttp3.internal.DiskLruCache$Entry) -> access$1700
    java.io.File[] access$1800(okhttp3.internal.DiskLruCache$Entry) -> access$1800
    java.lang.String access$1900(okhttp3.internal.DiskLruCache$Entry) -> access$1900
    boolean access$1200(okhttp3.internal.DiskLruCache$Entry) -> access$1200
    long access$2000(okhttp3.internal.DiskLruCache$Entry) -> access$2000
    long access$2002(okhttp3.internal.DiskLruCache$Entry,long) -> access$2002
okhttp3.internal.DiskLruCache$Snapshot -> okhttp3.internal.DiskLruCache$Snapshot:
    java.lang.String key -> key
    long sequenceNumber -> sequenceNumber
    okio.Source[] sources -> sources
    long[] lengths -> lengths
    okhttp3.internal.DiskLruCache this$0 -> this$0
    void <init>(okhttp3.internal.DiskLruCache,java.lang.String,long,okio.Source[],long[]) -> <init>
    java.lang.String key() -> key
    okhttp3.internal.DiskLruCache$Editor edit() -> edit
    okio.Source getSource(int) -> getSource
    long getLength(int) -> getLength
    void close() -> close
    java.lang.String access$2400(okhttp3.internal.DiskLruCache$Snapshot) -> access$2400
    void <init>(okhttp3.internal.DiskLruCache,java.lang.String,long,okio.Source[],long[],okhttp3.internal.DiskLruCache$1) -> <init>
okhttp3.internal.FaultHidingSink -> okhttp3.internal.FaultHidingSink:
    boolean hasErrors -> hasErrors
    void <init>(okio.Sink) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    void onException(java.io.IOException) -> onException
okhttp3.internal.Internal -> okhttp3.internal.Internal:
    okhttp3.internal.Internal instance -> instance
    void <init>() -> <init>
    void initializeInstanceForTests() -> initializeInstanceForTests
    void addLenient(okhttp3.Headers$Builder,java.lang.String) -> addLenient
    void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String) -> addLenient
    void setCache(okhttp3.OkHttpClient$Builder,okhttp3.internal.InternalCache) -> setCache
    okhttp3.internal.InternalCache internalCache(okhttp3.OkHttpClient) -> internalCache
    okhttp3.internal.io.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.http.StreamAllocation) -> get
    void put(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection) -> put
    boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.io.RealConnection) -> connectionBecameIdle
    okhttp3.internal.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> routeDatabase
    void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) -> getHttpUrlChecked
    void callEnqueue(okhttp3.Call,okhttp3.Callback,boolean) -> callEnqueue
    okhttp3.internal.http.StreamAllocation callEngineGetStreamAllocation(okhttp3.Call) -> callEngineGetStreamAllocation
okhttp3.internal.InternalCache -> okhttp3.internal.InternalCache:
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.http.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    void trackResponse(okhttp3.internal.http.CacheStrategy) -> trackResponse
okhttp3.internal.Jdk9Platform -> okhttp3.internal.Jdk9Platform:
    java.lang.reflect.Method setProtocolMethod -> setProtocolMethod
    java.lang.reflect.Method getProtocolMethod -> getProtocolMethod
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method) -> <init>
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    okhttp3.internal.Jdk9Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.JdkWithJettyBootPlatform -> okhttp3.internal.JdkWithJettyBootPlatform:
    java.lang.reflect.Method putMethod -> putMethod
    java.lang.reflect.Method getMethod -> getMethod
    java.lang.reflect.Method removeMethod -> removeMethod
    java.lang.Class clientProviderClass -> clientProviderClass
    java.lang.Class serverProviderClass -> serverProviderClass
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class) -> <init>
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    void afterHandshake(javax.net.ssl.SSLSocket) -> afterHandshake
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    okhttp3.internal.Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.JdkWithJettyBootPlatform$JettyNegoProvider -> okhttp3.internal.JdkWithJettyBootPlatform$JettyNegoProvider:
    java.util.List protocols -> protocols
    boolean unsupported -> unsupported
    java.lang.String selected -> selected
    void <init>(java.util.List) -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    boolean access$000(okhttp3.internal.JdkWithJettyBootPlatform$JettyNegoProvider) -> access$000
    java.lang.String access$100(okhttp3.internal.JdkWithJettyBootPlatform$JettyNegoProvider) -> access$100
okhttp3.internal.NamedRunnable -> okhttp3.internal.NamedRunnable:
    java.lang.String name -> name
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
    void run() -> run
    void execute() -> execute
okhttp3.internal.OptionalMethod -> okhttp3.internal.OptionalMethod:
    java.lang.Class returnType -> returnType
    java.lang.String methodName -> methodName
    java.lang.Class[] methodParams -> methodParams
    void <init>(java.lang.Class,java.lang.String,java.lang.Class[]) -> <init>
    boolean isSupported(java.lang.Object) -> isSupported
    java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[]) -> invokeOptional
    java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> invokeOptionalWithoutCheckedException
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> invoke
    java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> invokeWithoutCheckedException
    java.lang.reflect.Method getMethod(java.lang.Class) -> getMethod
    java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getPublicMethod
okhttp3.internal.Platform -> okhttp3.internal.Platform:
    okhttp3.internal.Platform PLATFORM -> PLATFORM
    int INFO -> INFO
    int WARN -> WARN
    java.util.logging.Logger logger -> logger
    void <init>() -> <init>
    okhttp3.internal.Platform get() -> get
    java.lang.String getPrefix() -> getPrefix
    javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    void afterHandshake(javax.net.ssl.SSLSocket) -> afterHandshake
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> connectSocket
    void log(int,java.lang.String,java.lang.Throwable) -> log
    boolean isCleartextTrafficPermitted() -> isCleartextTrafficPermitted
    java.util.List alpnProtocolNames(java.util.List) -> alpnProtocolNames
    okhttp3.internal.Platform findPlatform() -> findPlatform
    byte[] concatLengthPrefixed(java.util.List) -> concatLengthPrefixed
    java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String) -> readFieldOrNull
    void <clinit>() -> <clinit>
okhttp3.internal.RouteDatabase -> okhttp3.internal.RouteDatabase:
    java.util.Set failedRoutes -> failedRoutes
    void <init>() -> <init>
    void failed(okhttp3.Route) -> failed
    void connected(okhttp3.Route) -> connected
    boolean shouldPostpone(okhttp3.Route) -> shouldPostpone
    int failedRoutesCount() -> failedRoutesCount
okhttp3.internal.Util -> okhttp3.internal.Util:
    byte[] EMPTY_BYTE_ARRAY -> EMPTY_BYTE_ARRAY
    java.lang.String[] EMPTY_STRING_ARRAY -> EMPTY_STRING_ARRAY
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.util.TimeZone UTC -> UTC
    java.util.regex.Pattern VERIFY_AS_IP_ADDRESS -> VERIFY_AS_IP_ADDRESS
    void <init>() -> <init>
    void checkOffsetAndCount(long,long,long) -> checkOffsetAndCount
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    void closeQuietly(java.io.Closeable) -> closeQuietly
    void closeQuietly(java.net.Socket) -> closeQuietly
    void closeQuietly(java.net.ServerSocket) -> closeQuietly
    void closeAll(java.io.Closeable,java.io.Closeable) -> closeAll
    boolean discard(okio.Source,int,java.util.concurrent.TimeUnit) -> discard
    boolean skipAll(okio.Source,int,java.util.concurrent.TimeUnit) -> skipAll
    java.lang.String md5Hex(java.lang.String) -> md5Hex
    java.lang.String shaBase64(java.lang.String) -> shaBase64
    okio.ByteString sha1(okio.ByteString) -> sha1
    okio.ByteString sha256(okio.ByteString) -> sha256
    java.util.List immutableList(java.util.List) -> immutableList
    java.util.List immutableList(java.lang.Object[]) -> immutableList
    java.util.Map immutableMap(java.util.Map) -> immutableMap
    java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean) -> threadFactory
    java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[]) -> intersect
    java.util.List intersect(java.lang.Object[],java.lang.Object[]) -> intersect
    java.lang.String hostHeader(okhttp3.HttpUrl,boolean) -> hostHeader
    java.lang.String toHumanReadableAscii(java.lang.String) -> toHumanReadableAscii
    boolean isAndroidGetsocknameError(java.lang.AssertionError) -> isAndroidGetsocknameError
    boolean contains(java.lang.String[],java.lang.String) -> contains
    java.lang.String[] concat(java.lang.String[],java.lang.String) -> concat
    int skipLeadingAsciiWhitespace(java.lang.String,int,int) -> skipLeadingAsciiWhitespace
    int skipTrailingAsciiWhitespace(java.lang.String,int,int) -> skipTrailingAsciiWhitespace
    java.lang.String trimSubstring(java.lang.String,int,int) -> trimSubstring
    int delimiterOffset(java.lang.String,int,int,java.lang.String) -> delimiterOffset
    int delimiterOffset(java.lang.String,int,int,char) -> delimiterOffset
    java.lang.String domainToAscii(java.lang.String) -> domainToAscii
    boolean containsInvalidHostnameAsciiCodes(java.lang.String) -> containsInvalidHostnameAsciiCodes
    boolean verifyAsIpAddress(java.lang.String) -> verifyAsIpAddress
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    void <clinit>() -> <clinit>
okhttp3.internal.Util$1 -> okhttp3.internal.Util$1:
    java.lang.String val$name -> val$name
    boolean val$daemon -> val$daemon
    void <init>(java.lang.String,boolean) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
okhttp3.internal.Version -> okhttp3.internal.Version:
    java.lang.String userAgent() -> userAgent
    void <init>() -> <init>
okhttp3.internal.framed.ErrorCode -> okhttp3.internal.framed.ErrorCode:
    okhttp3.internal.framed.ErrorCode NO_ERROR -> NO_ERROR
    okhttp3.internal.framed.ErrorCode PROTOCOL_ERROR -> PROTOCOL_ERROR
    okhttp3.internal.framed.ErrorCode INVALID_STREAM -> INVALID_STREAM
    okhttp3.internal.framed.ErrorCode UNSUPPORTED_VERSION -> UNSUPPORTED_VERSION
    okhttp3.internal.framed.ErrorCode STREAM_IN_USE -> STREAM_IN_USE
    okhttp3.internal.framed.ErrorCode STREAM_ALREADY_CLOSED -> STREAM_ALREADY_CLOSED
    okhttp3.internal.framed.ErrorCode INTERNAL_ERROR -> INTERNAL_ERROR
    okhttp3.internal.framed.ErrorCode FLOW_CONTROL_ERROR -> FLOW_CONTROL_ERROR
    okhttp3.internal.framed.ErrorCode STREAM_CLOSED -> STREAM_CLOSED
    okhttp3.internal.framed.ErrorCode FRAME_TOO_LARGE -> FRAME_TOO_LARGE
    okhttp3.internal.framed.ErrorCode REFUSED_STREAM -> REFUSED_STREAM
    okhttp3.internal.framed.ErrorCode CANCEL -> CANCEL
    okhttp3.internal.framed.ErrorCode COMPRESSION_ERROR -> COMPRESSION_ERROR
    okhttp3.internal.framed.ErrorCode CONNECT_ERROR -> CONNECT_ERROR
    okhttp3.internal.framed.ErrorCode ENHANCE_YOUR_CALM -> ENHANCE_YOUR_CALM
    okhttp3.internal.framed.ErrorCode INADEQUATE_SECURITY -> INADEQUATE_SECURITY
    okhttp3.internal.framed.ErrorCode HTTP_1_1_REQUIRED -> HTTP_1_1_REQUIRED
    okhttp3.internal.framed.ErrorCode INVALID_CREDENTIALS -> INVALID_CREDENTIALS
    int httpCode -> httpCode
    int spdyRstCode -> spdyRstCode
    int spdyGoAwayCode -> spdyGoAwayCode
    okhttp3.internal.framed.ErrorCode[] $VALUES -> $VALUES
    okhttp3.internal.framed.ErrorCode[] values() -> values
    okhttp3.internal.framed.ErrorCode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int) -> <init>
    okhttp3.internal.framed.ErrorCode fromSpdy3Rst(int) -> fromSpdy3Rst
    okhttp3.internal.framed.ErrorCode fromHttp2(int) -> fromHttp2
    okhttp3.internal.framed.ErrorCode fromSpdyGoAway(int) -> fromSpdyGoAway
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FrameReader -> okhttp3.internal.framed.FrameReader:
    void readConnectionPreface() -> readConnectionPreface
    boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler) -> nextFrame
okhttp3.internal.framed.FrameReader$Handler -> okhttp3.internal.framed.FrameReader$Handler:
    void data(boolean,int,okio.BufferedSource,int) -> data
    void headers(boolean,boolean,int,int,java.util.List,okhttp3.internal.framed.HeadersMode) -> headers
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    void settings(boolean,okhttp3.internal.framed.Settings) -> settings
    void ackSettings() -> ackSettings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,okio.ByteString) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void priority(int,int,int,boolean) -> priority
    void pushPromise(int,int,java.util.List) -> pushPromise
    void alternateService(int,java.lang.String,okio.ByteString,java.lang.String,int,long) -> alternateService
okhttp3.internal.framed.FrameWriter -> okhttp3.internal.framed.FrameWriter:
    void connectionPreface() -> connectionPreface
    void ackSettings(okhttp3.internal.framed.Settings) -> ackSettings
    void pushPromise(int,int,java.util.List) -> pushPromise
    void flush() -> flush
    void synStream(boolean,boolean,int,int,java.util.List) -> synStream
    void synReply(boolean,int,java.util.List) -> synReply
    void headers(int,java.util.List) -> headers
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    int maxDataLength() -> maxDataLength
    void data(boolean,int,okio.Buffer,int) -> data
    void settings(okhttp3.internal.framed.Settings) -> settings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,byte[]) -> goAway
    void windowUpdate(int,long) -> windowUpdate
okhttp3.internal.framed.FramedConnection -> okhttp3.internal.framed.FramedConnection:
    java.util.concurrent.ExecutorService executor -> executor
    okhttp3.Protocol protocol -> protocol
    boolean client -> client
    okhttp3.internal.framed.FramedConnection$Listener listener -> listener
    java.util.Map streams -> streams
    java.lang.String hostname -> hostname
    int lastGoodStreamId -> lastGoodStreamId
    int nextStreamId -> nextStreamId
    boolean shutdown -> shutdown
    long idleStartTimeNs -> idleStartTimeNs
    java.util.concurrent.ExecutorService pushExecutor -> pushExecutor
    java.util.Map pings -> pings
    okhttp3.internal.framed.PushObserver pushObserver -> pushObserver
    int nextPingId -> nextPingId
    long unacknowledgedBytesRead -> unacknowledgedBytesRead
    long bytesLeftInWriteWindow -> bytesLeftInWriteWindow
    okhttp3.internal.framed.Settings okHttpSettings -> okHttpSettings
    int OKHTTP_CLIENT_WINDOW_SIZE -> OKHTTP_CLIENT_WINDOW_SIZE
    okhttp3.internal.framed.Settings peerSettings -> peerSettings
    boolean receivedInitialPeerSettings -> receivedInitialPeerSettings
    okhttp3.internal.framed.Variant variant -> variant
    java.net.Socket socket -> socket
    okhttp3.internal.framed.FrameWriter frameWriter -> frameWriter
    okhttp3.internal.framed.FramedConnection$Reader readerRunnable -> readerRunnable
    java.util.Set currentPushRequests -> currentPushRequests
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(okhttp3.internal.framed.FramedConnection$Builder) -> <init>
    okhttp3.Protocol getProtocol() -> getProtocol
    int openStreamCount() -> openStreamCount
    okhttp3.internal.framed.FramedStream getStream(int) -> getStream
    okhttp3.internal.framed.FramedStream removeStream(int) -> removeStream
    void setIdle(boolean) -> setIdle
    boolean isIdle() -> isIdle
    int maxConcurrentStreams() -> maxConcurrentStreams
    long getIdleStartTimeNs() -> getIdleStartTimeNs
    okhttp3.internal.framed.FramedStream pushStream(int,java.util.List,boolean) -> pushStream
    okhttp3.internal.framed.FramedStream newStream(java.util.List,boolean,boolean) -> newStream
    okhttp3.internal.framed.FramedStream newStream(int,java.util.List,boolean,boolean) -> newStream
    void writeSynReply(int,boolean,java.util.List) -> writeSynReply
    void writeData(int,boolean,okio.Buffer,long) -> writeData
    void addBytesToWriteWindow(long) -> addBytesToWriteWindow
    void writeSynResetLater(int,okhttp3.internal.framed.ErrorCode) -> writeSynResetLater
    void writeSynReset(int,okhttp3.internal.framed.ErrorCode) -> writeSynReset
    void writeWindowUpdateLater(int,long) -> writeWindowUpdateLater
    okhttp3.internal.framed.Ping ping() -> ping
    void writePingLater(boolean,int,int,okhttp3.internal.framed.Ping) -> writePingLater
    void writePing(boolean,int,int,okhttp3.internal.framed.Ping) -> writePing
    okhttp3.internal.framed.Ping removePing(int) -> removePing
    void flush() -> flush
    void shutdown(okhttp3.internal.framed.ErrorCode) -> shutdown
    void close() -> close
    void close(okhttp3.internal.framed.ErrorCode,okhttp3.internal.framed.ErrorCode) -> close
    void start() -> start
    void start(boolean) -> start
    void setSettings(okhttp3.internal.framed.Settings) -> setSettings
    boolean pushedStream(int) -> pushedStream
    void pushRequestLater(int,java.util.List) -> pushRequestLater
    void pushHeadersLater(int,java.util.List,boolean) -> pushHeadersLater
    void pushDataLater(int,okio.BufferedSource,int,boolean) -> pushDataLater
    void pushResetLater(int,okhttp3.internal.framed.ErrorCode) -> pushResetLater
    void access$900(okhttp3.internal.framed.FramedConnection,boolean,int,int,okhttp3.internal.framed.Ping) -> access$900
    void <init>(okhttp3.internal.framed.FramedConnection$Builder,okhttp3.internal.framed.FramedConnection$1) -> <init>
    java.lang.String access$1100(okhttp3.internal.framed.FramedConnection) -> access$1100
    void access$1200(okhttp3.internal.framed.FramedConnection,okhttp3.internal.framed.ErrorCode,okhttp3.internal.framed.ErrorCode) -> access$1200
    boolean access$1300(okhttp3.internal.framed.FramedConnection,int) -> access$1300
    void access$1400(okhttp3.internal.framed.FramedConnection,int,okio.BufferedSource,int,boolean) -> access$1400
    void access$1500(okhttp3.internal.framed.FramedConnection,int,java.util.List,boolean) -> access$1500
    boolean access$1600(okhttp3.internal.framed.FramedConnection) -> access$1600
    int access$1700(okhttp3.internal.framed.FramedConnection) -> access$1700
    int access$1800(okhttp3.internal.framed.FramedConnection) -> access$1800
    int access$1702(okhttp3.internal.framed.FramedConnection,int) -> access$1702
    java.util.Map access$1900(okhttp3.internal.framed.FramedConnection) -> access$1900
    okhttp3.internal.framed.FramedConnection$Listener access$2000(okhttp3.internal.framed.FramedConnection) -> access$2000
    java.util.concurrent.ExecutorService access$2100() -> access$2100
    void access$2200(okhttp3.internal.framed.FramedConnection,int,okhttp3.internal.framed.ErrorCode) -> access$2200
    boolean access$2300(okhttp3.internal.framed.FramedConnection) -> access$2300
    boolean access$2302(okhttp3.internal.framed.FramedConnection,boolean) -> access$2302
    okhttp3.internal.framed.Ping access$2400(okhttp3.internal.framed.FramedConnection,int) -> access$2400
    void access$2500(okhttp3.internal.framed.FramedConnection,boolean,int,int,okhttp3.internal.framed.Ping) -> access$2500
    boolean access$1602(okhttp3.internal.framed.FramedConnection,boolean) -> access$1602
    void access$2600(okhttp3.internal.framed.FramedConnection,int,java.util.List) -> access$2600
    okhttp3.internal.framed.PushObserver access$2700(okhttp3.internal.framed.FramedConnection) -> access$2700
    java.util.Set access$2800(okhttp3.internal.framed.FramedConnection) -> access$2800
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedConnection$1 -> okhttp3.internal.framed.FramedConnection$1:
    int val$streamId -> val$streamId
    okhttp3.internal.framed.ErrorCode val$errorCode -> val$errorCode
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okhttp3.internal.framed.ErrorCode) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$2 -> okhttp3.internal.framed.FramedConnection$2:
    int val$streamId -> val$streamId
    long val$unacknowledgedBytesRead -> val$unacknowledgedBytesRead
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,long) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$3 -> okhttp3.internal.framed.FramedConnection$3:
    boolean val$reply -> val$reply
    int val$payload1 -> val$payload1
    int val$payload2 -> val$payload2
    okhttp3.internal.framed.Ping val$ping -> val$ping
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],boolean,int,int,okhttp3.internal.framed.Ping) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$4 -> okhttp3.internal.framed.FramedConnection$4:
    int val$streamId -> val$streamId
    java.util.List val$requestHeaders -> val$requestHeaders
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$5 -> okhttp3.internal.framed.FramedConnection$5:
    int val$streamId -> val$streamId
    java.util.List val$requestHeaders -> val$requestHeaders
    boolean val$inFinished -> val$inFinished
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List,boolean) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$6 -> okhttp3.internal.framed.FramedConnection$6:
    int val$streamId -> val$streamId
    okio.Buffer val$buffer -> val$buffer
    int val$byteCount -> val$byteCount
    boolean val$inFinished -> val$inFinished
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okio.Buffer,int,boolean) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$7 -> okhttp3.internal.framed.FramedConnection$7:
    int val$streamId -> val$streamId
    okhttp3.internal.framed.ErrorCode val$errorCode -> val$errorCode
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,okhttp3.internal.framed.ErrorCode) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$Builder -> okhttp3.internal.framed.FramedConnection$Builder:
    java.net.Socket socket -> socket
    java.lang.String hostname -> hostname
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    okhttp3.internal.framed.FramedConnection$Listener listener -> listener
    okhttp3.Protocol protocol -> protocol
    okhttp3.internal.framed.PushObserver pushObserver -> pushObserver
    boolean client -> client
    void <init>(boolean) -> <init>
    okhttp3.internal.framed.FramedConnection$Builder socket(java.net.Socket) -> socket
    okhttp3.internal.framed.FramedConnection$Builder socket(java.net.Socket,java.lang.String,okio.BufferedSource,okio.BufferedSink) -> socket
    okhttp3.internal.framed.FramedConnection$Builder listener(okhttp3.internal.framed.FramedConnection$Listener) -> listener
    okhttp3.internal.framed.FramedConnection$Builder protocol(okhttp3.Protocol) -> protocol
    okhttp3.internal.framed.FramedConnection$Builder pushObserver(okhttp3.internal.framed.PushObserver) -> pushObserver
    okhttp3.internal.framed.FramedConnection build() -> build
    okhttp3.Protocol access$000(okhttp3.internal.framed.FramedConnection$Builder) -> access$000
    okhttp3.internal.framed.PushObserver access$100(okhttp3.internal.framed.FramedConnection$Builder) -> access$100
    boolean access$200(okhttp3.internal.framed.FramedConnection$Builder) -> access$200
    okhttp3.internal.framed.FramedConnection$Listener access$300(okhttp3.internal.framed.FramedConnection$Builder) -> access$300
    java.lang.String access$400(okhttp3.internal.framed.FramedConnection$Builder) -> access$400
    java.net.Socket access$500(okhttp3.internal.framed.FramedConnection$Builder) -> access$500
    okio.BufferedSink access$600(okhttp3.internal.framed.FramedConnection$Builder) -> access$600
    okio.BufferedSource access$700(okhttp3.internal.framed.FramedConnection$Builder) -> access$700
okhttp3.internal.framed.FramedConnection$Listener -> okhttp3.internal.framed.FramedConnection$Listener:
    okhttp3.internal.framed.FramedConnection$Listener REFUSE_INCOMING_STREAMS -> REFUSE_INCOMING_STREAMS
    void <init>() -> <init>
    void onStream(okhttp3.internal.framed.FramedStream) -> onStream
    void onSettings(okhttp3.internal.framed.FramedConnection) -> onSettings
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedConnection$Listener$1 -> okhttp3.internal.framed.FramedConnection$Listener$1:
    void <init>() -> <init>
    void onStream(okhttp3.internal.framed.FramedStream) -> onStream
okhttp3.internal.framed.FramedConnection$Reader -> okhttp3.internal.framed.FramedConnection$Reader:
    okhttp3.internal.framed.FrameReader frameReader -> frameReader
    okhttp3.internal.framed.FramedConnection this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedConnection,okhttp3.internal.framed.FrameReader) -> <init>
    void execute() -> execute
    void data(boolean,int,okio.BufferedSource,int) -> data
    void headers(boolean,boolean,int,int,java.util.List,okhttp3.internal.framed.HeadersMode) -> headers
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    void settings(boolean,okhttp3.internal.framed.Settings) -> settings
    void ackSettingsLater(okhttp3.internal.framed.Settings) -> ackSettingsLater
    void ackSettings() -> ackSettings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,okio.ByteString) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void priority(int,int,int,boolean) -> priority
    void pushPromise(int,int,java.util.List) -> pushPromise
    void alternateService(int,java.lang.String,okio.ByteString,java.lang.String,int,long) -> alternateService
    void <init>(okhttp3.internal.framed.FramedConnection,okhttp3.internal.framed.FrameReader,okhttp3.internal.framed.FramedConnection$1) -> <init>
okhttp3.internal.framed.FramedConnection$Reader$1 -> okhttp3.internal.framed.FramedConnection$Reader$1:
    okhttp3.internal.framed.FramedStream val$newStream -> val$newStream
    okhttp3.internal.framed.FramedConnection$Reader this$1 -> this$1
    void <init>(okhttp3.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[],okhttp3.internal.framed.FramedStream) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$Reader$2 -> okhttp3.internal.framed.FramedConnection$Reader$2:
    okhttp3.internal.framed.FramedConnection$Reader this$1 -> this$1
    void <init>(okhttp3.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[]) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedConnection$Reader$3 -> okhttp3.internal.framed.FramedConnection$Reader$3:
    okhttp3.internal.framed.Settings val$peerSettings -> val$peerSettings
    okhttp3.internal.framed.FramedConnection$Reader this$1 -> this$1
    void <init>(okhttp3.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[],okhttp3.internal.framed.Settings) -> <init>
    void execute() -> execute
okhttp3.internal.framed.FramedStream -> okhttp3.internal.framed.FramedStream:
    long unacknowledgedBytesRead -> unacknowledgedBytesRead
    long bytesLeftInWriteWindow -> bytesLeftInWriteWindow
    int id -> id
    okhttp3.internal.framed.FramedConnection connection -> connection
    java.util.List requestHeaders -> requestHeaders
    java.util.List responseHeaders -> responseHeaders
    okhttp3.internal.framed.FramedStream$FramedDataSource source -> source
    okhttp3.internal.framed.FramedStream$FramedDataSink sink -> sink
    okhttp3.internal.framed.FramedStream$StreamTimeout readTimeout -> readTimeout
    okhttp3.internal.framed.FramedStream$StreamTimeout writeTimeout -> writeTimeout
    okhttp3.internal.framed.ErrorCode errorCode -> errorCode
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(int,okhttp3.internal.framed.FramedConnection,boolean,boolean,java.util.List) -> <init>
    int getId() -> getId
    boolean isOpen() -> isOpen
    boolean isLocallyInitiated() -> isLocallyInitiated
    okhttp3.internal.framed.FramedConnection getConnection() -> getConnection
    java.util.List getRequestHeaders() -> getRequestHeaders
    java.util.List getResponseHeaders() -> getResponseHeaders
    okhttp3.internal.framed.ErrorCode getErrorCode() -> getErrorCode
    void reply(java.util.List,boolean) -> reply
    okio.Timeout readTimeout() -> readTimeout
    okio.Timeout writeTimeout() -> writeTimeout
    okio.Source getSource() -> getSource
    okio.Sink getSink() -> getSink
    void close(okhttp3.internal.framed.ErrorCode) -> close
    void closeLater(okhttp3.internal.framed.ErrorCode) -> closeLater
    boolean closeInternal(okhttp3.internal.framed.ErrorCode) -> closeInternal
    void receiveHeaders(java.util.List,okhttp3.internal.framed.HeadersMode) -> receiveHeaders
    void receiveData(okio.BufferedSource,int) -> receiveData
    void receiveFin() -> receiveFin
    void receiveRstStream(okhttp3.internal.framed.ErrorCode) -> receiveRstStream
    void cancelStreamIfNecessary() -> cancelStreamIfNecessary
    void addBytesToWriteWindow(long) -> addBytesToWriteWindow
    void checkOutNotClosed() -> checkOutNotClosed
    void waitForIo() -> waitForIo
    okhttp3.internal.framed.FramedConnection access$500(okhttp3.internal.framed.FramedStream) -> access$500
    int access$600(okhttp3.internal.framed.FramedStream) -> access$600
    okhttp3.internal.framed.FramedStream$StreamTimeout access$700(okhttp3.internal.framed.FramedStream) -> access$700
    okhttp3.internal.framed.ErrorCode access$800(okhttp3.internal.framed.FramedStream) -> access$800
    void access$900(okhttp3.internal.framed.FramedStream) -> access$900
    void access$1000(okhttp3.internal.framed.FramedStream) -> access$1000
    okhttp3.internal.framed.FramedStream$StreamTimeout access$1100(okhttp3.internal.framed.FramedStream) -> access$1100
    void access$1200(okhttp3.internal.framed.FramedStream) -> access$1200
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedStream$1 -> okhttp3.internal.framed.FramedStream$1:
okhttp3.internal.framed.FramedStream$FramedDataSink -> okhttp3.internal.framed.FramedStream$FramedDataSink:
    long EMIT_BUFFER_SIZE -> EMIT_BUFFER_SIZE
    okio.Buffer sendBuffer -> sendBuffer
    boolean closed -> closed
    boolean finished -> finished
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.framed.FramedStream this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedStream) -> <init>
    void write(okio.Buffer,long) -> write
    void emitDataFrame(boolean) -> emitDataFrame
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
    boolean access$202(okhttp3.internal.framed.FramedStream$FramedDataSink,boolean) -> access$202
    boolean access$200(okhttp3.internal.framed.FramedStream$FramedDataSink) -> access$200
    boolean access$400(okhttp3.internal.framed.FramedStream$FramedDataSink) -> access$400
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedStream$FramedDataSource -> okhttp3.internal.framed.FramedStream$FramedDataSource:
    okio.Buffer receiveBuffer -> receiveBuffer
    okio.Buffer readBuffer -> readBuffer
    long maxByteCount -> maxByteCount
    boolean closed -> closed
    boolean finished -> finished
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.framed.FramedStream this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedStream,long) -> <init>
    long read(okio.Buffer,long) -> read
    void waitUntilReadable() -> waitUntilReadable
    void receive(okio.BufferedSource,long) -> receive
    okio.Timeout timeout() -> timeout
    void close() -> close
    void checkNotClosed() -> checkNotClosed
    void <init>(okhttp3.internal.framed.FramedStream,long,okhttp3.internal.framed.FramedStream$1) -> <init>
    boolean access$102(okhttp3.internal.framed.FramedStream$FramedDataSource,boolean) -> access$102
    boolean access$100(okhttp3.internal.framed.FramedStream$FramedDataSource) -> access$100
    boolean access$300(okhttp3.internal.framed.FramedStream$FramedDataSource) -> access$300
    void <clinit>() -> <clinit>
okhttp3.internal.framed.FramedStream$StreamTimeout -> okhttp3.internal.framed.FramedStream$StreamTimeout:
    okhttp3.internal.framed.FramedStream this$0 -> this$0
    void <init>(okhttp3.internal.framed.FramedStream) -> <init>
    void timedOut() -> timedOut
    java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    void exitAndThrowIfTimedOut() -> exitAndThrowIfTimedOut
okhttp3.internal.framed.Header -> okhttp3.internal.framed.Header:
    okio.ByteString RESPONSE_STATUS -> RESPONSE_STATUS
    okio.ByteString TARGET_METHOD -> TARGET_METHOD
    okio.ByteString TARGET_PATH -> TARGET_PATH
    okio.ByteString TARGET_SCHEME -> TARGET_SCHEME
    okio.ByteString TARGET_AUTHORITY -> TARGET_AUTHORITY
    okio.ByteString TARGET_HOST -> TARGET_HOST
    okio.ByteString VERSION -> VERSION
    okio.ByteString name -> name
    okio.ByteString value -> value
    int hpackSize -> hpackSize
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(okio.ByteString,java.lang.String) -> <init>
    void <init>(okio.ByteString,okio.ByteString) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
okhttp3.internal.framed.HeadersMode -> okhttp3.internal.framed.HeadersMode:
    okhttp3.internal.framed.HeadersMode SPDY_SYN_STREAM -> SPDY_SYN_STREAM
    okhttp3.internal.framed.HeadersMode SPDY_REPLY -> SPDY_REPLY
    okhttp3.internal.framed.HeadersMode SPDY_HEADERS -> SPDY_HEADERS
    okhttp3.internal.framed.HeadersMode HTTP_20_HEADERS -> HTTP_20_HEADERS
    okhttp3.internal.framed.HeadersMode[] $VALUES -> $VALUES
    okhttp3.internal.framed.HeadersMode[] values() -> values
    okhttp3.internal.framed.HeadersMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean failIfStreamAbsent() -> failIfStreamAbsent
    boolean failIfStreamPresent() -> failIfStreamPresent
    boolean failIfHeadersAbsent() -> failIfHeadersAbsent
    boolean failIfHeadersPresent() -> failIfHeadersPresent
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Hpack -> okhttp3.internal.framed.Hpack:
    int PREFIX_4_BITS -> PREFIX_4_BITS
    int PREFIX_5_BITS -> PREFIX_5_BITS
    int PREFIX_6_BITS -> PREFIX_6_BITS
    int PREFIX_7_BITS -> PREFIX_7_BITS
    okhttp3.internal.framed.Header[] STATIC_HEADER_TABLE -> STATIC_HEADER_TABLE
    java.util.Map NAME_TO_FIRST_INDEX -> NAME_TO_FIRST_INDEX
    void <init>() -> <init>
    java.util.Map nameToFirstIndex() -> nameToFirstIndex
    okio.ByteString checkLowercase(okio.ByteString) -> checkLowercase
    okhttp3.internal.framed.Header[] access$000() -> access$000
    okio.ByteString access$100(okio.ByteString) -> access$100
    java.util.Map access$200() -> access$200
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Hpack$Reader -> okhttp3.internal.framed.Hpack$Reader:
    java.util.List headerList -> headerList
    okio.BufferedSource source -> source
    int headerTableSizeSetting -> headerTableSizeSetting
    int maxDynamicTableByteCount -> maxDynamicTableByteCount
    okhttp3.internal.framed.Header[] dynamicTable -> dynamicTable
    int nextHeaderIndex -> nextHeaderIndex
    int headerCount -> headerCount
    int dynamicTableByteCount -> dynamicTableByteCount
    void <init>(int,okio.Source) -> <init>
    int maxDynamicTableByteCount() -> maxDynamicTableByteCount
    void headerTableSizeSetting(int) -> headerTableSizeSetting
    void adjustDynamicTableByteCount() -> adjustDynamicTableByteCount
    void clearDynamicTable() -> clearDynamicTable
    int evictToRecoverBytes(int) -> evictToRecoverBytes
    void readHeaders() -> readHeaders
    java.util.List getAndResetHeaderList() -> getAndResetHeaderList
    void readIndexedHeader(int) -> readIndexedHeader
    int dynamicTableIndex(int) -> dynamicTableIndex
    void readLiteralHeaderWithoutIndexingIndexedName(int) -> readLiteralHeaderWithoutIndexingIndexedName
    void readLiteralHeaderWithoutIndexingNewName() -> readLiteralHeaderWithoutIndexingNewName
    void readLiteralHeaderWithIncrementalIndexingIndexedName(int) -> readLiteralHeaderWithIncrementalIndexingIndexedName
    void readLiteralHeaderWithIncrementalIndexingNewName() -> readLiteralHeaderWithIncrementalIndexingNewName
    okio.ByteString getName(int) -> getName
    boolean isStaticHeader(int) -> isStaticHeader
    void insertIntoDynamicTable(int,okhttp3.internal.framed.Header) -> insertIntoDynamicTable
    int readByte() -> readByte
    int readInt(int,int) -> readInt
    okio.ByteString readByteString() -> readByteString
okhttp3.internal.framed.Hpack$Writer -> okhttp3.internal.framed.Hpack$Writer:
    okio.Buffer out -> out
    void <init>(okio.Buffer) -> <init>
    void writeHeaders(java.util.List) -> writeHeaders
    void writeInt(int,int,int) -> writeInt
    void writeByteString(okio.ByteString) -> writeByteString
okhttp3.internal.framed.Http2 -> okhttp3.internal.framed.Http2:
    java.util.logging.Logger logger -> logger
    okio.ByteString CONNECTION_PREFACE -> CONNECTION_PREFACE
    int INITIAL_MAX_FRAME_SIZE -> INITIAL_MAX_FRAME_SIZE
    byte TYPE_DATA -> TYPE_DATA
    byte TYPE_HEADERS -> TYPE_HEADERS
    byte TYPE_PRIORITY -> TYPE_PRIORITY
    byte TYPE_RST_STREAM -> TYPE_RST_STREAM
    byte TYPE_SETTINGS -> TYPE_SETTINGS
    byte TYPE_PUSH_PROMISE -> TYPE_PUSH_PROMISE
    byte TYPE_PING -> TYPE_PING
    byte TYPE_GOAWAY -> TYPE_GOAWAY
    byte TYPE_WINDOW_UPDATE -> TYPE_WINDOW_UPDATE
    byte TYPE_CONTINUATION -> TYPE_CONTINUATION
    byte FLAG_NONE -> FLAG_NONE
    byte FLAG_ACK -> FLAG_ACK
    byte FLAG_END_STREAM -> FLAG_END_STREAM
    byte FLAG_END_HEADERS -> FLAG_END_HEADERS
    byte FLAG_END_PUSH_PROMISE -> FLAG_END_PUSH_PROMISE
    byte FLAG_PADDED -> FLAG_PADDED
    byte FLAG_PRIORITY -> FLAG_PRIORITY
    byte FLAG_COMPRESSED -> FLAG_COMPRESSED
    void <init>() -> <init>
    okhttp3.Protocol getProtocol() -> getProtocol
    okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean) -> newReader
    okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean) -> newWriter
    java.lang.IllegalArgumentException illegalArgument(java.lang.String,java.lang.Object[]) -> illegalArgument
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> ioException
    int lengthWithoutPadding(int,byte,short) -> lengthWithoutPadding
    int readMedium(okio.BufferedSource) -> readMedium
    void writeMedium(okio.BufferedSink,int) -> writeMedium
    okio.ByteString access$000() -> access$000
    java.util.logging.Logger access$100() -> access$100
    java.io.IOException access$200(java.lang.String,java.lang.Object[]) -> access$200
    int access$300(okio.BufferedSource) -> access$300
    int access$400(int,byte,short) -> access$400
    java.lang.IllegalArgumentException access$500(java.lang.String,java.lang.Object[]) -> access$500
    void access$600(okio.BufferedSink,int) -> access$600
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Http2$ContinuationSource -> okhttp3.internal.framed.Http2$ContinuationSource:
    okio.BufferedSource source -> source
    int length -> length
    byte flags -> flags
    int streamId -> streamId
    int left -> left
    short padding -> padding
    void <init>(okio.BufferedSource) -> <init>
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
    void readContinuationHeader() -> readContinuationHeader
okhttp3.internal.framed.Http2$FrameLogger -> okhttp3.internal.framed.Http2$FrameLogger:
    java.lang.String[] TYPES -> TYPES
    java.lang.String[] FLAGS -> FLAGS
    java.lang.String[] BINARY -> BINARY
    void <init>() -> <init>
    java.lang.String formatHeader(boolean,int,int,byte,byte) -> formatHeader
    java.lang.String formatFlags(byte,byte) -> formatFlags
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Http2$Reader -> okhttp3.internal.framed.Http2$Reader:
    okio.BufferedSource source -> source
    okhttp3.internal.framed.Http2$ContinuationSource continuation -> continuation
    boolean client -> client
    okhttp3.internal.framed.Hpack$Reader hpackReader -> hpackReader
    void <init>(okio.BufferedSource,int,boolean) -> <init>
    void readConnectionPreface() -> readConnectionPreface
    boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler) -> nextFrame
    void readHeaders(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readHeaders
    java.util.List readHeaderBlock(int,short,byte,int) -> readHeaderBlock
    void readData(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readData
    void readPriority(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readPriority
    void readPriority(okhttp3.internal.framed.FrameReader$Handler,int) -> readPriority
    void readRstStream(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readRstStream
    void readSettings(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readSettings
    void readPushPromise(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readPushPromise
    void readPing(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readPing
    void readGoAway(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readGoAway
    void readWindowUpdate(okhttp3.internal.framed.FrameReader$Handler,int,byte,int) -> readWindowUpdate
    void close() -> close
okhttp3.internal.framed.Http2$Writer -> okhttp3.internal.framed.Http2$Writer:
    okio.BufferedSink sink -> sink
    boolean client -> client
    okio.Buffer hpackBuffer -> hpackBuffer
    okhttp3.internal.framed.Hpack$Writer hpackWriter -> hpackWriter
    int maxFrameSize -> maxFrameSize
    boolean closed -> closed
    void <init>(okio.BufferedSink,boolean) -> <init>
    void flush() -> flush
    void ackSettings(okhttp3.internal.framed.Settings) -> ackSettings
    void connectionPreface() -> connectionPreface
    void synStream(boolean,boolean,int,int,java.util.List) -> synStream
    void synReply(boolean,int,java.util.List) -> synReply
    void headers(int,java.util.List) -> headers
    void pushPromise(int,int,java.util.List) -> pushPromise
    void headers(boolean,int,java.util.List) -> headers
    void writeContinuationFrames(int,long) -> writeContinuationFrames
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    int maxDataLength() -> maxDataLength
    void data(boolean,int,okio.Buffer,int) -> data
    void dataFrame(int,byte,okio.Buffer,int) -> dataFrame
    void settings(okhttp3.internal.framed.Settings) -> settings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,byte[]) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void close() -> close
    void frameHeader(int,int,byte,byte) -> frameHeader
okhttp3.internal.framed.Huffman -> okhttp3.internal.framed.Huffman:
    int[] CODES -> CODES
    byte[] CODE_LENGTHS -> CODE_LENGTHS
    okhttp3.internal.framed.Huffman INSTANCE -> INSTANCE
    okhttp3.internal.framed.Huffman$Node root -> root
    okhttp3.internal.framed.Huffman get() -> get
    void <init>() -> <init>
    void encode(byte[],java.io.OutputStream) -> encode
    int encodedLength(byte[]) -> encodedLength
    byte[] decode(byte[]) -> decode
    void buildTree() -> buildTree
    void addCode(int,int,byte) -> addCode
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Huffman$Node -> okhttp3.internal.framed.Huffman$Node:
    okhttp3.internal.framed.Huffman$Node[] children -> children
    int symbol -> symbol
    int terminalBits -> terminalBits
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    okhttp3.internal.framed.Huffman$Node[] access$000(okhttp3.internal.framed.Huffman$Node) -> access$000
    int access$100(okhttp3.internal.framed.Huffman$Node) -> access$100
    int access$200(okhttp3.internal.framed.Huffman$Node) -> access$200
okhttp3.internal.framed.NameValueBlockReader -> okhttp3.internal.framed.NameValueBlockReader:
    okio.InflaterSource inflaterSource -> inflaterSource
    int compressedLimit -> compressedLimit
    okio.BufferedSource source -> source
    void <init>(okio.BufferedSource) -> <init>
    java.util.List readNameValueBlock(int) -> readNameValueBlock
    okio.ByteString readByteString() -> readByteString
    void doneReading() -> doneReading
    void close() -> close
    int access$000(okhttp3.internal.framed.NameValueBlockReader) -> access$000
    int access$002(okhttp3.internal.framed.NameValueBlockReader,int) -> access$002
okhttp3.internal.framed.NameValueBlockReader$1 -> okhttp3.internal.framed.NameValueBlockReader$1:
    okhttp3.internal.framed.NameValueBlockReader this$0 -> this$0
    void <init>(okhttp3.internal.framed.NameValueBlockReader,okio.Source) -> <init>
    long read(okio.Buffer,long) -> read
okhttp3.internal.framed.NameValueBlockReader$2 -> okhttp3.internal.framed.NameValueBlockReader$2:
    okhttp3.internal.framed.NameValueBlockReader this$0 -> this$0
    void <init>(okhttp3.internal.framed.NameValueBlockReader) -> <init>
    int inflate(byte[],int,int) -> inflate
okhttp3.internal.framed.Ping -> okhttp3.internal.framed.Ping:
    java.util.concurrent.CountDownLatch latch -> latch
    long sent -> sent
    long received -> received
    void <init>() -> <init>
    void send() -> send
    void receive() -> receive
    void cancel() -> cancel
    long roundTripTime() -> roundTripTime
    long roundTripTime(long,java.util.concurrent.TimeUnit) -> roundTripTime
okhttp3.internal.framed.PushObserver -> okhttp3.internal.framed.PushObserver:
    okhttp3.internal.framed.PushObserver CANCEL -> CANCEL
    boolean onRequest(int,java.util.List) -> onRequest
    boolean onHeaders(int,java.util.List,boolean) -> onHeaders
    boolean onData(int,okio.BufferedSource,int,boolean) -> onData
    void onReset(int,okhttp3.internal.framed.ErrorCode) -> onReset
    void <clinit>() -> <clinit>
okhttp3.internal.framed.PushObserver$1 -> okhttp3.internal.framed.PushObserver$1:
    void <init>() -> <init>
    boolean onRequest(int,java.util.List) -> onRequest
    boolean onHeaders(int,java.util.List,boolean) -> onHeaders
    boolean onData(int,okio.BufferedSource,int,boolean) -> onData
    void onReset(int,okhttp3.internal.framed.ErrorCode) -> onReset
okhttp3.internal.framed.Settings -> okhttp3.internal.framed.Settings:
    int DEFAULT_INITIAL_WINDOW_SIZE -> DEFAULT_INITIAL_WINDOW_SIZE
    int FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS -> FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS
    int PERSIST_VALUE -> PERSIST_VALUE
    int PERSISTED -> PERSISTED
    int UPLOAD_BANDWIDTH -> UPLOAD_BANDWIDTH
    int HEADER_TABLE_SIZE -> HEADER_TABLE_SIZE
    int DOWNLOAD_BANDWIDTH -> DOWNLOAD_BANDWIDTH
    int ENABLE_PUSH -> ENABLE_PUSH
    int ROUND_TRIP_TIME -> ROUND_TRIP_TIME
    int MAX_CONCURRENT_STREAMS -> MAX_CONCURRENT_STREAMS
    int CURRENT_CWND -> CURRENT_CWND
    int MAX_FRAME_SIZE -> MAX_FRAME_SIZE
    int DOWNLOAD_RETRANS_RATE -> DOWNLOAD_RETRANS_RATE
    int MAX_HEADER_LIST_SIZE -> MAX_HEADER_LIST_SIZE
    int INITIAL_WINDOW_SIZE -> INITIAL_WINDOW_SIZE
    int CLIENT_CERTIFICATE_VECTOR_SIZE -> CLIENT_CERTIFICATE_VECTOR_SIZE
    int FLOW_CONTROL_OPTIONS -> FLOW_CONTROL_OPTIONS
    int COUNT -> COUNT
    int FLOW_CONTROL_OPTIONS_DISABLED -> FLOW_CONTROL_OPTIONS_DISABLED
    int set -> set
    int persistValue -> persistValue
    int persisted -> persisted
    int[] values -> values
    void <init>() -> <init>
    void clear() -> clear
    okhttp3.internal.framed.Settings set(int,int,int) -> set
    boolean isSet(int) -> isSet
    int get(int) -> get
    int flags(int) -> flags
    int size() -> size
    int getUploadBandwidth(int) -> getUploadBandwidth
    int getHeaderTableSize() -> getHeaderTableSize
    int getDownloadBandwidth(int) -> getDownloadBandwidth
    boolean getEnablePush(boolean) -> getEnablePush
    int getRoundTripTime(int) -> getRoundTripTime
    int getMaxConcurrentStreams(int) -> getMaxConcurrentStreams
    int getCurrentCwnd(int) -> getCurrentCwnd
    int getMaxFrameSize(int) -> getMaxFrameSize
    int getDownloadRetransRate(int) -> getDownloadRetransRate
    int getMaxHeaderListSize(int) -> getMaxHeaderListSize
    int getInitialWindowSize(int) -> getInitialWindowSize
    int getClientCertificateVectorSize(int) -> getClientCertificateVectorSize
    boolean isFlowControlDisabled() -> isFlowControlDisabled
    boolean persistValue(int) -> persistValue
    boolean isPersisted(int) -> isPersisted
    void merge(okhttp3.internal.framed.Settings) -> merge
okhttp3.internal.framed.Spdy3 -> okhttp3.internal.framed.Spdy3:
    int TYPE_DATA -> TYPE_DATA
    int TYPE_SYN_STREAM -> TYPE_SYN_STREAM
    int TYPE_SYN_REPLY -> TYPE_SYN_REPLY
    int TYPE_RST_STREAM -> TYPE_RST_STREAM
    int TYPE_SETTINGS -> TYPE_SETTINGS
    int TYPE_PING -> TYPE_PING
    int TYPE_GOAWAY -> TYPE_GOAWAY
    int TYPE_HEADERS -> TYPE_HEADERS
    int TYPE_WINDOW_UPDATE -> TYPE_WINDOW_UPDATE
    int FLAG_FIN -> FLAG_FIN
    int FLAG_UNIDIRECTIONAL -> FLAG_UNIDIRECTIONAL
    int VERSION -> VERSION
    byte[] DICTIONARY -> DICTIONARY
    void <init>() -> <init>
    okhttp3.Protocol getProtocol() -> getProtocol
    okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean) -> newReader
    okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean) -> newWriter
    void <clinit>() -> <clinit>
okhttp3.internal.framed.Spdy3$Reader -> okhttp3.internal.framed.Spdy3$Reader:
    okio.BufferedSource source -> source
    boolean client -> client
    okhttp3.internal.framed.NameValueBlockReader headerBlockReader -> headerBlockReader
    void <init>(okio.BufferedSource,boolean) -> <init>
    void readConnectionPreface() -> readConnectionPreface
    boolean nextFrame(okhttp3.internal.framed.FrameReader$Handler) -> nextFrame
    void readSynStream(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readSynStream
    void readSynReply(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readSynReply
    void readRstStream(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readRstStream
    void readHeaders(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readHeaders
    void readWindowUpdate(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readWindowUpdate
    void readPing(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readPing
    void readGoAway(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readGoAway
    void readSettings(okhttp3.internal.framed.FrameReader$Handler,int,int) -> readSettings
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> ioException
    void close() -> close
okhttp3.internal.framed.Spdy3$Writer -> okhttp3.internal.framed.Spdy3$Writer:
    okio.BufferedSink sink -> sink
    okio.Buffer headerBlockBuffer -> headerBlockBuffer
    okio.BufferedSink headerBlockOut -> headerBlockOut
    boolean client -> client
    boolean closed -> closed
    void <init>(okio.BufferedSink,boolean) -> <init>
    void ackSettings(okhttp3.internal.framed.Settings) -> ackSettings
    void pushPromise(int,int,java.util.List) -> pushPromise
    void connectionPreface() -> connectionPreface
    void flush() -> flush
    void synStream(boolean,boolean,int,int,java.util.List) -> synStream
    void synReply(boolean,int,java.util.List) -> synReply
    void headers(int,java.util.List) -> headers
    void rstStream(int,okhttp3.internal.framed.ErrorCode) -> rstStream
    int maxDataLength() -> maxDataLength
    void data(boolean,int,okio.Buffer,int) -> data
    void sendDataFrame(int,int,okio.Buffer,int) -> sendDataFrame
    void writeNameValueBlockToBuffer(java.util.List) -> writeNameValueBlockToBuffer
    void settings(okhttp3.internal.framed.Settings) -> settings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.framed.ErrorCode,byte[]) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void close() -> close
okhttp3.internal.framed.StreamResetException -> okhttp3.internal.framed.StreamResetException:
    okhttp3.internal.framed.ErrorCode errorCode -> errorCode
    void <init>(okhttp3.internal.framed.ErrorCode) -> <init>
okhttp3.internal.framed.Variant -> okhttp3.internal.framed.Variant:
    okhttp3.Protocol getProtocol() -> getProtocol
    okhttp3.internal.framed.FrameReader newReader(okio.BufferedSource,boolean) -> newReader
    okhttp3.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean) -> newWriter
okhttp3.internal.http.CacheRequest -> okhttp3.internal.http.CacheRequest:
    okio.Sink body() -> body
    void abort() -> abort
okhttp3.internal.http.CacheStrategy -> okhttp3.internal.http.CacheStrategy:
    okhttp3.Request networkRequest -> networkRequest
    okhttp3.Response cacheResponse -> cacheResponse
    void <init>(okhttp3.Request,okhttp3.Response) -> <init>
    boolean isCacheable(okhttp3.Response,okhttp3.Request) -> isCacheable
    void <init>(okhttp3.Request,okhttp3.Response,okhttp3.internal.http.CacheStrategy$1) -> <init>
okhttp3.internal.http.CacheStrategy$1 -> okhttp3.internal.http.CacheStrategy$1:
okhttp3.internal.http.CacheStrategy$Factory -> okhttp3.internal.http.CacheStrategy$Factory:
    long nowMillis -> nowMillis
    okhttp3.Request request -> request
    okhttp3.Response cacheResponse -> cacheResponse
    java.util.Date servedDate -> servedDate
    java.lang.String servedDateString -> servedDateString
    java.util.Date lastModified -> lastModified
    java.lang.String lastModifiedString -> lastModifiedString
    java.util.Date expires -> expires
    long sentRequestMillis -> sentRequestMillis
    long receivedResponseMillis -> receivedResponseMillis
    java.lang.String etag -> etag
    int ageSeconds -> ageSeconds
    void <init>(long,okhttp3.Request,okhttp3.Response) -> <init>
    okhttp3.internal.http.CacheStrategy get() -> get
    okhttp3.internal.http.CacheStrategy getCandidate() -> getCandidate
    long computeFreshnessLifetime() -> computeFreshnessLifetime
    long cacheResponseAge() -> cacheResponseAge
    boolean isFreshnessLifetimeHeuristic() -> isFreshnessLifetimeHeuristic
    boolean hasConditions(okhttp3.Request) -> hasConditions
okhttp3.internal.http.HeaderParser -> okhttp3.internal.http.HeaderParser:
    int skipUntil(java.lang.String,int,java.lang.String) -> skipUntil
    int skipWhitespace(java.lang.String,int) -> skipWhitespace
    int parseSeconds(java.lang.String,int) -> parseSeconds
    void <init>() -> <init>
okhttp3.internal.http.Http1xStream -> okhttp3.internal.http.Http1xStream:
    int STATE_IDLE -> STATE_IDLE
    int STATE_OPEN_REQUEST_BODY -> STATE_OPEN_REQUEST_BODY
    int STATE_WRITING_REQUEST_BODY -> STATE_WRITING_REQUEST_BODY
    int STATE_READ_RESPONSE_HEADERS -> STATE_READ_RESPONSE_HEADERS
    int STATE_OPEN_RESPONSE_BODY -> STATE_OPEN_RESPONSE_BODY
    int STATE_READING_RESPONSE_BODY -> STATE_READING_RESPONSE_BODY
    int STATE_CLOSED -> STATE_CLOSED
    okhttp3.internal.http.StreamAllocation streamAllocation -> streamAllocation
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    okhttp3.internal.http.HttpEngine httpEngine -> httpEngine
    int state -> state
    void <init>(okhttp3.internal.http.StreamAllocation,okio.BufferedSource,okio.BufferedSink) -> <init>
    void setHttpEngine(okhttp3.internal.http.HttpEngine) -> setHttpEngine
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void cancel() -> cancel
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    okhttp3.Response$Builder readResponseHeaders() -> readResponseHeaders
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    okio.Source getTransferStream(okhttp3.Response) -> getTransferStream
    boolean isClosed() -> isClosed
    void finishRequest() -> finishRequest
    void writeRequest(okhttp3.Headers,java.lang.String) -> writeRequest
    okhttp3.Response$Builder readResponse() -> readResponse
    okhttp3.Headers readHeaders() -> readHeaders
    okio.Sink newChunkedSink() -> newChunkedSink
    okio.Sink newFixedLengthSink(long) -> newFixedLengthSink
    void writeRequestBody(okhttp3.internal.http.RetryableSink) -> writeRequestBody
    okio.Source newFixedLengthSource(long) -> newFixedLengthSource
    okio.Source newChunkedSource(okhttp3.internal.http.HttpEngine) -> newChunkedSource
    okio.Source newUnknownLengthSource() -> newUnknownLengthSource
    void detachTimeout(okio.ForwardingTimeout) -> detachTimeout
    okio.BufferedSink access$300(okhttp3.internal.http.Http1xStream) -> access$300
    void access$400(okhttp3.internal.http.Http1xStream,okio.ForwardingTimeout) -> access$400
    int access$502(okhttp3.internal.http.Http1xStream,int) -> access$502
    okio.BufferedSource access$600(okhttp3.internal.http.Http1xStream) -> access$600
    int access$500(okhttp3.internal.http.Http1xStream) -> access$500
    okhttp3.internal.http.StreamAllocation access$700(okhttp3.internal.http.Http1xStream) -> access$700
okhttp3.internal.http.Http1xStream$1 -> okhttp3.internal.http.Http1xStream$1:
okhttp3.internal.http.Http1xStream$AbstractSource -> okhttp3.internal.http.Http1xStream$AbstractSource:
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream) -> <init>
    okio.Timeout timeout() -> timeout
    void endOfInput(boolean) -> endOfInput
    void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1) -> <init>
okhttp3.internal.http.Http1xStream$ChunkedSink -> okhttp3.internal.http.Http1xStream$ChunkedSink:
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream) -> <init>
    okio.Timeout timeout() -> timeout
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1) -> <init>
okhttp3.internal.http.Http1xStream$ChunkedSource -> okhttp3.internal.http.Http1xStream$ChunkedSource:
    long NO_CHUNK_YET -> NO_CHUNK_YET
    long bytesRemainingInChunk -> bytesRemainingInChunk
    boolean hasMoreChunks -> hasMoreChunks
    okhttp3.internal.http.HttpEngine httpEngine -> httpEngine
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.HttpEngine) -> <init>
    long read(okio.Buffer,long) -> read
    void readChunkSize() -> readChunkSize
    void close() -> close
okhttp3.internal.http.Http1xStream$FixedLengthSink -> okhttp3.internal.http.Http1xStream$FixedLengthSink:
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    long bytesRemaining -> bytesRemaining
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream,long) -> <init>
    okio.Timeout timeout() -> timeout
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    void <init>(okhttp3.internal.http.Http1xStream,long,okhttp3.internal.http.Http1xStream$1) -> <init>
okhttp3.internal.http.Http1xStream$FixedLengthSource -> okhttp3.internal.http.Http1xStream$FixedLengthSource:
    long bytesRemaining -> bytesRemaining
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream,long) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
okhttp3.internal.http.Http1xStream$UnknownLengthSource -> okhttp3.internal.http.Http1xStream$UnknownLengthSource:
    boolean inputExhausted -> inputExhausted
    okhttp3.internal.http.Http1xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http1xStream) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
    void <init>(okhttp3.internal.http.Http1xStream,okhttp3.internal.http.Http1xStream$1) -> <init>
okhttp3.internal.http.Http2xStream -> okhttp3.internal.http.Http2xStream:
    okio.ByteString CONNECTION -> CONNECTION
    okio.ByteString HOST -> HOST
    okio.ByteString KEEP_ALIVE -> KEEP_ALIVE
    okio.ByteString PROXY_CONNECTION -> PROXY_CONNECTION
    okio.ByteString TRANSFER_ENCODING -> TRANSFER_ENCODING
    okio.ByteString TE -> TE
    okio.ByteString ENCODING -> ENCODING
    okio.ByteString UPGRADE -> UPGRADE
    java.util.List SPDY_3_SKIPPED_REQUEST_HEADERS -> SPDY_3_SKIPPED_REQUEST_HEADERS
    java.util.List SPDY_3_SKIPPED_RESPONSE_HEADERS -> SPDY_3_SKIPPED_RESPONSE_HEADERS
    java.util.List HTTP_2_SKIPPED_REQUEST_HEADERS -> HTTP_2_SKIPPED_REQUEST_HEADERS
    java.util.List HTTP_2_SKIPPED_RESPONSE_HEADERS -> HTTP_2_SKIPPED_RESPONSE_HEADERS
    okhttp3.internal.http.StreamAllocation streamAllocation -> streamAllocation
    okhttp3.internal.framed.FramedConnection framedConnection -> framedConnection
    okhttp3.internal.http.HttpEngine httpEngine -> httpEngine
    okhttp3.internal.framed.FramedStream stream -> stream
    void <init>(okhttp3.internal.http.StreamAllocation,okhttp3.internal.framed.FramedConnection) -> <init>
    void setHttpEngine(okhttp3.internal.http.HttpEngine) -> setHttpEngine
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    void writeRequestBody(okhttp3.internal.http.RetryableSink) -> writeRequestBody
    void finishRequest() -> finishRequest
    okhttp3.Response$Builder readResponseHeaders() -> readResponseHeaders
    java.util.List spdy3HeadersList(okhttp3.Request) -> spdy3HeadersList
    java.lang.String joinOnNull(java.lang.String,java.lang.String) -> joinOnNull
    java.util.List http2HeadersList(okhttp3.Request) -> http2HeadersList
    okhttp3.Response$Builder readSpdy3HeadersList(java.util.List) -> readSpdy3HeadersList
    okhttp3.Response$Builder readHttp2HeadersList(java.util.List) -> readHttp2HeadersList
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    void cancel() -> cancel
    okhttp3.internal.http.StreamAllocation access$000(okhttp3.internal.http.Http2xStream) -> access$000
    void <clinit>() -> <clinit>
okhttp3.internal.http.Http2xStream$StreamFinishingSource -> okhttp3.internal.http.Http2xStream$StreamFinishingSource:
    okhttp3.internal.http.Http2xStream this$0 -> this$0
    void <init>(okhttp3.internal.http.Http2xStream,okio.Source) -> <init>
    void close() -> close
okhttp3.internal.http.HttpDate -> okhttp3.internal.http.HttpDate:
    long MAX_DATE -> MAX_DATE
    java.lang.ThreadLocal STANDARD_DATE_FORMAT -> STANDARD_DATE_FORMAT
    java.lang.String[] BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS -> BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS
    java.text.DateFormat[] BROWSER_COMPATIBLE_DATE_FORMATS -> BROWSER_COMPATIBLE_DATE_FORMATS
    java.util.Date parse(java.lang.String) -> parse
    java.lang.String format(java.util.Date) -> format
    void <init>() -> <init>
    void <clinit>() -> <clinit>
okhttp3.internal.http.HttpDate$1 -> okhttp3.internal.http.HttpDate$1:
    void <init>() -> <init>
    java.text.DateFormat initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
okhttp3.internal.http.HttpEngine -> okhttp3.internal.http.HttpEngine:
    int MAX_FOLLOW_UPS -> MAX_FOLLOW_UPS
    okhttp3.ResponseBody EMPTY_BODY -> EMPTY_BODY
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.http.StreamAllocation streamAllocation -> streamAllocation
    okhttp3.Response priorResponse -> priorResponse
    okhttp3.internal.http.HttpStream httpStream -> httpStream
    long sentRequestMillis -> sentRequestMillis
    boolean transparentGzip -> transparentGzip
    boolean bufferRequestBody -> bufferRequestBody
    okhttp3.Request userRequest -> userRequest
    okhttp3.Request networkRequest -> networkRequest
    okhttp3.Response cacheResponse -> cacheResponse
    okhttp3.Response userResponse -> userResponse
    okio.Sink requestBodyOut -> requestBodyOut
    okio.BufferedSink bufferedRequestBody -> bufferedRequestBody
    boolean callerWritesRequestBody -> callerWritesRequestBody
    boolean forWebSocket -> forWebSocket
    okhttp3.internal.http.CacheRequest storeRequest -> storeRequest
    okhttp3.internal.http.CacheStrategy cacheStrategy -> cacheStrategy
    void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean,boolean,boolean,okhttp3.internal.http.StreamAllocation,okhttp3.internal.http.RetryableSink,okhttp3.Response) -> <init>
    void sendRequest() -> sendRequest
    boolean writeRequestHeadersEagerly() -> writeRequestHeadersEagerly
    okhttp3.internal.http.HttpStream connect() -> connect
    okhttp3.Response stripBody(okhttp3.Response) -> stripBody
    void writingRequestHeaders() -> writingRequestHeaders
    boolean permitsRequestBody(okhttp3.Request) -> permitsRequestBody
    okio.Sink getRequestBody() -> getRequestBody
    okio.BufferedSink getBufferedRequestBody() -> getBufferedRequestBody
    boolean hasResponse() -> hasResponse
    okhttp3.Request getRequest() -> getRequest
    okhttp3.Response getResponse() -> getResponse
    okhttp3.Connection getConnection() -> getConnection
    okhttp3.internal.http.HttpEngine recover(java.io.IOException,boolean,okio.Sink) -> recover
    okhttp3.internal.http.HttpEngine recover(java.io.IOException,boolean) -> recover
    boolean isRecoverable(java.io.IOException,boolean) -> isRecoverable
    void maybeCache() -> maybeCache
    void releaseStreamAllocation() -> releaseStreamAllocation
    void cancel() -> cancel
    okhttp3.internal.http.StreamAllocation close() -> close
    okhttp3.Response unzip(okhttp3.Response) -> unzip
    boolean hasBody(okhttp3.Response) -> hasBody
    okhttp3.Request networkRequest(okhttp3.Request) -> networkRequest
    java.lang.String cookieHeader(java.util.List) -> cookieHeader
    void readResponse() -> readResponse
    okhttp3.Response readNetworkResponse() -> readNetworkResponse
    okhttp3.Response cacheWritingResponse(okhttp3.internal.http.CacheRequest,okhttp3.Response) -> cacheWritingResponse
    boolean validate(okhttp3.Response,okhttp3.Response) -> validate
    okhttp3.Headers combine(okhttp3.Headers,okhttp3.Headers) -> combine
    void receiveHeaders(okhttp3.Headers) -> receiveHeaders
    okhttp3.Request followUpRequest() -> followUpRequest
    boolean sameConnection(okhttp3.HttpUrl) -> sameConnection
    okhttp3.Address createAddress(okhttp3.OkHttpClient,okhttp3.Request) -> createAddress
    okhttp3.internal.http.HttpStream access$000(okhttp3.internal.http.HttpEngine) -> access$000
    okhttp3.Request access$102(okhttp3.internal.http.HttpEngine,okhttp3.Request) -> access$102
    okhttp3.Response access$200(okhttp3.internal.http.HttpEngine) -> access$200
    void <clinit>() -> <clinit>
okhttp3.internal.http.HttpEngine$1 -> okhttp3.internal.http.HttpEngine$1:
    void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
okhttp3.internal.http.HttpEngine$2 -> okhttp3.internal.http.HttpEngine$2:
    boolean cacheRequestClosed -> cacheRequestClosed
    okio.BufferedSource val$source -> val$source
    okhttp3.internal.http.CacheRequest val$cacheRequest -> val$cacheRequest
    okio.BufferedSink val$cacheBody -> val$cacheBody
    okhttp3.internal.http.HttpEngine this$0 -> this$0
    void <init>(okhttp3.internal.http.HttpEngine,okio.BufferedSource,okhttp3.internal.http.CacheRequest,okio.BufferedSink) -> <init>
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
okhttp3.internal.http.HttpEngine$NetworkInterceptorChain -> okhttp3.internal.http.HttpEngine$NetworkInterceptorChain:
    int index -> index
    okhttp3.Request request -> request
    okhttp3.Connection connection -> connection
    int calls -> calls
    okhttp3.internal.http.HttpEngine this$0 -> this$0
    void <init>(okhttp3.internal.http.HttpEngine,int,okhttp3.Request,okhttp3.Connection) -> <init>
    okhttp3.Connection connection() -> connection
    okhttp3.Request request() -> request
    okhttp3.Response proceed(okhttp3.Request) -> proceed
okhttp3.internal.http.HttpMethod -> okhttp3.internal.http.HttpMethod:
    boolean invalidatesCache(java.lang.String) -> invalidatesCache
    boolean requiresRequestBody(java.lang.String) -> requiresRequestBody
    boolean permitsRequestBody(java.lang.String) -> permitsRequestBody
    boolean redirectsToGet(java.lang.String) -> redirectsToGet
    void <init>() -> <init>
okhttp3.internal.http.HttpStream -> okhttp3.internal.http.HttpStream:
    int DISCARD_STREAM_TIMEOUT_MILLIS -> DISCARD_STREAM_TIMEOUT_MILLIS
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    void writeRequestBody(okhttp3.internal.http.RetryableSink) -> writeRequestBody
    void finishRequest() -> finishRequest
    okhttp3.Response$Builder readResponseHeaders() -> readResponseHeaders
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    void setHttpEngine(okhttp3.internal.http.HttpEngine) -> setHttpEngine
    void cancel() -> cancel
okhttp3.internal.http.OkHeaders -> okhttp3.internal.http.OkHeaders:
    java.lang.String PREFIX -> PREFIX
    java.lang.String SENT_MILLIS -> SENT_MILLIS
    java.lang.String RECEIVED_MILLIS -> RECEIVED_MILLIS
    java.lang.String SELECTED_PROTOCOL -> SELECTED_PROTOCOL
    java.lang.String RESPONSE_SOURCE -> RESPONSE_SOURCE
    void <init>() -> <init>
    long contentLength(okhttp3.Request) -> contentLength
    long contentLength(okhttp3.Response) -> contentLength
    long contentLength(okhttp3.Headers) -> contentLength
    long stringToLong(java.lang.String) -> stringToLong
    boolean varyMatches(okhttp3.Response,okhttp3.Headers,okhttp3.Request) -> varyMatches
    boolean hasVaryAll(okhttp3.Response) -> hasVaryAll
    boolean hasVaryAll(okhttp3.Headers) -> hasVaryAll
    java.util.Set varyFields(okhttp3.Response) -> varyFields
    java.util.Set varyFields(okhttp3.Headers) -> varyFields
    okhttp3.Headers varyHeaders(okhttp3.Response) -> varyHeaders
    okhttp3.Headers varyHeaders(okhttp3.Headers,okhttp3.Headers) -> varyHeaders
    boolean isEndToEnd(java.lang.String) -> isEndToEnd
    java.util.List parseChallenges(okhttp3.Headers,java.lang.String) -> parseChallenges
    void <clinit>() -> <clinit>
okhttp3.internal.http.RealResponseBody -> okhttp3.internal.http.RealResponseBody:
    okhttp3.Headers headers -> headers
    okio.BufferedSource source -> source
    void <init>(okhttp3.Headers,okio.BufferedSource) -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    okio.BufferedSource source() -> source
okhttp3.internal.http.RequestException -> okhttp3.internal.http.RequestException:
    void <init>(java.io.IOException) -> <init>
    java.io.IOException getCause() -> getCause
    java.lang.Throwable getCause() -> getCause
okhttp3.internal.http.RequestLine -> okhttp3.internal.http.RequestLine:
    void <init>() -> <init>
    java.lang.String get(okhttp3.Request,java.net.Proxy$Type) -> get
    boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type) -> includeAuthorityInRequestLine
    java.lang.String requestPath(okhttp3.HttpUrl) -> requestPath
okhttp3.internal.http.RetryableSink -> okhttp3.internal.http.RetryableSink:
    boolean closed -> closed
    int limit -> limit
    okio.Buffer content -> content
    void <init>(int) -> <init>
    void <init>() -> <init>
    void close() -> close
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    long contentLength() -> contentLength
    void writeToSocket(okio.Sink) -> writeToSocket
okhttp3.internal.http.RouteException -> okhttp3.internal.http.RouteException:
    java.lang.reflect.Method addSuppressedExceptionMethod -> addSuppressedExceptionMethod
    java.io.IOException lastException -> lastException
    void <init>(java.io.IOException) -> <init>
    java.io.IOException getLastConnectException() -> getLastConnectException
    void addConnectException(java.io.IOException) -> addConnectException
    void addSuppressedIfPossible(java.io.IOException,java.io.IOException) -> addSuppressedIfPossible
    void <clinit>() -> <clinit>
okhttp3.internal.http.RouteSelector -> okhttp3.internal.http.RouteSelector:
    okhttp3.Address address -> address
    okhttp3.internal.RouteDatabase routeDatabase -> routeDatabase
    java.net.Proxy lastProxy -> lastProxy
    java.net.InetSocketAddress lastInetSocketAddress -> lastInetSocketAddress
    java.util.List proxies -> proxies
    int nextProxyIndex -> nextProxyIndex
    java.util.List inetSocketAddresses -> inetSocketAddresses
    int nextInetSocketAddressIndex -> nextInetSocketAddressIndex
    java.util.List postponedRoutes -> postponedRoutes
    void <init>(okhttp3.Address,okhttp3.internal.RouteDatabase) -> <init>
    boolean hasNext() -> hasNext
    okhttp3.Route next() -> next
    void connectFailed(okhttp3.Route,java.io.IOException) -> connectFailed
    void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy) -> resetNextProxy
    boolean hasNextProxy() -> hasNextProxy
    java.net.Proxy nextProxy() -> nextProxy
    void resetNextInetSocketAddress(java.net.Proxy) -> resetNextInetSocketAddress
    java.lang.String getHostString(java.net.InetSocketAddress) -> getHostString
    boolean hasNextInetSocketAddress() -> hasNextInetSocketAddress
    java.net.InetSocketAddress nextInetSocketAddress() -> nextInetSocketAddress
    boolean hasNextPostponed() -> hasNextPostponed
    okhttp3.Route nextPostponed() -> nextPostponed
okhttp3.internal.http.StatusLine -> okhttp3.internal.http.StatusLine:
    int HTTP_TEMP_REDIRECT -> HTTP_TEMP_REDIRECT
    int HTTP_PERM_REDIRECT -> HTTP_PERM_REDIRECT
    int HTTP_CONTINUE -> HTTP_CONTINUE
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    void <init>(okhttp3.Protocol,int,java.lang.String) -> <init>
    okhttp3.internal.http.StatusLine get(okhttp3.Response) -> get
    okhttp3.internal.http.StatusLine parse(java.lang.String) -> parse
    java.lang.String toString() -> toString
okhttp3.internal.http.StreamAllocation -> okhttp3.internal.http.StreamAllocation:
    okhttp3.Address address -> address
    okhttp3.Route route -> route
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.internal.http.RouteSelector routeSelector -> routeSelector
    int refusedStreamCount -> refusedStreamCount
    okhttp3.internal.io.RealConnection connection -> connection
    boolean released -> released
    boolean canceled -> canceled
    okhttp3.internal.http.HttpStream stream -> stream
    void <init>(okhttp3.ConnectionPool,okhttp3.Address) -> <init>
    okhttp3.internal.http.HttpStream newStream(int,int,int,boolean,boolean) -> newStream
    okhttp3.internal.io.RealConnection findHealthyConnection(int,int,int,boolean,boolean) -> findHealthyConnection
    okhttp3.internal.io.RealConnection findConnection(int,int,int,boolean) -> findConnection
    void streamFinished(boolean,okhttp3.internal.http.HttpStream) -> streamFinished
    okhttp3.internal.http.HttpStream stream() -> stream
    okhttp3.internal.RouteDatabase routeDatabase() -> routeDatabase
    okhttp3.internal.io.RealConnection connection() -> connection
    void release() -> release
    void noNewStreams() -> noNewStreams
    void deallocate(boolean,boolean,boolean) -> deallocate
    void cancel() -> cancel
    void streamFailed(java.io.IOException) -> streamFailed
    void acquire(okhttp3.internal.io.RealConnection) -> acquire
    void release(okhttp3.internal.io.RealConnection) -> release
    boolean hasMoreRoutes() -> hasMoreRoutes
    java.lang.String toString() -> toString
okhttp3.internal.io.FileSystem -> okhttp3.internal.io.FileSystem:
    okhttp3.internal.io.FileSystem SYSTEM -> SYSTEM
    okio.Source source(java.io.File) -> source
    okio.Sink sink(java.io.File) -> sink
    okio.Sink appendingSink(java.io.File) -> appendingSink
    void delete(java.io.File) -> delete
    boolean exists(java.io.File) -> exists
    long size(java.io.File) -> size
    void rename(java.io.File,java.io.File) -> rename
    void deleteContents(java.io.File) -> deleteContents
    void <clinit>() -> <clinit>
okhttp3.internal.io.FileSystem$1 -> okhttp3.internal.io.FileSystem$1:
    void <init>() -> <init>
    okio.Source source(java.io.File) -> source
    okio.Sink sink(java.io.File) -> sink
    okio.Sink appendingSink(java.io.File) -> appendingSink
    void delete(java.io.File) -> delete
    boolean exists(java.io.File) -> exists
    long size(java.io.File) -> size
    void rename(java.io.File,java.io.File) -> rename
    void deleteContents(java.io.File) -> deleteContents
okhttp3.internal.io.RealConnection -> okhttp3.internal.io.RealConnection:
    okhttp3.Route route -> route
    java.net.Socket rawSocket -> rawSocket
    java.net.Socket socket -> socket
    okhttp3.Handshake handshake -> handshake
    okhttp3.Protocol protocol -> protocol
    okhttp3.internal.framed.FramedConnection framedConnection -> framedConnection
    int successCount -> successCount
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    int allocationLimit -> allocationLimit
    java.util.List allocations -> allocations
    boolean noNewStreams -> noNewStreams
    long idleAtNanos -> idleAtNanos
    void <init>(okhttp3.Route) -> <init>
    void connect(int,int,int,java.util.List,boolean) -> connect
    void buildTunneledConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector) -> buildTunneledConnection
    void buildConnection(int,int,int,okhttp3.internal.ConnectionSpecSelector) -> buildConnection
    void connectSocket(int,int,int,okhttp3.internal.ConnectionSpecSelector) -> connectSocket
    void establishProtocol(int,int,okhttp3.internal.ConnectionSpecSelector) -> establishProtocol
    void connectTls(int,int,okhttp3.internal.ConnectionSpecSelector) -> connectTls
    okhttp3.Request createTunnel(int,int,okhttp3.Request,okhttp3.HttpUrl) -> createTunnel
    okhttp3.Request createTunnelRequest() -> createTunnelRequest
    boolean isConnected() -> isConnected
    okhttp3.Route route() -> route
    void cancel() -> cancel
    java.net.Socket socket() -> socket
    boolean isHealthy(boolean) -> isHealthy
    void onStream(okhttp3.internal.framed.FramedStream) -> onStream
    void onSettings(okhttp3.internal.framed.FramedConnection) -> onSettings
    okhttp3.Handshake handshake() -> handshake
    boolean isMultiplexed() -> isMultiplexed
    okhttp3.Protocol protocol() -> protocol
    java.lang.String toString() -> toString
okhttp3.internal.tls.CertificateChainCleaner -> okhttp3.internal.tls.CertificateChainCleaner:
    void <init>() -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
    okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager) -> get
    okhttp3.internal.tls.CertificateChainCleaner get(java.security.cert.X509Certificate[]) -> get
okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner -> okhttp3.internal.tls.CertificateChainCleaner$AndroidCertificateChainCleaner:
    java.lang.Object x509TrustManagerExtensions -> x509TrustManagerExtensions
    java.lang.reflect.Method checkServerTrusted -> checkServerTrusted
    void <init>(java.lang.Object,java.lang.reflect.Method) -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
okhttp3.internal.tls.CertificateChainCleaner$BasicCertificateChainCleaner -> okhttp3.internal.tls.CertificateChainCleaner$BasicCertificateChainCleaner:
    int MAX_SIGNERS -> MAX_SIGNERS
    okhttp3.internal.tls.TrustRootIndex trustRootIndex -> trustRootIndex
    void <init>(okhttp3.internal.tls.TrustRootIndex) -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
    boolean verifySignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate) -> verifySignature
okhttp3.internal.tls.DistinguishedNameParser -> okhttp3.internal.tls.DistinguishedNameParser:
    java.lang.String dn -> dn
    int length -> length
    int pos -> pos
    int beg -> beg
    int end -> end
    int cur -> cur
    char[] chars -> chars
    void <init>(javax.security.auth.x500.X500Principal) -> <init>
    java.lang.String nextAT() -> nextAT
    java.lang.String quotedAV() -> quotedAV
    java.lang.String hexAV() -> hexAV
    java.lang.String escapedAV() -> escapedAV
    char getEscaped() -> getEscaped
    char getUTF8() -> getUTF8
    int getByte(int) -> getByte
    java.lang.String findMostSpecific(java.lang.String) -> findMostSpecific
okhttp3.internal.tls.OkHostnameVerifier -> okhttp3.internal.tls.OkHostnameVerifier:
    okhttp3.internal.tls.OkHostnameVerifier INSTANCE -> INSTANCE
    int ALT_DNS_NAME -> ALT_DNS_NAME
    int ALT_IPA_NAME -> ALT_IPA_NAME
    void <init>() -> <init>
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    boolean verify(java.lang.String,java.security.cert.X509Certificate) -> verify
    boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate) -> verifyIpAddress
    boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate) -> verifyHostname
    java.util.List allSubjectAltNames(java.security.cert.X509Certificate) -> allSubjectAltNames
    java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int) -> getSubjectAltNames
    boolean verifyHostname(java.lang.String,java.lang.String) -> verifyHostname
    void <clinit>() -> <clinit>
okhttp3.internal.tls.TrustRootIndex -> okhttp3.internal.tls.TrustRootIndex:
    void <init>() -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
    okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager) -> get
    okhttp3.internal.tls.TrustRootIndex get(java.security.cert.X509Certificate[]) -> get
okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex -> okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex:
    javax.net.ssl.X509TrustManager trustManager -> trustManager
    java.lang.reflect.Method findByIssuerAndSignatureMethod -> findByIssuerAndSignatureMethod
    void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method) -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex -> okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex:
    java.util.Map subjectToCaCerts -> subjectToCaCerts
    void <init>(java.security.cert.X509Certificate[]) -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
okio.AsyncTimeout -> a.a:
    int TIMEOUT_WRITE_SIZE -> TIMEOUT_WRITE_SIZE
    okio.AsyncTimeout head -> head
    boolean inQueue -> inQueue
    okio.AsyncTimeout next -> next
    long timeoutAt -> timeoutAt
    void <init>() -> <init>
    void enter() -> enter
    void scheduleTimeout(okio.AsyncTimeout,long,boolean) -> scheduleTimeout
    boolean exit() -> exit
    boolean cancelScheduledTimeout(okio.AsyncTimeout) -> cancelScheduledTimeout
    long remainingNanos(long) -> remainingNanos
    void timedOut() -> timedOut
    okio.Sink sink(okio.Sink) -> sink
    okio.Source source(okio.Source) -> source
    void exit(boolean) -> exit
    java.io.IOException exit(java.io.IOException) -> exit
    java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    okio.AsyncTimeout awaitTimeout() -> awaitTimeout
okio.AsyncTimeout$1 -> a.b:
    okio.Sink val$sink -> a
    okio.AsyncTimeout this$0 -> b
    void <init>(okio.AsyncTimeout,okio.Sink) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.AsyncTimeout$2 -> a.c:
    okio.Source val$source -> a
    okio.AsyncTimeout this$0 -> b
    void <init>(okio.AsyncTimeout,okio.Source) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.AsyncTimeout$Watchdog -> a.d:
    void <init>() -> <init>
    void run() -> run
okio.Base64 -> a.e:
    byte[] MAP -> a
    byte[] URL_MAP -> b
    byte[] decode(java.lang.String) -> a
    java.lang.String encode(byte[]) -> a
    java.lang.String encode(byte[],byte[]) -> a
    void <clinit>() -> <clinit>
okio.Buffer -> a.f:
    byte[] DIGITS -> c
    okio.Segment head -> a
    long size -> b
    void <init>() -> <init>
    okio.Buffer buffer() -> a
    okio.BufferedSink emit() -> b
    boolean exhausted() -> c
    void require(long) -> a
    boolean request(long) -> b
    java.io.InputStream inputStream() -> d
    okio.Buffer copyTo(okio.Buffer,long,long) -> a
    byte readByte() -> e
    byte getByte(long) -> c
    short readShort() -> f
    int readInt() -> g
    short readShortLe() -> h
    int readIntLe() -> i
    long readDecimalLong() -> j
    long readHexadecimalUnsignedLong() -> k
    okio.ByteString readByteString() -> l
    okio.ByteString readByteString(long) -> d
    java.lang.String readUtf8() -> m
    java.lang.String readUtf8(long) -> l
    java.lang.String readString(java.nio.charset.Charset) -> a
    java.lang.String readString(long,java.nio.charset.Charset) -> a
    java.lang.String readUtf8LineStrict() -> n
    java.lang.String readUtf8Line(long) -> e
    byte[] readByteArray() -> o
    byte[] readByteArray(long) -> f
    void readFully(byte[]) -> c
    int read(byte[],int,int) -> a
    void clear() -> p
    void skip(long) -> g
    okio.Buffer write(okio.ByteString) -> a
    okio.Buffer writeUtf8(java.lang.String) -> a
    okio.Buffer writeUtf8(java.lang.String,int,int) -> a
    okio.Buffer writeUtf8CodePoint(int) -> a
    okio.Buffer write(byte[]) -> a
    okio.Buffer write(byte[],int,int) -> b
    long writeAll(okio.Source) -> a
    okio.Buffer writeByte(int) -> b
    okio.Buffer writeShort(int) -> c
    okio.Buffer writeInt(int) -> d
    okio.Buffer writeIntLe(int) -> e
    okio.Buffer writeDecimalLong(long) -> h
    okio.Buffer writeHexadecimalUnsignedLong(long) -> i
    okio.Segment writableSegment(int) -> f
    void write(okio.Buffer,long) -> write
    long read(okio.Buffer,long) -> read
    long indexOf(byte) -> a
    long indexOf(byte,long) -> a
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    okio.ByteString digest(java.lang.String) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    okio.Buffer clone() -> q
    java.lang.Object clone() -> clone
    okio.BufferedSink emitCompleteSegments() -> r
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> j
    okio.BufferedSink writeDecimalLong(long) -> k
    okio.BufferedSink writeIntLe(int) -> g
    okio.BufferedSink writeInt(int) -> h
    okio.BufferedSink writeShort(int) -> i
    okio.BufferedSink writeByte(int) -> j
    okio.BufferedSink writeUtf8(java.lang.String) -> b
    okio.BufferedSink write(byte[],int,int) -> c
    okio.BufferedSink write(byte[]) -> b
    okio.BufferedSink write(okio.ByteString) -> b
    void <clinit>() -> <clinit>
okio.Buffer$2 -> a.g:
    okio.Buffer this$0 -> a
    void <init>(okio.Buffer) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    java.lang.String toString() -> toString
okio.BufferedSink -> a.h:
    okio.Buffer buffer() -> a
    okio.BufferedSink write(okio.ByteString) -> b
    okio.BufferedSink write(byte[]) -> b
    okio.BufferedSink write(byte[],int,int) -> c
    long writeAll(okio.Source) -> a
    okio.BufferedSink writeUtf8(java.lang.String) -> b
    okio.BufferedSink writeByte(int) -> j
    okio.BufferedSink writeShort(int) -> i
    okio.BufferedSink writeInt(int) -> h
    okio.BufferedSink writeIntLe(int) -> g
    okio.BufferedSink writeDecimalLong(long) -> k
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> j
    okio.BufferedSink emitCompleteSegments() -> r
    okio.BufferedSink emit() -> b
okio.BufferedSource -> a.i:
    okio.Buffer buffer() -> a
    boolean exhausted() -> c
    void require(long) -> a
    boolean request(long) -> b
    byte readByte() -> e
    short readShort() -> f
    short readShortLe() -> h
    int readInt() -> g
    int readIntLe() -> i
    long readDecimalLong() -> j
    long readHexadecimalUnsignedLong() -> k
    void skip(long) -> g
    okio.ByteString readByteString(long) -> d
    byte[] readByteArray() -> o
    byte[] readByteArray(long) -> f
    java.lang.String readUtf8LineStrict() -> n
    long indexOf(byte) -> a
    java.io.InputStream inputStream() -> d
okio.ByteString -> a.j:
    char[] HEX_DIGITS -> a
    okio.ByteString EMPTY -> b
    byte[] data -> c
    int hashCode -> d
    java.lang.String utf8 -> e
    void <init>(byte[]) -> <init>
    okio.ByteString of(byte[]) -> a
    okio.ByteString encodeUtf8(java.lang.String) -> a
    java.lang.String utf8() -> a
    okio.ByteString digest(java.lang.String) -> c
    okio.ByteString decodeBase64(java.lang.String) -> b
    java.lang.String hex() -> b
    okio.ByteString toAsciiLowercase() -> c
    byte[] toByteArray() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
okio.DeflaterSink -> a.k:
    okio.BufferedSink sink -> a
    java.util.zip.Deflater deflater -> b
    boolean closed -> c
    void <init>(okio.Sink,java.util.zip.Deflater) -> <init>
    void <init>(okio.BufferedSink,java.util.zip.Deflater) -> <init>
    void write(okio.Buffer,long) -> write
    void deflate(boolean) -> a
    void flush() -> flush
    void finishDeflate() -> a
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.ForwardingSink -> a.l:
    okio.Sink delegate -> delegate
    void <init>(okio.Sink) -> <init>
    okio.Sink delegate() -> delegate
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
    java.lang.String toString() -> toString
okio.ForwardingSource -> a.m:
    okio.Source delegate -> delegate
    void <init>(okio.Source) -> <init>
    okio.Source delegate() -> delegate
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
    java.lang.String toString() -> toString
okio.ForwardingTimeout -> a.n:
    okio.Timeout delegate -> a
    void <init>(okio.Timeout) -> <init>
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    long timeoutNanos() -> timeoutNanos
    boolean hasDeadline() -> hasDeadline
    long deadlineNanoTime() -> deadlineNanoTime
    okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    okio.Timeout clearTimeout() -> clearTimeout
    okio.Timeout clearDeadline() -> clearDeadline
    void throwIfReached() -> throwIfReached
okio.GzipSink -> a.o:
    okio.BufferedSink sink -> a
    java.util.zip.Deflater deflater -> b
    okio.DeflaterSink deflaterSink -> c
    boolean closed -> d
    java.util.zip.CRC32 crc -> e
    void <init>(okio.Sink) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
    void updateCrc(okio.Buffer,long) -> a
okio.GzipSource -> a.p:
    int section -> a
    okio.BufferedSource source -> b
    java.util.zip.Inflater inflater -> c
    okio.InflaterSource inflaterSource -> d
    java.util.zip.CRC32 crc -> e
    void <init>(okio.Source) -> <init>
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
    void updateCrc(okio.Buffer,long,long) -> a
    void checkEqual(java.lang.String,int,int) -> a
okio.InflaterSource -> a.q:
    okio.BufferedSource source -> a
    java.util.zip.Inflater inflater -> b
    int bufferBytesHeldByInflater -> c
    boolean closed -> d
    void <init>(okio.Source,java.util.zip.Inflater) -> <init>
    void <init>(okio.BufferedSource,java.util.zip.Inflater) -> <init>
    long read(okio.Buffer,long) -> read
    boolean refill() -> a
    void releaseInflatedBytes() -> b
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Okio -> a.r:
    java.util.logging.Logger logger -> a
    void <init>() -> <init>
    okio.BufferedSource buffer(okio.Source) -> a
    okio.BufferedSink buffer(okio.Sink) -> a
    okio.Sink sink(java.io.OutputStream) -> a
    okio.Sink sink(java.io.OutputStream,okio.Timeout) -> a
    okio.Sink sink(java.net.Socket) -> a
    okio.Source source(java.io.InputStream,okio.Timeout) -> a
    okio.Source source(java.io.File) -> a
    okio.Sink sink(java.io.File) -> b
    okio.Sink appendingSink(java.io.File) -> c
    okio.Source source(java.net.Socket) -> b
    okio.AsyncTimeout timeout(java.net.Socket) -> c
    boolean isAndroidGetsocknameError(java.lang.AssertionError) -> a
    void <clinit>() -> <clinit>
okio.Okio$1 -> a.s:
    okio.Timeout val$timeout -> a
    java.io.OutputStream val$out -> b
    void <init>(okio.Timeout,java.io.OutputStream) -> <init>
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.Okio$2 -> a.t:
    okio.Timeout val$timeout -> a
    java.io.InputStream val$in -> b
    void <init>(okio.Timeout,java.io.InputStream) -> <init>
    long read(okio.Buffer,long) -> read
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.Okio$3 -> a.u:
    java.net.Socket val$socket -> a
    void <init>(java.net.Socket) -> <init>
    java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    void timedOut() -> timedOut
okio.RealBufferedSink -> a.v:
    okio.Buffer buffer -> a
    okio.Sink sink -> b
    boolean closed -> c
    void <init>(okio.Sink) -> <init>
    okio.Buffer buffer() -> a
    void write(okio.Buffer,long) -> write
    okio.BufferedSink write(okio.ByteString) -> b
    okio.BufferedSink writeUtf8(java.lang.String) -> b
    okio.BufferedSink write(byte[]) -> b
    okio.BufferedSink write(byte[],int,int) -> c
    long writeAll(okio.Source) -> a
    okio.BufferedSink writeByte(int) -> j
    okio.BufferedSink writeShort(int) -> i
    okio.BufferedSink writeInt(int) -> h
    okio.BufferedSink writeIntLe(int) -> g
    okio.BufferedSink writeDecimalLong(long) -> k
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> j
    okio.BufferedSink emitCompleteSegments() -> r
    okio.BufferedSink emit() -> b
    void flush() -> flush
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.RealBufferedSource -> a.w:
    okio.Buffer buffer -> a
    okio.Source source -> b
    boolean closed -> c
    void <init>(okio.Source) -> <init>
    okio.Buffer buffer() -> a
    long read(okio.Buffer,long) -> read
    boolean exhausted() -> c
    void require(long) -> a
    boolean request(long) -> b
    byte readByte() -> e
    okio.ByteString readByteString(long) -> d
    byte[] readByteArray() -> o
    byte[] readByteArray(long) -> f
    java.lang.String readUtf8LineStrict() -> n
    short readShort() -> f
    short readShortLe() -> h
    int readInt() -> g
    int readIntLe() -> i
    long readDecimalLong() -> j
    long readHexadecimalUnsignedLong() -> k
    void skip(long) -> g
    long indexOf(byte) -> a
    java.io.InputStream inputStream() -> d
    void close() -> close
    okio.Timeout timeout() -> timeout
    java.lang.String toString() -> toString
okio.RealBufferedSource$1 -> a.x:
    okio.RealBufferedSource this$0 -> a
    void <init>(okio.RealBufferedSource) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    java.lang.String toString() -> toString
okio.Segment -> a.y:
    byte[] data -> a
    int pos -> b
    int limit -> c
    boolean shared -> d
    boolean owner -> e
    okio.Segment next -> f
    okio.Segment prev -> g
    void <init>() -> <init>
    void <init>(okio.Segment) -> <init>
    void <init>(byte[],int,int) -> <init>
    okio.Segment pop() -> a
    okio.Segment push(okio.Segment) -> a
    void writeTo(okio.Segment,int) -> a
okio.SegmentPool -> a.z:
    okio.Segment next -> a
    long byteCount -> b
    void <init>() -> <init>
    okio.Segment take() -> a
    void recycle(okio.Segment) -> a
okio.Sink -> a.aa:
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Source -> a.ab:
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Timeout -> a.ac:
    okio.Timeout NONE -> NONE
    boolean hasDeadline -> hasDeadline
    long deadlineNanoTime -> deadlineNanoTime
    long timeoutNanos -> timeoutNanos
    void <init>() -> <init>
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    long timeoutNanos() -> timeoutNanos
    boolean hasDeadline() -> hasDeadline
    long deadlineNanoTime() -> deadlineNanoTime
    okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    okio.Timeout deadline(long,java.util.concurrent.TimeUnit) -> deadline
    okio.Timeout clearTimeout() -> clearTimeout
    okio.Timeout clearDeadline() -> clearDeadline
    void throwIfReached() -> throwIfReached
    void <clinit>() -> <clinit>
okio.Timeout$1 -> a.ad:
    void <init>() -> <init>
    okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    void throwIfReached() -> throwIfReached
okio.Util -> a.ae:
    java.nio.charset.Charset UTF_8 -> a
    void checkOffsetAndCount(long,long,long) -> a
    short reverseBytesShort(short) -> a
    int reverseBytesInt(int) -> a
    void sneakyRethrow(java.lang.Throwable) -> a
    boolean arrayRangeEquals$5c8eef72(byte[],byte[],int) -> a
    void <clinit>() -> <clinit>
org.apache.commons.codec.BinaryDecoder -> org.apache.commons.codec.BinaryDecoder:
    byte[] decode(byte[]) -> decode
org.apache.commons.codec.BinaryEncoder -> org.apache.commons.codec.BinaryEncoder:
    byte[] encode(byte[]) -> encode
org.apache.commons.codec.Decoder -> org.apache.commons.codec.Decoder:
    java.lang.Object decode(java.lang.Object) -> decode
org.apache.commons.codec.DecoderException -> org.apache.commons.codec.DecoderException:
    void <init>(java.lang.String) -> <init>
org.apache.commons.codec.Encoder -> org.apache.commons.codec.Encoder:
    java.lang.Object encode(java.lang.Object) -> encode
org.apache.commons.codec.EncoderException -> org.apache.commons.codec.EncoderException:
    void <init>(java.lang.String) -> <init>
org.apache.commons.codec.StringDecoder -> org.apache.commons.codec.StringDecoder:
    java.lang.String decode(java.lang.String) -> decode
org.apache.commons.codec.StringEncoder -> org.apache.commons.codec.StringEncoder:
    java.lang.String encode(java.lang.String) -> encode
org.apache.commons.codec.StringEncoderComparator -> org.apache.commons.codec.StringEncoderComparator:
    void <init>() -> <init>
    void <init>(org.apache.commons.codec.StringEncoder) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.commons.codec.binary.Base64 -> org.apache.commons.codec.binary.Base64:
    void <init>() -> <init>
    boolean isArrayByteBase64(byte[]) -> isArrayByteBase64
    byte[] encodeBase64(byte[]) -> encodeBase64
    byte[] encodeBase64Chunked(byte[]) -> encodeBase64Chunked
    java.lang.Object decode(java.lang.Object) -> decode
    byte[] decode(byte[]) -> decode
    byte[] encodeBase64(byte[],boolean) -> encodeBase64
    byte[] decodeBase64(byte[]) -> decodeBase64
    java.lang.Object encode(java.lang.Object) -> encode
    byte[] encode(byte[]) -> encode
org.apache.commons.codec.binary.BinaryCodec -> org.apache.commons.codec.binary.BinaryCodec:
    void <init>() -> <init>
    byte[] encode(byte[]) -> encode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    byte[] decode(byte[]) -> decode
    byte[] toByteArray(java.lang.String) -> toByteArray
    byte[] fromAscii(char[]) -> fromAscii
    byte[] fromAscii(byte[]) -> fromAscii
    byte[] toAsciiBytes(byte[]) -> toAsciiBytes
    char[] toAsciiChars(byte[]) -> toAsciiChars
    java.lang.String toAsciiString(byte[]) -> toAsciiString
org.apache.commons.codec.binary.Hex -> org.apache.commons.codec.binary.Hex:
    void <init>() -> <init>
    byte[] decodeHex(char[]) -> decodeHex
    int toDigit(char,int) -> toDigit
    char[] encodeHex(byte[]) -> encodeHex
    byte[] decode(byte[]) -> decode
    java.lang.Object decode(java.lang.Object) -> decode
    byte[] encode(byte[]) -> encode
    java.lang.Object encode(java.lang.Object) -> encode
org.apache.commons.codec.language.DoubleMetaphone -> org.apache.commons.codec.language.DoubleMetaphone:
    int maxCodeLen -> maxCodeLen
    void <init>() -> <init>
    java.lang.String doubleMetaphone(java.lang.String) -> doubleMetaphone
    java.lang.String doubleMetaphone(java.lang.String,boolean) -> doubleMetaphone
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    boolean isDoubleMetaphoneEqual(java.lang.String,java.lang.String) -> isDoubleMetaphoneEqual
    boolean isDoubleMetaphoneEqual(java.lang.String,java.lang.String,boolean) -> isDoubleMetaphoneEqual
    int getMaxCodeLen() -> getMaxCodeLen
    void setMaxCodeLen(int) -> setMaxCodeLen
    char charAt(java.lang.String,int) -> charAt
    boolean contains(java.lang.String,int,int,java.lang.String[]) -> contains
org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult -> org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult:
    org.apache.commons.codec.language.DoubleMetaphone this$0 -> this$0
    void <init>(org.apache.commons.codec.language.DoubleMetaphone,int) -> <init>
    void append(char) -> append
    void append(char,char) -> append
    void appendPrimary(char) -> appendPrimary
    void appendAlternate(char) -> appendAlternate
    void append(java.lang.String) -> append
    void append(java.lang.String,java.lang.String) -> append
    void appendPrimary(java.lang.String) -> appendPrimary
    void appendAlternate(java.lang.String) -> appendAlternate
    java.lang.String getPrimary() -> getPrimary
    java.lang.String getAlternate() -> getAlternate
    boolean isComplete() -> isComplete
org.apache.commons.codec.language.Metaphone -> org.apache.commons.codec.language.Metaphone:
    void <init>() -> <init>
    java.lang.String metaphone(java.lang.String) -> metaphone
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    boolean isMetaphoneEqual(java.lang.String,java.lang.String) -> isMetaphoneEqual
    int getMaxCodeLen() -> getMaxCodeLen
    void setMaxCodeLen(int) -> setMaxCodeLen
org.apache.commons.codec.language.RefinedSoundex -> org.apache.commons.codec.language.RefinedSoundex:
    org.apache.commons.codec.language.RefinedSoundex US_ENGLISH -> US_ENGLISH
    char[] US_ENGLISH_MAPPING -> US_ENGLISH_MAPPING
    void <init>() -> <init>
    void <init>(char[]) -> <init>
    int difference(java.lang.String,java.lang.String) -> difference
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String soundex(java.lang.String) -> soundex
    void <clinit>() -> <clinit>
org.apache.commons.codec.language.Soundex -> org.apache.commons.codec.language.Soundex:
    org.apache.commons.codec.language.Soundex US_ENGLISH -> US_ENGLISH
    char[] US_ENGLISH_MAPPING -> US_ENGLISH_MAPPING
    java.lang.String US_ENGLISH_MAPPING_STRING -> US_ENGLISH_MAPPING_STRING
    void <init>() -> <init>
    void <init>(char[]) -> <init>
    int difference(java.lang.String,java.lang.String) -> difference
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.String encode(java.lang.String) -> encode
    int getMaxLength() -> getMaxLength
    void setMaxLength(int) -> setMaxLength
    java.lang.String soundex(java.lang.String) -> soundex
    void <clinit>() -> <clinit>
org.apache.commons.codec.net.BCodec -> org.apache.commons.codec.net.BCodec:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getEncoding() -> getEncoding
    byte[] doEncoding(byte[]) -> doEncoding
    byte[] doDecoding(byte[]) -> doDecoding
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    java.lang.String getDefaultCharset() -> getDefaultCharset
org.apache.commons.codec.net.QCodec -> org.apache.commons.codec.net.QCodec:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getEncoding() -> getEncoding
    byte[] doEncoding(byte[]) -> doEncoding
    byte[] doDecoding(byte[]) -> doDecoding
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    java.lang.String getDefaultCharset() -> getDefaultCharset
    boolean isEncodeBlanks() -> isEncodeBlanks
    void setEncodeBlanks(boolean) -> setEncodeBlanks
org.apache.commons.codec.net.QuotedPrintableCodec -> org.apache.commons.codec.net.QuotedPrintableCodec:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    byte[] encodeQuotedPrintable(java.util.BitSet,byte[]) -> encodeQuotedPrintable
    byte[] decodeQuotedPrintable(byte[]) -> decodeQuotedPrintable
    byte[] encode(byte[]) -> encode
    byte[] decode(byte[]) -> decode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String,java.lang.String) -> decode
    java.lang.String decode(java.lang.String) -> decode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    java.lang.String getDefaultCharset() -> getDefaultCharset
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
org.apache.commons.codec.net.RFC1522Codec -> org.apache.commons.codec.net.RFC1522Codec:
    void <init>() -> <init>
    java.lang.String encodeText(java.lang.String,java.lang.String) -> encodeText
    java.lang.String decodeText(java.lang.String) -> decodeText
    java.lang.String getEncoding() -> getEncoding
    byte[] doEncoding(byte[]) -> doEncoding
    byte[] doDecoding(byte[]) -> doDecoding
org.apache.commons.codec.net.URLCodec -> org.apache.commons.codec.net.URLCodec:
    byte ESCAPE_CHAR -> ESCAPE_CHAR
    java.util.BitSet WWW_FORM_URL -> WWW_FORM_URL
    java.lang.String charset -> charset
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    byte[] encodeUrl(java.util.BitSet,byte[]) -> encodeUrl
    byte[] decodeUrl(byte[]) -> decodeUrl
    byte[] encode(byte[]) -> encode
    byte[] decode(byte[]) -> decode
    java.lang.String encode(java.lang.String,java.lang.String) -> encode
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String,java.lang.String) -> decode
    java.lang.String decode(java.lang.String) -> decode
    java.lang.Object encode(java.lang.Object) -> encode
    java.lang.Object decode(java.lang.Object) -> decode
    java.lang.String getEncoding() -> getEncoding
    java.lang.String getDefaultCharset() -> getDefaultCharset
    void <clinit>() -> <clinit>
org.apache.commons.logging.Log -> org.apache.commons.logging.Log:
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
org.apache.commons.logging.LogConfigurationException -> org.apache.commons.logging.LogConfigurationException:
    java.lang.Throwable cause -> cause
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    java.lang.Throwable getCause() -> getCause
org.apache.commons.logging.LogFactory -> org.apache.commons.logging.LogFactory:
    java.lang.String DIAGNOSTICS_DEST_PROPERTY -> DIAGNOSTICS_DEST_PROPERTY
    java.lang.String FACTORY_DEFAULT -> FACTORY_DEFAULT
    java.lang.String FACTORY_PROPERTIES -> FACTORY_PROPERTIES
    java.lang.String FACTORY_PROPERTY -> FACTORY_PROPERTY
    java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY -> HASHTABLE_IMPLEMENTATION_PROPERTY
    java.lang.String PRIORITY_KEY -> PRIORITY_KEY
    java.lang.String SERVICE_ID -> SERVICE_ID
    java.lang.String TCCL_KEY -> TCCL_KEY
    java.util.Hashtable factories -> factories
    org.apache.commons.logging.LogFactory nullClassLoaderFactory -> nullClassLoaderFactory
    void <init>() -> <init>
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.String[] getAttributeNames() -> getAttributeNames
    org.apache.commons.logging.Log getInstance(java.lang.Class) -> getInstance
    org.apache.commons.logging.Log getInstance(java.lang.String) -> getInstance
    void release() -> release
    void removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    org.apache.commons.logging.LogFactory getFactory() -> getFactory
    org.apache.commons.logging.Log getLog(java.lang.Class) -> getLog
    org.apache.commons.logging.Log getLog(java.lang.String) -> getLog
    void release(java.lang.ClassLoader) -> release
    void releaseAll() -> releaseAll
    java.lang.ClassLoader getClassLoader(java.lang.Class) -> getClassLoader
    java.lang.ClassLoader getContextClassLoader() -> getContextClassLoader
    java.lang.ClassLoader directGetContextClassLoader() -> directGetContextClassLoader
    org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader) -> newFactory
    org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader) -> newFactory
    java.lang.Object createFactory(java.lang.String,java.lang.ClassLoader) -> createFactory
    boolean isDiagnosticsEnabled() -> isDiagnosticsEnabled
    void logRawDiagnostic(java.lang.String) -> logRawDiagnostic
    java.lang.String objectId(java.lang.Object) -> objectId
org.apache.commons.logging.LogSource -> org.apache.commons.logging.LogSource:
    boolean jdk14IsAvailable -> jdk14IsAvailable
    boolean log4jIsAvailable -> log4jIsAvailable
    java.lang.reflect.Constructor logImplctor -> logImplctor
    java.util.Hashtable logs -> logs
    void <init>() -> <init>
    void setLogImplementation(java.lang.String) -> setLogImplementation
    void setLogImplementation(java.lang.Class) -> setLogImplementation
    org.apache.commons.logging.Log getInstance(java.lang.String) -> getInstance
    org.apache.commons.logging.Log getInstance(java.lang.Class) -> getInstance
    org.apache.commons.logging.Log makeNewLogInstance(java.lang.String) -> makeNewLogInstance
    java.lang.String[] getLogNames() -> getLogNames
org.apache.commons.logging.impl.Jdk14Logger -> org.apache.commons.logging.impl.Jdk14Logger:
    java.util.logging.Level dummyLevel -> dummyLevel
    java.util.logging.Logger logger -> logger
    java.lang.String name -> name
    void <init>(java.lang.String) -> <init>
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    java.util.logging.Logger getLogger() -> getLogger
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void <clinit>() -> <clinit>
org.apache.commons.logging.impl.LogFactoryImpl -> org.apache.commons.logging.impl.LogFactoryImpl:
    java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY -> ALLOW_FLAWED_CONTEXT_PROPERTY
    java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY -> ALLOW_FLAWED_DISCOVERY_PROPERTY
    java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY -> ALLOW_FLAWED_HIERARCHY_PROPERTY
    java.lang.String LOG_PROPERTY -> LOG_PROPERTY
    java.lang.String LOG_PROPERTY_OLD -> LOG_PROPERTY_OLD
    java.util.Hashtable attributes -> attributes
    java.util.Hashtable instances -> instances
    java.lang.reflect.Constructor logConstructor -> logConstructor
    java.lang.Class[] logConstructorSignature -> logConstructorSignature
    java.lang.reflect.Method logMethod -> logMethod
    java.lang.Class[] logMethodSignature -> logMethodSignature
    void <init>() -> <init>
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.String[] getAttributeNames() -> getAttributeNames
    org.apache.commons.logging.Log getInstance(java.lang.Class) -> getInstance
    org.apache.commons.logging.Log getInstance(java.lang.String) -> getInstance
    void release() -> release
    void removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.ClassLoader getContextClassLoader() -> getContextClassLoader
    boolean isDiagnosticsEnabled() -> isDiagnosticsEnabled
    java.lang.ClassLoader getClassLoader(java.lang.Class) -> getClassLoader
    void logDiagnostic(java.lang.String) -> logDiagnostic
    java.lang.String getLogClassName() -> getLogClassName
    java.lang.reflect.Constructor getLogConstructor() -> getLogConstructor
    boolean isJdk13LumberjackAvailable() -> isJdk13LumberjackAvailable
    boolean isJdk14Available() -> isJdk14Available
    boolean isLog4JAvailable() -> isLog4JAvailable
    org.apache.commons.logging.Log newInstance(java.lang.String) -> newInstance
org.apache.commons.logging.impl.NoOpLog -> org.apache.commons.logging.impl.NoOpLog:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
org.apache.commons.logging.impl.SimpleLog -> org.apache.commons.logging.impl.SimpleLog:
    java.lang.String DEFAULT_DATE_TIME_FORMAT -> DEFAULT_DATE_TIME_FORMAT
    int LOG_LEVEL_ALL -> LOG_LEVEL_ALL
    int LOG_LEVEL_DEBUG -> LOG_LEVEL_DEBUG
    int LOG_LEVEL_ERROR -> LOG_LEVEL_ERROR
    int LOG_LEVEL_FATAL -> LOG_LEVEL_FATAL
    int LOG_LEVEL_INFO -> LOG_LEVEL_INFO
    int LOG_LEVEL_OFF -> LOG_LEVEL_OFF
    int LOG_LEVEL_TRACE -> LOG_LEVEL_TRACE
    int LOG_LEVEL_WARN -> LOG_LEVEL_WARN
    int currentLogLevel -> currentLogLevel
    java.text.DateFormat dateFormatter -> dateFormatter
    java.lang.String dateTimeFormat -> dateTimeFormat
    java.lang.String logName -> logName
    boolean showDateTime -> showDateTime
    boolean showLogName -> showLogName
    boolean showShortName -> showShortName
    java.util.Properties simpleLogProps -> simpleLogProps
    java.lang.String systemPrefix -> systemPrefix
    void <init>(java.lang.String) -> <init>
    void setLevel(int) -> setLevel
    int getLevel() -> getLevel
    void log(int,java.lang.Object,java.lang.Throwable) -> log
    void write(java.lang.StringBuffer) -> write
    boolean isLevelEnabled(int) -> isLevelEnabled
    void debug(java.lang.Object) -> debug
    void debug(java.lang.Object,java.lang.Throwable) -> debug
    void trace(java.lang.Object) -> trace
    void trace(java.lang.Object,java.lang.Throwable) -> trace
    void info(java.lang.Object) -> info
    void info(java.lang.Object,java.lang.Throwable) -> info
    void warn(java.lang.Object) -> warn
    void warn(java.lang.Object,java.lang.Throwable) -> warn
    void error(java.lang.Object) -> error
    void error(java.lang.Object,java.lang.Throwable) -> error
    void fatal(java.lang.Object) -> fatal
    void fatal(java.lang.Object,java.lang.Throwable) -> fatal
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    boolean isFatalEnabled() -> isFatalEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void <clinit>() -> <clinit>
org.apache.commons.logging.impl.WeakHashtable -> org.apache.commons.logging.impl.WeakHashtable:
    void <init>() -> <init>
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Enumeration elements() -> elements
    java.util.Set entrySet() -> entrySet
    java.lang.Object get(java.lang.Object) -> get
    java.util.Enumeration keys() -> keys
    java.util.Set keySet() -> keySet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.util.Collection values() -> values
    java.lang.Object remove(java.lang.Object) -> remove
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.String toString() -> toString
    void rehash() -> rehash
org.apache.http.ConnectionClosedException -> org.apache.http.ConnectionClosedException:
    void <init>(java.lang.String) -> <init>
org.apache.http.ConnectionReuseStrategy -> org.apache.http.ConnectionReuseStrategy:
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
org.apache.http.FormattedHeader -> org.apache.http.FormattedHeader:
    org.apache.http.util.CharArrayBuffer getBuffer() -> getBuffer
    int getValuePos() -> getValuePos
org.apache.http.Header -> org.apache.http.Header:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.HeaderElement[] getElements() -> getElements
org.apache.http.HeaderElement -> org.apache.http.HeaderElement:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.NameValuePair[] getParameters() -> getParameters
    org.apache.http.NameValuePair getParameterByName(java.lang.String) -> getParameterByName
    int getParameterCount() -> getParameterCount
    org.apache.http.NameValuePair getParameter(int) -> getParameter
org.apache.http.HeaderElementIterator -> org.apache.http.HeaderElementIterator:
    boolean hasNext() -> hasNext
    org.apache.http.HeaderElement nextElement() -> nextElement
org.apache.http.HeaderIterator -> org.apache.http.HeaderIterator:
    boolean hasNext() -> hasNext
    org.apache.http.Header nextHeader() -> nextHeader
org.apache.http.HttpClientConnection -> org.apache.http.HttpClientConnection:
    boolean isResponseAvailable(int) -> isResponseAvailable
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    void flush() -> flush
org.apache.http.HttpConnection -> org.apache.http.HttpConnection:
    void close() -> close
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
org.apache.http.HttpConnectionMetrics -> org.apache.http.HttpConnectionMetrics:
    long getRequestCount() -> getRequestCount
    long getResponseCount() -> getResponseCount
    long getSentBytesCount() -> getSentBytesCount
    long getReceivedBytesCount() -> getReceivedBytesCount
    java.lang.Object getMetric(java.lang.String) -> getMetric
    void reset() -> reset
org.apache.http.HttpEntity -> org.apache.http.HttpEntity:
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.HttpEntityEnclosingRequest -> org.apache.http.HttpEntityEnclosingRequest:
    boolean expectContinue() -> expectContinue
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    org.apache.http.HttpEntity getEntity() -> getEntity
org.apache.http.HttpException -> org.apache.http.HttpException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.HttpHost -> org.apache.http.HttpHost:
    java.lang.String DEFAULT_SCHEME_NAME -> DEFAULT_SCHEME_NAME
    java.lang.String hostname -> hostname
    java.lang.String lcHostname -> lcHostname
    int port -> port
    java.lang.String schemeName -> schemeName
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(org.apache.http.HttpHost) -> <init>
    java.lang.String getHostName() -> getHostName
    int getPort() -> getPort
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String toURI() -> toURI
    java.lang.String toHostString() -> toHostString
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
org.apache.http.HttpInetConnection -> org.apache.http.HttpInetConnection:
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
org.apache.http.HttpMessage -> org.apache.http.HttpMessage:
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    void addHeader(org.apache.http.Header) -> addHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void setHeader(org.apache.http.Header) -> setHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    void removeHeader(org.apache.http.Header) -> removeHeader
    void removeHeaders(java.lang.String) -> removeHeaders
    org.apache.http.HeaderIterator headerIterator() -> headerIterator
    org.apache.http.HeaderIterator headerIterator(java.lang.String) -> headerIterator
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
org.apache.http.HttpRequest -> org.apache.http.HttpRequest:
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
org.apache.http.HttpRequestFactory -> org.apache.http.HttpRequestFactory:
    org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) -> newHttpRequest
    org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String) -> newHttpRequest
org.apache.http.HttpRequestInterceptor -> org.apache.http.HttpRequestInterceptor:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.HttpResponse -> org.apache.http.HttpResponse:
    org.apache.http.StatusLine getStatusLine() -> getStatusLine
    void setStatusLine(org.apache.http.StatusLine) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> setStatusLine
    void setStatusCode(int) -> setStatusCode
    void setReasonPhrase(java.lang.String) -> setReasonPhrase
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    java.util.Locale getLocale() -> getLocale
    void setLocale(java.util.Locale) -> setLocale
org.apache.http.HttpResponseFactory -> org.apache.http.HttpResponseFactory:
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext) -> newHttpResponse
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext) -> newHttpResponse
org.apache.http.HttpResponseInterceptor -> org.apache.http.HttpResponseInterceptor:
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.HttpServerConnection -> org.apache.http.HttpServerConnection:
    org.apache.http.HttpRequest receiveRequestHeader() -> receiveRequestHeader
    void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> receiveRequestEntity
    void sendResponseHeader(org.apache.http.HttpResponse) -> sendResponseHeader
    void sendResponseEntity(org.apache.http.HttpResponse) -> sendResponseEntity
    void flush() -> flush
org.apache.http.HttpStatus -> org.apache.http.HttpStatus:
    int SC_ACCEPTED -> SC_ACCEPTED
    int SC_BAD_GATEWAY -> SC_BAD_GATEWAY
    int SC_BAD_REQUEST -> SC_BAD_REQUEST
    int SC_CONFLICT -> SC_CONFLICT
    int SC_CONTINUE -> SC_CONTINUE
    int SC_CREATED -> SC_CREATED
    int SC_EXPECTATION_FAILED -> SC_EXPECTATION_FAILED
    int SC_FAILED_DEPENDENCY -> SC_FAILED_DEPENDENCY
    int SC_FORBIDDEN -> SC_FORBIDDEN
    int SC_GATEWAY_TIMEOUT -> SC_GATEWAY_TIMEOUT
    int SC_GONE -> SC_GONE
    int SC_HTTP_VERSION_NOT_SUPPORTED -> SC_HTTP_VERSION_NOT_SUPPORTED
    int SC_INSUFFICIENT_SPACE_ON_RESOURCE -> SC_INSUFFICIENT_SPACE_ON_RESOURCE
    int SC_INSUFFICIENT_STORAGE -> SC_INSUFFICIENT_STORAGE
    int SC_INTERNAL_SERVER_ERROR -> SC_INTERNAL_SERVER_ERROR
    int SC_LENGTH_REQUIRED -> SC_LENGTH_REQUIRED
    int SC_LOCKED -> SC_LOCKED
    int SC_METHOD_FAILURE -> SC_METHOD_FAILURE
    int SC_METHOD_NOT_ALLOWED -> SC_METHOD_NOT_ALLOWED
    int SC_MOVED_PERMANENTLY -> SC_MOVED_PERMANENTLY
    int SC_MOVED_TEMPORARILY -> SC_MOVED_TEMPORARILY
    int SC_MULTIPLE_CHOICES -> SC_MULTIPLE_CHOICES
    int SC_MULTI_STATUS -> SC_MULTI_STATUS
    int SC_NON_AUTHORITATIVE_INFORMATION -> SC_NON_AUTHORITATIVE_INFORMATION
    int SC_NOT_ACCEPTABLE -> SC_NOT_ACCEPTABLE
    int SC_NOT_FOUND -> SC_NOT_FOUND
    int SC_NOT_IMPLEMENTED -> SC_NOT_IMPLEMENTED
    int SC_NOT_MODIFIED -> SC_NOT_MODIFIED
    int SC_NO_CONTENT -> SC_NO_CONTENT
    int SC_OK -> SC_OK
    int SC_PARTIAL_CONTENT -> SC_PARTIAL_CONTENT
    int SC_PAYMENT_REQUIRED -> SC_PAYMENT_REQUIRED
    int SC_PRECONDITION_FAILED -> SC_PRECONDITION_FAILED
    int SC_PROCESSING -> SC_PROCESSING
    int SC_PROXY_AUTHENTICATION_REQUIRED -> SC_PROXY_AUTHENTICATION_REQUIRED
    int SC_REQUESTED_RANGE_NOT_SATISFIABLE -> SC_REQUESTED_RANGE_NOT_SATISFIABLE
    int SC_REQUEST_TIMEOUT -> SC_REQUEST_TIMEOUT
    int SC_REQUEST_TOO_LONG -> SC_REQUEST_TOO_LONG
    int SC_REQUEST_URI_TOO_LONG -> SC_REQUEST_URI_TOO_LONG
    int SC_RESET_CONTENT -> SC_RESET_CONTENT
    int SC_SEE_OTHER -> SC_SEE_OTHER
    int SC_SERVICE_UNAVAILABLE -> SC_SERVICE_UNAVAILABLE
    int SC_SWITCHING_PROTOCOLS -> SC_SWITCHING_PROTOCOLS
    int SC_TEMPORARY_REDIRECT -> SC_TEMPORARY_REDIRECT
    int SC_UNAUTHORIZED -> SC_UNAUTHORIZED
    int SC_UNPROCESSABLE_ENTITY -> SC_UNPROCESSABLE_ENTITY
    int SC_UNSUPPORTED_MEDIA_TYPE -> SC_UNSUPPORTED_MEDIA_TYPE
    int SC_USE_PROXY -> SC_USE_PROXY
org.apache.http.HttpVersion -> org.apache.http.HttpVersion:
    java.lang.String HTTP -> HTTP
    org.apache.http.HttpVersion HTTP_0_9 -> HTTP_0_9
    org.apache.http.HttpVersion HTTP_1_0 -> HTTP_1_0
    org.apache.http.HttpVersion HTTP_1_1 -> HTTP_1_1
    void <init>(int,int) -> <init>
    org.apache.http.ProtocolVersion forVersion(int,int) -> forVersion
    void <clinit>() -> <clinit>
org.apache.http.MalformedChunkCodingException -> org.apache.http.MalformedChunkCodingException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.MethodNotSupportedException -> org.apache.http.MethodNotSupportedException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.NameValuePair -> org.apache.http.NameValuePair:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
org.apache.http.NoHttpResponseException -> org.apache.http.NoHttpResponseException:
    void <init>(java.lang.String) -> <init>
org.apache.http.ParseException -> org.apache.http.ParseException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.ProtocolException -> org.apache.http.ProtocolException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.ProtocolVersion -> org.apache.http.ProtocolVersion:
    int major -> major
    int minor -> minor
    java.lang.String protocol -> protocol
    void <init>(java.lang.String,int,int) -> <init>
    java.lang.String getProtocol() -> getProtocol
    int getMajor() -> getMajor
    int getMinor() -> getMinor
    org.apache.http.ProtocolVersion forVersion(int,int) -> forVersion
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isComparable(org.apache.http.ProtocolVersion) -> isComparable
    int compareToVersion(org.apache.http.ProtocolVersion) -> compareToVersion
    boolean greaterEquals(org.apache.http.ProtocolVersion) -> greaterEquals
    boolean lessEquals(org.apache.http.ProtocolVersion) -> lessEquals
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.ReasonPhraseCatalog -> org.apache.http.ReasonPhraseCatalog:
    java.lang.String getReason(int,java.util.Locale) -> getReason
org.apache.http.RequestLine -> org.apache.http.RequestLine:
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.lang.String getUri() -> getUri
org.apache.http.StatusLine -> org.apache.http.StatusLine:
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    int getStatusCode() -> getStatusCode
    java.lang.String getReasonPhrase() -> getReasonPhrase
org.apache.http.TokenIterator -> org.apache.http.TokenIterator:
    boolean hasNext() -> hasNext
    java.lang.String nextToken() -> nextToken
org.apache.http.UnsupportedHttpVersionException -> org.apache.http.UnsupportedHttpVersionException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.auth.AUTH -> org.apache.http.auth.AUTH:
    java.lang.String PROXY_AUTH -> PROXY_AUTH
    java.lang.String PROXY_AUTH_RESP -> PROXY_AUTH_RESP
    java.lang.String WWW_AUTH -> WWW_AUTH
    java.lang.String WWW_AUTH_RESP -> WWW_AUTH_RESP
    void <init>() -> <init>
org.apache.http.auth.AuthScheme -> org.apache.http.auth.AuthScheme:
    void processChallenge(org.apache.http.Header) -> processChallenge
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
    boolean isComplete() -> isComplete
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
org.apache.http.auth.AuthSchemeFactory -> org.apache.http.auth.AuthSchemeFactory:
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.auth.AuthSchemeRegistry -> org.apache.http.auth.AuthSchemeRegistry:
    void <init>() -> <init>
    void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory) -> register
    void unregister(java.lang.String) -> unregister
    org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams) -> getAuthScheme
    java.util.List getSchemeNames() -> getSchemeNames
    void setItems(java.util.Map) -> setItems
org.apache.http.auth.AuthScope -> org.apache.http.auth.AuthScope:
    org.apache.http.auth.AuthScope ANY -> ANY
    java.lang.String ANY_HOST -> ANY_HOST
    int ANY_PORT -> ANY_PORT
    java.lang.String ANY_REALM -> ANY_REALM
    java.lang.String ANY_SCHEME -> ANY_SCHEME
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(org.apache.http.auth.AuthScope) -> <init>
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String getRealm() -> getRealm
    java.lang.String getScheme() -> getScheme
    int match(org.apache.http.auth.AuthScope) -> match
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
org.apache.http.auth.AuthState -> org.apache.http.auth.AuthState:
    void <init>() -> <init>
    void invalidate() -> invalidate
    boolean isValid() -> isValid
    void setAuthScheme(org.apache.http.auth.AuthScheme) -> setAuthScheme
    org.apache.http.auth.AuthScheme getAuthScheme() -> getAuthScheme
    org.apache.http.auth.Credentials getCredentials() -> getCredentials
    void setCredentials(org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.AuthScope getAuthScope() -> getAuthScope
    void setAuthScope(org.apache.http.auth.AuthScope) -> setAuthScope
    java.lang.String toString() -> toString
org.apache.http.auth.AuthenticationException -> org.apache.http.auth.AuthenticationException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.auth.BasicUserPrincipal -> org.apache.http.auth.BasicUserPrincipal:
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.Credentials -> org.apache.http.auth.Credentials:
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getPassword() -> getPassword
org.apache.http.auth.InvalidCredentialsException -> org.apache.http.auth.InvalidCredentialsException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.auth.MalformedChallengeException -> org.apache.http.auth.MalformedChallengeException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.auth.NTCredentials -> org.apache.http.auth.NTCredentials:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
    java.lang.String getDomain() -> getDomain
    java.lang.String getWorkstation() -> getWorkstation
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.NTUserPrincipal -> org.apache.http.auth.NTUserPrincipal:
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getDomain() -> getDomain
    java.lang.String getUsername() -> getUsername
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.UsernamePasswordCredentials -> org.apache.http.auth.UsernamePasswordCredentials:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.params.AuthPNames -> org.apache.http.auth.params.AuthPNames:
    java.lang.String CREDENTIAL_CHARSET -> CREDENTIAL_CHARSET
org.apache.http.auth.params.AuthParamBean -> org.apache.http.auth.params.AuthParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setCredentialCharset(java.lang.String) -> setCredentialCharset
org.apache.http.auth.params.AuthParams -> org.apache.http.auth.params.AuthParams:
    void <init>() -> <init>
    java.lang.String getCredentialCharset(org.apache.http.params.HttpParams) -> getCredentialCharset
    void setCredentialCharset(org.apache.http.params.HttpParams,java.lang.String) -> setCredentialCharset
org.apache.http.client.AuthenticationHandler -> org.apache.http.client.AuthenticationHandler:
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> selectScheme
org.apache.http.client.CircularRedirectException -> org.apache.http.client.CircularRedirectException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.client.ClientProtocolException -> org.apache.http.client.ClientProtocolException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.client.CookieStore -> org.apache.http.client.CookieStore:
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    java.util.List getCookies() -> getCookies
    boolean clearExpired(java.util.Date) -> clearExpired
    void clear() -> clear
org.apache.http.client.CredentialsProvider -> org.apache.http.client.CredentialsProvider:
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
    void clear() -> clear
org.apache.http.client.HttpClient -> org.apache.http.client.HttpClient:
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.client.HttpRequestRetryHandler -> org.apache.http.client.HttpRequestRetryHandler:
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
org.apache.http.client.HttpResponseException -> org.apache.http.client.HttpResponseException:
    void <init>(int,java.lang.String) -> <init>
    int getStatusCode() -> getStatusCode
org.apache.http.client.NonRepeatableRequestException -> org.apache.http.client.NonRepeatableRequestException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.client.RedirectException -> org.apache.http.client.RedirectException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.client.RedirectHandler -> org.apache.http.client.RedirectHandler:
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
org.apache.http.client.RequestDirector -> org.apache.http.client.RequestDirector:
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.client.ResponseHandler -> org.apache.http.client.ResponseHandler:
    java.lang.Object handleResponse(org.apache.http.HttpResponse) -> handleResponse
org.apache.http.client.UserTokenHandler -> org.apache.http.client.UserTokenHandler:
    java.lang.Object getUserToken(org.apache.http.protocol.HttpContext) -> getUserToken
org.apache.http.client.entity.UrlEncodedFormEntity -> org.apache.http.client.entity.UrlEncodedFormEntity:
    void <init>(java.util.List,java.lang.String) -> <init>
    void <init>(java.util.List) -> <init>
org.apache.http.client.methods.AbortableHttpRequest -> org.apache.http.client.methods.AbortableHttpRequest:
    void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
    void abort() -> abort
org.apache.http.client.methods.HttpDelete -> org.apache.http.client.methods.HttpDelete:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpEntityEnclosingRequestBase -> org.apache.http.client.methods.HttpEntityEnclosingRequestBase:
    void <init>() -> <init>
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    java.lang.Object clone() -> clone
org.apache.http.client.methods.HttpGet -> org.apache.http.client.methods.HttpGet:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpHead -> org.apache.http.client.methods.HttpHead:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpOptions -> org.apache.http.client.methods.HttpOptions:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
    java.util.Set getAllowedMethods(org.apache.http.HttpResponse) -> getAllowedMethods
org.apache.http.client.methods.HttpPost -> org.apache.http.client.methods.HttpPost:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpPut -> org.apache.http.client.methods.HttpPut:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpRequestBase -> org.apache.http.client.methods.HttpRequestBase:
    void <init>() -> <init>
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.net.URI getURI() -> getURI
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    void setURI(java.net.URI) -> setURI
    void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
    void abort() -> abort
    boolean isAborted() -> isAborted
    java.lang.Object clone() -> clone
org.apache.http.client.methods.HttpTrace -> org.apache.http.client.methods.HttpTrace:
    java.lang.String METHOD_NAME -> METHOD_NAME
    void <init>() -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpUriRequest -> org.apache.http.client.methods.HttpUriRequest:
    java.lang.String getMethod() -> getMethod
    java.net.URI getURI() -> getURI
    void abort() -> abort
    boolean isAborted() -> isAborted
org.apache.http.client.params.AllClientPNames -> org.apache.http.client.params.AllClientPNames:
org.apache.http.client.params.AuthPolicy -> org.apache.http.client.params.AuthPolicy:
    java.lang.String BASIC -> BASIC
    java.lang.String DIGEST -> DIGEST
    java.lang.String NTLM -> NTLM
    void <init>() -> <init>
org.apache.http.client.params.ClientPNames -> org.apache.http.client.params.ClientPNames:
    java.lang.String ALLOW_CIRCULAR_REDIRECTS -> ALLOW_CIRCULAR_REDIRECTS
    java.lang.String CONNECTION_MANAGER_FACTORY -> CONNECTION_MANAGER_FACTORY
    java.lang.String CONNECTION_MANAGER_FACTORY_CLASS_NAME -> CONNECTION_MANAGER_FACTORY_CLASS_NAME
    java.lang.String COOKIE_POLICY -> COOKIE_POLICY
    java.lang.String DEFAULT_HEADERS -> DEFAULT_HEADERS
    java.lang.String DEFAULT_HOST -> DEFAULT_HOST
    java.lang.String HANDLE_AUTHENTICATION -> HANDLE_AUTHENTICATION
    java.lang.String HANDLE_REDIRECTS -> HANDLE_REDIRECTS
    java.lang.String MAX_REDIRECTS -> MAX_REDIRECTS
    java.lang.String REJECT_RELATIVE_REDIRECT -> REJECT_RELATIVE_REDIRECT
    java.lang.String VIRTUAL_HOST -> VIRTUAL_HOST
org.apache.http.client.params.ClientParamBean -> org.apache.http.client.params.ClientParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setConnectionManagerFactoryClassName(java.lang.String) -> setConnectionManagerFactoryClassName
    void setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory) -> setConnectionManagerFactory
    void setHandleRedirects(boolean) -> setHandleRedirects
    void setRejectRelativeRedirect(boolean) -> setRejectRelativeRedirect
    void setMaxRedirects(int) -> setMaxRedirects
    void setAllowCircularRedirects(boolean) -> setAllowCircularRedirects
    void setHandleAuthentication(boolean) -> setHandleAuthentication
    void setCookiePolicy(java.lang.String) -> setCookiePolicy
    void setVirtualHost(org.apache.http.HttpHost) -> setVirtualHost
    void setDefaultHeaders(java.util.Collection) -> setDefaultHeaders
    void setDefaultHost(org.apache.http.HttpHost) -> setDefaultHost
org.apache.http.client.params.CookiePolicy -> org.apache.http.client.params.CookiePolicy:
    java.lang.String BEST_MATCH -> BEST_MATCH
    java.lang.String BROWSER_COMPATIBILITY -> BROWSER_COMPATIBILITY
    java.lang.String NETSCAPE -> NETSCAPE
    java.lang.String RFC_2109 -> RFC_2109
    java.lang.String RFC_2965 -> RFC_2965
    void <init>() -> <init>
org.apache.http.client.params.HttpClientParams -> org.apache.http.client.params.HttpClientParams:
    void <init>() -> <init>
    boolean isRedirecting(org.apache.http.params.HttpParams) -> isRedirecting
    void setRedirecting(org.apache.http.params.HttpParams,boolean) -> setRedirecting
    boolean isAuthenticating(org.apache.http.params.HttpParams) -> isAuthenticating
    void setAuthenticating(org.apache.http.params.HttpParams,boolean) -> setAuthenticating
    java.lang.String getCookiePolicy(org.apache.http.params.HttpParams) -> getCookiePolicy
    void setCookiePolicy(org.apache.http.params.HttpParams,java.lang.String) -> setCookiePolicy
org.apache.http.client.protocol.ClientContext -> org.apache.http.client.protocol.ClientContext:
    java.lang.String AUTHSCHEME_REGISTRY -> AUTHSCHEME_REGISTRY
    java.lang.String AUTH_SCHEME_PREF -> AUTH_SCHEME_PREF
    java.lang.String COOKIESPEC_REGISTRY -> COOKIESPEC_REGISTRY
    java.lang.String COOKIE_ORIGIN -> COOKIE_ORIGIN
    java.lang.String COOKIE_SPEC -> COOKIE_SPEC
    java.lang.String COOKIE_STORE -> COOKIE_STORE
    java.lang.String CREDS_PROVIDER -> CREDS_PROVIDER
    java.lang.String PROXY_AUTH_STATE -> PROXY_AUTH_STATE
    java.lang.String TARGET_AUTH_STATE -> TARGET_AUTH_STATE
    java.lang.String USER_TOKEN -> USER_TOKEN
org.apache.http.client.protocol.ClientContextConfigurer -> org.apache.http.client.protocol.ClientContextConfigurer:
    void <init>(org.apache.http.protocol.HttpContext) -> <init>
    void setCookieSpecRegistry(org.apache.http.cookie.CookieSpecRegistry) -> setCookieSpecRegistry
    void setAuthSchemeRegistry(org.apache.http.auth.AuthSchemeRegistry) -> setAuthSchemeRegistry
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    void setCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setCredentialsProvider
    void setAuthSchemePref(java.util.List) -> setAuthSchemePref
org.apache.http.client.protocol.RequestAddCookies -> org.apache.http.client.protocol.RequestAddCookies:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestDefaultHeaders -> org.apache.http.client.protocol.RequestDefaultHeaders:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestProxyAuthentication -> org.apache.http.client.protocol.RequestProxyAuthentication:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestTargetAuthentication -> org.apache.http.client.protocol.RequestTargetAuthentication:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.ResponseProcessCookies -> org.apache.http.client.protocol.ResponseProcessCookies:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.utils.CloneUtils -> org.apache.http.client.utils.CloneUtils:
    void <init>() -> <init>
    java.lang.Object clone(java.lang.Object) -> clone
org.apache.http.client.utils.URIUtils -> org.apache.http.client.utils.URIUtils:
    void <init>() -> <init>
    java.net.URI createURI(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> createURI
    java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean) -> rewriteURI
    java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost) -> rewriteURI
    java.net.URI resolve(java.net.URI,java.lang.String) -> resolve
    java.net.URI resolve(java.net.URI,java.net.URI) -> resolve
org.apache.http.client.utils.URLEncodedUtils -> org.apache.http.client.utils.URLEncodedUtils:
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    void <init>() -> <init>
    java.util.List parse(java.net.URI,java.lang.String) -> parse
    java.util.List parse(org.apache.http.HttpEntity) -> parse
    boolean isEncoded(org.apache.http.HttpEntity) -> isEncoded
    void parse(java.util.List,java.util.Scanner,java.lang.String) -> parse
    java.lang.String format(java.util.List,java.lang.String) -> format
org.apache.http.conn.BasicEofSensorWatcher -> org.apache.http.conn.BasicEofSensorWatcher:
    boolean attemptReuse -> attemptReuse
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    void <init>(org.apache.http.conn.ManagedClientConnection,boolean) -> <init>
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
org.apache.http.conn.BasicManagedEntity -> org.apache.http.conn.BasicManagedEntity:
    boolean attemptReuse -> attemptReuse
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    void <init>(org.apache.http.HttpEntity,org.apache.http.conn.ManagedClientConnection,boolean) -> <init>
    boolean isRepeatable() -> isRepeatable
    java.io.InputStream getContent() -> getContent
    void consumeContent() -> consumeContent
    void writeTo(java.io.OutputStream) -> writeTo
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
    void releaseManagedConnection() -> releaseManagedConnection
org.apache.http.conn.ClientConnectionManager -> org.apache.http.conn.ClientConnectionManager:
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void shutdown() -> shutdown
org.apache.http.conn.ClientConnectionManagerFactory -> org.apache.http.conn.ClientConnectionManagerFactory:
    org.apache.http.conn.ClientConnectionManager newInstance(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry) -> newInstance
org.apache.http.conn.ClientConnectionOperator -> org.apache.http.conn.ClientConnectionOperator:
    org.apache.http.conn.OperatedClientConnection createConnection() -> createConnection
    void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> openConnection
    void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> updateSecureConnection
org.apache.http.conn.ClientConnectionRequest -> org.apache.http.conn.ClientConnectionRequest:
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
    void abortRequest() -> abortRequest
org.apache.http.conn.ConnectTimeoutException -> org.apache.http.conn.ConnectTimeoutException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.conn.ConnectionKeepAliveStrategy -> org.apache.http.conn.ConnectionKeepAliveStrategy:
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
org.apache.http.conn.ConnectionPoolTimeoutException -> org.apache.http.conn.ConnectionPoolTimeoutException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.conn.ConnectionReleaseTrigger -> org.apache.http.conn.ConnectionReleaseTrigger:
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.conn.EofSensorInputStream -> org.apache.http.conn.EofSensorInputStream:
    java.io.InputStream wrappedStream -> wrappedStream
    void <init>(java.io.InputStream,org.apache.http.conn.EofSensorWatcher) -> <init>
    boolean isReadAllowed() -> isReadAllowed
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int available() -> available
    void close() -> close
    void checkEOF(int) -> checkEOF
    void checkClose() -> checkClose
    void checkAbort() -> checkAbort
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.conn.EofSensorWatcher -> org.apache.http.conn.EofSensorWatcher:
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
org.apache.http.conn.HttpHostConnectException -> org.apache.http.conn.HttpHostConnectException:
    void <init>(org.apache.http.HttpHost,java.net.ConnectException) -> <init>
    org.apache.http.HttpHost getHost() -> getHost
org.apache.http.conn.ManagedClientConnection -> org.apache.http.conn.ManagedClientConnection:
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setState(java.lang.Object) -> setState
    java.lang.Object getState() -> getState
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
org.apache.http.conn.MultihomePlainSocketFactory -> org.apache.http.conn.MultihomePlainSocketFactory:
    void <init>() -> <init>
    org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory() -> getSocketFactory
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.OperatedClientConnection -> org.apache.http.conn.OperatedClientConnection:
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    boolean isSecure() -> isSecure
    java.net.Socket getSocket() -> getSocket
    void opening(java.net.Socket,org.apache.http.HttpHost) -> opening
    void openCompleted(boolean,org.apache.http.params.HttpParams) -> openCompleted
    void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> update
org.apache.http.conn.params.ConnConnectionPNames -> org.apache.http.conn.params.ConnConnectionPNames:
    java.lang.String MAX_STATUS_LINE_GARBAGE -> MAX_STATUS_LINE_GARBAGE
org.apache.http.conn.params.ConnConnectionParamBean -> org.apache.http.conn.params.ConnConnectionParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setMaxStatusLineGarbage(int) -> setMaxStatusLineGarbage
org.apache.http.conn.params.ConnManagerPNames -> org.apache.http.conn.params.ConnManagerPNames:
    java.lang.String MAX_CONNECTIONS_PER_ROUTE -> MAX_CONNECTIONS_PER_ROUTE
    java.lang.String MAX_TOTAL_CONNECTIONS -> MAX_TOTAL_CONNECTIONS
    java.lang.String TIMEOUT -> TIMEOUT
org.apache.http.conn.params.ConnManagerParamBean -> org.apache.http.conn.params.ConnManagerParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setTimeout(long) -> setTimeout
    void setMaxTotalConnections(int) -> setMaxTotalConnections
    void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean) -> setConnectionsPerRoute
org.apache.http.conn.params.ConnManagerParams -> org.apache.http.conn.params.ConnManagerParams:
    int DEFAULT_MAX_TOTAL_CONNECTIONS -> DEFAULT_MAX_TOTAL_CONNECTIONS
    void <init>() -> <init>
    long getTimeout(org.apache.http.params.HttpParams) -> getTimeout
    void setTimeout(org.apache.http.params.HttpParams,long) -> setTimeout
    void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute) -> setMaxConnectionsPerRoute
    org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams) -> getMaxConnectionsPerRoute
    void setMaxTotalConnections(org.apache.http.params.HttpParams,int) -> setMaxTotalConnections
    int getMaxTotalConnections(org.apache.http.params.HttpParams) -> getMaxTotalConnections
org.apache.http.conn.params.ConnPerRoute -> org.apache.http.conn.params.ConnPerRoute:
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
org.apache.http.conn.params.ConnPerRouteBean -> org.apache.http.conn.params.ConnPerRouteBean:
    int DEFAULT_MAX_CONNECTIONS_PER_ROUTE -> DEFAULT_MAX_CONNECTIONS_PER_ROUTE
    void <init>(int) -> <init>
    void <init>() -> <init>
    int getDefaultMax() -> getDefaultMax
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int) -> setMaxForRoute
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
    void setMaxForRoutes(java.util.Map) -> setMaxForRoutes
org.apache.http.conn.params.ConnRoutePNames -> org.apache.http.conn.params.ConnRoutePNames:
    java.lang.String DEFAULT_PROXY -> DEFAULT_PROXY
    java.lang.String FORCED_ROUTE -> FORCED_ROUTE
    java.lang.String LOCAL_ADDRESS -> LOCAL_ADDRESS
org.apache.http.conn.params.ConnRouteParamBean -> org.apache.http.conn.params.ConnRouteParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setDefaultProxy(org.apache.http.HttpHost) -> setDefaultProxy
    void setLocalAddress(java.net.InetAddress) -> setLocalAddress
    void setForcedRoute(org.apache.http.conn.routing.HttpRoute) -> setForcedRoute
org.apache.http.conn.params.ConnRouteParams -> org.apache.http.conn.params.ConnRouteParams:
    org.apache.http.HttpHost NO_HOST -> NO_HOST
    org.apache.http.conn.routing.HttpRoute NO_ROUTE -> NO_ROUTE
    void <init>() -> <init>
    org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams) -> getDefaultProxy
    void setDefaultProxy(org.apache.http.params.HttpParams,org.apache.http.HttpHost) -> setDefaultProxy
    org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams) -> getForcedRoute
    void setForcedRoute(org.apache.http.params.HttpParams,org.apache.http.conn.routing.HttpRoute) -> setForcedRoute
    java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams) -> getLocalAddress
    void setLocalAddress(org.apache.http.params.HttpParams,java.net.InetAddress) -> setLocalAddress
    void <clinit>() -> <clinit>
org.apache.http.conn.routing.BasicRouteDirector -> org.apache.http.conn.routing.BasicRouteDirector:
    void <init>() -> <init>
    int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> nextStep
    int firstStep(org.apache.http.conn.routing.RouteInfo) -> firstStep
    int directStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> directStep
    int proxiedStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> proxiedStep
org.apache.http.conn.routing.HttpRoute -> org.apache.http.conn.routing.HttpRoute:
    void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost[],boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType) -> <init>
    void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean,org.apache.http.conn.routing.RouteInfo$TunnelType,org.apache.http.conn.routing.RouteInfo$LayerType) -> <init>
    void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean) -> <init>
    void <init>(org.apache.http.HttpHost) -> <init>
    void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean) -> <init>
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.conn.routing.HttpRouteDirector -> org.apache.http.conn.routing.HttpRouteDirector:
    int COMPLETE -> COMPLETE
    int CONNECT_PROXY -> CONNECT_PROXY
    int CONNECT_TARGET -> CONNECT_TARGET
    int LAYER_PROTOCOL -> LAYER_PROTOCOL
    int TUNNEL_PROXY -> TUNNEL_PROXY
    int TUNNEL_TARGET -> TUNNEL_TARGET
    int UNREACHABLE -> UNREACHABLE
    int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> nextStep
org.apache.http.conn.routing.HttpRoutePlanner -> org.apache.http.conn.routing.HttpRoutePlanner:
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
org.apache.http.conn.routing.RouteInfo -> org.apache.http.conn.routing.RouteInfo:
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
org.apache.http.conn.routing.RouteInfo$LayerType -> org.apache.http.conn.routing.RouteInfo$LayerType:
    org.apache.http.conn.routing.RouteInfo$LayerType LAYERED -> LAYERED
    org.apache.http.conn.routing.RouteInfo$LayerType PLAIN -> PLAIN
    org.apache.http.conn.routing.RouteInfo$LayerType[] $VALUES -> $VALUES
    org.apache.http.conn.routing.RouteInfo$LayerType[] values() -> values
    org.apache.http.conn.routing.RouteInfo$LayerType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.apache.http.conn.routing.RouteInfo$TunnelType -> org.apache.http.conn.routing.RouteInfo$TunnelType:
    org.apache.http.conn.routing.RouteInfo$TunnelType PLAIN -> PLAIN
    org.apache.http.conn.routing.RouteInfo$TunnelType TUNNELLED -> TUNNELLED
    org.apache.http.conn.routing.RouteInfo$TunnelType[] $VALUES -> $VALUES
    org.apache.http.conn.routing.RouteInfo$TunnelType[] values() -> values
    org.apache.http.conn.routing.RouteInfo$TunnelType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.apache.http.conn.routing.RouteTracker -> org.apache.http.conn.routing.RouteTracker:
    void <init>(org.apache.http.HttpHost,java.net.InetAddress) -> <init>
    void <init>(org.apache.http.conn.routing.HttpRoute) -> <init>
    void connectTarget(boolean) -> connectTarget
    void connectProxy(org.apache.http.HttpHost,boolean) -> connectProxy
    void tunnelTarget(boolean) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean) -> tunnelProxy
    void layerProtocol(boolean) -> layerProtocol
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    boolean isConnected() -> isConnected
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute toRoute() -> toRoute
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.conn.scheme.HostNameResolver -> org.apache.http.conn.scheme.HostNameResolver:
    java.net.InetAddress resolve(java.lang.String) -> resolve
org.apache.http.conn.scheme.PlainSocketFactory -> org.apache.http.conn.scheme.PlainSocketFactory:
    void <init>(org.apache.http.conn.scheme.HostNameResolver) -> <init>
    void <init>() -> <init>
    org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory() -> getSocketFactory
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.scheme.Scheme -> org.apache.http.conn.scheme.Scheme:
    void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int) -> <init>
    int getDefaultPort() -> getDefaultPort
    org.apache.http.conn.scheme.SocketFactory getSocketFactory() -> getSocketFactory
    java.lang.String getName() -> getName
    boolean isLayered() -> isLayered
    int resolvePort(int) -> resolvePort
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.scheme.SchemeRegistry -> org.apache.http.conn.scheme.SchemeRegistry:
    void <init>() -> <init>
    org.apache.http.conn.scheme.Scheme getScheme(java.lang.String) -> getScheme
    org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost) -> getScheme
    org.apache.http.conn.scheme.Scheme get(java.lang.String) -> get
    org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme) -> register
    org.apache.http.conn.scheme.Scheme unregister(java.lang.String) -> unregister
    java.util.List getSchemeNames() -> getSchemeNames
    void setItems(java.util.Map) -> setItems
org.apache.http.conn.scheme.SocketFactory -> org.apache.http.conn.scheme.SocketFactory:
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
org.apache.http.conn.util.InetAddressUtils -> org.apache.http.conn.util.InetAddressUtils:
    void <init>() -> <init>
    boolean isIPv4Address(java.lang.String) -> isIPv4Address
    boolean isIPv6StdAddress(java.lang.String) -> isIPv6StdAddress
    boolean isIPv6HexCompressedAddress(java.lang.String) -> isIPv6HexCompressedAddress
    boolean isIPv6Address(java.lang.String) -> isIPv6Address
org.apache.http.cookie.ClientCookie -> org.apache.http.cookie.ClientCookie:
    java.lang.String COMMENTURL_ATTR -> COMMENTURL_ATTR
    java.lang.String COMMENT_ATTR -> COMMENT_ATTR
    java.lang.String DISCARD_ATTR -> DISCARD_ATTR
    java.lang.String DOMAIN_ATTR -> DOMAIN_ATTR
    java.lang.String EXPIRES_ATTR -> EXPIRES_ATTR
    java.lang.String MAX_AGE_ATTR -> MAX_AGE_ATTR
    java.lang.String PATH_ATTR -> PATH_ATTR
    java.lang.String PORT_ATTR -> PORT_ATTR
    java.lang.String SECURE_ATTR -> SECURE_ATTR
    java.lang.String VERSION_ATTR -> VERSION_ATTR
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    boolean containsAttribute(java.lang.String) -> containsAttribute
org.apache.http.cookie.Cookie -> org.apache.http.cookie.Cookie:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String getComment() -> getComment
    java.lang.String getCommentURL() -> getCommentURL
    java.util.Date getExpiryDate() -> getExpiryDate
    boolean isPersistent() -> isPersistent
    java.lang.String getDomain() -> getDomain
    java.lang.String getPath() -> getPath
    int[] getPorts() -> getPorts
    boolean isSecure() -> isSecure
    int getVersion() -> getVersion
    boolean isExpired(java.util.Date) -> isExpired
org.apache.http.cookie.CookieAttributeHandler -> org.apache.http.cookie.CookieAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.cookie.CookieIdentityComparator -> org.apache.http.cookie.CookieIdentityComparator:
    void <init>() -> <init>
    int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.http.cookie.CookieOrigin -> org.apache.http.cookie.CookieOrigin:
    void <init>(java.lang.String,int,java.lang.String,boolean) -> <init>
    java.lang.String getHost() -> getHost
    java.lang.String getPath() -> getPath
    int getPort() -> getPort
    boolean isSecure() -> isSecure
    java.lang.String toString() -> toString
org.apache.http.cookie.CookiePathComparator -> org.apache.http.cookie.CookiePathComparator:
    void <init>() -> <init>
    int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.http.cookie.CookieSpec -> org.apache.http.cookie.CookieSpec:
    int getVersion() -> getVersion
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    java.util.List formatCookies(java.util.List) -> formatCookies
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.cookie.CookieSpecFactory -> org.apache.http.cookie.CookieSpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.cookie.CookieSpecRegistry -> org.apache.http.cookie.CookieSpecRegistry:
    void <init>() -> <init>
    void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory) -> register
    void unregister(java.lang.String) -> unregister
    org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String,org.apache.http.params.HttpParams) -> getCookieSpec
    org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String) -> getCookieSpec
    java.util.List getSpecNames() -> getSpecNames
    void setItems(java.util.Map) -> setItems
org.apache.http.cookie.MalformedCookieException -> org.apache.http.cookie.MalformedCookieException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.cookie.SM -> org.apache.http.cookie.SM:
    java.lang.String COOKIE -> COOKIE
    java.lang.String COOKIE2 -> COOKIE2
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String SET_COOKIE2 -> SET_COOKIE2
org.apache.http.cookie.SetCookie -> org.apache.http.cookie.SetCookie:
    void setValue(java.lang.String) -> setValue
    void setComment(java.lang.String) -> setComment
    void setExpiryDate(java.util.Date) -> setExpiryDate
    void setDomain(java.lang.String) -> setDomain
    void setPath(java.lang.String) -> setPath
    void setSecure(boolean) -> setSecure
    void setVersion(int) -> setVersion
org.apache.http.cookie.SetCookie2 -> org.apache.http.cookie.SetCookie2:
    void setCommentURL(java.lang.String) -> setCommentURL
    void setPorts(int[]) -> setPorts
    void setDiscard(boolean) -> setDiscard
org.apache.http.cookie.params.CookieSpecPNames -> org.apache.http.cookie.params.CookieSpecPNames:
    java.lang.String DATE_PATTERNS -> DATE_PATTERNS
    java.lang.String SINGLE_COOKIE_HEADER -> SINGLE_COOKIE_HEADER
org.apache.http.cookie.params.CookieSpecParamBean -> org.apache.http.cookie.params.CookieSpecParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setDatePatterns(java.util.Collection) -> setDatePatterns
    void setSingleHeader(boolean) -> setSingleHeader
org.apache.http.entity.AbstractHttpEntity -> org.apache.http.entity.AbstractHttpEntity:
    boolean chunked -> chunked
    org.apache.http.Header contentEncoding -> contentEncoding
    org.apache.http.Header contentType -> contentType
    void <init>() -> <init>
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    boolean isChunked() -> isChunked
    void setContentType(org.apache.http.Header) -> setContentType
    void setContentType(java.lang.String) -> setContentType
    void setContentEncoding(org.apache.http.Header) -> setContentEncoding
    void setContentEncoding(java.lang.String) -> setContentEncoding
    void setChunked(boolean) -> setChunked
    void consumeContent() -> consumeContent
org.apache.http.entity.BasicHttpEntity -> org.apache.http.entity.BasicHttpEntity:
    void <init>() -> <init>
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isRepeatable() -> isRepeatable
    void setContentLength(long) -> setContentLength
    void setContent(java.io.InputStream) -> setContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.entity.BufferedHttpEntity -> org.apache.http.entity.BufferedHttpEntity:
    void <init>(org.apache.http.HttpEntity) -> <init>
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isChunked() -> isChunked
    boolean isRepeatable() -> isRepeatable
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
org.apache.http.entity.ByteArrayEntity -> org.apache.http.entity.ByteArrayEntity:
    byte[] content -> content
    void <init>(byte[]) -> <init>
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
org.apache.http.entity.ContentLengthStrategy -> org.apache.http.entity.ContentLengthStrategy:
    int CHUNKED -> CHUNKED
    int IDENTITY -> IDENTITY
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.entity.ContentProducer -> org.apache.http.entity.ContentProducer:
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.EntityTemplate -> org.apache.http.entity.EntityTemplate:
    void <init>(org.apache.http.entity.ContentProducer) -> <init>
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    boolean isRepeatable() -> isRepeatable
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.entity.FileEntity -> org.apache.http.entity.FileEntity:
    java.io.File file -> file
    void <init>(java.io.File,java.lang.String) -> <init>
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
org.apache.http.entity.HttpEntityWrapper -> org.apache.http.entity.HttpEntityWrapper:
    org.apache.http.HttpEntity wrappedEntity -> wrappedEntity
    void <init>(org.apache.http.HttpEntity) -> <init>
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.entity.InputStreamEntity -> org.apache.http.entity.InputStreamEntity:
    void <init>(java.io.InputStream,long) -> <init>
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    void consumeContent() -> consumeContent
org.apache.http.entity.SerializableEntity -> org.apache.http.entity.SerializableEntity:
    void <init>(java.io.Serializable,boolean) -> <init>
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
    boolean isRepeatable() -> isRepeatable
    boolean isStreaming() -> isStreaming
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.StringEntity -> org.apache.http.entity.StringEntity:
    byte[] content -> content
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
org.apache.http.impl.AbstractHttpClientConnection -> org.apache.http.impl.AbstractHttpClientConnection:
    void <init>() -> <init>
    void assertOpen() -> assertOpen
    org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer() -> createEntityDeserializer
    org.apache.http.impl.entity.EntitySerializer createEntitySerializer() -> createEntitySerializer
    org.apache.http.HttpResponseFactory createHttpResponseFactory() -> createHttpResponseFactory
    org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> createResponseParser
    org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> createRequestWriter
    void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> init
    boolean isResponseAvailable(int) -> isResponseAvailable
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void doFlush() -> doFlush
    void flush() -> flush
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    boolean isStale() -> isStale
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
org.apache.http.impl.AbstractHttpServerConnection -> org.apache.http.impl.AbstractHttpServerConnection:
    void <init>() -> <init>
    void assertOpen() -> assertOpen
    org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer() -> createEntityDeserializer
    org.apache.http.impl.entity.EntitySerializer createEntitySerializer() -> createEntitySerializer
    org.apache.http.HttpRequestFactory createHttpRequestFactory() -> createHttpRequestFactory
    org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams) -> createRequestParser
    org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> createResponseWriter
    void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams) -> init
    org.apache.http.HttpRequest receiveRequestHeader() -> receiveRequestHeader
    void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> receiveRequestEntity
    void doFlush() -> doFlush
    void flush() -> flush
    void sendResponseHeader(org.apache.http.HttpResponse) -> sendResponseHeader
    void sendResponseEntity(org.apache.http.HttpResponse) -> sendResponseEntity
    boolean isStale() -> isStale
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
org.apache.http.impl.DefaultConnectionReuseStrategy -> org.apache.http.impl.DefaultConnectionReuseStrategy:
    void <init>() -> <init>
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
    org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator) -> createTokenIterator
org.apache.http.impl.DefaultHttpClientConnection -> org.apache.http.impl.DefaultHttpClientConnection:
    void <init>() -> <init>
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    java.lang.String toString() -> toString
org.apache.http.impl.DefaultHttpRequestFactory -> org.apache.http.impl.DefaultHttpRequestFactory:
    void <init>() -> <init>
    org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine) -> newHttpRequest
    org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String) -> newHttpRequest
org.apache.http.impl.DefaultHttpResponseFactory -> org.apache.http.impl.DefaultHttpResponseFactory:
    org.apache.http.ReasonPhraseCatalog reasonCatalog -> reasonCatalog
    void <init>(org.apache.http.ReasonPhraseCatalog) -> <init>
    void <init>() -> <init>
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext) -> newHttpResponse
    org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext) -> newHttpResponse
    java.util.Locale determineLocale(org.apache.http.protocol.HttpContext) -> determineLocale
org.apache.http.impl.DefaultHttpServerConnection -> org.apache.http.impl.DefaultHttpServerConnection:
    void <init>() -> <init>
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    java.lang.String toString() -> toString
org.apache.http.impl.EnglishReasonPhraseCatalog -> org.apache.http.impl.EnglishReasonPhraseCatalog:
    org.apache.http.impl.EnglishReasonPhraseCatalog INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.lang.String getReason(int,java.util.Locale) -> getReason
    void <clinit>() -> <clinit>
org.apache.http.impl.HttpConnectionMetricsImpl -> org.apache.http.impl.HttpConnectionMetricsImpl:
    java.lang.String RECEIVED_BYTES_COUNT -> RECEIVED_BYTES_COUNT
    java.lang.String REQUEST_COUNT -> REQUEST_COUNT
    java.lang.String RESPONSE_COUNT -> RESPONSE_COUNT
    java.lang.String SENT_BYTES_COUNT -> SENT_BYTES_COUNT
    void <init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics) -> <init>
    long getReceivedBytesCount() -> getReceivedBytesCount
    long getSentBytesCount() -> getSentBytesCount
    long getRequestCount() -> getRequestCount
    void incrementRequestCount() -> incrementRequestCount
    long getResponseCount() -> getResponseCount
    void incrementResponseCount() -> incrementResponseCount
    java.lang.Object getMetric(java.lang.String) -> getMetric
    void setMetric(java.lang.String,java.lang.Object) -> setMetric
    void reset() -> reset
org.apache.http.impl.NoConnectionReuseStrategy -> org.apache.http.impl.NoConnectionReuseStrategy:
    void <init>() -> <init>
    boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> keepAlive
org.apache.http.impl.SocketHttpClientConnection -> org.apache.http.impl.SocketHttpClientConnection:
    void <init>() -> <init>
    void assertNotOpen() -> assertNotOpen
    void assertOpen() -> assertOpen
    org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionInputBuffer
    org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionOutputBuffer
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    boolean isOpen() -> isOpen
    java.net.Socket getSocket() -> getSocket
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    void close() -> close
org.apache.http.impl.SocketHttpServerConnection -> org.apache.http.impl.SocketHttpServerConnection:
    void <init>() -> <init>
    void assertNotOpen() -> assertNotOpen
    void assertOpen() -> assertOpen
    org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket,int,org.apache.http.params.HttpParams) -> createHttpDataReceiver
    org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket,int,org.apache.http.params.HttpParams) -> createHttpDataTransmitter
    void bind(java.net.Socket,org.apache.http.params.HttpParams) -> bind
    java.net.Socket getSocket() -> getSocket
    boolean isOpen() -> isOpen
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    void shutdown() -> shutdown
    void close() -> close
org.apache.http.impl.auth.AuthSchemeBase -> org.apache.http.impl.auth.AuthSchemeBase:
    void <init>() -> <init>
    void processChallenge(org.apache.http.Header) -> processChallenge
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    boolean isProxy() -> isProxy
org.apache.http.impl.auth.BasicScheme -> org.apache.http.impl.auth.BasicScheme:
    void <init>() -> <init>
    java.lang.String getSchemeName() -> getSchemeName
    void processChallenge(org.apache.http.Header) -> processChallenge
    boolean isComplete() -> isComplete
    boolean isConnectionBased() -> isConnectionBased
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean) -> authenticate
org.apache.http.impl.auth.BasicSchemeFactory -> org.apache.http.impl.auth.BasicSchemeFactory:
    void <init>() -> <init>
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.auth.DigestScheme -> org.apache.http.impl.auth.DigestScheme:
    void <init>() -> <init>
    void processChallenge(org.apache.http.Header) -> processChallenge
    boolean isComplete() -> isComplete
    java.lang.String getSchemeName() -> getSchemeName
    boolean isConnectionBased() -> isConnectionBased
    void overrideParamter(java.lang.String,java.lang.String) -> overrideParamter
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    java.lang.String createCnonce() -> createCnonce
org.apache.http.impl.auth.DigestSchemeFactory -> org.apache.http.impl.auth.DigestSchemeFactory:
    void <init>() -> <init>
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.auth.NTLMEngine -> org.apache.http.impl.auth.NTLMEngine:
    java.lang.String generateType1Msg(java.lang.String,java.lang.String) -> generateType1Msg
    java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> generateType3Msg
org.apache.http.impl.auth.NTLMEngineException -> org.apache.http.impl.auth.NTLMEngineException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.impl.auth.NTLMScheme -> org.apache.http.impl.auth.NTLMScheme:
    void <init>(org.apache.http.impl.auth.NTLMEngine) -> <init>
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    boolean isComplete() -> isComplete
org.apache.http.impl.auth.RFC2617Scheme -> org.apache.http.impl.auth.RFC2617Scheme:
    void <init>() -> <init>
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    java.util.Map getParameters() -> getParameters
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
org.apache.http.impl.auth.UnsupportedDigestAlgorithmException -> org.apache.http.impl.auth.UnsupportedDigestAlgorithmException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.apache.http.impl.client.AbstractAuthenticationHandler -> org.apache.http.impl.client.AbstractAuthenticationHandler:
    void <init>() -> <init>
    java.util.Map parseChallenges(org.apache.http.Header[]) -> parseChallenges
    java.util.List getAuthPreferences() -> getAuthPreferences
    org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> selectScheme
org.apache.http.impl.client.AbstractHttpClient -> org.apache.http.impl.client.AbstractHttpClient:
    void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.params.HttpParams createHttpParams() -> createHttpParams
    org.apache.http.protocol.HttpContext createHttpContext() -> createHttpContext
    org.apache.http.protocol.HttpRequestExecutor createRequestExecutor() -> createRequestExecutor
    org.apache.http.conn.ClientConnectionManager createClientConnectionManager() -> createClientConnectionManager
    org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry() -> createAuthSchemeRegistry
    org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry() -> createCookieSpecRegistry
    org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy() -> createConnectionReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() -> createConnectionKeepAliveStrategy
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
    org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler() -> createHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler createRedirectHandler() -> createRedirectHandler
    org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler() -> createTargetAuthenticationHandler
    org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler() -> createProxyAuthenticationHandler
    org.apache.http.client.CookieStore createCookieStore() -> createCookieStore
    org.apache.http.client.CredentialsProvider createCredentialsProvider() -> createCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner() -> createHttpRoutePlanner
    org.apache.http.client.UserTokenHandler createUserTokenHandler() -> createUserTokenHandler
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.protocol.HttpRequestExecutor getRequestExecutor() -> getRequestExecutor
    org.apache.http.auth.AuthSchemeRegistry getAuthSchemes() -> getAuthSchemes
    void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry) -> setAuthSchemes
    org.apache.http.cookie.CookieSpecRegistry getCookieSpecs() -> getCookieSpecs
    void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry) -> setCookieSpecs
    org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy() -> getConnectionReuseStrategy
    void setReuseStrategy(org.apache.http.ConnectionReuseStrategy) -> setReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy() -> getConnectionKeepAliveStrategy
    void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy) -> setKeepAliveStrategy
    org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler() -> getHttpRequestRetryHandler
    void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler) -> setHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler getRedirectHandler() -> getRedirectHandler
    void setRedirectHandler(org.apache.http.client.RedirectHandler) -> setRedirectHandler
    org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler() -> getTargetAuthenticationHandler
    void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler) -> setTargetAuthenticationHandler
    org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler() -> getProxyAuthenticationHandler
    void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler) -> setProxyAuthenticationHandler
    org.apache.http.client.CookieStore getCookieStore() -> getCookieStore
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    org.apache.http.client.CredentialsProvider getCredentialsProvider() -> getCredentialsProvider
    void setCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner() -> getRoutePlanner
    void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner) -> setRoutePlanner
    org.apache.http.client.UserTokenHandler getUserTokenHandler() -> getUserTokenHandler
    void setUserTokenHandler(org.apache.http.client.UserTokenHandler) -> setUserTokenHandler
    org.apache.http.protocol.BasicHttpProcessor getHttpProcessor() -> getHttpProcessor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    void clearResponseInterceptors() -> clearResponseInterceptors
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    void clearRequestInterceptors() -> clearRequestInterceptors
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> createClientRequestDirector
    org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest) -> determineParams
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.impl.client.BasicCookieStore -> org.apache.http.impl.client.BasicCookieStore:
    void <init>() -> <init>
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    void addCookies(org.apache.http.cookie.Cookie[]) -> addCookies
    java.util.List getCookies() -> getCookies
    boolean clearExpired(java.util.Date) -> clearExpired
    java.lang.String toString() -> toString
    void clear() -> clear
org.apache.http.impl.client.BasicCredentialsProvider -> org.apache.http.impl.client.BasicCredentialsProvider:
    void <init>() -> <init>
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
    java.lang.String toString() -> toString
    void clear() -> clear
org.apache.http.impl.client.BasicResponseHandler -> org.apache.http.impl.client.BasicResponseHandler:
    void <init>() -> <init>
    java.lang.String handleResponse(org.apache.http.HttpResponse) -> handleResponse
    java.lang.Object handleResponse(org.apache.http.HttpResponse) -> handleResponse
org.apache.http.impl.client.ClientParamsStack -> org.apache.http.impl.client.ClientParamsStack:
    org.apache.http.params.HttpParams applicationParams -> applicationParams
    org.apache.http.params.HttpParams clientParams -> clientParams
    org.apache.http.params.HttpParams overrideParams -> overrideParams
    org.apache.http.params.HttpParams requestParams -> requestParams
    void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams) -> <init>
    void <init>(org.apache.http.impl.client.ClientParamsStack) -> <init>
    void <init>(org.apache.http.impl.client.ClientParamsStack,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.params.HttpParams getApplicationParams() -> getApplicationParams
    org.apache.http.params.HttpParams getClientParams() -> getClientParams
    org.apache.http.params.HttpParams getRequestParams() -> getRequestParams
    org.apache.http.params.HttpParams getOverrideParams() -> getOverrideParams
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    org.apache.http.params.HttpParams copy() -> copy
org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy -> org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy:
    void <init>() -> <init>
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
org.apache.http.impl.client.DefaultHttpClient -> org.apache.http.impl.client.DefaultHttpClient:
    void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams) -> <init>
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void <init>() -> <init>
    org.apache.http.params.HttpParams createHttpParams() -> createHttpParams
    org.apache.http.protocol.HttpRequestExecutor createRequestExecutor() -> createRequestExecutor
    org.apache.http.conn.ClientConnectionManager createClientConnectionManager() -> createClientConnectionManager
    org.apache.http.protocol.HttpContext createHttpContext() -> createHttpContext
    org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy() -> createConnectionReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() -> createConnectionKeepAliveStrategy
    org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry() -> createAuthSchemeRegistry
    org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry() -> createCookieSpecRegistry
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
    org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler() -> createHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler createRedirectHandler() -> createRedirectHandler
    org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler() -> createTargetAuthenticationHandler
    org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler() -> createProxyAuthenticationHandler
    org.apache.http.client.CookieStore createCookieStore() -> createCookieStore
    org.apache.http.client.CredentialsProvider createCredentialsProvider() -> createCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner() -> createHttpRoutePlanner
    org.apache.http.client.UserTokenHandler createUserTokenHandler() -> createUserTokenHandler
org.apache.http.impl.client.DefaultHttpRequestRetryHandler -> org.apache.http.impl.client.DefaultHttpRequestRetryHandler:
    void <init>(int,boolean) -> <init>
    void <init>() -> <init>
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
    boolean isRequestSentRetryEnabled() -> isRequestSentRetryEnabled
    int getRetryCount() -> getRetryCount
org.apache.http.impl.client.DefaultProxyAuthenticationHandler -> org.apache.http.impl.client.DefaultProxyAuthenticationHandler:
    void <init>() -> <init>
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
org.apache.http.impl.client.DefaultRedirectHandler -> org.apache.http.impl.client.DefaultRedirectHandler:
    void <init>() -> <init>
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
org.apache.http.impl.client.DefaultRequestDirector -> org.apache.http.impl.client.DefaultRequestDirector:
    org.apache.http.conn.ClientConnectionManager connManager -> connManager
    org.apache.http.protocol.HttpProcessor httpProcessor -> httpProcessor
    org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> keepAliveStrategy
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    org.apache.http.params.HttpParams params -> params
    org.apache.http.client.RedirectHandler redirectHandler -> redirectHandler
    org.apache.http.protocol.HttpRequestExecutor requestExec -> requestExec
    org.apache.http.client.HttpRequestRetryHandler retryHandler -> retryHandler
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.conn.routing.HttpRoutePlanner routePlanner -> routePlanner
    void <init>(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> <init>
    void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute) -> rewriteRequestURI
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    void releaseConnection() -> releaseConnection
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> establishRoute
    boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> createTunnelToTarget
    boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext) -> createTunnelToProxy
    org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> createConnectRequest
    org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> handleResponse
org.apache.http.impl.client.DefaultTargetAuthenticationHandler -> org.apache.http.impl.client.DefaultTargetAuthenticationHandler:
    void <init>() -> <init>
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
org.apache.http.impl.client.DefaultUserTokenHandler -> org.apache.http.impl.client.DefaultUserTokenHandler:
    void <init>() -> <init>
    java.lang.Object getUserToken(org.apache.http.protocol.HttpContext) -> getUserToken
org.apache.http.impl.client.EntityEnclosingRequestWrapper -> org.apache.http.impl.client.EntityEnclosingRequestWrapper:
    void <init>(org.apache.http.HttpEntityEnclosingRequest) -> <init>
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    boolean isRepeatable() -> isRepeatable
org.apache.http.impl.client.RedirectLocations -> org.apache.http.impl.client.RedirectLocations:
    void <init>() -> <init>
    boolean contains(java.net.URI) -> contains
    void add(java.net.URI) -> add
    boolean remove(java.net.URI) -> remove
org.apache.http.impl.client.RequestWrapper -> org.apache.http.impl.client.RequestWrapper:
    void <init>(org.apache.http.HttpRequest) -> <init>
    void resetHeaders() -> resetHeaders
    java.lang.String getMethod() -> getMethod
    void setMethod(java.lang.String) -> setMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(org.apache.http.ProtocolVersion) -> setProtocolVersion
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> setURI
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    void abort() -> abort
    boolean isAborted() -> isAborted
    org.apache.http.HttpRequest getOriginal() -> getOriginal
    boolean isRepeatable() -> isRepeatable
    int getExecCount() -> getExecCount
    void incrementExecCount() -> incrementExecCount
org.apache.http.impl.client.RoutedRequest -> org.apache.http.impl.client.RoutedRequest:
    org.apache.http.impl.client.RequestWrapper request -> request
    org.apache.http.conn.routing.HttpRoute route -> route
    void <init>(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute) -> <init>
    org.apache.http.impl.client.RequestWrapper getRequest() -> getRequest
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
org.apache.http.impl.client.TunnelRefusedException -> org.apache.http.impl.client.TunnelRefusedException:
    void <init>(java.lang.String,org.apache.http.HttpResponse) -> <init>
    org.apache.http.HttpResponse getResponse() -> getResponse
org.apache.http.impl.conn.AbstractClientConnAdapter -> org.apache.http.impl.conn.AbstractClientConnAdapter:
    void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.conn.OperatedClientConnection) -> <init>
    void detach() -> detach
    org.apache.http.conn.OperatedClientConnection getWrappedConnection() -> getWrappedConnection
    org.apache.http.conn.ClientConnectionManager getManager() -> getManager
    void assertNotAborted() -> assertNotAborted
    void assertValid(org.apache.http.conn.OperatedClientConnection) -> assertValid
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
    void flush() -> flush
    boolean isResponseAvailable(int) -> isResponseAvailable
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    boolean isSecure() -> isSecure
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.impl.conn.AbstractPoolEntry -> org.apache.http.impl.conn.AbstractPoolEntry:
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.conn.OperatedClientConnection connection -> connection
    org.apache.http.conn.routing.HttpRoute route -> route
    java.lang.Object state -> state
    org.apache.http.conn.routing.RouteTracker tracker -> tracker
    void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.conn.routing.HttpRoute) -> <init>
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void shutdownEntry() -> shutdownEntry
org.apache.http.impl.conn.AbstractPooledConnAdapter -> org.apache.http.impl.conn.AbstractPooledConnAdapter:
    org.apache.http.impl.conn.AbstractPoolEntry poolEntry -> poolEntry
    void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.impl.conn.AbstractPoolEntry) -> <init>
    void assertAttached() -> assertAttached
    void detach() -> detach
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void close() -> close
    void shutdown() -> shutdown
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
org.apache.http.impl.conn.DefaultClientConnection -> org.apache.http.impl.conn.DefaultClientConnection:
    void <init>() -> <init>
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    boolean isSecure() -> isSecure
    java.net.Socket getSocket() -> getSocket
    void opening(java.net.Socket,org.apache.http.HttpHost) -> opening
    void openCompleted(boolean,org.apache.http.params.HttpParams) -> openCompleted
    void shutdown() -> shutdown
    void close() -> close
    org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionInputBuffer
    org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionOutputBuffer
    org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> createResponseParser
    void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> update
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
org.apache.http.impl.conn.DefaultClientConnectionOperator -> org.apache.http.impl.conn.DefaultClientConnectionOperator:
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    void <init>(org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    org.apache.http.conn.OperatedClientConnection createConnection() -> createConnection
    void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> openConnection
    void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> updateSecureConnection
    void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> prepareSocket
org.apache.http.impl.conn.DefaultHttpRoutePlanner -> org.apache.http.impl.conn.DefaultHttpRoutePlanner:
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    void <init>(org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
org.apache.http.impl.conn.DefaultResponseParser -> org.apache.http.impl.conn.DefaultResponseParser:
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.conn.IdleConnectionHandler -> org.apache.http.impl.conn.IdleConnectionHandler:
    void <init>() -> <init>
    void add(org.apache.http.HttpConnection,long,java.util.concurrent.TimeUnit) -> add
    boolean remove(org.apache.http.HttpConnection) -> remove
    void removeAll() -> removeAll
    void closeIdleConnections(long) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
org.apache.http.impl.conn.LoggingSessionInputBuffer -> org.apache.http.impl.conn.LoggingSessionInputBuffer:
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.impl.conn.Wire) -> <init>
    boolean isDataAvailable(int) -> isDataAvailable
    int read(byte[],int,int) -> read
    int read() -> read
    int read(byte[]) -> read
    java.lang.String readLine() -> readLine
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.conn.LoggingSessionOutputBuffer -> org.apache.http.impl.conn.LoggingSessionOutputBuffer:
    void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.impl.conn.Wire) -> <init>
    void write(byte[],int,int) -> write
    void write(int) -> write
    void write(byte[]) -> write
    void flush() -> flush
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    void writeLine(java.lang.String) -> writeLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.conn.ProxySelectorRoutePlanner -> org.apache.http.impl.conn.ProxySelectorRoutePlanner:
    java.net.ProxySelector proxySelector -> proxySelector
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    void <init>(org.apache.http.conn.scheme.SchemeRegistry,java.net.ProxySelector) -> <init>
    java.net.ProxySelector getProxySelector() -> getProxySelector
    void setProxySelector(java.net.ProxySelector) -> setProxySelector
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineProxy
    java.lang.String getHost(java.net.InetSocketAddress) -> getHost
    java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> chooseProxy
org.apache.http.impl.conn.SingleClientConnManager -> org.apache.http.impl.conn.SingleClientConnManager:
    java.lang.String MISUSE_MESSAGE -> MISUSE_MESSAGE
    boolean alwaysShutDown -> alwaysShutDown
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    long connectionExpiresTime -> connectionExpiresTime
    boolean isShutDown -> isShutDown
    long lastReleaseTime -> lastReleaseTime
    org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn -> managedConn
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry -> uniquePoolEntry
    void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    void finalize() -> finalize
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    void assertStillUp() -> assertStillUp
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> getConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeExpiredConnections() -> closeExpiredConnections
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void shutdown() -> shutdown
    void revokeConnection() -> revokeConnection
org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter -> org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter:
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> this$0
    void <init>(org.apache.http.impl.conn.SingleClientConnManager,org.apache.http.impl.conn.SingleClientConnManager$PoolEntry,org.apache.http.conn.routing.HttpRoute) -> <init>
org.apache.http.impl.conn.SingleClientConnManager$PoolEntry -> org.apache.http.impl.conn.SingleClientConnManager$PoolEntry:
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> this$0
    void <init>(org.apache.http.impl.conn.SingleClientConnManager) -> <init>
    void close() -> close
    void shutdown() -> shutdown
org.apache.http.impl.conn.Wire -> org.apache.http.impl.conn.Wire:
    void <init>(org.apache.commons.logging.Log) -> <init>
    boolean enabled() -> enabled
    void output(java.io.InputStream) -> output
    void input(java.io.InputStream) -> input
    void output(byte[],int,int) -> output
    void input(byte[],int,int) -> input
    void output(byte[]) -> output
    void input(byte[]) -> input
    void output(int) -> output
    void input(int) -> input
    void output(java.lang.String) -> output
    void input(java.lang.String) -> input
org.apache.http.impl.conn.tsccm.AbstractConnPool -> org.apache.http.impl.conn.tsccm.AbstractConnPool:
    org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler -> idleConnHandler
    boolean isShutDown -> isShutDown
    java.util.Set issuedConnections -> issuedConnections
    int numConnections -> numConnections
    java.util.concurrent.locks.Lock poolLock -> poolLock
    java.lang.ref.ReferenceQueue refQueue -> refQueue
    void <init>() -> <init>
    void enableConnectionGC() -> enableConnectionGC
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit) -> getEntry
    org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestPoolEntry
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit) -> freeEntry
    void handleReference(java.lang.ref.Reference) -> handleReference
    void handleLostEntry(org.apache.http.conn.routing.HttpRoute) -> handleLostEntry
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void deleteClosedConnections() -> deleteClosedConnections
    void shutdown() -> shutdown
    void closeConnection(org.apache.http.conn.OperatedClientConnection) -> closeConnection
org.apache.http.impl.conn.tsccm.BasicPoolEntry -> org.apache.http.impl.conn.tsccm.BasicPoolEntry:
    void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.conn.routing.HttpRoute,java.lang.ref.ReferenceQueue) -> <init>
    org.apache.http.conn.OperatedClientConnection getConnection() -> getConnection
    org.apache.http.conn.routing.HttpRoute getPlannedRoute() -> getPlannedRoute
    org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef() -> getWeakRef
org.apache.http.impl.conn.tsccm.BasicPoolEntryRef -> org.apache.http.impl.conn.tsccm.BasicPoolEntryRef:
    void <init>(org.apache.http.impl.conn.tsccm.BasicPoolEntry,java.lang.ref.ReferenceQueue) -> <init>
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter -> org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter:
    void <init>(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager,org.apache.http.impl.conn.AbstractPoolEntry) -> <init>
    org.apache.http.conn.ClientConnectionManager getManager() -> getManager
    org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry() -> getPoolEntry
    void detach() -> detach
org.apache.http.impl.conn.tsccm.ConnPoolByRoute -> org.apache.http.impl.conn.tsccm.ConnPoolByRoute:
    java.util.Queue freeConnections -> freeConnections
    int maxTotalConnections -> maxTotalConnections
    org.apache.http.conn.ClientConnectionOperator operator -> operator
    java.util.Map routeToPool -> routeToPool
    java.util.Queue waitingThreads -> waitingThreads
    void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.params.HttpParams) -> <init>
    java.util.Queue createFreeConnQueue() -> createFreeConnQueue
    java.util.Queue createWaitingThreadQueue() -> createWaitingThreadQueue
    java.util.Map createRouteToPoolMap() -> createRouteToPoolMap
    org.apache.http.impl.conn.tsccm.RouteSpecificPool newRouteSpecificPool(org.apache.http.conn.routing.HttpRoute) -> newRouteSpecificPool
    org.apache.http.impl.conn.tsccm.WaitingThread newWaitingThread(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> newWaitingThread
    org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute,boolean) -> getRoutePool
    int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute) -> getConnectionsInPool
    org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestPoolEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter) -> getEntryBlocking
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit) -> freeEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,java.lang.Object) -> getFreeEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,org.apache.http.conn.ClientConnectionOperator) -> createEntry
    void deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> deleteEntry
    void deleteLeastUsedEntry() -> deleteLeastUsedEntry
    void handleLostEntry(org.apache.http.conn.routing.HttpRoute) -> handleLostEntry
    void notifyWaitingThread(org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> notifyWaitingThread
    void deleteClosedConnections() -> deleteClosedConnections
    void shutdown() -> shutdown
org.apache.http.impl.conn.tsccm.PoolEntryRequest -> org.apache.http.impl.conn.tsccm.PoolEntryRequest:
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit) -> getPoolEntry
    void abortRequest() -> abortRequest
org.apache.http.impl.conn.tsccm.RefQueueHandler -> org.apache.http.impl.conn.tsccm.RefQueueHandler:
    void handleReference(java.lang.ref.Reference) -> handleReference
org.apache.http.impl.conn.tsccm.RefQueueWorker -> org.apache.http.impl.conn.tsccm.RefQueueWorker:
    org.apache.http.impl.conn.tsccm.RefQueueHandler refHandler -> refHandler
    java.lang.ref.ReferenceQueue refQueue -> refQueue
    java.lang.Thread workerThread -> workerThread
    void <init>(java.lang.ref.ReferenceQueue,org.apache.http.impl.conn.tsccm.RefQueueHandler) -> <init>
    void run() -> run
    void shutdown() -> shutdown
    java.lang.String toString() -> toString
org.apache.http.impl.conn.tsccm.RouteSpecificPool -> org.apache.http.impl.conn.tsccm.RouteSpecificPool:
    java.util.LinkedList freeEntries -> freeEntries
    int maxEntries -> maxEntries
    int numEntries -> numEntries
    org.apache.http.conn.routing.HttpRoute route -> route
    java.util.Queue waitingThreads -> waitingThreads
    void <init>(org.apache.http.conn.routing.HttpRoute,int) -> <init>
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    int getMaxEntries() -> getMaxEntries
    boolean isUnused() -> isUnused
    int getCapacity() -> getCapacity
    int getEntryCount() -> getEntryCount
    org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object) -> allocEntry
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> freeEntry
    void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> createdEntry
    boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> deleteEntry
    void dropEntry() -> dropEntry
    void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> queueThread
    boolean hasThread() -> hasThread
    org.apache.http.impl.conn.tsccm.WaitingThread nextThread() -> nextThread
    void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> removeThread
org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager -> org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager:
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool -> connectionPool
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry) -> <init>
    void finalize() -> finalize
    org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams) -> createConnectionPool
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void shutdown() -> shutdown
    int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute) -> getConnectionsInPool
    int getConnectionsInPool() -> getConnectionsInPool
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
org.apache.http.impl.conn.tsccm.WaitingThread -> org.apache.http.impl.conn.tsccm.WaitingThread:
    void <init>(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> <init>
    java.util.concurrent.locks.Condition getCondition() -> getCondition
    org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool() -> getPool
    java.lang.Thread getThread() -> getThread
    boolean await(java.util.Date) -> await
    void wakeup() -> wakeup
    void interrupt() -> interrupt
org.apache.http.impl.conn.tsccm.WaitingThreadAborter -> org.apache.http.impl.conn.tsccm.WaitingThreadAborter:
    void <init>() -> <init>
    void abort() -> abort
    void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> setWaitingThread
org.apache.http.impl.cookie.AbstractCookieAttributeHandler -> org.apache.http.impl.cookie.AbstractCookieAttributeHandler:
    void <init>() -> <init>
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.AbstractCookieSpec -> org.apache.http.impl.cookie.AbstractCookieSpec:
    void <init>() -> <init>
    void registerAttribHandler(java.lang.String,org.apache.http.cookie.CookieAttributeHandler) -> registerAttribHandler
    org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String) -> findAttribHandler
    org.apache.http.cookie.CookieAttributeHandler getAttribHandler(java.lang.String) -> getAttribHandler
    java.util.Collection getAttribHandlers() -> getAttribHandlers
org.apache.http.impl.cookie.BasicClientCookie -> org.apache.http.impl.cookie.BasicClientCookie:
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String getComment() -> getComment
    void setComment(java.lang.String) -> setComment
    java.lang.String getCommentURL() -> getCommentURL
    java.util.Date getExpiryDate() -> getExpiryDate
    void setExpiryDate(java.util.Date) -> setExpiryDate
    boolean isPersistent() -> isPersistent
    java.lang.String getDomain() -> getDomain
    void setDomain(java.lang.String) -> setDomain
    java.lang.String getPath() -> getPath
    void setPath(java.lang.String) -> setPath
    boolean isSecure() -> isSecure
    void setSecure(boolean) -> setSecure
    int[] getPorts() -> getPorts
    int getVersion() -> getVersion
    void setVersion(int) -> setVersion
    boolean isExpired(java.util.Date) -> isExpired
    void setAttribute(java.lang.String,java.lang.String) -> setAttribute
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    boolean containsAttribute(java.lang.String) -> containsAttribute
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.BasicClientCookie2 -> org.apache.http.impl.cookie.BasicClientCookie2:
    void <init>(java.lang.String,java.lang.String) -> <init>
    int[] getPorts() -> getPorts
    void setPorts(int[]) -> setPorts
    java.lang.String getCommentURL() -> getCommentURL
    void setCommentURL(java.lang.String) -> setCommentURL
    void setDiscard(boolean) -> setDiscard
    boolean isPersistent() -> isPersistent
    boolean isExpired(java.util.Date) -> isExpired
    java.lang.Object clone() -> clone
org.apache.http.impl.cookie.BasicCommentHandler -> org.apache.http.impl.cookie.BasicCommentHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicDomainHandler -> org.apache.http.impl.cookie.BasicDomainHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BasicExpiresHandler -> org.apache.http.impl.cookie.BasicExpiresHandler:
    void <init>(java.lang.String[]) -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicMaxAgeHandler -> org.apache.http.impl.cookie.BasicMaxAgeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicPathHandler -> org.apache.http.impl.cookie.BasicPathHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BasicSecureHandler -> org.apache.http.impl.cookie.BasicSecureHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BestMatchSpec -> org.apache.http.impl.cookie.BestMatchSpec:
    void <init>(java.lang.String[],boolean) -> <init>
    void <init>() -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.BestMatchSpecFactory -> org.apache.http.impl.cookie.BestMatchSpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.BrowserCompatSpec -> org.apache.http.impl.cookie.BrowserCompatSpec:
    java.lang.String[] DATE_PATTERNS -> DATE_PATTERNS
    void <init>(java.lang.String[]) -> <init>
    void <init>() -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    void <clinit>() -> <clinit>
org.apache.http.impl.cookie.BrowserCompatSpecFactory -> org.apache.http.impl.cookie.BrowserCompatSpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.CookieSpecBase -> org.apache.http.impl.cookie.CookieSpecBase:
    void <init>() -> <init>
    java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin) -> getDefaultPath
    java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin) -> getDefaultDomain
    java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.DateParseException -> org.apache.http.impl.cookie.DateParseException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.apache.http.impl.cookie.DateUtils -> org.apache.http.impl.cookie.DateUtils:
    java.util.TimeZone GMT -> GMT
    java.lang.String PATTERN_ASCTIME -> PATTERN_ASCTIME
    java.lang.String PATTERN_RFC1036 -> PATTERN_RFC1036
    java.lang.String PATTERN_RFC1123 -> PATTERN_RFC1123
    void <init>() -> <init>
    java.util.Date parseDate(java.lang.String) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[]) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date) -> parseDate
    java.lang.String formatDate(java.util.Date) -> formatDate
    java.lang.String formatDate(java.util.Date,java.lang.String) -> formatDate
    void <clinit>() -> <clinit>
org.apache.http.impl.cookie.NetscapeDomainHandler -> org.apache.http.impl.cookie.NetscapeDomainHandler:
    void <init>() -> <init>
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.NetscapeDraftHeaderParser -> org.apache.http.impl.cookie.NetscapeDraftHeaderParser:
    org.apache.http.impl.cookie.NetscapeDraftHeaderParser DEFAULT -> DEFAULT
    void <init>() -> <init>
    org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeader
    void <clinit>() -> <clinit>
org.apache.http.impl.cookie.NetscapeDraftSpec -> org.apache.http.impl.cookie.NetscapeDraftSpec:
    java.lang.String EXPIRES_PATTERN -> EXPIRES_PATTERN
    void <init>(java.lang.String[]) -> <init>
    void <init>() -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.NetscapeDraftSpecFactory -> org.apache.http.impl.cookie.NetscapeDraftSpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.RFC2109DomainHandler -> org.apache.http.impl.cookie.RFC2109DomainHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2109Spec -> org.apache.http.impl.cookie.RFC2109Spec:
    void <init>(java.lang.String[],boolean) -> <init>
    void <init>() -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    java.util.List formatCookies(java.util.List) -> formatCookies
    void formatParamAsVer(org.apache.http.util.CharArrayBuffer,java.lang.String,java.lang.String,int) -> formatParamAsVer
    void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int) -> formatCookieAsVer
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.RFC2109SpecFactory -> org.apache.http.impl.cookie.RFC2109SpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.RFC2109VersionHandler -> org.apache.http.impl.cookie.RFC2109VersionHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler -> org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler -> org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965DomainAttributeHandler -> org.apache.http.impl.cookie.RFC2965DomainAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    boolean domainMatch(java.lang.String,java.lang.String) -> domainMatch
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965PortAttributeHandler -> org.apache.http.impl.cookie.RFC2965PortAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965Spec -> org.apache.http.impl.cookie.RFC2965Spec:
    void <init>() -> <init>
    void <init>(java.lang.String[],boolean) -> <init>
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int) -> formatCookieAsVer
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.RFC2965SpecFactory -> org.apache.http.impl.cookie.RFC2965SpecFactory:
    void <init>() -> <init>
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.RFC2965VersionAttributeHandler -> org.apache.http.impl.cookie.RFC2965VersionAttributeHandler:
    void <init>() -> <init>
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.entity.EntityDeserializer -> org.apache.http.impl.entity.EntityDeserializer:
    void <init>(org.apache.http.entity.ContentLengthStrategy) -> <init>
    org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage) -> doDeserialize
    org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage) -> deserialize
org.apache.http.impl.entity.EntitySerializer -> org.apache.http.impl.entity.EntitySerializer:
    void <init>(org.apache.http.entity.ContentLengthStrategy) -> <init>
    java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage) -> doSerialize
    void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity) -> serialize
org.apache.http.impl.entity.LaxContentLengthStrategy -> org.apache.http.impl.entity.LaxContentLengthStrategy:
    void <init>() -> <init>
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.impl.entity.StrictContentLengthStrategy -> org.apache.http.impl.entity.StrictContentLengthStrategy:
    void <init>() -> <init>
    long determineLength(org.apache.http.HttpMessage) -> determineLength
org.apache.http.impl.io.AbstractMessageParser -> org.apache.http.impl.io.AbstractMessageParser:
    org.apache.http.message.LineParser lineParser -> lineParser
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser) -> parseHeaders
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
    org.apache.http.HttpMessage parse() -> parse
org.apache.http.impl.io.AbstractMessageWriter -> org.apache.http.impl.io.AbstractMessageWriter:
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    org.apache.http.message.LineFormatter lineFormatter -> lineFormatter
    org.apache.http.io.SessionOutputBuffer sessionBuffer -> sessionBuffer
    void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams) -> <init>
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
    void write(org.apache.http.HttpMessage) -> write
org.apache.http.impl.io.AbstractSessionInputBuffer -> org.apache.http.impl.io.AbstractSessionInputBuffer:
    void <init>() -> <init>
    void init(java.io.InputStream,int,org.apache.http.params.HttpParams) -> init
    int fillBuffer() -> fillBuffer
    boolean hasBufferedData() -> hasBufferedData
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    java.lang.String readLine() -> readLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.io.AbstractSessionOutputBuffer -> org.apache.http.impl.io.AbstractSessionOutputBuffer:
    void <init>() -> <init>
    void init(java.io.OutputStream,int,org.apache.http.params.HttpParams) -> init
    void flushBuffer() -> flushBuffer
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void writeLine(java.lang.String) -> writeLine
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.io.ChunkedInputStream -> org.apache.http.impl.io.ChunkedInputStream:
    void <init>(org.apache.http.io.SessionInputBuffer) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    void close() -> close
    org.apache.http.Header[] getFooters() -> getFooters
org.apache.http.impl.io.ChunkedOutputStream -> org.apache.http.impl.io.ChunkedOutputStream:
    void <init>(org.apache.http.io.SessionOutputBuffer,int) -> <init>
    void <init>(org.apache.http.io.SessionOutputBuffer) -> <init>
    void flushCache() -> flushCache
    void flushCacheWithAppend(byte[],int,int) -> flushCacheWithAppend
    void writeClosingChunk() -> writeClosingChunk
    void finish() -> finish
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
org.apache.http.impl.io.ContentLengthInputStream -> org.apache.http.impl.io.ContentLengthInputStream:
    void <init>(org.apache.http.io.SessionInputBuffer,long) -> <init>
    void close() -> close
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    long skip(long) -> skip
org.apache.http.impl.io.ContentLengthOutputStream -> org.apache.http.impl.io.ContentLengthOutputStream:
    void <init>(org.apache.http.io.SessionOutputBuffer,long) -> <init>
    void close() -> close
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
org.apache.http.impl.io.HttpRequestParser -> org.apache.http.impl.io.HttpRequestParser:
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.io.HttpRequestWriter -> org.apache.http.impl.io.HttpRequestWriter:
    void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams) -> <init>
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
org.apache.http.impl.io.HttpResponseParser -> org.apache.http.impl.io.HttpResponseParser:
    void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.io.HttpResponseWriter -> org.apache.http.impl.io.HttpResponseWriter:
    void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams) -> <init>
    void writeHeadLine(org.apache.http.HttpMessage) -> writeHeadLine
org.apache.http.impl.io.HttpTransportMetricsImpl -> org.apache.http.impl.io.HttpTransportMetricsImpl:
    void <init>() -> <init>
    long getBytesTransferred() -> getBytesTransferred
    void setBytesTransferred(long) -> setBytesTransferred
    void incrementBytesTransferred(long) -> incrementBytesTransferred
    void reset() -> reset
org.apache.http.impl.io.IdentityInputStream -> org.apache.http.impl.io.IdentityInputStream:
    void <init>(org.apache.http.io.SessionInputBuffer) -> <init>
    int available() -> available
    void close() -> close
    int read() -> read
    int read(byte[],int,int) -> read
org.apache.http.impl.io.IdentityOutputStream -> org.apache.http.impl.io.IdentityOutputStream:
    void <init>(org.apache.http.io.SessionOutputBuffer) -> <init>
    void close() -> close
    void flush() -> flush
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
org.apache.http.impl.io.SocketInputBuffer -> org.apache.http.impl.io.SocketInputBuffer:
    void <init>(java.net.Socket,int,org.apache.http.params.HttpParams) -> <init>
    boolean isDataAvailable(int) -> isDataAvailable
    boolean isStale() -> isStale
org.apache.http.impl.io.SocketOutputBuffer -> org.apache.http.impl.io.SocketOutputBuffer:
    void <init>(java.net.Socket,int,org.apache.http.params.HttpParams) -> <init>
org.apache.http.io.HttpMessageParser -> org.apache.http.io.HttpMessageParser:
    org.apache.http.HttpMessage parse() -> parse
org.apache.http.io.HttpMessageWriter -> org.apache.http.io.HttpMessageWriter:
    void write(org.apache.http.HttpMessage) -> write
org.apache.http.io.HttpTransportMetrics -> org.apache.http.io.HttpTransportMetrics:
    long getBytesTransferred() -> getBytesTransferred
    void reset() -> reset
org.apache.http.io.SessionInputBuffer -> org.apache.http.io.SessionInputBuffer:
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int read() -> read
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    java.lang.String readLine() -> readLine
    boolean isDataAvailable(int) -> isDataAvailable
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.io.SessionOutputBuffer -> org.apache.http.io.SessionOutputBuffer:
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void writeLine(java.lang.String) -> writeLine
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    void flush() -> flush
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.message.AbstractHttpMessage -> org.apache.http.message.AbstractHttpMessage:
    org.apache.http.message.HeaderGroup headergroup -> headergroup
    org.apache.http.params.HttpParams params -> params
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void <init>() -> <init>
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    void addHeader(org.apache.http.Header) -> addHeader
    void addHeader(java.lang.String,java.lang.String) -> addHeader
    void setHeader(org.apache.http.Header) -> setHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    void removeHeader(org.apache.http.Header) -> removeHeader
    void removeHeaders(java.lang.String) -> removeHeaders
    org.apache.http.HeaderIterator headerIterator() -> headerIterator
    org.apache.http.HeaderIterator headerIterator(java.lang.String) -> headerIterator
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
org.apache.http.message.BasicHeader -> org.apache.http.message.BasicHeader:
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    org.apache.http.HeaderElement[] getElements() -> getElements
    java.lang.Object clone() -> clone
org.apache.http.message.BasicHeaderElement -> org.apache.http.message.BasicHeaderElement:
    void <init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[]) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.NameValuePair[] getParameters() -> getParameters
    int getParameterCount() -> getParameterCount
    org.apache.http.NameValuePair getParameter(int) -> getParameter
    org.apache.http.NameValuePair getParameterByName(java.lang.String) -> getParameterByName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.BasicHeaderElementIterator -> org.apache.http.message.BasicHeaderElementIterator:
    void <init>(org.apache.http.HeaderIterator,org.apache.http.message.HeaderValueParser) -> <init>
    void <init>(org.apache.http.HeaderIterator) -> <init>
    boolean hasNext() -> hasNext
    org.apache.http.HeaderElement nextElement() -> nextElement
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.http.message.BasicHeaderIterator -> org.apache.http.message.BasicHeaderIterator:
    org.apache.http.Header[] allHeaders -> allHeaders
    int currentIndex -> currentIndex
    java.lang.String headerName -> headerName
    void <init>(org.apache.http.Header[],java.lang.String) -> <init>
    int findNext(int) -> findNext
    boolean filterHeader(int) -> filterHeader
    boolean hasNext() -> hasNext
    org.apache.http.Header nextHeader() -> nextHeader
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.http.message.BasicHeaderValueFormatter -> org.apache.http.message.BasicHeaderValueFormatter:
    org.apache.http.message.BasicHeaderValueFormatter DEFAULT -> DEFAULT
    java.lang.String SEPARATORS -> SEPARATORS
    java.lang.String UNSAFE_CHARS -> UNSAFE_CHARS
    void <init>() -> <init>
    java.lang.String formatElements(org.apache.http.HeaderElement[],boolean,org.apache.http.message.HeaderValueFormatter) -> formatElements
    org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean) -> formatElements
    int estimateElementsLen(org.apache.http.HeaderElement[]) -> estimateElementsLen
    java.lang.String formatHeaderElement(org.apache.http.HeaderElement,boolean,org.apache.http.message.HeaderValueFormatter) -> formatHeaderElement
    org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean) -> formatHeaderElement
    int estimateHeaderElementLen(org.apache.http.HeaderElement) -> estimateHeaderElementLen
    java.lang.String formatParameters(org.apache.http.NameValuePair[],boolean,org.apache.http.message.HeaderValueFormatter) -> formatParameters
    org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean) -> formatParameters
    int estimateParametersLen(org.apache.http.NameValuePair[]) -> estimateParametersLen
    java.lang.String formatNameValuePair(org.apache.http.NameValuePair,boolean,org.apache.http.message.HeaderValueFormatter) -> formatNameValuePair
    org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean) -> formatNameValuePair
    int estimateNameValuePairLen(org.apache.http.NameValuePair) -> estimateNameValuePairLen
    void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean) -> doFormatValue
    boolean isSeparator(char) -> isSeparator
    boolean isUnsafe(char) -> isUnsafe
    void <clinit>() -> <clinit>
org.apache.http.message.BasicHeaderValueParser -> org.apache.http.message.BasicHeaderValueParser:
    org.apache.http.message.BasicHeaderValueParser DEFAULT -> DEFAULT
    void <init>() -> <init>
    org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseElements
    org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseElements
    org.apache.http.HeaderElement parseHeaderElement(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseHeaderElement
    org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeaderElement
    org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[]) -> createHeaderElement
    org.apache.http.NameValuePair[] parseParameters(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseParameters
    org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseParameters
    org.apache.http.NameValuePair parseNameValuePair(java.lang.String,org.apache.http.message.HeaderValueParser) -> parseNameValuePair
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseNameValuePair
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[]) -> parseNameValuePair
    org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String) -> createNameValuePair
    void <clinit>() -> <clinit>
org.apache.http.message.BasicHttpEntityEnclosingRequest -> org.apache.http.message.BasicHttpEntityEnclosingRequest:
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion) -> <init>
    void <init>(org.apache.http.RequestLine) -> <init>
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
org.apache.http.message.BasicHttpRequest -> org.apache.http.message.BasicHttpRequest:
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion) -> <init>
    void <init>(org.apache.http.RequestLine) -> <init>
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
org.apache.http.message.BasicHttpResponse -> org.apache.http.message.BasicHttpResponse:
    void <init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale) -> <init>
    void <init>(org.apache.http.StatusLine) -> <init>
    void <init>(org.apache.http.ProtocolVersion,int,java.lang.String) -> <init>
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    org.apache.http.StatusLine getStatusLine() -> getStatusLine
    org.apache.http.HttpEntity getEntity() -> getEntity
    java.util.Locale getLocale() -> getLocale
    void setStatusLine(org.apache.http.StatusLine) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int) -> setStatusLine
    void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> setStatusLine
    void setStatusCode(int) -> setStatusCode
    void setReasonPhrase(java.lang.String) -> setReasonPhrase
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    void setLocale(java.util.Locale) -> setLocale
    java.lang.String getReason(int) -> getReason
org.apache.http.message.BasicLineFormatter -> org.apache.http.message.BasicLineFormatter:
    org.apache.http.message.BasicLineFormatter DEFAULT -> DEFAULT
    void <init>() -> <init>
    org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer) -> initBuffer
    java.lang.String formatProtocolVersion(org.apache.http.ProtocolVersion,org.apache.http.message.LineFormatter) -> formatProtocolVersion
    org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion) -> appendProtocolVersion
    int estimateProtocolVersionLen(org.apache.http.ProtocolVersion) -> estimateProtocolVersionLen
    java.lang.String formatRequestLine(org.apache.http.RequestLine,org.apache.http.message.LineFormatter) -> formatRequestLine
    org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine) -> formatRequestLine
    void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine) -> doFormatRequestLine
    java.lang.String formatStatusLine(org.apache.http.StatusLine,org.apache.http.message.LineFormatter) -> formatStatusLine
    org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine) -> formatStatusLine
    void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine) -> doFormatStatusLine
    java.lang.String formatHeader(org.apache.http.Header,org.apache.http.message.LineFormatter) -> formatHeader
    org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header) -> formatHeader
    void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header) -> doFormatHeader
    void <clinit>() -> <clinit>
org.apache.http.message.BasicLineParser -> org.apache.http.message.BasicLineParser:
    org.apache.http.message.BasicLineParser DEFAULT -> DEFAULT
    org.apache.http.ProtocolVersion protocol -> protocol
    void <init>(org.apache.http.ProtocolVersion) -> <init>
    void <init>() -> <init>
    org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String,org.apache.http.message.LineParser) -> parseProtocolVersion
    org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseProtocolVersion
    org.apache.http.ProtocolVersion createProtocolVersion(int,int) -> createProtocolVersion
    boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> hasProtocolVersion
    org.apache.http.RequestLine parseRequestLine(java.lang.String,org.apache.http.message.LineParser) -> parseRequestLine
    org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseRequestLine
    org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion) -> createRequestLine
    org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser) -> parseStatusLine
    org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseStatusLine
    org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String) -> createStatusLine
    org.apache.http.Header parseHeader(java.lang.String,org.apache.http.message.LineParser) -> parseHeader
    org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) -> parseHeader
    void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> skipWhitespace
    void <clinit>() -> <clinit>
org.apache.http.message.BasicListHeaderIterator -> org.apache.http.message.BasicListHeaderIterator:
    java.util.List allHeaders -> allHeaders
    int currentIndex -> currentIndex
    java.lang.String headerName -> headerName
    int lastIndex -> lastIndex
    void <init>(java.util.List,java.lang.String) -> <init>
    int findNext(int) -> findNext
    boolean filterHeader(int) -> filterHeader
    boolean hasNext() -> hasNext
    org.apache.http.Header nextHeader() -> nextHeader
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.http.message.BasicNameValuePair -> org.apache.http.message.BasicNameValuePair:
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
org.apache.http.message.BasicRequestLine -> org.apache.http.message.BasicRequestLine:
    void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion) -> <init>
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.lang.String getUri() -> getUri
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.BasicStatusLine -> org.apache.http.message.BasicStatusLine:
    void <init>(org.apache.http.ProtocolVersion,int,java.lang.String) -> <init>
    int getStatusCode() -> getStatusCode
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.lang.String getReasonPhrase() -> getReasonPhrase
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.BasicTokenIterator -> org.apache.http.message.BasicTokenIterator:
    java.lang.String HTTP_SEPARATORS -> HTTP_SEPARATORS
    java.lang.String currentHeader -> currentHeader
    java.lang.String currentToken -> currentToken
    org.apache.http.HeaderIterator headerIt -> headerIt
    int searchPos -> searchPos
    void <init>(org.apache.http.HeaderIterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String nextToken() -> nextToken
    java.lang.Object next() -> next
    void remove() -> remove
    int findNext(int) -> findNext
    java.lang.String createToken(java.lang.String,int,int) -> createToken
    int findTokenStart(int) -> findTokenStart
    int findTokenSeparator(int) -> findTokenSeparator
    int findTokenEnd(int) -> findTokenEnd
    boolean isTokenSeparator(char) -> isTokenSeparator
    boolean isWhitespace(char) -> isWhitespace
    boolean isTokenChar(char) -> isTokenChar
    boolean isHttpSeparator(char) -> isHttpSeparator
org.apache.http.message.BufferedHeader -> org.apache.http.message.BufferedHeader:
    void <init>(org.apache.http.util.CharArrayBuffer) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    org.apache.http.HeaderElement[] getElements() -> getElements
    int getValuePos() -> getValuePos
    org.apache.http.util.CharArrayBuffer getBuffer() -> getBuffer
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.message.HeaderGroup -> org.apache.http.message.HeaderGroup:
    void <init>() -> <init>
    void clear() -> clear
    void addHeader(org.apache.http.Header) -> addHeader
    void removeHeader(org.apache.http.Header) -> removeHeader
    void updateHeader(org.apache.http.Header) -> updateHeader
    void setHeaders(org.apache.http.Header[]) -> setHeaders
    org.apache.http.Header getCondensedHeader(java.lang.String) -> getCondensedHeader
    org.apache.http.Header[] getHeaders(java.lang.String) -> getHeaders
    org.apache.http.Header getFirstHeader(java.lang.String) -> getFirstHeader
    org.apache.http.Header getLastHeader(java.lang.String) -> getLastHeader
    org.apache.http.Header[] getAllHeaders() -> getAllHeaders
    boolean containsHeader(java.lang.String) -> containsHeader
    org.apache.http.HeaderIterator iterator() -> iterator
    org.apache.http.HeaderIterator iterator(java.lang.String) -> iterator
    org.apache.http.message.HeaderGroup copy() -> copy
    java.lang.Object clone() -> clone
org.apache.http.message.HeaderValueFormatter -> org.apache.http.message.HeaderValueFormatter:
    org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean) -> formatElements
    org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean) -> formatHeaderElement
    org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean) -> formatParameters
    org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean) -> formatNameValuePair
org.apache.http.message.HeaderValueParser -> org.apache.http.message.HeaderValueParser:
    org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseElements
    org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeaderElement
    org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseParameters
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseNameValuePair
org.apache.http.message.LineFormatter -> org.apache.http.message.LineFormatter:
    org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion) -> appendProtocolVersion
    org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine) -> formatRequestLine
    org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine) -> formatStatusLine
    org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header) -> formatHeader
org.apache.http.message.LineParser -> org.apache.http.message.LineParser:
    org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseProtocolVersion
    boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> hasProtocolVersion
    org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseRequestLine
    org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseStatusLine
    org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) -> parseHeader
org.apache.http.message.ParserCursor -> org.apache.http.message.ParserCursor:
    void <init>(int,int) -> <init>
    int getLowerBound() -> getLowerBound
    int getUpperBound() -> getUpperBound
    int getPos() -> getPos
    void updatePos(int) -> updatePos
    boolean atEnd() -> atEnd
    java.lang.String toString() -> toString
org.apache.http.params.AbstractHttpParams -> org.apache.http.params.AbstractHttpParams:
    void <init>() -> <init>
    long getLongParameter(java.lang.String,long) -> getLongParameter
    org.apache.http.params.HttpParams setLongParameter(java.lang.String,long) -> setLongParameter
    int getIntParameter(java.lang.String,int) -> getIntParameter
    org.apache.http.params.HttpParams setIntParameter(java.lang.String,int) -> setIntParameter
    double getDoubleParameter(java.lang.String,double) -> getDoubleParameter
    org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double) -> setDoubleParameter
    boolean getBooleanParameter(java.lang.String,boolean) -> getBooleanParameter
    org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean) -> setBooleanParameter
    boolean isParameterTrue(java.lang.String) -> isParameterTrue
    boolean isParameterFalse(java.lang.String) -> isParameterFalse
org.apache.http.params.BasicHttpParams -> org.apache.http.params.BasicHttpParams:
    void <init>() -> <init>
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    void setParameters(java.lang.String[],java.lang.Object) -> setParameters
    boolean isParameterSet(java.lang.String) -> isParameterSet
    boolean isParameterSetLocally(java.lang.String) -> isParameterSetLocally
    void clear() -> clear
    org.apache.http.params.HttpParams copy() -> copy
    java.lang.Object clone() -> clone
    void copyParams(org.apache.http.params.HttpParams) -> copyParams
org.apache.http.params.CoreProtocolPNames -> org.apache.http.params.CoreProtocolPNames:
    java.lang.String HTTP_CONTENT_CHARSET -> HTTP_CONTENT_CHARSET
    java.lang.String HTTP_ELEMENT_CHARSET -> HTTP_ELEMENT_CHARSET
    java.lang.String ORIGIN_SERVER -> ORIGIN_SERVER
    java.lang.String PROTOCOL_VERSION -> PROTOCOL_VERSION
    java.lang.String STRICT_TRANSFER_ENCODING -> STRICT_TRANSFER_ENCODING
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String USE_EXPECT_CONTINUE -> USE_EXPECT_CONTINUE
    java.lang.String WAIT_FOR_CONTINUE -> WAIT_FOR_CONTINUE
org.apache.http.params.DefaultedHttpParams -> org.apache.http.params.DefaultedHttpParams:
    void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams) -> <init>
    org.apache.http.params.HttpParams copy() -> copy
    java.lang.Object getParameter(java.lang.String) -> getParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    org.apache.http.params.HttpParams getDefaults() -> getDefaults
org.apache.http.params.HttpAbstractParamBean -> org.apache.http.params.HttpAbstractParamBean:
    org.apache.http.params.HttpParams params -> params
    void <init>(org.apache.http.params.HttpParams) -> <init>
org.apache.http.params.HttpConnectionParamBean -> org.apache.http.params.HttpConnectionParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setSoTimeout(int) -> setSoTimeout
    void setTcpNoDelay(boolean) -> setTcpNoDelay
    void setSocketBufferSize(int) -> setSocketBufferSize
    void setLinger(int) -> setLinger
    void setConnectionTimeout(int) -> setConnectionTimeout
    void setStaleCheckingEnabled(boolean) -> setStaleCheckingEnabled
org.apache.http.params.HttpParams -> org.apache.http.params.HttpParams:
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    org.apache.http.params.HttpParams copy() -> copy
    boolean removeParameter(java.lang.String) -> removeParameter
    long getLongParameter(java.lang.String,long) -> getLongParameter
    org.apache.http.params.HttpParams setLongParameter(java.lang.String,long) -> setLongParameter
    int getIntParameter(java.lang.String,int) -> getIntParameter
    org.apache.http.params.HttpParams setIntParameter(java.lang.String,int) -> setIntParameter
    double getDoubleParameter(java.lang.String,double) -> getDoubleParameter
    org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double) -> setDoubleParameter
    boolean getBooleanParameter(java.lang.String,boolean) -> getBooleanParameter
    org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean) -> setBooleanParameter
    boolean isParameterTrue(java.lang.String) -> isParameterTrue
    boolean isParameterFalse(java.lang.String) -> isParameterFalse
org.apache.http.params.HttpProtocolParamBean -> org.apache.http.params.HttpProtocolParamBean:
    void <init>(org.apache.http.params.HttpParams) -> <init>
    void setHttpElementCharset(java.lang.String) -> setHttpElementCharset
    void setContentCharset(java.lang.String) -> setContentCharset
    void setVersion(org.apache.http.HttpVersion) -> setVersion
    void setUserAgent(java.lang.String) -> setUserAgent
    void setUseExpectContinue(boolean) -> setUseExpectContinue
org.apache.http.params.HttpProtocolParams -> org.apache.http.params.HttpProtocolParams:
    void <init>() -> <init>
    java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams) -> getHttpElementCharset
    void setHttpElementCharset(org.apache.http.params.HttpParams,java.lang.String) -> setHttpElementCharset
    java.lang.String getContentCharset(org.apache.http.params.HttpParams) -> getContentCharset
    void setContentCharset(org.apache.http.params.HttpParams,java.lang.String) -> setContentCharset
    org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams) -> getVersion
    void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion) -> setVersion
    java.lang.String getUserAgent(org.apache.http.params.HttpParams) -> getUserAgent
    void setUserAgent(org.apache.http.params.HttpParams,java.lang.String) -> setUserAgent
    boolean useExpectContinue(org.apache.http.params.HttpParams) -> useExpectContinue
    void setUseExpectContinue(org.apache.http.params.HttpParams,boolean) -> setUseExpectContinue
org.apache.http.protocol.BasicHttpContext -> org.apache.http.protocol.BasicHttpContext:
    void <init>() -> <init>
    void <init>(org.apache.http.protocol.HttpContext) -> <init>
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
org.apache.http.protocol.BasicHttpProcessor -> org.apache.http.protocol.BasicHttpProcessor:
    java.util.List requestInterceptors -> requestInterceptors
    java.util.List responseInterceptors -> responseInterceptors
    void <init>() -> <init>
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void addInterceptor(org.apache.http.HttpRequestInterceptor) -> addInterceptor
    void addInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    void clearRequestInterceptors() -> clearRequestInterceptors
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addInterceptor(org.apache.http.HttpResponseInterceptor) -> addInterceptor
    void addInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addInterceptor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    void clearResponseInterceptors() -> clearResponseInterceptors
    void setInterceptors(java.util.List) -> setInterceptors
    void clearInterceptors() -> clearInterceptors
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
    void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor) -> copyInterceptors
    org.apache.http.protocol.BasicHttpProcessor copy() -> copy
    java.lang.Object clone() -> clone
org.apache.http.protocol.DefaultedHttpContext -> org.apache.http.protocol.DefaultedHttpContext:
    void <init>(org.apache.http.protocol.HttpContext,org.apache.http.protocol.HttpContext) -> <init>
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    org.apache.http.protocol.HttpContext getDefaults() -> getDefaults
org.apache.http.protocol.ExecutionContext -> org.apache.http.protocol.ExecutionContext:
    java.lang.String HTTP_CONNECTION -> HTTP_CONNECTION
    java.lang.String HTTP_PROXY_HOST -> HTTP_PROXY_HOST
    java.lang.String HTTP_REQUEST -> HTTP_REQUEST
    java.lang.String HTTP_REQ_SENT -> HTTP_REQ_SENT
    java.lang.String HTTP_RESPONSE -> HTTP_RESPONSE
    java.lang.String HTTP_TARGET_HOST -> HTTP_TARGET_HOST
org.apache.http.protocol.HTTP -> org.apache.http.protocol.HTTP:
    java.lang.String ASCII -> ASCII
    java.lang.String CHARSET_PARAM -> CHARSET_PARAM
    java.lang.String CHUNK_CODING -> CHUNK_CODING
    java.lang.String CONN_CLOSE -> CONN_CLOSE
    java.lang.String CONN_DIRECTIVE -> CONN_DIRECTIVE
    java.lang.String CONN_KEEP_ALIVE -> CONN_KEEP_ALIVE
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LEN -> CONTENT_LEN
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    int CR -> CR
    java.lang.String DATE_HEADER -> DATE_HEADER
    java.lang.String DEFAULT_CONTENT_CHARSET -> DEFAULT_CONTENT_CHARSET
    java.lang.String DEFAULT_CONTENT_TYPE -> DEFAULT_CONTENT_TYPE
    java.lang.String DEFAULT_PROTOCOL_CHARSET -> DEFAULT_PROTOCOL_CHARSET
    java.lang.String EXPECT_CONTINUE -> EXPECT_CONTINUE
    java.lang.String EXPECT_DIRECTIVE -> EXPECT_DIRECTIVE
    int HT -> HT
    java.lang.String IDENTITY_CODING -> IDENTITY_CODING
    java.lang.String ISO_8859_1 -> ISO_8859_1
    int LF -> LF
    java.lang.String OCTET_STREAM_TYPE -> OCTET_STREAM_TYPE
    java.lang.String PLAIN_TEXT_TYPE -> PLAIN_TEXT_TYPE
    java.lang.String SERVER_HEADER -> SERVER_HEADER
    int SP -> SP
    java.lang.String TARGET_HOST -> TARGET_HOST
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String US_ASCII -> US_ASCII
    java.lang.String UTF_16 -> UTF_16
    java.lang.String UTF_8 -> UTF_8
    void <init>() -> <init>
    boolean isWhitespace(char) -> isWhitespace
org.apache.http.protocol.HttpContext -> org.apache.http.protocol.HttpContext:
    java.lang.String RESERVED_PREFIX -> RESERVED_PREFIX
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
org.apache.http.protocol.HttpDateGenerator -> org.apache.http.protocol.HttpDateGenerator:
    java.util.TimeZone GMT -> GMT
    java.lang.String PATTERN_RFC1123 -> PATTERN_RFC1123
    void <init>() -> <init>
    java.lang.String getCurrentDate() -> getCurrentDate
    void <clinit>() -> <clinit>
org.apache.http.protocol.HttpExpectationVerifier -> org.apache.http.protocol.HttpExpectationVerifier:
    void verify(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> verify
org.apache.http.protocol.HttpProcessor -> org.apache.http.protocol.HttpProcessor:
org.apache.http.protocol.HttpRequestExecutor -> org.apache.http.protocol.HttpRequestExecutor:
    void <init>() -> <init>
    boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse) -> canResponseHaveBody
    org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext) -> execute
    void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext) -> preProcess
    org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext) -> doSendRequest
    org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext) -> doReceiveResponse
    void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext) -> postProcess
org.apache.http.protocol.HttpRequestHandler -> org.apache.http.protocol.HttpRequestHandler:
    void handle(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> handle
org.apache.http.protocol.HttpRequestHandlerRegistry -> org.apache.http.protocol.HttpRequestHandlerRegistry:
    void <init>() -> <init>
    void register(java.lang.String,org.apache.http.protocol.HttpRequestHandler) -> register
    void unregister(java.lang.String) -> unregister
    void setHandlers(java.util.Map) -> setHandlers
    org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String) -> lookup
    boolean matchUriRequestPattern(java.lang.String,java.lang.String) -> matchUriRequestPattern
org.apache.http.protocol.HttpRequestHandlerResolver -> org.apache.http.protocol.HttpRequestHandlerResolver:
    org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String) -> lookup
org.apache.http.protocol.HttpRequestInterceptorList -> org.apache.http.protocol.HttpRequestInterceptorList:
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    void clearRequestInterceptors() -> clearRequestInterceptors
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    void setInterceptors(java.util.List) -> setInterceptors
org.apache.http.protocol.HttpResponseInterceptorList -> org.apache.http.protocol.HttpResponseInterceptorList:
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    void clearResponseInterceptors() -> clearResponseInterceptors
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void setInterceptors(java.util.List) -> setInterceptors
org.apache.http.protocol.HttpService -> org.apache.http.protocol.HttpService:
    void <init>(org.apache.http.protocol.HttpProcessor,org.apache.http.ConnectionReuseStrategy,org.apache.http.HttpResponseFactory) -> <init>
    void setHttpProcessor(org.apache.http.protocol.HttpProcessor) -> setHttpProcessor
    void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy) -> setConnReuseStrategy
    void setResponseFactory(org.apache.http.HttpResponseFactory) -> setResponseFactory
    void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver) -> setHandlerResolver
    void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier) -> setExpectationVerifier
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
    void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext) -> handleRequest
    void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse) -> handleException
    void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> doService
org.apache.http.protocol.RequestConnControl -> org.apache.http.protocol.RequestConnControl:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestContent -> org.apache.http.protocol.RequestContent:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestDate -> org.apache.http.protocol.RequestDate:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestExpectContinue -> org.apache.http.protocol.RequestExpectContinue:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestTargetHost -> org.apache.http.protocol.RequestTargetHost:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.RequestUserAgent -> org.apache.http.protocol.RequestUserAgent:
    void <init>() -> <init>
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseConnControl -> org.apache.http.protocol.ResponseConnControl:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseContent -> org.apache.http.protocol.ResponseContent:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseDate -> org.apache.http.protocol.ResponseDate:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.ResponseServer -> org.apache.http.protocol.ResponseServer:
    void <init>() -> <init>
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.protocol.SyncBasicHttpContext -> org.apache.http.protocol.SyncBasicHttpContext:
    void <init>(org.apache.http.protocol.HttpContext) -> <init>
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
org.apache.http.protocol.UriPatternMatcher -> org.apache.http.protocol.UriPatternMatcher:
    void <init>() -> <init>
    void register(java.lang.String,java.lang.Object) -> register
    void unregister(java.lang.String) -> unregister
    void setHandlers(java.util.Map) -> setHandlers
    java.lang.Object lookup(java.lang.String) -> lookup
    boolean matchUriRequestPattern(java.lang.String,java.lang.String) -> matchUriRequestPattern
org.apache.http.util.ByteArrayBuffer -> org.apache.http.util.ByteArrayBuffer:
    void <init>(int) -> <init>
    void append(byte[],int,int) -> append
    void append(int) -> append
    void append(char[],int,int) -> append
    void append(org.apache.http.util.CharArrayBuffer,int,int) -> append
    void clear() -> clear
    byte[] toByteArray() -> toByteArray
    int byteAt(int) -> byteAt
    int capacity() -> capacity
    int length() -> length
    byte[] buffer() -> buffer
    void setLength(int) -> setLength
    boolean isEmpty() -> isEmpty
    boolean isFull() -> isFull
org.apache.http.util.CharArrayBuffer -> org.apache.http.util.CharArrayBuffer:
    void <init>(int) -> <init>
    void append(char[],int,int) -> append
    void append(java.lang.String) -> append
    void append(org.apache.http.util.CharArrayBuffer,int,int) -> append
    void append(org.apache.http.util.CharArrayBuffer) -> append
    void append(char) -> append
    void append(byte[],int,int) -> append
    void append(org.apache.http.util.ByteArrayBuffer,int,int) -> append
    void append(java.lang.Object) -> append
    void clear() -> clear
    char[] toCharArray() -> toCharArray
    char charAt(int) -> charAt
    char[] buffer() -> buffer
    int capacity() -> capacity
    int length() -> length
    void ensureCapacity(int) -> ensureCapacity
    void setLength(int) -> setLength
    boolean isEmpty() -> isEmpty
    boolean isFull() -> isFull
    int indexOf(int,int,int) -> indexOf
    int indexOf(int) -> indexOf
    java.lang.String substring(int,int) -> substring
    java.lang.String substringTrimmed(int,int) -> substringTrimmed
    java.lang.String toString() -> toString
org.apache.http.util.EncodingUtils -> org.apache.http.util.EncodingUtils:
    void <init>() -> <init>
    java.lang.String getString(byte[],int,int,java.lang.String) -> getString
    java.lang.String getString(byte[],java.lang.String) -> getString
    byte[] getBytes(java.lang.String,java.lang.String) -> getBytes
    byte[] getAsciiBytes(java.lang.String) -> getAsciiBytes
    java.lang.String getAsciiString(byte[],int,int) -> getAsciiString
    java.lang.String getAsciiString(byte[]) -> getAsciiString
org.apache.http.util.EntityUtils -> org.apache.http.util.EntityUtils:
    void <init>() -> <init>
    byte[] toByteArray(org.apache.http.HttpEntity) -> toByteArray
    java.lang.String getContentCharSet(org.apache.http.HttpEntity) -> getContentCharSet
    java.lang.String toString(org.apache.http.HttpEntity,java.lang.String) -> toString
    java.lang.String toString(org.apache.http.HttpEntity) -> toString
org.apache.http.util.ExceptionUtils -> org.apache.http.util.ExceptionUtils:
    void <init>() -> <init>
    void initCause(java.lang.Throwable,java.lang.Throwable) -> initCause
org.apache.http.util.LangUtils -> org.apache.http.util.LangUtils:
    int HASH_OFFSET -> HASH_OFFSET
    int HASH_SEED -> HASH_SEED
    void <init>() -> <init>
    int hashCode(int,int) -> hashCode
    int hashCode(int,boolean) -> hashCode
    int hashCode(int,java.lang.Object) -> hashCode
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    boolean equals(java.lang.Object[],java.lang.Object[]) -> equals
org.apache.http.util.VersionInfo -> org.apache.http.util.VersionInfo:
    java.lang.String PROPERTY_MODULE -> PROPERTY_MODULE
    java.lang.String PROPERTY_RELEASE -> PROPERTY_RELEASE
    java.lang.String PROPERTY_TIMESTAMP -> PROPERTY_TIMESTAMP
    java.lang.String UNAVAILABLE -> UNAVAILABLE
    java.lang.String VERSION_PROPERTY_FILE -> VERSION_PROPERTY_FILE
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getPackage() -> getPackage
    java.lang.String getModule() -> getModule
    java.lang.String getRelease() -> getRelease
    java.lang.String getTimestamp() -> getTimestamp
    java.lang.String getClassloader() -> getClassloader
    java.lang.String toString() -> toString
    org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[],java.lang.ClassLoader) -> loadVersionInfo
    org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader) -> loadVersionInfo
    org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader) -> fromMap
rx.Notification -> b.a:
    rx.Notification$Kind kind -> a
    java.lang.Throwable throwable -> b
    java.lang.Object value -> c
    rx.Notification ON_COMPLETED -> d
    rx.Notification createOnNext$2cfc1172() -> a
    rx.Notification createOnError(java.lang.Throwable) -> a
    rx.Notification createOnCompleted() -> b
    void <init>(rx.Notification$Kind,java.lang.Throwable) -> <init>
    boolean hasValue() -> d
    boolean hasThrowable() -> e
    boolean isOnError() -> c
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
rx.Notification$Kind -> b.b:
    rx.Notification$Kind OnNext -> a
    rx.Notification$Kind OnError -> b
    rx.Notification$Kind OnCompleted -> c
    rx.Notification$Kind[] $VALUES -> d
    rx.Notification$Kind[] values() -> values
    rx.Notification$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
rx.Observable -> b.c:
    rx.Observable$OnSubscribe onSubscribe -> a
    rx.plugins.RxJavaObservableExecutionHook hook -> b
    void <init>(rx.Observable$OnSubscribe) -> <init>
    rx.Observable create(rx.Observable$OnSubscribe) -> a
    rx.Observable lift(rx.Observable$Operator) -> a
    rx.Observable compose(rx.Observable$Transformer) -> a
    rx.Observable combineLatest(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func6) -> a
    rx.Observable combineLatest(rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.Observable,rx.functions.Func7) -> a
    rx.Observable combineLatest(java.util.List,rx.functions.FuncN) -> a
    rx.Observable empty() -> a
    rx.Observable error(java.lang.Throwable) -> a
    rx.Observable merge(rx.Observable) -> a
    rx.Observable merge(rx.Observable,rx.Observable) -> a
    rx.Observable timer(long,java.util.concurrent.TimeUnit) -> a
    rx.Observable asObservable() -> b
    rx.Observable concatMap(rx.functions.Func1) -> a
    rx.Observable map(rx.functions.Func1) -> b
    rx.Observable onErrorResumeNext(rx.functions.Func1) -> c
    rx.Subscription subscribe(rx.Observer) -> a
    rx.Subscription unsafeSubscribe(rx.Subscriber) -> a
    rx.Subscription subscribe(rx.Subscriber,rx.Observable) -> a
    rx.Observable subscribeOn(rx.Scheduler) -> a
    void <clinit>() -> <clinit>
rx.Observable$OnSubscribe -> b.d:
rx.Observable$Operator -> b.e:
rx.Observable$Transformer -> b.f:
rx.Observer -> b.g:
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
rx.Producer -> b.h:
    void request(long) -> a
rx.Scheduler -> b.i:
    long CLOCK_DRIFT_TOLERANCE_NANOS -> a
    void <init>() -> <init>
    rx.Scheduler$Worker createWorker() -> a
    long now() -> b
    void <clinit>() -> <clinit>
rx.Scheduler$Worker -> b.j:
    void <init>() -> <init>
    rx.Subscription schedule(rx.functions.Action0) -> a
    rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit) -> a
rx.Subscriber -> b.k:
    long NOT_SET -> NOT_SET
    rx.internal.util.SubscriptionList subscriptions -> subscriptions
    rx.Subscriber subscriber -> subscriber
    rx.Producer producer -> producer
    long requested -> requested
    void <init>() -> <init>
    void <init>(rx.Subscriber) -> <init>
    void <init>(rx.Subscriber,boolean) -> <init>
    void add(rx.Subscription) -> add
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
    void onStart() -> onStart
    void request(long) -> request
    void addToRequested(long) -> addToRequested
    void setProducer(rx.Producer) -> setProducer
rx.Subscription -> b.l:
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
rx.android.plugins.RxAndroidPlugins -> b.a.a.a:
    rx.android.plugins.RxAndroidPlugins INSTANCE -> a
    java.util.concurrent.atomic.AtomicReference schedulersHook -> b
    rx.android.plugins.RxAndroidPlugins getInstance() -> a
    void <init>() -> <init>
    rx.android.plugins.RxAndroidSchedulersHook getSchedulersHook() -> b
    void <clinit>() -> <clinit>
rx.android.plugins.RxAndroidSchedulersHook -> b.a.a.b:
    rx.android.plugins.RxAndroidSchedulersHook DEFAULT_INSTANCE -> a
    void <init>() -> <init>
    rx.android.plugins.RxAndroidSchedulersHook getDefaultInstance() -> a
    rx.Scheduler getMainThreadScheduler() -> b
    rx.functions.Action0 onSchedule(rx.functions.Action0) -> a
    void <clinit>() -> <clinit>
rx.android.schedulers.AndroidSchedulers -> b.a.b.a:
    rx.android.schedulers.AndroidSchedulers INSTANCE -> a
    rx.Scheduler mainThreadScheduler -> b
    void <init>() -> <init>
    rx.Scheduler mainThread() -> a
    void <clinit>() -> <clinit>
rx.android.schedulers.LooperScheduler -> b.a.b.b:
    android.os.Handler handler -> b
    void <init>(android.os.Looper) -> <init>
    rx.Scheduler$Worker createWorker() -> a
rx.android.schedulers.LooperScheduler$HandlerWorker -> b.a.b.c:
    android.os.Handler handler -> a
    rx.android.plugins.RxAndroidSchedulersHook hook -> b
    boolean unsubscribed -> c
    void <init>(android.os.Handler) -> <init>
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
    rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit) -> a
    rx.Subscription schedule(rx.functions.Action0) -> a
rx.android.schedulers.LooperScheduler$ScheduledAction -> b.a.b.d:
    rx.functions.Action0 action -> a
    android.os.Handler handler -> b
    boolean unsubscribed -> c
    void <init>(rx.functions.Action0,android.os.Handler) -> <init>
    void run() -> run
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
rx.exceptions.CompositeException -> b.b.a:
    java.util.List exceptions -> a
    java.lang.String message -> b
    java.lang.Throwable cause -> c
    void <init>(java.util.Collection) -> <init>
    void <init>(java.util.Collection,byte) -> <init>
    void <init>(java.lang.Throwable[]) -> <init>
    java.lang.String getMessage() -> getMessage
    java.lang.Throwable getCause() -> getCause
    void printStackTrace() -> printStackTrace
    void printStackTrace(java.io.PrintStream) -> printStackTrace
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
    void printStackTrace(rx.exceptions.CompositeException$PrintStreamOrWriter) -> a
    void appendStackTrace(java.lang.StringBuilder,java.lang.Throwable,java.lang.String) -> a
    java.util.List getListOfCauses(java.lang.Throwable) -> a
    java.lang.Throwable getRootCause(java.lang.Throwable) -> b
rx.exceptions.CompositeException$CompositeExceptionCausalChain -> b.b.b:
    java.lang.String MESSAGE -> a
    void <init>() -> <init>
    java.lang.String getMessage() -> getMessage
    void <clinit>() -> <clinit>
rx.exceptions.CompositeException$PrintStreamOrWriter -> b.b.c:
    void <init>() -> <init>
    java.lang.Object lock() -> a
    void println(java.lang.Object) -> a
    void <init>(byte) -> <init>
rx.exceptions.CompositeException$WrappedPrintStream -> b.b.d:
    java.io.PrintStream printStream -> a
    void <init>(java.io.PrintStream) -> <init>
    java.lang.Object lock() -> a
    void println(java.lang.Object) -> a
rx.exceptions.CompositeException$WrappedPrintWriter -> b.b.e:
    java.io.PrintWriter printWriter -> a
    void <init>(java.io.PrintWriter) -> <init>
    java.lang.Object lock() -> a
    void println(java.lang.Object) -> a
rx.exceptions.Exceptions -> b.b.f:
    java.lang.RuntimeException propagate(java.lang.Throwable) -> a
    void throwIfFatal(java.lang.Throwable) -> b
    void addCause(java.lang.Throwable,java.lang.Throwable) -> a
    java.lang.Throwable getFinalCause(java.lang.Throwable) -> c
    void throwIfAny(java.util.List) -> a
    void throwOrReport(java.lang.Throwable,rx.Observer,java.lang.Object) -> a
    void throwOrReport(java.lang.Throwable,rx.Observer) -> a
rx.exceptions.MissingBackpressureException -> b.b.g:
    void <init>() -> <init>
rx.exceptions.OnCompletedFailedException -> b.b.h:
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
rx.exceptions.OnErrorFailedException -> b.b.i:
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
rx.exceptions.OnErrorNotImplementedException -> b.b.j:
    void <init>(java.lang.Throwable) -> <init>
rx.exceptions.OnErrorThrowable -> b.b.k:
    java.lang.Throwable addValueAsLastCause(java.lang.Throwable,java.lang.Object) -> a
rx.exceptions.OnErrorThrowable$OnNextValue -> b.b.l:
    java.lang.Object value -> a
    void <init>(java.lang.Object) -> <init>
rx.exceptions.OnErrorThrowable$OnNextValue$Primitives -> b.b.m:
    java.util.Set INSTANCE -> a
    void <clinit>() -> <clinit>
rx.exceptions.UnsubscribeFailedException -> b.b.n:
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
rx.functions.Action0 -> b.c.a:
    void call() -> call
rx.functions.Action1 -> b.c.b:
    void call(java.lang.Object) -> call
rx.functions.Actions -> b.c.c:
    rx.functions.Actions$EmptyAction EMPTY_ACTION -> a
    rx.functions.Actions$EmptyAction empty() -> a
    void <clinit>() -> <clinit>
rx.functions.Actions$EmptyAction -> b.c.d:
    void <init>() -> <init>
    void call() -> call
    void call(java.lang.Object) -> call
rx.functions.Func0 -> b.c.e:
rx.functions.Func1 -> b.c.f:
    java.lang.Object call(java.lang.Object) -> call
rx.functions.Func6 -> b.c.g:
    java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> call
rx.functions.Func7 -> b.c.h:
    java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> call
rx.functions.FuncN -> b.c.i:
    java.lang.Object call(java.lang.Object[]) -> a
rx.functions.Functions -> b.c.j:
rx.functions.Functions$7 -> b.c.k:
    rx.functions.Func6 val$f -> a
    void <init>(rx.functions.Func6) -> <init>
    java.lang.Object call(java.lang.Object[]) -> a
rx.functions.Functions$8 -> b.c.l:
    rx.functions.Func7 val$f -> a
    void <init>(rx.functions.Func7) -> <init>
    java.lang.Object call(java.lang.Object[]) -> a
rx.internal.operators.BackpressureUtils -> b.d.a.a:
    long getAndAddRequest(java.util.concurrent.atomic.AtomicLong,long) -> a
rx.internal.operators.EmptyObservableHolder -> b.d.a.b:
    rx.internal.operators.EmptyObservableHolder INSTANCE -> a
    rx.Observable EMPTY -> b
    rx.internal.operators.EmptyObservableHolder[] $VALUES -> c
    rx.internal.operators.EmptyObservableHolder[] values() -> values
    rx.internal.operators.EmptyObservableHolder valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    rx.Observable instance() -> a
    void call(java.lang.Object) -> call
    void <clinit>() -> <clinit>
rx.internal.operators.NotificationLite -> b.d.a.c:
    rx.internal.operators.NotificationLite INSTANCE -> a
    java.lang.Object ON_COMPLETED_SENTINEL -> b
    java.lang.Object ON_NEXT_NULL_SENTINEL -> c
    void <init>() -> <init>
    rx.internal.operators.NotificationLite instance() -> a
    java.lang.Object next(java.lang.Object) -> a
    java.lang.Object completed() -> b
    java.lang.Object error(java.lang.Throwable) -> a
    boolean accept(rx.Observer,java.lang.Object) -> a
    java.lang.Object getValue(java.lang.Object) -> b
    void <clinit>() -> <clinit>
rx.internal.operators.NotificationLite$1 -> b.d.a.d:
    void <init>() -> <init>
    java.lang.String toString() -> toString
rx.internal.operators.NotificationLite$2 -> b.d.a.e:
    void <init>() -> <init>
    java.lang.String toString() -> toString
rx.internal.operators.NotificationLite$OnErrorSentinel -> b.d.a.f:
    java.lang.Throwable e -> a
    void <init>(java.lang.Throwable) -> <init>
    java.lang.String toString() -> toString
rx.internal.operators.OnSubscribeCombineLatest -> b.d.a.g:
    rx.Observable[] sources -> a
    java.lang.Iterable sourcesIterable -> b
    rx.functions.FuncN combiner -> c
    int bufferSize -> d
    boolean delayError -> e
    void <init>(java.lang.Iterable,rx.functions.FuncN) -> <init>
    void <init>(java.lang.Iterable,rx.functions.FuncN,int) -> <init>
    void call(java.lang.Object) -> call
rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber -> b.d.a.h:
    rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator parent -> a
    int index -> b
    rx.internal.operators.NotificationLite nl -> c
    boolean done -> d
    void <init>(rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator,int) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
    void requestMore$1349ef() -> a
rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator -> b.d.a.i:
    rx.Subscriber actual -> a
    rx.functions.FuncN combiner -> b
    int count -> c
    rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber[] subscribers -> d
    int bufferSize -> e
    java.lang.Object[] latest -> f
    rx.internal.util.atomic.SpscLinkedArrayQueue queue -> g
    boolean delayError -> h
    boolean cancelled -> i
    boolean done -> j
    java.util.concurrent.atomic.AtomicLong requested -> k
    java.util.concurrent.atomic.AtomicReference error -> l
    int active -> m
    int complete -> n
    java.lang.Object MISSING -> o
    void <init>(rx.Subscriber,rx.functions.FuncN,int,int,boolean) -> <init>
    void request(long) -> a
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
    void cancel(java.util.Queue) -> a
    void combine(java.lang.Object,int) -> a
    void drain() -> a
    boolean checkTerminated(boolean,boolean,rx.Subscriber,java.util.Queue,boolean) -> a
    void <clinit>() -> <clinit>
rx.internal.operators.OnSubscribeConcatMap -> b.d.a.j:
    rx.Observable source -> a
    rx.functions.Func1 mapper -> b
    int prefetch -> c
    int delayErrorMode -> d
    void <init>(rx.Observable,rx.functions.Func1) -> <init>
    void call(java.lang.Object) -> call
rx.internal.operators.OnSubscribeConcatMap$1 -> b.d.a.k:
    rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber val$parent -> a
    rx.internal.operators.OnSubscribeConcatMap this$0 -> b
    void <init>(rx.internal.operators.OnSubscribeConcatMap,rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber) -> <init>
    void request(long) -> a
rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerScalarProducer -> b.d.a.l:
    java.lang.Object value -> a
    rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber parent -> b
    boolean once -> c
    void <init>(java.lang.Object,rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber) -> <init>
    void request(long) -> a
rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerSubscriber -> b.d.a.m:
    rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber parent -> a
    long produced -> b
    void <init>(rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber) -> <init>
    void setProducer(rx.Producer) -> setProducer
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber -> b.d.a.n:
    rx.Subscriber actual -> a
    rx.functions.Func1 mapper -> b
    int delayErrorMode -> c
    rx.internal.producers.ProducerArbiter arbiter -> d
    java.util.Queue queue -> e
    java.util.concurrent.atomic.AtomicInteger wip -> f
    java.util.concurrent.atomic.AtomicReference error -> g
    rx.subscriptions.SerialSubscription inner -> h
    boolean done -> i
    boolean active -> j
    void <init>(rx.Subscriber,rx.functions.Func1,int,int) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
    void innerNext(java.lang.Object) -> a
    void innerCompleted(long) -> a
    void drain() -> a
    void drainError(java.lang.Throwable) -> a
rx.internal.operators.OnSubscribeFromArray -> b.d.a.o:
    java.lang.Object[] array -> a
    void <init>(java.lang.Object[]) -> <init>
    void call(java.lang.Object) -> call
rx.internal.operators.OnSubscribeFromArray$FromArrayProducer -> b.d.a.p:
    rx.Subscriber child -> a
    java.lang.Object[] array -> b
    int index -> c
    void <init>(rx.Subscriber,java.lang.Object[]) -> <init>
    void request(long) -> a
    void fastPath() -> a
    void slowPath(long) -> b
rx.internal.operators.OnSubscribeLift -> b.d.a.q:
    rx.plugins.RxJavaObservableExecutionHook hook -> a
    rx.Observable$OnSubscribe parent -> b
    rx.Observable$Operator operator -> c
    void <init>(rx.Observable$OnSubscribe,rx.Observable$Operator) -> <init>
    void call(java.lang.Object) -> call
    void <clinit>() -> <clinit>
rx.internal.operators.OnSubscribeRedo -> b.d.a.r:
    rx.functions.Func1 REDO_INFINITE -> a
    rx.Observable source -> b
    rx.functions.Func1 controlHandlerFunction -> e
    boolean stopOnComplete -> c
    boolean stopOnError -> d
    rx.Scheduler scheduler -> f
    rx.Observable retry(rx.Observable,rx.functions.Func1) -> a
    void <init>(rx.Observable,rx.functions.Func1,rx.Scheduler) -> <init>
    void call(java.lang.Object) -> call
    void <clinit>() -> <clinit>
rx.internal.operators.OnSubscribeRedo$1 -> b.d.a.s:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OnSubscribeRedo$1$1 -> b.d.a.t:
    rx.internal.operators.OnSubscribeRedo$1 this$0 -> a
    void <init>(rx.internal.operators.OnSubscribeRedo$1) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OnSubscribeRedo$2 -> b.d.a.u:
    rx.Subscriber val$child -> a
    rx.subjects.BehaviorSubject val$terminals -> b
    rx.internal.producers.ProducerArbiter val$arbiter -> c
    java.util.concurrent.atomic.AtomicLong val$consumerCapacity -> d
    rx.subscriptions.SerialSubscription val$sourceSubscriptions -> e
    rx.internal.operators.OnSubscribeRedo this$0 -> f
    void <init>(rx.internal.operators.OnSubscribeRedo,rx.Subscriber,rx.subjects.BehaviorSubject,rx.internal.producers.ProducerArbiter,java.util.concurrent.atomic.AtomicLong,rx.subscriptions.SerialSubscription) -> <init>
    void call() -> call
rx.internal.operators.OnSubscribeRedo$2$1 -> b.d.a.v:
    boolean done -> a
    rx.internal.operators.OnSubscribeRedo$2 this$1 -> b
    void <init>(rx.internal.operators.OnSubscribeRedo$2) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
    void setProducer(rx.Producer) -> setProducer
rx.internal.operators.OnSubscribeRedo$3 -> b.d.a.w:
    rx.internal.operators.OnSubscribeRedo this$0 -> a
    void <init>(rx.internal.operators.OnSubscribeRedo) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OnSubscribeRedo$3$1 -> b.d.a.x:
    rx.Subscriber val$filteredTerminals -> a
    rx.internal.operators.OnSubscribeRedo$3 this$1 -> b
    void <init>(rx.internal.operators.OnSubscribeRedo$3,rx.Subscriber,rx.Subscriber) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void setProducer(rx.Producer) -> setProducer
    void onNext(java.lang.Object) -> onNext
rx.internal.operators.OnSubscribeRedo$4 -> b.d.a.y:
    rx.Observable val$restarts -> a
    rx.Subscriber val$child -> b
    java.util.concurrent.atomic.AtomicLong val$consumerCapacity -> c
    rx.Scheduler$Worker val$worker -> d
    rx.functions.Action0 val$subscribeToSource -> e
    java.util.concurrent.atomic.AtomicBoolean val$resumeBoundary -> f
    rx.internal.operators.OnSubscribeRedo this$0 -> g
    void <init>(rx.internal.operators.OnSubscribeRedo,rx.Observable,rx.Subscriber,java.util.concurrent.atomic.AtomicLong,rx.Scheduler$Worker,rx.functions.Action0,java.util.concurrent.atomic.AtomicBoolean) -> <init>
    void call() -> call
rx.internal.operators.OnSubscribeRedo$4$1 -> b.d.a.z:
    rx.internal.operators.OnSubscribeRedo$4 this$1 -> a
    void <init>(rx.internal.operators.OnSubscribeRedo$4,rx.Subscriber) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
    void setProducer(rx.Producer) -> setProducer
rx.internal.operators.OnSubscribeRedo$5 -> b.d.a.aa:
    java.util.concurrent.atomic.AtomicLong val$consumerCapacity -> a
    rx.internal.producers.ProducerArbiter val$arbiter -> b
    java.util.concurrent.atomic.AtomicBoolean val$resumeBoundary -> c
    rx.Scheduler$Worker val$worker -> d
    rx.functions.Action0 val$subscribeToSource -> e
    rx.internal.operators.OnSubscribeRedo this$0 -> f
    void <init>(rx.internal.operators.OnSubscribeRedo,java.util.concurrent.atomic.AtomicLong,rx.internal.producers.ProducerArbiter,java.util.concurrent.atomic.AtomicBoolean,rx.Scheduler$Worker,rx.functions.Action0) -> <init>
    void request(long) -> a
rx.internal.operators.OnSubscribeThrow -> b.d.a.ab:
    java.lang.Throwable exception -> a
    void <init>(java.lang.Throwable) -> <init>
    void call(java.lang.Object) -> call
rx.internal.operators.OnSubscribeTimerOnce -> b.d.a.ac:
    long time -> a
    java.util.concurrent.TimeUnit unit -> b
    rx.Scheduler scheduler -> c
    void <init>(long,java.util.concurrent.TimeUnit,rx.Scheduler) -> <init>
    void call(java.lang.Object) -> call
rx.internal.operators.OnSubscribeTimerOnce$1 -> b.d.a.ad:
    rx.Subscriber val$child -> a
    rx.internal.operators.OnSubscribeTimerOnce this$0 -> b
    void <init>(rx.internal.operators.OnSubscribeTimerOnce,rx.Subscriber) -> <init>
    void call() -> call
rx.internal.operators.OperatorAny -> b.d.a.ae:
    rx.functions.Func1 predicate -> a
    boolean returnOnEmpty -> b
    void <init>(rx.functions.Func1) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OperatorAny$1 -> b.d.a.af:
    boolean hasElements -> a
    boolean done -> b
    rx.internal.producers.SingleDelayedProducer val$producer -> c
    rx.Subscriber val$child -> d
    rx.internal.operators.OperatorAny this$0 -> e
    void <init>(rx.internal.operators.OperatorAny,rx.internal.producers.SingleDelayedProducer,rx.Subscriber) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
rx.internal.operators.OperatorAsObservable -> b.d.a.ag:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OperatorAsObservable$Holder -> b.d.a.ah:
    rx.internal.operators.OperatorAsObservable INSTANCE -> a
    void <clinit>() -> <clinit>
rx.internal.operators.OperatorDoOnEach -> b.d.a.ai:
    rx.Observer doOnEachObserver -> a
    void <init>(rx.Observer) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OperatorDoOnEach$1 -> b.d.a.aj:
    boolean done -> c
    rx.Subscriber val$observer -> a
    rx.internal.operators.OperatorDoOnEach this$0 -> b
    void <init>(rx.internal.operators.OperatorDoOnEach,rx.Subscriber,rx.Subscriber) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
rx.internal.operators.OperatorMap -> b.d.a.ak:
    rx.functions.Func1 transformer -> a
    void <init>(rx.functions.Func1) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OperatorMap$MapSubscriber -> b.d.a.al:
    rx.Subscriber actual -> a
    rx.functions.Func1 mapper -> b
    boolean done -> c
    void <init>(rx.Subscriber,rx.functions.Func1) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
    void setProducer(rx.Producer) -> setProducer
rx.internal.operators.OperatorMerge -> b.d.a.am:
    boolean delayErrors -> a
    int maxConcurrent -> b
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OperatorMerge$HolderNoDelay -> b.d.a.an:
    rx.internal.operators.OperatorMerge INSTANCE -> a
    void <clinit>() -> <clinit>
rx.internal.operators.OperatorMerge$InnerSubscriber -> b.d.a.ao:
    rx.internal.operators.OperatorMerge$MergeSubscriber parent -> a
    long id -> b
    boolean done -> c
    rx.internal.util.RxRingBuffer queue -> d
    int outstanding -> e
    int limit -> f
    void <init>(rx.internal.operators.OperatorMerge$MergeSubscriber,long) -> <init>
    void onStart() -> onStart
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
    void requestMore(long) -> a
    void <clinit>() -> <clinit>
rx.internal.operators.OperatorMerge$MergeProducer -> b.d.a.ap:
    rx.internal.operators.OperatorMerge$MergeSubscriber subscriber -> a
    void <init>(rx.internal.operators.OperatorMerge$MergeSubscriber) -> <init>
    void request(long) -> a
rx.internal.operators.OperatorMerge$MergeSubscriber -> b.d.a.aq:
    rx.Subscriber child -> a
    boolean delayErrors -> b
    int maxConcurrent -> c
    rx.internal.operators.OperatorMerge$MergeProducer producer -> d
    java.util.Queue queue -> e
    rx.subscriptions.CompositeSubscription subscriptions -> f
    java.util.concurrent.ConcurrentLinkedQueue errors -> g
    rx.internal.operators.NotificationLite nl -> h
    boolean done -> i
    boolean emitting -> j
    boolean missed -> k
    java.lang.Object innerGuard -> l
    rx.internal.operators.OperatorMerge$InnerSubscriber[] innerSubscribers -> m
    long uniqueId -> n
    long lastId -> o
    int lastIndex -> p
    rx.internal.operators.OperatorMerge$InnerSubscriber[] EMPTY -> q
    int scalarEmissionLimit -> r
    int scalarEmissionCount -> s
    void <init>(rx.Subscriber,boolean,int) -> <init>
    java.util.Queue getOrCreateErrorQueue() -> a
    rx.subscriptions.CompositeSubscription getOrCreateComposite() -> d
    void reportError() -> e
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
    void emit() -> b
    void emitLoop() -> c
    boolean checkTerminate() -> f
    void onNext(java.lang.Object) -> onNext
    void <clinit>() -> <clinit>
rx.internal.operators.OperatorObserveOn -> b.d.a.ar:
    rx.Scheduler scheduler -> a
    boolean delayError -> b
    int bufferSize -> c
    void <init>(rx.Scheduler,int) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber -> b.d.a.as:
    rx.Subscriber child -> a
    rx.Scheduler$Worker recursiveScheduler -> b
    rx.internal.operators.NotificationLite on -> c
    boolean delayError -> d
    java.util.Queue queue -> e
    int limit -> f
    boolean finished -> g
    java.util.concurrent.atomic.AtomicLong requested -> h
    java.util.concurrent.atomic.AtomicLong counter -> i
    java.lang.Throwable error -> j
    long emitted -> k
    void <init>(rx.Scheduler,rx.Subscriber,boolean,int) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void schedule() -> a
    void call() -> call
    boolean checkTerminated(boolean,boolean,rx.Subscriber,java.util.Queue) -> a
rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber$1 -> b.d.a.at:
    rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber this$0 -> a
    void <init>(rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber) -> <init>
    void request(long) -> a
rx.internal.operators.OperatorOnErrorResumeNextViaFunction -> b.d.a.au:
    rx.functions.Func1 resumeFunction -> a
    void <init>(rx.functions.Func1) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4 -> b.d.a.av:
    boolean done -> f
    long produced -> a
    rx.Subscriber val$child -> b
    rx.internal.producers.ProducerArbiter val$pa -> c
    rx.subscriptions.SerialSubscription val$ssub -> d
    rx.internal.operators.OperatorOnErrorResumeNextViaFunction this$0 -> e
    void <init>(rx.internal.operators.OperatorOnErrorResumeNextViaFunction,rx.Subscriber,rx.internal.producers.ProducerArbiter,rx.subscriptions.SerialSubscription) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
    void setProducer(rx.Producer) -> setProducer
rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1 -> b.d.a.aw:
    rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4 this$1 -> a
    void <init>(rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
    void setProducer(rx.Producer) -> setProducer
rx.internal.operators.OperatorSubscribeOn -> b.d.a.ax:
    rx.Scheduler scheduler -> a
    rx.Observable source -> b
    void <init>(rx.Observable,rx.Scheduler) -> <init>
    void call(java.lang.Object) -> call
rx.internal.operators.OperatorSubscribeOn$1 -> b.d.a.ay:
    rx.Subscriber val$subscriber -> a
    rx.Scheduler$Worker val$inner -> b
    rx.internal.operators.OperatorSubscribeOn this$0 -> c
    void <init>(rx.internal.operators.OperatorSubscribeOn,rx.Subscriber,rx.Scheduler$Worker) -> <init>
    void call() -> call
rx.internal.operators.OperatorSubscribeOn$1$1 -> b.d.a.az:
    java.lang.Thread val$t -> a
    rx.internal.operators.OperatorSubscribeOn$1 this$1 -> b
    void <init>(rx.internal.operators.OperatorSubscribeOn$1,rx.Subscriber,java.lang.Thread) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
    void setProducer(rx.Producer) -> setProducer
rx.internal.operators.OperatorSubscribeOn$1$1$1 -> b.d.a.ba:
    rx.Producer val$p -> a
    rx.internal.operators.OperatorSubscribeOn$1$1 this$2 -> b
    void <init>(rx.internal.operators.OperatorSubscribeOn$1$1,rx.Producer) -> <init>
    void request(long) -> a
rx.internal.operators.OperatorSubscribeOn$1$1$1$1 -> b.d.a.bb:
    long val$n -> a
    rx.internal.operators.OperatorSubscribeOn$1$1$1 this$3 -> b
    void <init>(rx.internal.operators.OperatorSubscribeOn$1$1$1,long) -> <init>
    void call() -> call
rx.internal.operators.OperatorUnsubscribeOn -> b.d.a.bc:
    rx.Scheduler scheduler -> a
    void <init>(rx.Scheduler) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.operators.OperatorUnsubscribeOn$1 -> b.d.a.bd:
    rx.Subscriber val$subscriber -> a
    rx.internal.operators.OperatorUnsubscribeOn this$0 -> b
    void <init>(rx.internal.operators.OperatorUnsubscribeOn,rx.Subscriber) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
rx.internal.operators.OperatorUnsubscribeOn$2 -> b.d.a.be:
    rx.Subscriber val$parent -> a
    rx.internal.operators.OperatorUnsubscribeOn this$0 -> b
    void <init>(rx.internal.operators.OperatorUnsubscribeOn,rx.Subscriber) -> <init>
    void call() -> call
rx.internal.operators.OperatorUnsubscribeOn$2$1 -> b.d.a.bf:
    rx.Scheduler$Worker val$inner -> a
    rx.internal.operators.OperatorUnsubscribeOn$2 this$1 -> b
    void <init>(rx.internal.operators.OperatorUnsubscribeOn$2,rx.Scheduler$Worker) -> <init>
    void call() -> call
rx.internal.producers.ProducerArbiter -> b.d.b.a:
    long requested -> a
    rx.Producer currentProducer -> b
    boolean emitting -> c
    long missedRequested -> d
    long missedProduced -> e
    rx.Producer missedProducer -> f
    rx.Producer NULL_PRODUCER -> g
    void <init>() -> <init>
    void request(long) -> a
    void produced(long) -> b
    void setProducer(rx.Producer) -> a
    void emitLoop() -> a
    void <clinit>() -> <clinit>
rx.internal.producers.ProducerArbiter$1 -> b.d.b.b:
    void <init>() -> <init>
    void request(long) -> a
rx.internal.producers.SingleDelayedProducer -> b.d.b.c:
    rx.Subscriber child -> a
    java.lang.Object value -> b
    void <init>(rx.Subscriber) -> <init>
    void request(long) -> a
    void setValue(java.lang.Object) -> a
    void emit(rx.Subscriber,java.lang.Object) -> a
rx.internal.producers.SingleProducer -> b.d.b.d:
    rx.Subscriber child -> a
    java.lang.Object value -> b
    void <init>(rx.Subscriber,java.lang.Object) -> <init>
    void request(long) -> a
rx.internal.schedulers.CachedThreadScheduler -> b.d.c.a:
    java.util.concurrent.TimeUnit KEEP_ALIVE_UNIT -> f
    rx.internal.schedulers.CachedThreadScheduler$ThreadWorker SHUTDOWN_THREADWORKER -> b
    java.util.concurrent.ThreadFactory threadFactory -> c
    java.util.concurrent.atomic.AtomicReference pool -> d
    rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool NONE -> e
    void <init>(java.util.concurrent.ThreadFactory) -> <init>
    void shutdown() -> c
    rx.Scheduler$Worker createWorker() -> a
    void <clinit>() -> <clinit>
rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool -> b.d.c.b:
    java.util.concurrent.ThreadFactory threadFactory -> d
    long keepAliveTime -> a
    java.util.concurrent.ConcurrentLinkedQueue expiringWorkerQueue -> b
    rx.subscriptions.CompositeSubscription allWorkers -> c
    java.util.concurrent.ScheduledExecutorService evictorService -> e
    java.util.concurrent.Future evictorTask -> f
    void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit) -> <init>
    rx.internal.schedulers.CachedThreadScheduler$ThreadWorker get() -> a
    void shutdown() -> b
rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$1 -> b.d.c.c:
    java.util.concurrent.ThreadFactory val$threadFactory -> a
    rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool this$0 -> b
    void <init>(rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool,java.util.concurrent.ThreadFactory) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool$2 -> b.d.c.d:
    rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool this$0 -> a
    void <init>(rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool) -> <init>
    void run() -> run
rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker -> b.d.c.e:
    rx.subscriptions.CompositeSubscription innerSubscription -> b
    rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool pool -> c
    rx.internal.schedulers.CachedThreadScheduler$ThreadWorker threadWorker -> d
    java.util.concurrent.atomic.AtomicBoolean once -> a
    void <init>(rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool) -> <init>
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
    rx.Subscription schedule(rx.functions.Action0) -> a
    rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit) -> a
rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker$1 -> b.d.c.f:
    rx.functions.Action0 val$action -> a
    rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker this$0 -> b
    void <init>(rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker,rx.functions.Action0) -> <init>
    void call() -> call
rx.internal.schedulers.CachedThreadScheduler$ThreadWorker -> b.d.c.g:
    long expirationTime -> a
    void <init>(java.util.concurrent.ThreadFactory) -> <init>
rx.internal.schedulers.EventLoopsScheduler -> b.d.c.h:
    int MAX_THREADS -> b
    rx.internal.schedulers.EventLoopsScheduler$PoolWorker SHUTDOWN_WORKER -> c
    rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool NONE -> d
    java.util.concurrent.ThreadFactory threadFactory -> e
    java.util.concurrent.atomic.AtomicReference pool -> f
    void <init>(java.util.concurrent.ThreadFactory) -> <init>
    rx.Scheduler$Worker createWorker() -> a
    void shutdown() -> c
    void <clinit>() -> <clinit>
rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker -> b.d.c.i:
    rx.internal.util.SubscriptionList serial -> a
    rx.subscriptions.CompositeSubscription timed -> b
    rx.internal.util.SubscriptionList both -> c
    rx.internal.schedulers.EventLoopsScheduler$PoolWorker poolWorker -> d
    void <init>(rx.internal.schedulers.EventLoopsScheduler$PoolWorker) -> <init>
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
    rx.Subscription schedule(rx.functions.Action0) -> a
    rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit) -> a
rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$1 -> b.d.c.j:
    rx.functions.Action0 val$action -> a
    rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker this$0 -> b
    void <init>(rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker,rx.functions.Action0) -> <init>
    void call() -> call
rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker$2 -> b.d.c.k:
    rx.functions.Action0 val$action -> a
    rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker this$0 -> b
    void <init>(rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker,rx.functions.Action0) -> <init>
    void call() -> call
rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool -> b.d.c.l:
    int cores -> a
    rx.internal.schedulers.EventLoopsScheduler$PoolWorker[] eventLoops -> b
    long n -> c
    void <init>(java.util.concurrent.ThreadFactory,int) -> <init>
    rx.internal.schedulers.EventLoopsScheduler$PoolWorker getEventLoop() -> a
    void shutdown() -> b
rx.internal.schedulers.EventLoopsScheduler$PoolWorker -> b.d.c.m:
    void <init>(java.util.concurrent.ThreadFactory) -> <init>
rx.internal.schedulers.GenericScheduledExecutorService -> b.d.c.n:
    rx.internal.util.RxThreadFactory THREAD_FACTORY -> b
    java.util.concurrent.ScheduledExecutorService[] NONE -> c
    java.util.concurrent.ScheduledExecutorService SHUTDOWN -> d
    rx.internal.schedulers.GenericScheduledExecutorService INSTANCE -> a
    java.util.concurrent.atomic.AtomicReference executor -> e
    int roundRobin -> f
    void <init>() -> <init>
    void start() -> b
    void shutdown() -> c
    java.util.concurrent.ScheduledExecutorService getInstance() -> a
    void <clinit>() -> <clinit>
rx.internal.schedulers.ImmediateScheduler -> b.d.c.o:
    rx.internal.schedulers.ImmediateScheduler INSTANCE -> b
    void <init>() -> <init>
    rx.Scheduler$Worker createWorker() -> a
    void <clinit>() -> <clinit>
rx.internal.schedulers.ImmediateScheduler$InnerImmediateScheduler -> b.d.c.p:
    rx.subscriptions.BooleanSubscription innerSubscription -> a
    rx.internal.schedulers.ImmediateScheduler this$0 -> b
    void <init>(rx.internal.schedulers.ImmediateScheduler) -> <init>
    rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit) -> a
    rx.Subscription schedule(rx.functions.Action0) -> a
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
rx.internal.schedulers.NewThreadScheduler -> b.d.c.q:
    java.util.concurrent.ThreadFactory threadFactory -> b
    void <init>(java.util.concurrent.ThreadFactory) -> <init>
    rx.Scheduler$Worker createWorker() -> a
rx.internal.schedulers.NewThreadWorker -> b.d.c.r:
    java.util.concurrent.ScheduledExecutorService executor -> b
    rx.plugins.RxJavaSchedulersHook schedulersHook -> a
    boolean isUnsubscribed -> c
    boolean SHOULD_TRY_ENABLE_CANCEL_POLICY -> e
    int PURGE_FREQUENCY -> d
    java.util.concurrent.ConcurrentHashMap EXECUTORS -> f
    java.util.concurrent.atomic.AtomicReference PURGE -> g
    java.lang.Object cachedSetRemoveOnCancelPolicyMethod -> h
    java.lang.Object SET_REMOVE_ON_CANCEL_POLICY_METHOD_NOT_SUPPORTED -> i
    void registerExecutor(java.util.concurrent.ScheduledThreadPoolExecutor) -> a
    void deregisterExecutor(java.util.concurrent.ScheduledExecutorService) -> a
    void purgeExecutors() -> a
    boolean tryEnableCancelPolicy(java.util.concurrent.ScheduledExecutorService) -> b
    java.lang.reflect.Method findSetRemoveOnCancelPolicyMethod(java.util.concurrent.ScheduledExecutorService) -> c
    void <init>(java.util.concurrent.ThreadFactory) -> <init>
    rx.Subscription schedule(rx.functions.Action0) -> a
    rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit) -> a
    rx.internal.schedulers.ScheduledAction scheduleActual(rx.functions.Action0,long,java.util.concurrent.TimeUnit) -> b
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
    void <clinit>() -> <clinit>
rx.internal.schedulers.NewThreadWorker$1 -> b.d.c.s:
    void <init>() -> <init>
    void run() -> run
rx.internal.schedulers.ScheduledAction -> b.d.c.t:
    rx.internal.util.SubscriptionList cancel -> a
    rx.functions.Action0 action -> b
    void <init>(rx.functions.Action0) -> <init>
    void <init>(rx.functions.Action0,rx.subscriptions.CompositeSubscription) -> <init>
    void <init>(rx.functions.Action0,rx.internal.util.SubscriptionList) -> <init>
    void run() -> run
    boolean isUnsubscribed() -> isUnsubscribed
    void unsubscribe() -> unsubscribe
    void add(java.util.concurrent.Future) -> a
rx.internal.schedulers.ScheduledAction$FutureCompleter -> b.d.c.u:
    java.util.concurrent.Future f -> b
    rx.internal.schedulers.ScheduledAction this$0 -> a
    void <init>(rx.internal.schedulers.ScheduledAction,java.util.concurrent.Future) -> <init>
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
rx.internal.schedulers.ScheduledAction$Remover -> b.d.c.v:
    rx.internal.schedulers.ScheduledAction s -> a
    rx.subscriptions.CompositeSubscription parent -> b
    void <init>(rx.internal.schedulers.ScheduledAction,rx.subscriptions.CompositeSubscription) -> <init>
    boolean isUnsubscribed() -> isUnsubscribed
    void unsubscribe() -> unsubscribe
rx.internal.schedulers.ScheduledAction$Remover2 -> b.d.c.w:
    rx.internal.schedulers.ScheduledAction s -> a
    rx.internal.util.SubscriptionList parent -> b
    void <init>(rx.internal.schedulers.ScheduledAction,rx.internal.util.SubscriptionList) -> <init>
    boolean isUnsubscribed() -> isUnsubscribed
    void unsubscribe() -> unsubscribe
rx.internal.schedulers.SchedulerLifecycle -> b.d.c.x:
    void shutdown() -> c
rx.internal.schedulers.SleepingAction -> b.d.c.y:
    rx.functions.Action0 underlying -> a
    rx.Scheduler$Worker innerScheduler -> b
    long execTime -> c
    void <init>(rx.functions.Action0,rx.Scheduler$Worker,long) -> <init>
    void call() -> call
rx.internal.schedulers.TrampolineScheduler -> b.d.c.z:
    rx.internal.schedulers.TrampolineScheduler INSTANCE -> b
    rx.Scheduler$Worker createWorker() -> a
    void <init>() -> <init>
    int compare(int,int) -> a
    void <clinit>() -> <clinit>
rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler -> b.d.c.aa:
    java.util.concurrent.atomic.AtomicInteger counter -> a
    java.util.concurrent.PriorityBlockingQueue queue -> b
    rx.subscriptions.BooleanSubscription innerSubscription -> c
    java.util.concurrent.atomic.AtomicInteger wip -> d
    void <init>() -> <init>
    rx.Subscription schedule(rx.functions.Action0) -> a
    rx.Subscription schedule(rx.functions.Action0,long,java.util.concurrent.TimeUnit) -> a
    rx.Subscription enqueue(rx.functions.Action0,long) -> a
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler$1 -> b.d.c.ab:
    rx.internal.schedulers.TrampolineScheduler$TimedAction val$timedAction -> a
    rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler this$0 -> b
    void <init>(rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler,rx.internal.schedulers.TrampolineScheduler$TimedAction) -> <init>
    void call() -> call
rx.internal.schedulers.TrampolineScheduler$TimedAction -> b.d.c.ac:
    rx.functions.Action0 action -> a
    java.lang.Long execTime -> b
    int count -> c
    void <init>(rx.functions.Action0,java.lang.Long,int) -> <init>
    int compareTo(java.lang.Object) -> compareTo
rx.internal.util.ActionSubscriber -> b.d.d.a:
    rx.functions.Action1 onNext -> a
    rx.functions.Action1 onError -> b
    rx.functions.Action0 onCompleted -> c
    void <init>(rx.functions.Action1,rx.functions.Action1,rx.functions.Action0) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
rx.internal.util.ExceptionsUtils -> b.d.d.b:
    java.lang.Throwable TERMINATED -> a
    rx.internal.util.ExceptionsUtils[] $VALUES -> b
    rx.internal.util.ExceptionsUtils[] values() -> values
    rx.internal.util.ExceptionsUtils valueOf(java.lang.String) -> valueOf
    boolean addThrowable(java.util.concurrent.atomic.AtomicReference,java.lang.Throwable) -> a
    java.lang.Throwable terminate(java.util.concurrent.atomic.AtomicReference) -> a
    boolean isTerminated(java.lang.Throwable) -> a
    void <clinit>() -> <clinit>
rx.internal.util.InternalObservableUtils -> b.d.d.c:
    rx.internal.util.InternalObservableUtils$PlusOneFunc2 COUNTER -> a
    rx.internal.util.InternalObservableUtils$PlusOneLongFunc2 LONG_COUNTER -> b
    rx.internal.util.InternalObservableUtils$ObjectEqualsFunc2 OBJECT_EQUALS -> c
    rx.internal.util.InternalObservableUtils$ToArrayFunc1 TO_ARRAY -> d
    rx.internal.util.InternalObservableUtils$ReturnsVoidFunc1 RETURNS_VOID -> e
    rx.internal.util.InternalObservableUtils$NotificationErrorExtractor ERROR_EXTRACTOR -> f
    rx.functions.Action1 ERROR_NOT_IMPLEMENTED -> g
    rx.Observable$Operator IS_EMPTY -> h
    rx.internal.util.InternalObservableUtils[] $VALUES -> i
    rx.internal.util.InternalObservableUtils[] values() -> values
    rx.internal.util.InternalObservableUtils valueOf(java.lang.String) -> valueOf
    rx.functions.Func1 createRetryDematerializer(rx.functions.Func1) -> a
    void <clinit>() -> <clinit>
rx.internal.util.InternalObservableUtils$ErrorNotImplementedAction -> b.d.d.d:
    void <init>() -> <init>
    void call(java.lang.Object) -> call
rx.internal.util.InternalObservableUtils$NotificationErrorExtractor -> b.d.d.e:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.util.InternalObservableUtils$ObjectEqualsFunc2 -> b.d.d.f:
    void <init>() -> <init>
rx.internal.util.InternalObservableUtils$PlusOneFunc2 -> b.d.d.g:
    void <init>() -> <init>
rx.internal.util.InternalObservableUtils$PlusOneLongFunc2 -> b.d.d.h:
    void <init>() -> <init>
rx.internal.util.InternalObservableUtils$RetryNotificationDematerializer -> b.d.d.i:
    rx.functions.Func1 notificationHandler -> a
    void <init>(rx.functions.Func1) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.util.InternalObservableUtils$ReturnsVoidFunc1 -> b.d.d.j:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.util.InternalObservableUtils$ToArrayFunc1 -> b.d.d.k:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.util.ObjectPool -> b.d.d.l:
    java.util.Queue pool -> a
    int minSize -> b
    int maxSize -> c
    long validationInterval -> d
    java.util.concurrent.atomic.AtomicReference periodicTask -> e
    void <init>() -> <init>
    void <init>(byte) -> <init>
    java.lang.Object borrowObject() -> a
    void shutdown() -> c
    void start() -> d
    java.lang.Object createObject() -> b
rx.internal.util.ObjectPool$1 -> b.d.d.m:
    rx.internal.util.ObjectPool this$0 -> a
    void <init>(rx.internal.util.ObjectPool) -> <init>
    void run() -> run
rx.internal.util.ObserverSubscriber -> b.d.d.n:
    rx.Observer observer -> a
    void <init>(rx.Observer) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
rx.internal.util.PlatformDependent -> b.d.d.o:
    int ANDROID_API_VERSION -> a
    boolean IS_ANDROID -> b
    boolean isAndroid() -> a
    int getAndroidApiVersion() -> b
    int resolveAndroidApiVersion() -> c
    void <clinit>() -> <clinit>
rx.internal.util.PlatformDependent$1 -> b.d.d.p:
    void <init>() -> <init>
    java.lang.Object run() -> run
rx.internal.util.RxJavaPluginUtils -> b.d.d.q:
    void handleException$786b7c60() -> a
rx.internal.util.RxRingBuffer -> b.d.d.r:
    rx.internal.operators.NotificationLite on -> g
    java.util.Queue queue -> a
    int size -> h
    rx.internal.util.ObjectPool pool -> i
    java.lang.Object terminalState -> b
    int _size -> c
    int SIZE -> d
    rx.internal.util.ObjectPool SPSC_POOL -> e
    rx.internal.util.ObjectPool SPMC_POOL -> f
    rx.internal.util.RxRingBuffer getSpscInstance() -> a
    void <init>(java.util.Queue,int) -> <init>
    void <init>(rx.internal.util.ObjectPool,int) -> <init>
    void release() -> b
    void unsubscribe() -> unsubscribe
    void <init>() -> <init>
    java.lang.Object poll() -> c
    boolean isUnsubscribed() -> isUnsubscribed
    void <clinit>() -> <clinit>
rx.internal.util.RxRingBuffer$1 -> b.d.d.s:
    void <init>() -> <init>
    java.lang.Object createObject() -> b
rx.internal.util.RxRingBuffer$2 -> b.d.d.t:
    void <init>() -> <init>
    java.lang.Object createObject() -> b
rx.internal.util.RxThreadFactory -> b.d.d.u:
    java.util.concurrent.ThreadFactory NONE -> a
    java.lang.String prefix -> b
    void <init>(java.lang.String) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
    void <clinit>() -> <clinit>
rx.internal.util.RxThreadFactory$1 -> b.d.d.v:
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
rx.internal.util.ScalarSynchronousObservable -> b.d.d.w:
    rx.plugins.RxJavaObservableExecutionHook hook -> c
    boolean STRONG_MODE -> d
    java.lang.Object t -> e
    rx.Producer createProducer(rx.Subscriber,java.lang.Object) -> a
    rx.Observable scalarScheduleOn(rx.Scheduler) -> b
    rx.Observable scalarFlatMap(rx.functions.Func1) -> d
    void <clinit>() -> <clinit>
rx.internal.util.ScalarSynchronousObservable$1 -> b.d.d.x:
    rx.internal.schedulers.EventLoopsScheduler val$els -> a
    rx.internal.util.ScalarSynchronousObservable this$0 -> b
    void <init>(rx.internal.util.ScalarSynchronousObservable,rx.internal.schedulers.EventLoopsScheduler) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.util.ScalarSynchronousObservable$2 -> b.d.d.y:
    rx.Scheduler val$scheduler -> a
    rx.internal.util.ScalarSynchronousObservable this$0 -> b
    void <init>(rx.internal.util.ScalarSynchronousObservable,rx.Scheduler) -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.util.ScalarSynchronousObservable$2$1 -> b.d.d.z:
    rx.functions.Action0 val$a -> a
    rx.Scheduler$Worker val$w -> b
    rx.internal.util.ScalarSynchronousObservable$2 this$1 -> c
    void <init>(rx.internal.util.ScalarSynchronousObservable$2,rx.functions.Action0,rx.Scheduler$Worker) -> <init>
    void call() -> call
rx.internal.util.ScalarSynchronousObservable$3 -> b.d.d.aa:
    rx.functions.Func1 val$func -> a
    rx.internal.util.ScalarSynchronousObservable this$0 -> b
    void <init>(rx.internal.util.ScalarSynchronousObservable,rx.functions.Func1) -> <init>
    void call(java.lang.Object) -> call
rx.internal.util.ScalarSynchronousObservable$ScalarAsyncOnSubscribe -> b.d.d.ab:
    java.lang.Object value -> a
    rx.functions.Func1 onSchedule -> b
    void <init>(java.lang.Object,rx.functions.Func1) -> <init>
    void call(java.lang.Object) -> call
rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer -> b.d.d.ac:
    rx.Subscriber actual -> a
    java.lang.Object value -> b
    rx.functions.Func1 onSchedule -> c
    void <init>(rx.Subscriber,java.lang.Object,rx.functions.Func1) -> <init>
    void request(long) -> a
    void call() -> call
    java.lang.String toString() -> toString
rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer -> b.d.d.ad:
    rx.Subscriber actual -> a
    java.lang.Object value -> b
    boolean once -> c
    void <init>(rx.Subscriber,java.lang.Object) -> <init>
    void request(long) -> a
rx.internal.util.SubscriptionList -> b.d.d.ae:
    java.util.LinkedList subscriptions -> a
    boolean unsubscribed -> b
    void <init>() -> <init>
    void <init>(rx.Subscription[]) -> <init>
    void <init>(rx.Subscription) -> <init>
    boolean isUnsubscribed() -> isUnsubscribed
    void add(rx.Subscription) -> a
    void unsubscribe() -> unsubscribe
rx.internal.util.SynchronizedQueue -> b.d.d.af:
    java.util.LinkedList list -> a
    int size -> b
    void <init>() -> <init>
    void <init>(int) -> <init>
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object peek() -> peek
    java.lang.Object element() -> element
    java.lang.Object poll() -> poll
    java.lang.Object remove() -> remove
    boolean offer(java.lang.Object) -> offer
    java.lang.Object clone() -> clone
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
rx.internal.util.UtilityFunctions -> b.d.d.ag:
    rx.internal.util.UtilityFunctions$NullFunction NULL_FUNCTION -> a
    rx.functions.Func1 alwaysTrue() -> a
    rx.functions.Func1 identity() -> b
    void <clinit>() -> <clinit>
rx.internal.util.UtilityFunctions$1 -> b.d.d.ah:
    void <init>() -> <init>
    java.lang.Object call(java.lang.Object) -> call
rx.internal.util.UtilityFunctions$AlwaysTrue -> b.d.d.ai:
    rx.internal.util.UtilityFunctions$AlwaysTrue INSTANCE -> a
    rx.internal.util.UtilityFunctions$AlwaysTrue[] $VALUES -> b
    rx.internal.util.UtilityFunctions$AlwaysTrue[] values() -> values
    rx.internal.util.UtilityFunctions$AlwaysTrue valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Object call(java.lang.Object) -> call
    void <clinit>() -> <clinit>
rx.internal.util.UtilityFunctions$NullFunction -> b.d.d.aj:
    void <init>() -> <init>
    java.lang.Object call() -> call
    java.lang.Object call(java.lang.Object) -> call
    java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> call
    java.lang.Object call(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> call
    java.lang.Object call(java.lang.Object[]) -> a
rx.internal.util.atomic.AtomicReferenceArrayQueue -> b.d.d.a.a:
    java.util.concurrent.atomic.AtomicReferenceArray buffer -> a
    int mask -> b
    void <init>(int) -> <init>
    java.util.Iterator iterator() -> iterator
    void clear() -> clear
    int calcElementOffset(long) -> a
    java.lang.Object lvElement(int) -> a
rx.internal.util.atomic.SpscAtomicArrayQueue -> b.d.d.a.b:
    java.lang.Integer MAX_LOOK_AHEAD_STEP -> g
    java.util.concurrent.atomic.AtomicLong producerIndex -> c
    long producerLookAhead -> d
    java.util.concurrent.atomic.AtomicLong consumerIndex -> e
    int lookAheadStep -> f
    void <init>(int) -> <init>
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
rx.internal.util.atomic.SpscExactAtomicArrayQueue -> b.d.d.a.c:
    int mask -> a
    int capacitySkip -> b
    java.util.concurrent.atomic.AtomicLong producerIndex -> c
    java.util.concurrent.atomic.AtomicLong consumerIndex -> d
    void <init>(int) -> <init>
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean add(java.lang.Object) -> add
    java.lang.Object remove() -> remove
    java.lang.Object element() -> element
rx.internal.util.atomic.SpscLinkedArrayQueue -> b.d.d.a.d:
    int MAX_LOOK_AHEAD_STEP -> a
    java.util.concurrent.atomic.AtomicLong producerIndex -> b
    int producerLookAheadStep -> c
    long producerLookAhead -> d
    int producerMask -> e
    java.util.concurrent.atomic.AtomicReferenceArray producerBuffer -> f
    int consumerMask -> g
    java.util.concurrent.atomic.AtomicReferenceArray consumerBuffer -> h
    java.util.concurrent.atomic.AtomicLong consumerIndex -> i
    java.lang.Object HAS_NEXT -> j
    void <init>(int) -> <init>
    boolean offer(java.lang.Object) -> offer
    boolean writeToQueue(java.util.concurrent.atomic.AtomicReferenceArray,java.lang.Object,long,int) -> a
    void soNext(java.util.concurrent.atomic.AtomicReferenceArray,java.util.concurrent.atomic.AtomicReferenceArray) -> a
    java.util.concurrent.atomic.AtomicReferenceArray lvNext(java.util.concurrent.atomic.AtomicReferenceArray) -> a
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    void soProducerIndex(long) -> a
    void soConsumerIndex(long) -> b
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean add(java.lang.Object) -> add
    java.lang.Object remove() -> remove
    java.lang.Object element() -> element
    boolean offer(java.lang.Object,java.lang.Object) -> a
    void <clinit>() -> <clinit>
rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue -> b.d.d.a.e:
    int MAX_LOOK_AHEAD_STEP -> a
    java.util.concurrent.atomic.AtomicLong producerIndex -> b
    int producerLookAheadStep -> c
    long producerLookAhead -> d
    int producerMask -> e
    java.util.concurrent.atomic.AtomicReferenceArray producerBuffer -> f
    int consumerMask -> g
    java.util.concurrent.atomic.AtomicReferenceArray consumerBuffer -> h
    java.util.concurrent.atomic.AtomicLong consumerIndex -> i
    java.lang.Object HAS_NEXT -> j
    void <init>(int) -> <init>
    boolean offer(java.lang.Object) -> offer
    boolean writeToQueue(java.util.concurrent.atomic.AtomicReferenceArray,java.lang.Object,long,int) -> a
    java.util.concurrent.atomic.AtomicReferenceArray lvNext(java.util.concurrent.atomic.AtomicReferenceArray) -> a
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    void soProducerIndex(long) -> a
    void soConsumerIndex(long) -> b
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean add(java.lang.Object) -> add
    java.lang.Object remove() -> remove
    java.lang.Object element() -> element
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.ConcurrentCircularArrayQueue -> b.d.d.b.a:
    int SPARSE_SHIFT -> a
    long REF_ARRAY_BASE -> d
    int REF_ELEMENT_SHIFT -> e
    long mask -> b
    java.lang.Object[] buffer -> c
    void <init>(int) -> <init>
    long calcElementOffset(long) -> a
    void spElement(long,java.lang.Object) -> a
    void spElement(java.lang.Object[],long,java.lang.Object) -> a
    void soElement(java.lang.Object[],long,java.lang.Object) -> b
    java.lang.Object lpElement(long) -> b
    java.lang.Object lpElement(java.lang.Object[],long) -> a
    java.lang.Object lvElement(long) -> c
    java.lang.Object lvElement(java.lang.Object[],long) -> b
    java.util.Iterator iterator() -> iterator
    void clear() -> clear
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.ConcurrentCircularArrayQueueL0Pad -> b.d.d.b.b:
    void <init>() -> <init>
rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue -> b.d.d.b.c:
    long ARRAY_BASE -> e
    int ELEMENT_SHIFT -> f
    long[] sequenceBuffer -> d
    void <init>(int) -> <init>
    long calcSequenceOffset(long) -> d
    void soSequence(long[],long,long) -> a
    long lvSequence(long[],long) -> a
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.MpmcArrayQueue -> b.d.d.b.d:
    void <init>(int) -> <init>
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    int size() -> size
    boolean isEmpty() -> isEmpty
rx.internal.util.unsafe.MpmcArrayQueueConsumerField -> b.d.d.b.e:
    long C_INDEX_OFFSET -> e
    long consumerIndex -> consumerIndex
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.MpmcArrayQueueL1Pad -> b.d.d.b.f:
    void <init>(int) -> <init>
rx.internal.util.unsafe.MpmcArrayQueueL2Pad -> b.d.d.b.g:
    void <init>(int) -> <init>
rx.internal.util.unsafe.MpmcArrayQueueProducerField -> b.d.d.b.h:
    long P_INDEX_OFFSET -> f
    long producerIndex -> producerIndex
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.Pow2 -> b.d.d.b.i:
    int roundToPowerOfTwo(int) -> a
rx.internal.util.unsafe.SpmcArrayQueue -> b.d.d.b.j:
    void <init>(int) -> <init>
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    int size() -> size
    boolean isEmpty() -> isEmpty
rx.internal.util.unsafe.SpmcArrayQueueConsumerField -> b.d.d.b.k:
    long C_INDEX_OFFSET -> d
    long consumerIndex -> consumerIndex
    void <init>(int) -> <init>
    boolean casHead(long,long) -> a
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.SpmcArrayQueueL1Pad -> b.d.d.b.l:
    void <init>(int) -> <init>
rx.internal.util.unsafe.SpmcArrayQueueL2Pad -> b.d.d.b.m:
    void <init>(int) -> <init>
rx.internal.util.unsafe.SpmcArrayQueueL3Pad -> b.d.d.b.n:
    void <init>(int) -> <init>
rx.internal.util.unsafe.SpmcArrayQueueMidPad -> b.d.d.b.o:
    void <init>(int) -> <init>
rx.internal.util.unsafe.SpmcArrayQueueProducerField -> b.d.d.b.p:
    long P_INDEX_OFFSET -> e
    long producerIndex -> producerIndex
    void soTail(long) -> d
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.SpmcArrayQueueProducerIndexCacheField -> b.d.d.b.q:
    long producerIndexCache -> f
    void <init>(int) -> <init>
rx.internal.util.unsafe.SpscArrayQueue -> b.d.d.b.r:
    void <init>(int) -> <init>
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    int size() -> size
    boolean isEmpty() -> isEmpty
    long lvProducerIndex() -> a
    long lvConsumerIndex() -> b
rx.internal.util.unsafe.SpscArrayQueueColdField -> b.d.d.b.s:
    java.lang.Integer MAX_LOOK_AHEAD_STEP -> e
    int lookAheadStep -> d
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.SpscArrayQueueConsumerField -> b.d.d.b.t:
    long consumerIndex -> consumerIndex
    long C_INDEX_OFFSET -> e
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.SpscArrayQueueL1Pad -> b.d.d.b.u:
    void <init>(int) -> <init>
rx.internal.util.unsafe.SpscArrayQueueL2Pad -> b.d.d.b.v:
    void <init>(int) -> <init>
rx.internal.util.unsafe.SpscArrayQueueL3Pad -> b.d.d.b.w:
    void <init>(int) -> <init>
rx.internal.util.unsafe.SpscArrayQueueProducerFields -> b.d.d.b.x:
    long P_INDEX_OFFSET -> f
    long producerIndex -> producerIndex
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
rx.internal.util.unsafe.UnsafeAccess -> b.d.d.b.y:
    sun.misc.Unsafe UNSAFE -> a
    boolean DISABLED_BY_USER -> b
    boolean isUnsafeAvailable() -> a
    long addressOf(java.lang.Class,java.lang.String) -> a
    void <clinit>() -> <clinit>
rx.observers.Observers -> b.e.a:
    rx.Observer EMPTY -> a
    rx.Observer empty() -> a
    void <clinit>() -> <clinit>
rx.observers.Observers$1 -> b.e.b:
    void <init>() -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
rx.observers.SafeSubscriber -> b.e.c:
    rx.Subscriber actual -> b
    boolean done -> a
    void <init>(rx.Subscriber) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
rx.observers.SerializedObserver -> b.e.d:
    rx.Observer actual -> a
    boolean emitting -> b
    boolean terminated -> c
    rx.observers.SerializedObserver$FastList queue -> d
    rx.internal.operators.NotificationLite nl -> e
    void <init>(rx.Observer) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
rx.observers.SerializedObserver$FastList -> b.e.e:
    java.lang.Object[] array -> a
    int size -> b
    void <init>() -> <init>
    void add(java.lang.Object) -> a
rx.observers.SerializedSubscriber -> b.e.f:
    rx.Observer s -> a
    void <init>(rx.Subscriber) -> <init>
    void <init>(rx.Subscriber,byte) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
rx.observers.Subscribers -> b.e.g:
rx.observers.Subscribers$1 -> b.e.h:
    rx.Observer val$o -> a
    void <init>(rx.Observer) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
rx.observers.Subscribers$5 -> b.e.i:
    rx.Subscriber val$subscriber -> a
    void <init>(rx.Subscriber,rx.Subscriber) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
rx.plugins.RxJavaErrorHandler -> b.f.a:
    void <init>() -> <init>
rx.plugins.RxJavaObservableExecutionHook -> b.f.b:
    void <init>() -> <init>
    rx.Observable$OnSubscribe onCreate(rx.Observable$OnSubscribe) -> a
    rx.Observable$OnSubscribe onSubscribeStart$15005f2c(rx.Observable$OnSubscribe) -> b
    rx.Subscription onSubscribeReturn(rx.Subscription) -> a
    java.lang.Throwable onSubscribeError(java.lang.Throwable) -> a
    rx.Observable$Operator onLift(rx.Observable$Operator) -> a
rx.plugins.RxJavaObservableExecutionHookDefault -> b.f.c:
    rx.plugins.RxJavaObservableExecutionHookDefault INSTANCE -> a
    void <init>() -> <init>
    rx.plugins.RxJavaObservableExecutionHook getInstance() -> a
    void <clinit>() -> <clinit>
rx.plugins.RxJavaPlugins -> b.f.d:
    rx.plugins.RxJavaPlugins INSTANCE -> b
    java.util.concurrent.atomic.AtomicReference errorHandler -> c
    java.util.concurrent.atomic.AtomicReference observableExecutionHook -> d
    java.util.concurrent.atomic.AtomicReference singleExecutionHook -> e
    java.util.concurrent.atomic.AtomicReference completableExecutionHook -> f
    java.util.concurrent.atomic.AtomicReference schedulersHook -> g
    rx.plugins.RxJavaErrorHandler DEFAULT_ERROR_HANDLER -> a
    rx.plugins.RxJavaPlugins getInstance() -> a
    void <init>() -> <init>
    rx.plugins.RxJavaErrorHandler getErrorHandler() -> b
    rx.plugins.RxJavaObservableExecutionHook getObservableExecutionHook() -> c
    java.lang.Object getPluginImplementationViaProperty(java.lang.Class,java.util.Properties) -> a
    rx.plugins.RxJavaSchedulersHook getSchedulersHook() -> d
    void <clinit>() -> <clinit>
rx.plugins.RxJavaPlugins$1 -> b.f.e:
    void <init>() -> <init>
rx.plugins.RxJavaSchedulersHook -> b.f.f:
    rx.plugins.RxJavaSchedulersHook DEFAULT_INSTANCE -> a
    rx.Scheduler createComputationScheduler() -> a
    rx.Scheduler createIoScheduler() -> b
    rx.Scheduler createNewThreadScheduler() -> c
    void <init>() -> <init>
    rx.Scheduler getComputationScheduler() -> d
    rx.Scheduler getIOScheduler() -> e
    rx.Scheduler getNewThreadScheduler() -> f
    rx.functions.Action0 onSchedule(rx.functions.Action0) -> a
    rx.plugins.RxJavaSchedulersHook getDefaultInstance() -> g
    void <clinit>() -> <clinit>
rx.schedulers.Schedulers -> b.g.a:
    rx.Scheduler computationScheduler -> a
    rx.Scheduler ioScheduler -> b
    rx.Scheduler newThreadScheduler -> c
    java.util.concurrent.atomic.AtomicReference INSTANCE -> d
    rx.schedulers.Schedulers getInstance() -> d
    void <init>() -> <init>
    rx.Scheduler trampoline() -> a
    rx.Scheduler computation() -> b
    rx.Scheduler io() -> c
    void shutdownInstance() -> e
    void <clinit>() -> <clinit>
rx.subjects.BehaviorSubject -> b.h.a:
    rx.subjects.SubjectSubscriptionManager state -> c
    rx.internal.operators.NotificationLite nl -> d
    java.lang.Object[] EMPTY_ARRAY -> e
    rx.subjects.BehaviorSubject create() -> c
    void <init>(rx.Observable$OnSubscribe,rx.subjects.SubjectSubscriptionManager) -> <init>
    void onCompleted() -> onCompleted
    void onError(java.lang.Throwable) -> onError
    void onNext(java.lang.Object) -> onNext
    void <clinit>() -> <clinit>
rx.subjects.BehaviorSubject$1 -> b.h.b:
    rx.subjects.SubjectSubscriptionManager val$state -> a
    void <init>(rx.subjects.SubjectSubscriptionManager) -> <init>
    void call(java.lang.Object) -> call
rx.subjects.Subject -> b.h.c:
    void <init>(rx.Observable$OnSubscribe) -> <init>
rx.subjects.SubjectSubscriptionManager -> b.h.d:
    java.lang.Object latest -> a
    boolean active -> b
    rx.functions.Action1 onStart -> c
    rx.functions.Action1 onAdded -> d
    rx.functions.Action1 onTerminated -> e
    rx.internal.operators.NotificationLite nl -> f
    void <init>() -> <init>
    void remove(rx.subjects.SubjectSubscriptionManager$SubjectObserver) -> a
    rx.subjects.SubjectSubscriptionManager$SubjectObserver[] terminate(java.lang.Object) -> a
    void call(java.lang.Object) -> call
rx.subjects.SubjectSubscriptionManager$1 -> b.h.e:
    rx.subjects.SubjectSubscriptionManager$SubjectObserver val$bo -> a
    rx.subjects.SubjectSubscriptionManager this$0 -> b
    void <init>(rx.subjects.SubjectSubscriptionManager,rx.subjects.SubjectSubscriptionManager$SubjectObserver) -> <init>
    void call() -> call
rx.subjects.SubjectSubscriptionManager$State -> b.h.f:
    boolean terminated -> a
    rx.subjects.SubjectSubscriptionManager$SubjectObserver[] observers -> b
    rx.subjects.SubjectSubscriptionManager$SubjectObserver[] NO_OBSERVERS -> c
    rx.subjects.SubjectSubscriptionManager$State TERMINATED -> d
    rx.subjects.SubjectSubscriptionManager$State EMPTY -> e
    void <init>(boolean,rx.subjects.SubjectSubscriptionManager$SubjectObserver[]) -> <init>
    void <clinit>() -> <clinit>
rx.subjects.SubjectSubscriptionManager$SubjectObserver -> b.h.g:
    rx.Subscriber actual -> a
    boolean first -> b
    boolean emitting -> c
    java.util.List queue -> d
    boolean fastPath -> e
    void <init>(rx.Subscriber) -> <init>
    void onNext(java.lang.Object) -> onNext
    void onError(java.lang.Throwable) -> onError
    void onCompleted() -> onCompleted
    void emitNext$a2d69e2(java.lang.Object) -> a
    void accept$a2d69e2(java.lang.Object) -> b
rx.subscriptions.BooleanSubscription -> b.i.a:
    java.util.concurrent.atomic.AtomicReference actionRef -> a
    rx.functions.Action0 EMPTY_ACTION -> b
    void <init>() -> <init>
    void <init>(rx.functions.Action0) -> <init>
    rx.subscriptions.BooleanSubscription create() -> a
    rx.subscriptions.BooleanSubscription create(rx.functions.Action0) -> a
    boolean isUnsubscribed() -> isUnsubscribed
    void unsubscribe() -> unsubscribe
    void <clinit>() -> <clinit>
rx.subscriptions.BooleanSubscription$1 -> b.i.b:
    void <init>() -> <init>
    void call() -> call
rx.subscriptions.CompositeSubscription -> b.i.c:
    java.util.Set subscriptions -> a
    boolean unsubscribed -> b
    void <init>() -> <init>
    boolean isUnsubscribed() -> isUnsubscribed
    void add(rx.Subscription) -> a
    void remove(rx.Subscription) -> b
    void unsubscribe() -> unsubscribe
rx.subscriptions.SerialSubscription -> b.i.d:
    java.util.concurrent.atomic.AtomicReference state -> a
    void <init>() -> <init>
    boolean isUnsubscribed() -> isUnsubscribed
    void unsubscribe() -> unsubscribe
    void set(rx.Subscription) -> a
rx.subscriptions.SerialSubscription$State -> b.i.e:
    boolean isUnsubscribed -> a
    rx.Subscription subscription -> b
    void <init>(boolean,rx.Subscription) -> <init>
rx.subscriptions.Subscriptions -> b.i.f:
    rx.subscriptions.Subscriptions$Unsubscribed UNSUBSCRIBED -> a
    rx.Subscription empty() -> a
    rx.Subscription unsubscribed() -> b
    rx.Subscription create(rx.functions.Action0) -> a
    void <clinit>() -> <clinit>
rx.subscriptions.Subscriptions$Unsubscribed -> b.i.g:
    void <init>() -> <init>
    void unsubscribe() -> unsubscribe
    boolean isUnsubscribed() -> isUnsubscribed
